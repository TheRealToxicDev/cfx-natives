{
    "APP": {
        "0xE8E3FCF72EAC0EF8": {
            "name": "APP_CLOSE_BLOCK",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE8E3FCF72EAC0EF8",
            "ns": "APP",
            "jhash": "0xED97B202",
            "manualHash": true
        },
        "0x5FE1DF3342DB7DBA": {
            "name": "APP_CLEAR_BLOCK",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5FE1DF3342DB7DBA",
            "ns": "APP",
            "jhash": "0xDAB86A18",
            "manualHash": true
        },
        "0xE41C65E07A5F05FC": {
            "name": "APP_CLOSE_APP",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE41C65E07A5F05FC",
            "ns": "APP",
            "jhash": "0x03767C7A",
            "manualHash": true
        },
        "0x846AA8E7D55EE5B6": {
            "name": "APP_DATA_VALID",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x846AA8E7D55EE5B6",
            "ns": "APP",
            "annotations": { "cs_type": "int" },
            "jhash": "0x72BDE002",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC9853A2BE3DED1A6": {
            "name": "APP_GET_DELETED_FILE_STATUS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC9853A2BE3DED1A6",
            "ns": "APP",
            "jhash": "0x784D550B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44151AEA95C8A003": {
            "name": "APP_DELETE_APP_DATA",
            "params": [{ "name": "appName", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x44151AEA95C8A003",
            "ns": "APP",
            "jhash": "0x2A2FBD1C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1514FB24C02C2322": {
            "name": "APP_GET_FLOAT",
            "params": [{ "name": "property", "type": "char*" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x1514FB24C02C2322",
            "ns": "APP",
            "jhash": "0xD87F3A1C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD3A58A12C77D9D4B": {
            "name": "APP_GET_INT",
            "params": [
                {
                    "name": "property",
                    "type": "char*",
                    "annotations": { "cs_type": "ScrHandle" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xD3A58A12C77D9D4B",
            "ns": "APP",
            "annotations": { "cs_type": "void" },
            "jhash": "0x2942AAD2",
            "manualHash": true
        },
        "0x71EEE69745088DA0": {
            "name": "APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x71EEE69745088DA0",
            "ns": "APP",
            "jhash": "0xD368BA15",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x749B023950D2311C": {
            "name": "APP_GET_STRING",
            "params": [{ "name": "property", "type": "char*" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x749B023950D2311C",
            "ns": "APP",
            "jhash": "0x849CEB80",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA52279A7271517F": {
            "name": "APP_HAS_SYNCED_DATA",
            "params": [{ "name": "appName", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCA52279A7271517F",
            "ns": "APP",
            "jhash": "0x1DE2A63D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x95C5D356CDA6E85F": {
            "name": "APP_SAVE_DATA",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x95C5D356CDA6E85F",
            "ns": "APP",
            "jhash": "0x84A3918D",
            "manualHash": true
        },
        "0xCFD0406ADAF90D2B": {
            "name": "APP_SET_APP",
            "params": [{ "name": "appName", "type": "char*" }],
            "results": "void",
            "description": "```\nCalled in the gamescripts like:  \nAPP::APP_SET_APP(\"car\");  \nAPP::APP_SET_APP(\"dog\");  \n```",
            "examples": [],
            "hash": "0xCFD0406ADAF90D2B",
            "ns": "APP",
            "jhash": "0x8BAC4146",
            "manualHash": true
        },
        "0x25D7687C68E0DAA4": {
            "name": "APP_SET_FLOAT",
            "params": [
                { "name": "property", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x25D7687C68E0DAA4",
            "ns": "APP",
            "jhash": "0xF3076135",
            "manualHash": true
        },
        "0x262AB456A3D21F93": {
            "name": "APP_SET_BLOCK",
            "params": [{ "name": "blockName", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x262AB456A3D21F93",
            "ns": "APP",
            "jhash": "0xC2D54DD9",
            "manualHash": true
        },
        "0x607E8E3D3E4F9611": {
            "name": "APP_SET_INT",
            "params": [
                { "name": "property", "type": "char*" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x607E8E3D3E4F9611",
            "ns": "APP",
            "jhash": "0x1B509C32",
            "manualHash": true
        },
        "0x3FF2FCEC4B7721B4": {
            "name": "APP_SET_STRING",
            "params": [
                { "name": "property", "type": "char*" },
                { "name": "value", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3FF2FCEC4B7721B4",
            "ns": "APP",
            "jhash": "0x23DF19A8",
            "manualHash": true
        }
    },
    "BRAIN": {
        "0x14D8518E9760F08F": {
            "name": "DISABLE_SCRIPT_BRAIN_SET",
            "params": [{ "name": "brainSet", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x14D8518E9760F08F",
            "ns": "BRAIN",
            "jhash": "0xFBD13FAD",
            "manualHash": true
        },
        "0x4EE5367468A65CCC": {
            "name": "ADD_SCRIPT_TO_RANDOM_PED",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "model", "type": "Hash" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "```\nBRAIN::ADD_SCRIPT_TO_RANDOM_PED(\"pb_prostitute\", ${s_f_y_hooker_01}, 100, 0);\n- Nacorpio\n-----\nHardcoded to not work in Multiplayer.\n```",
            "examples": [],
            "hash": "0x4EE5367468A65CCC",
            "ns": "BRAIN",
            "jhash": "0xECC76C3D",
            "manualHash": true
        },
        "0x0B40ED49D7D6FF84": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0B40ED49D7D6FF84",
            "ns": "BRAIN",
            "jhash": "0x19B27825",
            "manualHash": true
        },
        "0xCCBA154209823057": {
            "name": "IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCCBA154209823057",
            "ns": "BRAIN",
            "jhash": "0xBA4CAA56",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC5042CC6F5E3D450": {
            "name": "IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE",
            "params": [],
            "results": "BOOL",
            "description": "```\nGets whether the world point the calling script is registered to is within desired range of the player.  \n```",
            "examples": [],
            "hash": "0xC5042CC6F5E3D450",
            "ns": "BRAIN",
            "jhash": "0x2CF305A0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x67AA4D73F0CFA86B": {
            "name": "ENABLE_SCRIPT_BRAIN_SET",
            "params": [{ "name": "brainSet", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x67AA4D73F0CFA86B",
            "ns": "BRAIN",
            "jhash": "0x2765919F",
            "manualHash": true
        },
        "0x6E91B04E08773030": {
            "params": [{ "name": "action", "type": "char*" }],
            "results": "void",
            "description": "```\nLooks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar  \nHere are possible values of argument -   \n\"ob_tv\"  \n\"launcher_Darts\"  \n```",
            "examples": [],
            "hash": "0x6E91B04E08773030",
            "ns": "BRAIN",
            "jhash": "0x29CE8BAA",
            "manualHash": true
        },
        "0x6D6840CEE8845831": {
            "params": [{ "name": "action", "type": "char*" }],
            "results": "void",
            "description": "```\nPossible values:  \nact_cinema  \nam_mp_carwash_launch  \nam_mp_carwash_control  \nam_mp_property_ext  \nchop  \nfairgroundHub  \nlauncher_BasejumpHeli  \nlauncher_BasejumpPack  \nlauncher_CarWash  \nlauncher_golf  \nlauncher_Hunting_Ambient  \nlauncher_MrsPhilips  \nlauncher_OffroadRacing  \nlauncher_pilotschool  \nlauncher_Racing  \nlauncher_rampage  \nlauncher_rampage  \nlauncher_range  \nlauncher_stunts  \nlauncher_stunts  \nlauncher_tennis  \nlauncher_Tonya  \nlauncher_Triathlon  \nlauncher_Yoga  \nob_mp_bed_low  \nob_mp_bed_med  \n```",
            "examples": [],
            "hash": "0x6D6840CEE8845831",
            "ns": "BRAIN",
            "jhash": "0x949FE53E",
            "manualHash": true
        },
        "0x0BE84C318BA6EC22": {
            "name": "REGISTER_OBJECT_SCRIPT_BRAIN",
            "params": [
                { "name": "scriptName", "type": "char*" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "p2", "type": "int" },
                { "name": "activationRange", "type": "float" },
                { "name": "p4", "type": "int" },
                { "name": "p5", "type": "int" }
            ],
            "results": "void",
            "description": "```\nRegisters a script for any object with a specific model hash.\nBRAIN::REGISTER_OBJECT_SCRIPT_BRAIN(\"ob_telescope\", ${prop_telescope_01}, 100, 4.0, -1, 9);\n```",
            "examples": [],
            "hash": "0x0BE84C318BA6EC22",
            "ns": "BRAIN",
            "jhash": "0xB6BCC608",
            "manualHash": true
        },
        "0x4D953DF78EBF8158": {
            "params": [],
            "results": "void",
            "description": "```\nSomething like flush_all_scripts   \nMost of time comes after NETWORK_END_TUTORIAL_SESSION() or before TERMINATE_THIS_THREAD()  \n```",
            "examples": [],
            "hash": "0x4D953DF78EBF8158",
            "ns": "BRAIN",
            "jhash": "0xF3A3AB08",
            "manualHash": true
        },
        "0x3CDC7136613284BD": {
            "name": "REGISTER_WORLD_POINT_SCRIPT_BRAIN",
            "params": [
                {
                    "name": "scriptName",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                { "name": "activationRange", "type": "float" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3CDC7136613284BD",
            "ns": "BRAIN",
            "jhash": "0x725D91F7",
            "manualHash": true
        }
    },
    "AUDIO": {
        "0x153973AB99FE8980": {
            "name": "ADD_ENTITY_TO_AUDIO_MIX_GROUP",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "groupName", "type": "char*" },
                { "name": "fadeIn", "type": "float" }
            ],
            "results": "void",
            "description": "```\nAll found occurrences in b678d:\npastebin.com/ceu67jz8\n```",
            "examples": [],
            "hash": "0x153973AB99FE8980",
            "ns": "AUDIO",
            "aliases": ["0x153973AB99FE8980", "_DYNAMIC_MIXER_RELATED_FN"],
            "jhash": "0x2BC93264",
            "manualHash": true
        },
        "0xD01005D2BA2EB778": {
            "name": "ACTIVATE_AUDIO_SLOWMO_MODE",
            "params": [
                {
                    "name": "mode",
                    "type": "char*",
                    "description": "A string indicating the audio slow motion mode to use, *see the table*."
                }
            ],
            "results": "void",
            "description": "Below is a list of modes and their respective hashes.\n\n| Mode (string)               | Hash               |\n|-----------------------------|--------------------|\n| SLOWMO_BIG_SCORE_JUMP       | 0x2B981B0C         |\n| JSH_EXIT_TUNNEL_SLOWMO      | 0x2562AA6          |\n| SLOW_MO_METH_HOUSE_RAYFIRE  | 0xDB9E1909         |\n| SLOWMO_FIB4\\_TRUCK_SMASH     | 0x9E144347         |\n| SLOWMO_PROLOGUE_VAULT       | 0xEA2E68E1         |\n| SLOWMO_T1\\_RAYFIRE_EXPLOSION | 0xD6D358F3         |\n| SLOWMO_T1\\_TRAILER_SMASH     | 0xBE607345         |\n| BARRY\\_01\\_SLOWMO             | 0xD59540D4         |\n| BARRY\\_02\\_SLOWMO             | 0x12F140B3         |\n| SLOWMO_EXTREME\\_04           | 0xF562EA50         |\n| NIGEL\\_02\\_SLOWMO_SETTING     | 0x384689B0         |",
            "examples": [],
            "hash": "0xD01005D2BA2EB778",
            "ns": "AUDIO",
            "aliases": ["0xD01005D2BA2EB778"],
            "jhash": "0x59A3A17D",
            "manualHash": true
        },
        "0xC5EF963405593646": {
            "name": "ADD_LINE_TO_CONVERSATION",
            "params": [
                { "name": "speakerConversationIndex", "type": "int" },
                { "name": "context", "type": "char*" },
                { "name": "subtitle", "type": "char*" },
                { "name": "listenerNumber", "type": "int" },
                { "name": "volumeType", "type": "int" },
                { "name": "isRandom", "type": "BOOL" },
                { "name": "interruptible", "type": "BOOL" },
                { "name": "ducksRadio", "type": "BOOL" },
                { "name": "ducksScore", "type": "BOOL" },
                {
                    "name": "audibility",
                    "type": "int",
                    "description": "See eAudibility"
                },
                { "name": "headset", "type": "BOOL" },
                { "name": "dontInterruptForSpecialAbility", "type": "BOOL" },
                { "name": "isPadSpeakerRoute", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```cpp\nenum eAudibility {\n\tAUD_AUDIBILITY_NORMAL = 0,\n\tAUD_AUDIBILITY_CLEAR = 1,\n\tAUD_AUDIBILITY_CRITICAL = 2,\n\tAUD_AUDIBILITY_LEAD_IN = 3\n}\n```",
            "examples": [],
            "hash": "0xC5EF963405593646",
            "ns": "AUDIO",
            "jhash": "0x96CD0513",
            "manualHash": true
        },
        "0x95D9F4BC443956E7": {
            "name": "ADD_PED_TO_CONVERSATION",
            "params": [
                { "name": "speakerConversationIndex", "type": "int" },
                { "name": "ped", "type": "Ped" },
                { "name": "voiceName", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x95D9F4BC443956E7",
            "ns": "AUDIO",
            "jhash": "0xF8D5EB86",
            "manualHash": true
        },
        "0x1B9025BDA76822B6": {
            "name": "BLIP_SIREN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "Plays a siren blip from the vehicle when you double press the horn key.\n\nThis only works on vehicles with sirens.",
            "examples": [],
            "hash": "0x1B9025BDA76822B6",
            "ns": "AUDIO",
            "jhash": "0xC0EB6924",
            "manualHash": true
        },
        "0x845FFC3A4FEEFA3E": {
            "name": "AUDIO_IS_SCRIPTED_MUSIC_PLAYING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x845FFC3A4FEEFA3E",
            "ns": "AUDIO",
            "aliases": ["0x3D120012440E6683"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x86E995D1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x032A116663A4D5AC": {
            "name": "CAN_VEHICLE_RECEIVE_CB_RADIO",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x032A116663A4D5AC",
            "ns": "AUDIO",
            "aliases": ["_IS_VEHICLE_RADIO_LOUD"],
            "jhash": "0xCBA99F4A",
            "manualHash": true,
            "resultsDescription": "Returns true if the vehicle can currently receive CB radio (ie. it has a capable radio and is in range of a transmitter)"
        },
        "0xF8AD2EED7C47E8FE": {
            "name": "BLOCK_ALL_SPEECH_FROM_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "shouldBlock", "type": "BOOL" },
                {
                    "name": "suppressOutgoingNetworkSpeech",
                    "type": "BOOL",
                    "description": "Defaults to `true`."
                }
            ],
            "results": "void",
            "description": "Blocks *all* speech playing on the given ped, including speech triggered by natives such as [PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE](#\\_0x3523634255FC3318)\n\nThe flag itself is not synced, it must be called on each machine that wishes to suppress the speech.\n\nThe `SuppressOutgoingNetworkSpeech` flag can be set to `false` if you want speech triggered locally through `PLAY_PED_AMBIENT_SPEECH_*` related native calls to still be audible on remote machines, even though it was blocked on the local one.",
            "examples": [],
            "hash": "0xF8AD2EED7C47E8FE",
            "ns": "AUDIO",
            "aliases": ["0xF8AD2EED7C47E8FE"],
            "manualHash": true
        },
        "0xF154B8D1775B2DEC": {
            "name": "BLOCK_DEATH_JINGLE",
            "params": [
                {
                    "name": "blocked",
                    "type": "BOOL",
                    "description": "Sets if the death jingle can play when a player dies or not"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF154B8D1775B2DEC",
            "ns": "AUDIO",
            "aliases": ["0xF154B8D1775B2DEC"],
            "jhash": "0xD2858D8A",
            "manualHash": true
        },
        "0xA8A7D434AFB4B97B": {
            "name": "BLOCK_SPEECH_CONTEXT_GROUP",
            "params": [
                {
                    "name": "groupName",
                    "type": "char*",
                    "description": "the name of the context group to be blocked"
                },
                {
                    "name": "contextBlockTarget",
                    "type": "int",
                    "description": "the group of peds that should be used (refer to eAudContextBlockTarget)"
                }
            ],
            "results": "void",
            "description": "```cpp\nenum eAudContextBlockTarget {\n\tAUD_CONTEXT_BLOCK_PLAYER = 0,\n\tAUD_CONTEXT_BLOCK_NPCS = 1,\n\tAUD_CONTEXT_BLOCK_BUDDYS = 2,\n\tAUD_CONTEXT_BLOCK_EVERYONE = 3,\n\n\tAUD_CONTEXT_BLOCK_TARGETS_TOTAL\n}\n```\n\nStop a certain group of peds from using a certain group of speech contexts.\n\nNote that the block will be automatically removed when the calling script finishes",
            "examples": [],
            "hash": "0xA8A7D434AFB4B97B",
            "ns": "AUDIO",
            "aliases": ["0xA8A7D434AFB4B97B"],
            "manualHash": true
        },
        "0xB4F90FAF7670B16F": {
            "name": "CANCEL_ALL_POLICE_REPORTS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB4F90FAF7670B16F",
            "ns": "AUDIO",
            "aliases": [
                "0xB4F90FAF7670B16F",
                "_DISABLE_POLICE_REPORTS",
                "_CANCEL_CURRENT_POLICE_REPORT"
            ],
            "manualHash": true
        },
        "0x5B17A90291133DA5": {
            "name": "CANCEL_MUSIC_EVENT",
            "params": [
                {
                    "name": "eventName",
                    "type": "char*",
                    "description": "the name of the event to cancel"
                }
            ],
            "results": "BOOL",
            "description": "```\nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P\n```",
            "examples": [],
            "hash": "0x5B17A90291133DA5",
            "ns": "AUDIO",
            "jhash": "0x89FF942D",
            "manualHash": true,
            "resultsDescription": "True of the event was cancelled, false otherwise."
        },
        "0x218DD44AAAC964FF": {
            "name": "CLEAR_AMBIENT_ZONE_STATE",
            "params": [
                {
                    "name": "zoneName",
                    "type": "char*",
                    "description": "the zone name to clear"
                },
                {
                    "name": "forceUpdate",
                    "type": "BOOL",
                    "description": "Whether ot not to force a zone to become disabled even if its currently active"
                }
            ],
            "results": "void",
            "description": "Resets the ambient zone enabled/disabled status to its value before it was modified by this script\n\nDefault behaviour is that any state change only gets applied once the player leaves the zone.",
            "examples": [],
            "hash": "0x218DD44AAAC964FF",
            "ns": "AUDIO",
            "jhash": "0xCDFF3C82",
            "manualHash": true
        },
        "0x120C48C614909FA4": {
            "name": "CLEAR_AMBIENT_ZONE_LIST_STATE",
            "params": [
                {
                    "name": "zoneListName",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" },
                    "description": "The zone name to clear"
                },
                {
                    "name": "forceUpdate",
                    "type": "BOOL",
                    "description": "Whether ot not to force a zone to become disabled even if its currently active"
                }
            ],
            "results": "void",
            "description": "Resets the list of ambients zones enabled/disabled status to its value before it was modified by this script.\n\nDefault behaviour is that any state change only gets applied once the player leaves the zone.",
            "examples": [],
            "hash": "0x120C48C614909FA4",
            "ns": "AUDIO",
            "jhash": "0x38B9B8D4",
            "manualHash": true
        },
        "0xB32209EFFDC04913": {
            "name": "CLEAR_ALL_BROKEN_GLASS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB32209EFFDC04913",
            "ns": "AUDIO",
            "jhash": "0xE6B033BF",
            "manualHash": true
        },
        "0xDDC635D5B3262C56": {
            "name": "DEACTIVATE_AUDIO_SLOWMO_MODE",
            "params": [
                {
                    "name": "mode",
                    "type": "char*",
                    "description": "name of the mode to deactivate"
                }
            ],
            "results": "void",
            "description": "Deactivates the named slowmo mode.",
            "examples": [],
            "hash": "0xDDC635D5B3262C56",
            "ns": "AUDIO",
            "aliases": ["0xDDC635D5B3262C56"],
            "jhash": "0x0E387BFE",
            "manualHash": true
        },
        "0x1654F24A88A8E3FE": {
            "name": "CLEAR_CUSTOM_RADIO_TRACK_LIST",
            "params": [{ "name": "radioStation", "type": "char*" }],
            "results": "void",
            "description": "Clears the previously queued custom track lost for the given radio station.",
            "examples": [],
            "hash": "0x1654F24A88A8E3FE",
            "ns": "AUDIO",
            "aliases": ["0x1654F24A88A8E3FE"],
            "jhash": "0x1D766976",
            "manualHash": true
        },
        "0xD2C91A0B572AAE56": {
            "name": "CREATE_NEW_SCRIPTED_CONVERSATION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2C91A0B572AAE56",
            "ns": "AUDIO",
            "jhash": "0xB2BC25F8",
            "manualHash": true
        },
        "0x109697E2FFBAC8A1": {
            "name": "DOES_PLAYER_VEH_HAVE_RADIO",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x109697E2FFBAC8A1",
            "ns": "AUDIO",
            "aliases": ["0x109697E2FFBAC8A1"],
            "jhash": "0x46B0C696",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA9A41C1E940FB0E8": {
            "name": "DISABLE_PED_PAIN_AUDIO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "shouldDisable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA9A41C1E940FB0E8",
            "ns": "AUDIO",
            "jhash": "0x3B8E2D5F",
            "manualHash": true
        },
        "0x49B99BF3FDA89A7A": {
            "name": "DOES_CONTEXT_EXIST_FOR_THIS_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "speechName", "type": "char*" },
                { "name": "allowBackupPVGs", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "Checks if the context exists for the ped, searching through the voices in its PedVoiceGroup.\n\nThe final argument can be set to true to allow searching in backup PVGs",
            "examples": [],
            "hash": "0x49B99BF3FDA89A7A",
            "ns": "AUDIO",
            "aliases": ["0x49B99BF3FDA89A7A", "_CAN_PED_SPEAK"],
            "jhash": "0x8BD5F11E",
            "manualHash": true,
            "resultsDescription": "True of the PedVoiceGroup exists, false otherwise."
        },
        "0x552369F549563AD5": {
            "name": "DISTANT_COP_CAR_SIRENS",
            "params": [
                {
                    "name": "shouldPlay",
                    "type": "BOOL",
                    "description": "True will play distand sounds, false will disable them."
                }
            ],
            "results": "void",
            "description": "Toggles fake distant siren sounds",
            "examples": [],
            "hash": "0x552369F549563AD5",
            "ns": "AUDIO",
            "aliases": ["0x552369F549563AD5", "_FORCE_AMBIENT_SIREN"],
            "jhash": "0x13EB5861",
            "manualHash": true
        },
        "0xC15907D667F7CFB2": {
            "name": "ENABLE_STALL_WARNING_SOUNDS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "enable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Enable or disable the plane stall warning sounds",
            "examples": [],
            "hash": "0xC15907D667F7CFB2",
            "ns": "AUDIO",
            "aliases": ["0xC15907D667F7CFB2"],
            "jhash": "0x563B635D",
            "manualHash": true
        },
        "0x2BE4BC731D039D5A": {
            "name": "ENABLE_VEHICLE_EXHAUST_POPS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Enables or disables exaust pops."
                }
            ],
            "results": "void",
            "description": "Sets whether the vehicle passed has exhaust pops.",
            "examples": [],
            "hash": "0x2BE4BC731D039D5A",
            "ns": "AUDIO",
            "aliases": ["0x2BE4BC731D039D5A"],
            "jhash": "0x2A60A90E",
            "manualHash": true
        },
        "0x4E0AF9114608257C": {
            "name": "_FORCE_RADIO_TRACK_LIST_POSITION",
            "params": [
                { "name": "radioStation", "type": "char*" },
                { "name": "trackListName", "type": "char*" },
                { "name": "milliseconds", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x4E0AF9114608257C",
            "ns": "AUDIO",
            "aliases": ["0x4E0AF9114608257C"],
            "manualHash": true
        },
        "0xB81CF134AEB56FFB": {
            "name": "ENABLE_STUNT_JUMP_AUDIO",
            "params": [],
            "results": "void",
            "description": "Enable the stunt jump audio detection code\n\nThis native is meant to be called per-frame for as long as detection is wanted.",
            "examples": [],
            "hash": "0xB81CF134AEB56FFB",
            "ns": "AUDIO",
            "aliases": ["0xB81CF134AEB56FFB"],
            "manualHash": true
        },
        "0x5E203DA2BA15D436": {
            "name": "_GET_AMBIENT_VOICE_NAME_HASH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x5E203DA2BA15D436",
            "ns": "AUDIO",
            "aliases": ["0x5E203DA2BA15D436"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x344F393B027E38C3": {
            "name": "FREEZE_RADIO_STATION",
            "params": [{ "name": "radioStation", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x344F393B027E38C3",
            "ns": "AUDIO",
            "jhash": "0x286BF543",
            "manualHash": true
        },
        "0x8D67489793FF428B": {
            "name": "FIND_RADIO_STATION_INDEX",
            "params": [{ "name": "stationNameHash", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x8D67489793FF428B",
            "ns": "AUDIO",
            "jhash": "0xECA1512F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x480357EE890C295A": {
            "name": "GET_CURRENT_SCRIPTED_CONVERSATION_LINE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x480357EE890C295A",
            "ns": "AUDIO",
            "jhash": "0x9620E41F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4F0C413926060B38": {
            "name": "_FORCE_VEHICLE_ENGINE_AUDIO",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "audioName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nThis native sets the audio of the specified vehicle to the audioName (p1).\nUse the audioNameHash found in vehicles.meta\nExample:\n_SET_VEHICLE_AUDIO(veh, \"ADDER\");\nThe selected vehicle will now have the audio of the Adder.\nFORCE_VEHICLE_???\n```",
            "examples": [],
            "hash": "0x4F0C413926060B38",
            "ns": "AUDIO",
            "aliases": ["0x4F0C413926060B38", "_SET_VEHICLE_AUDIO"],
            "jhash": "0x33B0B007",
            "manualHash": true
        },
        "0x34D66BC058019CE0": {
            "name": "_GET_CURRENT_RADIO_TRACK_NAME",
            "params": [{ "name": "radioStationName", "type": "char*" }],
            "results": "Hash",
            "description": "```\nReturn the hash of the radio stations current track.\n\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x34D66BC058019CE0",
            "ns": "AUDIO",
            "aliases": ["0x34D66BC058019CE0"],
            "manualHash": true
        },
        "0xD57AAAE0E2214D11": {
            "name": "FREEZE_MICROPHONE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD57AAAE0E2214D11",
            "ns": "AUDIO",
            "aliases": ["0xD57AAAE0E2214D11"],
            "jhash": "0x2B9D91E8",
            "manualHash": true
        },
        "0xE7A0D23DC414507B": {
            "name": "GET_MUSIC_PLAYTIME",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xE7A0D23DC414507B",
            "ns": "AUDIO",
            "jhash": "0xD633C809",
            "manualHash": true,
            "resultsDescription": "Returns the play time in milliseconds of the current score track."
        },
        "0x3E65CDE5215832C1": {
            "name": "_GET_CURRENT_RADIO_TRACK_PLAYBACK_TIME",
            "params": [{ "name": "radioStationName", "type": "char*" }],
            "results": "int",
            "description": "```\nReturn the playback time (in milliseconds) of the radio stations current track. \n\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x3E65CDE5215832C1",
            "ns": "AUDIO",
            "aliases": [
                "0x3E65CDE5215832C1",
                "_GET_CURRENT_RADIO_STATION_HASH"
            ],
            "manualHash": true
        },
        "0xE73364DB90778FFA": {
            "name": "GET_IS_PRELOADED_CONVERSATION_READY",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE73364DB90778FFA",
            "ns": "AUDIO",
            "aliases": ["0xE73364DB90778FFA"],
            "jhash": "0x336F3D35",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA571991A7FE6CCEB": {
            "name": "GET_PLAYER_RADIO_STATION_GENRE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA571991A7FE6CCEB",
            "ns": "AUDIO",
            "jhash": "0x872CF0EA",
            "manualHash": true,
            "resultsDescription": "Returns the genre of the players current radio station"
        },
        "0x2DE3F0A134FFBC0D": {
            "name": "GET_NETWORK_ID_FROM_SOUND_ID",
            "params": [{ "name": "soundId", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2DE3F0A134FFBC0D",
            "ns": "AUDIO",
            "jhash": "0x2576F610",
            "manualHash": true,
            "resultsDescription": "Returns the network id for the specific sound"
        },
        "0xC64A06D939F826F5": {
            "name": "GET_NEXT_AUDIBLE_BEAT",
            "params": [
                {
                    "name": "timeInSeconds",
                    "type": "float*",
                    "description": "time in seconds until the start of the next beat"
                },
                {
                    "name": "bpm",
                    "type": "float*",
                    "annotations": { "cs_type": "AnyPtr" },
                    "description": "current tempo in beats per minute,"
                },
                {
                    "name": "beatNum",
                    "type": "int*",
                    "description": "integer beat within the bar"
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC64A06D939F826F5",
            "ns": "AUDIO",
            "aliases": ["0xC64A06D939F826F5"],
            "manualHash": true,
            "resultsDescription": "Returns information on beat information for any audible music."
        },
        "0x50B196FC9ED6545B": {
            "name": "GET_AUDIBLE_MUSIC_TRACK_TEXT_ID",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x50B196FC9ED6545B",
            "ns": "AUDIO",
            "jhash": "0xA2B88CA7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A48AB4445D499BE": {
            "name": "GET_MUSIC_VOL_SLIDER",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x3A48AB4445D499BE",
            "ns": "AUDIO",
            "aliases": ["0x3A48AB4445D499BE"],
            "jhash": "0x93A44A1F",
            "manualHash": true,
            "resultsDescription": "Returns the current volume slider position from 0 to 10"
        },
        "0xF1620ECB50E01DE7": {
            "name": "GET_NUM_UNLOCKED_RADIO_STATIONS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF1620ECB50E01DE7",
            "ns": "AUDIO",
            "aliases": ["_MAX_RADIO_STATION_INDEX"],
            "jhash": "0xCC91FCF5",
            "manualHash": true,
            "resultsDescription": "Returns the number of radio stations currently unlocked in the game. This can change as a result of DLC and/or script calls."
        },
        "0xB28ECA15046CA8B9": {
            "name": "GET_RADIO_STATION_NAME",
            "params": [{ "name": "stationIndex", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xB28ECA15046CA8B9",
            "ns": "AUDIO",
            "jhash": "0x3DF493BC",
            "manualHash": true,
            "resultsDescription": "Returns the name of the radio station with the specified index. This serves as the text label."
        },
        "0x430386FE9BF80B45": {
            "name": "GET_SOUND_ID",
            "params": [],
            "results": "int",
            "description": "If a playback function has a soundId field but the sound doesn't need to be altered after triggering then pass a value of -1 for fire-and-forget playback, rather than getting a soundId.\n\nSoundId's can be reused, without needing to release them and grab a new one.\n\nIf a sound's finished playing, you can reuse its SoundId to kick off another one.\n\nIf the sound's not finished playing, it'll be stopped first (fading out or whatever is set up in RAVE by the sound designer), and the new one kicked off; usually it is safer to just get a new SoundId.\n\nSoundId's are not automatically cleaned up, you must use [RELEASE_SOUND_ID](#\\_0x353FC880830B88FA) after you've finished using them to allow the engine to recycle the sound id.",
            "examples": [],
            "hash": "0x430386FE9BF80B45",
            "ns": "AUDIO",
            "jhash": "0x6AE0AD56",
            "manualHash": true,
            "resultsDescription": "Returns a sound id which can be used to control the sound after its has started playing."
        },
        "0xE8AF77C4C06ADC93": {
            "name": "GET_PLAYER_RADIO_STATION_INDEX",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xE8AF77C4C06ADC93",
            "ns": "AUDIO",
            "jhash": "0x1C4946AC",
            "manualHash": true,
            "resultsDescription": "Returns the index of the current players radio station, or 255 if the radio is off"
        },
        "0xF6D733C32076AD03": {
            "name": "GET_PLAYER_RADIO_STATION_NAME",
            "params": [],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xF6D733C32076AD03",
            "ns": "AUDIO",
            "jhash": "0xD909C107",
            "manualHash": true,
            "resultsDescription": "Returns the name of the players radio station. This serves as the text label."
        },
        "0xACB5DCCA1EC76840": {
            "name": "GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xACB5DCCA1EC76840",
            "ns": "AUDIO",
            "aliases": ["0xACB5DCCA1EC76840", "_GET_VEHICLE_HORN_HASH"],
            "jhash": "0xFD4B5B3B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x75262FD12D0A1C84": {
            "name": "GET_SOUND_ID_FROM_NETWORK_ID",
            "params": [
                {
                    "name": "netId",
                    "type": "int",
                    "description": "Network ID of sound."
                }
            ],
            "results": "int",
            "description": "Counterpart: [`GET_NETWORK_ID_FROM_SOUND_ID`](#\\_0x2DE3F0A134FFBC0D).",
            "examples": [],
            "hash": "0x75262FD12D0A1C84",
            "ns": "AUDIO",
            "aliases": ["0x75262FD12D0A1C84"],
            "jhash": "0xD064D4DC",
            "manualHash": true,
            "resultsDescription": "Integer representing a sound id, -1 on failure."
        },
        "0x4E72BBDBCA58A3DB": {
            "name": "GET_STREAM_PLAY_TIME",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x4E72BBDBCA58A3DB",
            "ns": "AUDIO",
            "jhash": "0xB4F0AD56",
            "manualHash": true,
            "resultsDescription": "Returns the currently playing stream's play time"
        },
        "0x02165D55000219AC": {
            "name": "GET_VEHICLE_DEFAULT_HORN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "Hash",
            "description": "```\nReturns hash of default vehicle horn  \nHash is stored in audVehicleAudioEntity  \n```",
            "examples": [],
            "hash": "0x02165D55000219AC",
            "ns": "AUDIO",
            "jhash": "0xE84ABC19",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD53F3A29BCE2580E": {
            "name": "_GET_VEHICLE_DEFAULT_HORN_VARIATION",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0xD53F3A29BCE2580E",
            "ns": "AUDIO",
            "aliases": ["0xD53F3A29BCE2580E", "0x22FECB546C276A30"],
            "manualHash": true
        },
        "0x5B50ABB1FE3746F4": {
            "name": "_HAS_MULTIPLAYER_AUDIO_DATA_UNLOADED",
            "params": [],
            "results": "BOOL",
            "description": "```\nHAS_*\n```",
            "examples": [],
            "hash": "0x5B50ABB1FE3746F4",
            "ns": "AUDIO",
            "aliases": ["0x5B50ABB1FE3746F4"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFCBDCE714A7C88E5": {
            "name": "HAS_SOUND_FINISHED",
            "params": [{ "name": "soundId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFCBDCE714A7C88E5",
            "ns": "AUDIO",
            "jhash": "0xE85AEC2E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x544810ED9DB6BBE6": {
            "name": "_HAS_MULTIPLAYER_AUDIO_DATA_LOADED",
            "params": [],
            "results": "BOOL",
            "description": "```\nHAS_*\n```",
            "examples": [],
            "hash": "0x544810ED9DB6BBE6",
            "ns": "AUDIO",
            "aliases": ["0x544810ED9DB6BBE6"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A694D7A68F8DC38": {
            "name": "INTERRUPT_CONVERSATION_AND_PAUSE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nOne call found in the b617d scripts:\nAUDIO::_8A694D7A68F8DC38(NETWORK::NET_TO_PED(l_3989._f26F[0/*1*/]), \"CONV_INTERRUPT_QUIT_IT\", \"LESTER\");\n```",
            "examples": [],
            "hash": "0x8A694D7A68F8DC38",
            "ns": "AUDIO",
            "aliases": ["0x8A694D7A68F8DC38"],
            "jhash": "0xDD4A3F1F",
            "manualHash": true
        },
        "0xFB380A29641EC31A": {
            "name": "HINT_SCRIPT_AUDIO_BANK",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "int" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0xFB380A29641EC31A",
            "ns": "AUDIO",
            "jhash": "0x41FA0E51",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9072C8B49907BFAD": {
            "name": "IS_AMBIENT_SPEECH_PLAYING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9072C8B49907BFAD",
            "ns": "AUDIO",
            "jhash": "0x1972E8AA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x226435CB96CCFC8C": {
            "name": "IS_ALARM_PLAYING",
            "params": [{ "name": "alarmName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nExample:  \nbool playing = AUDIO::IS_ALARM_PLAYING(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\");  \n```",
            "examples": [],
            "hash": "0x226435CB96CCFC8C",
            "ns": "AUDIO",
            "jhash": "0x9D8E1D23",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8F8C0E370AE62F5C": {
            "name": "HINT_AMBIENT_AUDIO_BANK",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x8F8C0E370AE62F5C",
            "ns": "AUDIO",
            "jhash": "0xF1850DDC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA018A12E5C5C2FA6": {
            "name": "INTERRUPT_CONVERSATION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA018A12E5C5C2FA6",
            "ns": "AUDIO",
            "jhash": "0xF3A67AF3",
            "manualHash": true
        },
        "0x729072355FA39EC9": {
            "name": "IS_ANY_SPEECH_PLAYING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x729072355FA39EC9",
            "ns": "AUDIO",
            "jhash": "0x2B74A6D6",
            "manualHash": true,
            "resultsDescription": "Returns true if the specified ped is playing any speech"
        },
        "0xB65B60556E2A9225": {
            "name": "IS_AUDIO_SCENE_ACTIVE",
            "params": [
                {
                    "name": "scene",
                    "type": "char*",
                    "description": "the name of the scene"
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB65B60556E2A9225",
            "ns": "AUDIO",
            "jhash": "0xACBED05C",
            "manualHash": true,
            "resultsDescription": "Returns true if the script is already running the named scene, false otherwise"
        },
        "0x932C2D096A2C3FFF": {
            "name": "IS_AMBIENT_SPEECH_DISABLED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nCommon in the scripts:  \nAUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());  \n```",
            "examples": [],
            "hash": "0x932C2D096A2C3FFF",
            "ns": "AUDIO",
            "jhash": "0x109D1F89",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x01E2817A479A7F9B": {
            "name": "IS_AMBIENT_ZONE_ENABLED",
            "params": [{ "name": "ambientZone", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x01E2817A479A7F9B",
            "ns": "AUDIO",
            "jhash": "0xBFABD872",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6D28DC1671E334FD": {
            "name": "IS_GAME_IN_CONTROL_OF_MUSIC",
            "params": [],
            "results": "BOOL",
            "description": "```\nHardcoded to return 1  \n```",
            "examples": [],
            "hash": "0x6D28DC1671E334FD",
            "ns": "AUDIO",
            "jhash": "0x7643170D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC265DF9FB44A9FBD": {
            "name": "IS_ANIMAL_VOCALIZATION_PLAYING",
            "params": [{ "name": "pedHandle", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC265DF9FB44A9FBD",
            "ns": "AUDIO",
            "aliases": ["0xC265DF9FB44A9FBD"],
            "jhash": "0x0CBAF2EF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x19A30C23F5827F8A": {
            "name": "IS_MISSION_COMPLETE_PLAYING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x19A30C23F5827F8A",
            "ns": "AUDIO",
            "jhash": "0x939982A1",
            "manualHash": true,
            "resultsDescription": "Returns true if the mission complete audio is playing"
        },
        "0x9D6BFC12B05C6121": {
            "name": "IS_HORN_ACTIVE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9D6BFC12B05C6121",
            "ns": "AUDIO",
            "jhash": "0x20E2BDD0",
            "manualHash": true,
            "resultsDescription": "Returns true if the vehicle is currently playing a horn sound"
        },
        "0xC8B1B2425604CDD0": {
            "name": "IS_MOBILE_INTERFERENCE_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC8B1B2425604CDD0",
            "ns": "AUDIO",
            "aliases": ["0xC8B1B2425604CDD0"],
            "jhash": "0x16FB88B5",
            "manualHash": true,
            "resultsDescription": "Returns true of mobile phone interference is currently happening"
        },
        "0x6F259F82D873B8B8": {
            "name": "IS_MISSION_COMPLETE_READY_FOR_UI",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6F259F82D873B8B8",
            "ns": "AUDIO",
            "aliases": ["0x6F259F82D873B8B8"],
            "jhash": "0xCBE09AEC",
            "manualHash": true,
            "resultsDescription": "Returns true if the script should draw the mission complete UI to be in sync with audio."
        },
        "0x7497D2CE2C30D24C": {
            "name": "IS_MOBILE_PHONE_CALL_ONGOING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7497D2CE2C30D24C",
            "ns": "AUDIO",
            "jhash": "0x4ED1400A",
            "manualHash": true,
            "resultsDescription": "Returns true of a mobile phone call is currently happening."
        },
        "0x66E49BF55B4B1874": {
            "name": "IS_MISSION_NEWS_STORY_UNLOCKED",
            "params": [{ "name": "newsStory", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x66E49BF55B4B1874",
            "ns": "AUDIO",
            "aliases": ["GET_NUMBER_OF_PASSENGER_VOICE_VARIATIONS"],
            "annotations": { "cs_type": "int" },
            "jhash": "0x27305D37",
            "manualHash": true,
            "resultsDescription": "Returns true of the specific story is available to be played back"
        },
        "0xA097AB275061FB21": {
            "name": "IS_MUSIC_ONESHOT_PLAYING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA097AB275061FB21",
            "ns": "AUDIO",
            "aliases": ["0xA097AB275061FB21"],
            "jhash": "0x2705C4D5",
            "manualHash": true,
            "resultsDescription": "Returns true if a one shot is currently playing or prepared"
        },
        "0x1E8E5E20937E3137": {
            "name": "IS_PED_RINGTONE_PLAYING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1E8E5E20937E3137",
            "ns": "AUDIO",
            "jhash": "0xFE576EE4",
            "manualHash": true,
            "resultsDescription": "Returns true if the peds ringtone is currently playing"
        },
        "0x049E937F18F4020C": {
            "name": "IS_PED_IN_CURRENT_CONVERSATION",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x049E937F18F4020C",
            "ns": "AUDIO",
            "jhash": "0x7B2F0743",
            "manualHash": true,
            "resultsDescription": "Returns true if the ped is in the currently playing conversation"
        },
        "0xB35CE999E8EF317E": {
            "name": "IS_MOBILE_PHONE_RADIO_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB35CE999E8EF317E",
            "ns": "AUDIO",
            "jhash": "0x6E502A5B",
            "manualHash": true,
            "resultsDescription": "Returns true if the mobile phone radio is active"
        },
        "0x5F43D83FD6738741": {
            "name": "IS_PLAYER_VEH_RADIO_ENABLE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5F43D83FD6738741",
            "ns": "AUDIO",
            "aliases": [
                "0x5F43D83FD6738741",
                "_IS_PLAYER_VEHICLE_RADIO_ENABLED"
            ],
            "jhash": "0x2A3E5E8B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA151A7394A214E65": {
            "name": "IS_RADIO_RETUNING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA151A7394A214E65",
            "ns": "AUDIO",
            "jhash": "0xCF29097B",
            "manualHash": true,
            "resultsDescription": "Returns true if the radio is tuning to a station"
        },
        "0x0626A247D2405330": {
            "name": "IS_RADIO_FADED_OUT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0626A247D2405330",
            "ns": "AUDIO",
            "aliases": ["0x0626A247D2405330"],
            "jhash": "0x815CAE99",
            "manualHash": true,
            "resultsDescription": "Returns true if the radio is currently faded out"
        },
        "0x2B1784DB08AFEA79": {
            "name": "_IS_RADIO_STATION_VISIBLE",
            "params": [{ "name": "radioStation", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x2B1784DB08AFEA79",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0xD11FA52EB849D978": {
            "name": "IS_STREAM_PLAYING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD11FA52EB849D978",
            "ns": "AUDIO",
            "jhash": "0xF1F51A14",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCC9AA18DCC7084F4": {
            "name": "IS_SCRIPTED_SPEECH_PLAYING",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCC9AA18DCC7084F4",
            "ns": "AUDIO",
            "jhash": "0x2C653904",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x16754C556D2EDE3D": {
            "name": "IS_SCRIPTED_CONVERSATION_ONGOING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x16754C556D2EDE3D",
            "ns": "AUDIO",
            "jhash": "0xCB8FD96F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDF0D54BE7A776737": {
            "name": "IS_SCRIPTED_CONVERSATION_LOADED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDF0D54BE7A776737",
            "ns": "AUDIO",
            "jhash": "0xE1870EA9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x651D3228960D08AF": {
            "name": "_LINK_STATIC_EMITTER_TO_ENTITY",
            "params": [
                { "name": "emitterName", "type": "char*" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "void",
            "description": "```\nL* (LINK_*?)\n```",
            "examples": [],
            "hash": "0x651D3228960D08AF",
            "ns": "AUDIO",
            "aliases": ["0x651D3228960D08AF"],
            "manualHash": true
        },
        "0x5DB8010EE71FDEF2": {
            "name": "IS_VEHICLE_AUDIBLY_DAMAGED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5DB8010EE71FDEF2",
            "ns": "AUDIO",
            "aliases": ["0x5DB8010EE71FDEF2"],
            "jhash": "0x6E660D3F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1F1F957154EC51DF": {
            "name": "LOAD_STREAM",
            "params": [
                { "name": "streamName", "type": "char*" },
                { "name": "soundSet", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nExample:  \nAUDIO::LOAD_STREAM(\"CAR_STEAL_1_PASSBY\", \"CAR_STEAL_1_SOUNDSET\");  \nAll found occurrences in the b678d decompiled scripts: pastebin.com/3rma6w5w  \nStream names often ends with \"_MASTER\", \"_SMALL\" or \"_STREAM\". Also \"_IN\", \"_OUT\" and numbers.     \nsoundSet is often set to 0 in the scripts. These are common to end the soundSets: \"_SOUNDS\", \"_SOUNDSET\" and numbers.  \n```",
            "examples": [],
            "hash": "0x1F1F957154EC51DF",
            "ns": "AUDIO",
            "jhash": "0x0D89599D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0BE4BE946463F917": {
            "name": "_IS_VEHICLE_RADIO_ENABLED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check"
                }
            ],
            "results": "BOOL",
            "description": "```\nIS_VEHICLE_*\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local radioEnabled = IsVehicleRadioEnabled(GetVehiclePedIsIn(PlayerPedId(), false))\nprint(radioEnabled)"
                },
                {
                    "lang": "cs",
                    "code": "bool radioEnabled = API.IsVehicleRadioEnabled(API.GetVehiclePedIsIn(Game.PlayerPed.Handle, false));\nDebug.WriteLine(radioEnabled.ToString());"
                }
            ],
            "hash": "0x0BE4BE946463F917",
            "ns": "AUDIO",
            "aliases": ["0x0BE4BE946463F917"],
            "manualHash": true,
            "resultsDescription": "Is the given vehicle's radio enabled"
        },
        "0x59C16B79F53B3712": {
            "name": "LOAD_STREAM_WITH_START_OFFSET",
            "params": [
                { "name": "streamName", "type": "char*" },
                { "name": "startOffset", "type": "int" },
                { "name": "soundSet", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nExample:  \nAUDIO::LOAD_STREAM_WITH_START_OFFSET(\"STASH_TOXIN_STREAM\", 2400, \"FBI_05_SOUNDS\");  \nOnly called a few times in the scripts.  \n```",
            "examples": [],
            "hash": "0x59C16B79F53B3712",
            "ns": "AUDIO",
            "jhash": "0xE5B5745C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x477D9DB48F889591": {
            "name": "_LOCK_RADIO_STATION",
            "params": [
                { "name": "radioStationName", "type": "char*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nDisables the radio station (hides it from the radio wheel).\n\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x477D9DB48F889591",
            "ns": "AUDIO",
            "aliases": ["0x94f2e83ead7e6b82", "_SET_RADIO_STATION_DISABLED"],
            "manualHash": true
        },
        "0x02E93C796ABD3A97": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x02E93C796ABD3A97",
            "ns": "AUDIO",
            "jhash": "0x3C395AEE",
            "manualHash": true
        },
        "0x0150B6FF25A9E2E5": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0150B6FF25A9E2E5",
            "ns": "AUDIO",
            "jhash": "0x1134F68B",
            "manualHash": true
        },
        "0x062D5EAD4DA2FA6A": {
            "params": [],
            "results": "void",
            "description": "```\nFORCE_*\n```",
            "examples": [],
            "hash": "0x062D5EAD4DA2FA6A",
            "ns": "AUDIO",
            "jhash": "0xD87AF337",
            "manualHash": true
        },
        "0xFF5E5EA2DCEEACF3": {
            "name": "_LOCK_RADIO_STATION_TRACK_LIST",
            "params": [
                { "name": "radioStation", "type": "char*" },
                { "name": "trackListName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xFF5E5EA2DCEEACF3",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x159B7318403A1CD8": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x159B7318403A1CD8",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x11579D940949C49E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x11579D940949C49E",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x1C073274E065C6D2": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nENABLE_VEHICLE_*\n```",
            "examples": [],
            "hash": "0x1C073274E065C6D2",
            "ns": "AUDIO",
            "jhash": "0x9365E042",
            "manualHash": true
        },
        "0x19AF7ED9B9D23058": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x19AF7ED9B9D23058",
            "ns": "AUDIO",
            "jhash": "0xA58BBF4F",
            "manualHash": true
        },
        "0x2DD39BF3E2F9C47F": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v463\n```",
            "examples": [],
            "hash": "0x2DD39BF3E2F9C47F",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x30CA2EF91D15ADF8": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x30CA2EF91D15ADF8",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x40763EA7B9B783E7": {
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x40763EA7B9B783E7",
            "ns": "AUDIO",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2ACABED337622DF2": {
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x2ACABED337622DF2",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x55ECF4D13D9903B0": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x55ECF4D13D9903B0",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x7EC3C679D0E7E46B": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7EC3C679D0E7E46B",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x9AC92EED5E4793AB": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9AC92EED5E4793AB",
            "ns": "AUDIO",
            "jhash": "0xE67446E9",
            "manualHash": true
        },
        "0x70B8EC8FC108A634": {
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x70B8EC8FC108A634",
            "ns": "AUDIO",
            "jhash": "0x95050CAD",
            "manualHash": true
        },
        "0x43FA0DFC5DF87815": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x43FA0DFC5DF87815",
            "ns": "AUDIO",
            "jhash": "0x7BED1872",
            "manualHash": true
        },
        "0x58BB377BEC7CD5F4": {
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x58BB377BEC7CD5F4",
            "ns": "AUDIO",
            "jhash": "0x8CE63FA1",
            "manualHash": true
        },
        "0x9BD7BD55E4533183": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x9BD7BD55E4533183",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x9D3AF56E94C9AE98": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSET_H*\n```",
            "examples": [],
            "hash": "0x9D3AF56E94C9AE98",
            "ns": "AUDIO",
            "jhash": "0x2F0A16D1",
            "manualHash": true
        },
        "0x5B9853296731E88D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5B9853296731E88D",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x8BF907833BE275DE": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8BF907833BE275DE",
            "ns": "AUDIO",
            "jhash": "0x2CD26D69",
            "manualHash": true
        },
        "0xAA19F5572C38B564": {
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xAA19F5572C38B564",
            "ns": "AUDIO",
            "jhash": "0xB58B8FF3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x97FFB4ADEED08066": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x97FFB4ADEED08066",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0xBF4DC1784BE94DFA": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF4DC1784BE94DFA",
            "ns": "AUDIO",
            "jhash": "0xD99E275B",
            "manualHash": true
        },
        "0xC1805D05E6D4FE10": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nSET_VEH*\n```",
            "examples": [],
            "hash": "0xC1805D05E6D4FE10",
            "ns": "AUDIO",
            "jhash": "0x7ABB89D2",
            "manualHash": true
        },
        "0xBEF34B1D9624D5DD": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBEF34B1D9624D5DD",
            "ns": "AUDIO",
            "jhash": "0xE0047BFD",
            "manualHash": true
        },
        "0xB542DE8C3D1CB210": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB542DE8C3D1CB210",
            "ns": "AUDIO",
            "jhash": "0x789D8C6C",
            "manualHash": true
        },
        "0xD2DCCD8E16E20997": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2DCCD8E16E20997",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0xDD6BCF9E94425DF9": {
            "params": [],
            "results": "void",
            "description": "```\nTune Backwards... ?\nSET_RADIO_*\n```",
            "examples": [],
            "hash": "0xDD6BCF9E94425DF9",
            "ns": "AUDIO",
            "jhash": "0xD70ECC80",
            "manualHash": true
        },
        "0xF3365489E0DD50F9": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_VEHICLE_*\n```",
            "examples": [],
            "hash": "0xF3365489E0DD50F9",
            "ns": "AUDIO",
            "jhash": "0x8AFC488D",
            "manualHash": true
        },
        "0xC8EDE9BDBCCBA6D4": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC8EDE9BDBCCBA6D4",
            "ns": "AUDIO",
            "jhash": "0x55A21772",
            "manualHash": true
        },
        "0x75773E11BA459E90": {
            "name": "_OVERRIDE_MICROPHONE_SETTINGS",
            "params": [
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Sets audio flag \"OverrideMicrophoneSettings\"",
            "examples": [],
            "hash": "0x75773E11BA459E90",
            "ns": "AUDIO",
            "aliases": ["0x75773E11BA459E90"],
            "manualHash": true
        },
        "0xF2A9CDABCEA04BD6": {
            "name": "OVERRIDE_UNDERWATER_STREAM",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF2A9CDABCEA04BD6",
            "ns": "AUDIO",
            "jhash": "0x9A083B7E",
            "manualHash": true
        },
        "0xD2CC78CD3D0B50F9": {
            "name": "OVERRIDE_PLAYER_GROUND_MATERIAL",
            "params": [
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2CC78CD3D0B50F9",
            "ns": "AUDIO",
            "aliases": ["0xD2CC78CD3D0B50F9"],
            "jhash": "0xC307D531",
            "manualHash": true
        },
        "0xFF266D1D0EB1195D": {
            "params": [],
            "results": "void",
            "description": "```\nTune Forward... ?\nSET_RADIO_*\n```",
            "examples": [],
            "hash": "0xFF266D1D0EB1195D",
            "ns": "AUDIO",
            "jhash": "0x53DB6994",
            "manualHash": true
        },
        "0x13AD665062541A7E": {
            "name": "OVERRIDE_TREVOR_RAGE",
            "params": [{ "name": "voiceEffect", "type": "char*" }],
            "results": "void",
            "description": "This native enables the audio flag \"TrevorRageIsOverridden\" and sets the voice effect to `voiceEffect`",
            "examples": [],
            "hash": "0x13AD665062541A7E",
            "ns": "AUDIO",
            "jhash": "0x05B9B5CF",
            "manualHash": true
        },
        "0x8530AD776CD72B12": {
            "name": "PAUSE_SCRIPTED_CONVERSATION",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8530AD776CD72B12",
            "ns": "AUDIO",
            "jhash": "0xE2C9C6F8",
            "manualHash": true
        },
        "0x3CDC1E622CCE0356": {
            "name": "OVERRIDE_VEH_HORN",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle you want to change the horn on."
                },
                {
                    "name": "override",
                    "type": "BOOL",
                    "description": "Must be set to true. If set to false, the default horn hash will be restored."
                },
                {
                    "name": "hornHash",
                    "type": "int",
                    "description": "A horn hash."
                }
            ],
            "results": "void",
            "description": "Overrides the vehicle's horn hash.\n\nWhen changing this hash on a vehicle, [`_GET_VEHICLE_HORN_HASH`](#\\_0xACB5DCCA1EC76840) will **not** return the 'overwritten' hash. It will still always return the default horn hash (same as [`GET_VEHICLE_DEFAULT_HORN`](#\\_0x02165D55000219AC)).\n\nList of possible hashes (found in decompiled scripts):\n\n|        signed |     unsigned |      hex     |\n|--------------:|-------------:|:------------:|\n|  `1604822495` | `1604822495` | `0x5FA7A5DF` |\n| `-1262465009` | `3032502287` | `0xB4C0500F` |\n|  `-889553789` | `3405413507` | `0xCAFA7C83` |\n| `-1557943086` | `2737024210` | `0xA323ACD2` |\n| `-1318696617` | `2976270679` | `0xB1664957` |\n|    `-7740003` | `4287227293` | `0xFF89E59D` |\n| `-1815146967` | `2479820329` | `0x93CF0E29` |\n|  `-339919356` | `3955047940` | `0xEBBD3E04` |",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\n\n-- These are the most common horn hashes found in the decompiled scripts.\nlocal horns = {\n    1604822495,\n    3032502287,\n    3405413507,\n    2737024210,\n    2976270679,\n    4287227293,\n    2479820329,\n    3955047940\n}\n\nlocal randomHornHash = horns[math.random(1, #horns)]\n\nprint(randomHornHash)\n\nOverrideVehHorn(vehicle, true, randomHornHash)"
                }
            ],
            "hash": "0x3CDC1E622CCE0356",
            "ns": "AUDIO",
            "jhash": "0x2ACAB783",
            "manualHash": true
        },
        "0xED640017ED337E45": {
            "name": "PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE",
            "params": [
                { "name": "speechName", "type": "char*" },
                { "name": "voiceName", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "speechParam", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED640017ED337E45",
            "ns": "AUDIO",
            "aliases": ["0xED640017ED337E45", "_PLAY_AMBIENT_SPEECH_AT_COORDS"],
            "jhash": "0xA1A1402E",
            "manualHash": true
        },
        "0xCADA5A0D0702381E": {
            "name": "PLAY_DEFERRED_SOUND_FRONTEND",
            "params": [
                { "name": "soundName", "type": "char*" },
                { "name": "soundsetName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nOnly call found in the b617d scripts:\nAUDIO::PLAY_DEFERRED_SOUND_FRONTEND(\"BACK\", \"HUD_FREEMODE_SOUNDSET\");\n```",
            "examples": [],
            "hash": "0xCADA5A0D0702381E",
            "ns": "AUDIO",
            "aliases": ["0xCADA5A0D0702381E"],
            "jhash": "0xC70E6CFA",
            "manualHash": true
        },
        "0xEE066C7006C49C0A": {
            "name": "PLAY_ANIMAL_VOCALIZATION",
            "params": [
                { "name": "pedHandle", "type": "Ped" },
                { "name": "p1", "type": "int" },
                { "name": "speechName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nPlays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.\nThis native is works only when you call it on the ped with right model (ac_chop only ?)\nSpeech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ\n```",
            "examples": [],
            "hash": "0xEE066C7006C49C0A",
            "ns": "AUDIO",
            "aliases": ["0xEE066C7006C49C0A"],
            "jhash": "0x498849F3",
            "manualHash": true
        },
        "0xB138AAB8A70D3C69": {
            "name": "PLAY_MISSION_COMPLETE_AUDIO",
            "params": [{ "name": "audioName", "type": "char*" }],
            "results": "void",
            "description": "```\nCalled 38 times in the scripts. There are 5 different audioNames used.\n One unknown removed below.\nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"DEAD\");\nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"FRANKLIN_BIG_01\");\nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"GENERIC_FAILED\");\nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"TREVOR_SMALL_01\");\n```",
            "examples": [],
            "hash": "0xB138AAB8A70D3C69",
            "ns": "AUDIO",
            "jhash": "0x3033EA1D",
            "manualHash": true
        },
        "0xCD536C4D33DCC900": {
            "name": "PLAY_END_CREDITS_MUSIC",
            "params": [{ "name": "play", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD536C4D33DCC900",
            "ns": "AUDIO",
            "jhash": "0x8E88B3CC",
            "manualHash": true
        },
        "0xC6941B4A3A8FBBB9": {
            "name": "PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "speechName", "type": "char*" },
                { "name": "speechParam", "type": "char*" }
            ],
            "results": "void",
            "description": "See [`PLAY_PED_AMBIENT_SPEECH_NATIVE`](#\\_0x8E04FEDD28D42462) for parameter specifications.\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0xC6941B4A3A8FBBB9",
            "ns": "AUDIO",
            "aliases": ["_PLAY_AMBIENT_SPEECH2"],
            "jhash": "0x444180DB",
            "manualHash": true
        },
        "0xBC9AE166038A5CEC": {
            "name": "PLAY_PAIN",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity."
                },
                {
                    "name": "painID",
                    "type": "int",
                    "description": "The pain id, max allowed id is 33."
                },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "**Warning**:\n\nParameters are wrong after painID. To preserve C-Sharp backwards compatibility, we can't add or remove parameters.\n\nCorrect parameters should be:\\\n`PLAY_PAIN(Ped ped, int painID, float p3, bool createNetEvent)`\n\nCheck the *examples* section for the correct usage of this native.\n\n**Description:**\n\nPlays a pain sound. A maximum of 33 pain IDs are allowed.\\\n`createNetEvent` creates a `CPedPlayPainEvent` when set to true.\n\nBelow is a list of all the pain IDs (Asterisks indicate that sounds can play in a Low, Medium or High fashion), for example: `PAIN_LOW_GENERIC`. The corresponding pain strings belong to the game exe.\n\n**Pain IDs:**\n\n*   0: PAIN_\\*\\_GENERIC (Low, Medium, High)\n*   1: UNUSED\n*   2: UNUSED\n*   3: SCREAM_PANIC (Nothing can be heard)\n*   4: SCREAM_PANIC_SHORT\n*   5: SCREAM_SCARED\n*   6: SCREAM_SHOCKED\n*   7: SCREAM_TERROR\n*   8: ON_FIRE\n*   9: UNUSED\n*   10: UNUSED\n*   11: INHALE (Nothing can be heard)\n*   12: EXHALE (Nothing can be heard)\n*   13: DEATH_HIGH_SHORT\n*   14: UNUSED\n*   15: PAIN_HIGH_GENERIC\n*   16: PAIN_\\*\\_GENERIC (Low, Medium, High)\n*   17: PAIN_SHOVE\n*   18: PAIN_WHEEZE\n*   19: COUGH\n*   20: PAIN_TAZER\n*   21: UNUSED\n*   22: CLIMB_LARGE (Nothing can be heard)\n*   23: CLIMB_SMALL (Nothing can be heard)\n*   24: JUMP (Nothing can be heard)\n*   25: COWER\n*   26: WHIMPER\n*   27: DYING_MOAN\n*   28: EXHALE_CYCLING (Nothing can be heard)\n*   29: PAIN_RAPIDS (Nothing can be heard)\n*   30: SNEEZE\n*   31: MELEE_SMALL_GRUNT (Nothing can be heard)\n*   32: MELEE_LARGE_GRUNT (Nothing can be heard)\n*   33: PAIN_\\*\\_GENERIC (Low, Medium, High)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Play ON_FIRE (8) for all nearby peds, don't create an event (last parameter set to false)\nfor _, ped in ipairs(GetGamePool('CPed')) do\n    PlayPain(ped, 8, 0.0, false)\nend"
                }
            ],
            "hash": "0xBC9AE166038A5CEC",
            "ns": "AUDIO",
            "jhash": "0x874BD6CB",
            "manualHash": true
        },
        "0x3523634255FC3318": {
            "name": "PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "speechName", "type": "char*" },
                { "name": "voiceName", "type": "char*" },
                { "name": "speechParam", "type": "char*" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.\nEX (C#):\nGTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, \"GENERIC_INSULT_HIGH\", \"s_m_y_sheriff_01_white_full_01\", \"SPEECH_PARAMS_FORCE_SHOUTED\", 0);\nThe first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.\n```",
            "examples": [],
            "hash": "0x3523634255FC3318",
            "ns": "AUDIO",
            "aliases": ["_PLAY_AMBIENT_SPEECH_WITH_VOICE"],
            "jhash": "0x8386AE28",
            "manualHash": true
        },
        "0xF9E56683CA8E11A5": {
            "name": "PLAY_PED_RINGTONE",
            "params": [
                { "name": "ringtoneName", "type": "char*" },
                { "name": "ped", "type": "Ped" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny  \nAUDIO::PLAY_PED_RINGTONE(\"Remote_Ring\", PLAYER::PLAYER_PED_ID(), 1);  \nAUDIO::PLAY_PED_RINGTONE(\"Dial_and_Remote_Ring\", PLAYER::PLAYER_PED_ID(), 1);  \n```",
            "examples": [],
            "hash": "0xF9E56683CA8E11A5",
            "ns": "AUDIO",
            "jhash": "0x1D530E47",
            "manualHash": true
        },
        "0x8D8686B622B88120": {
            "name": "PLAY_SOUND_FROM_COORD",
            "params": [
                { "name": "soundId", "type": "int" },
                { "name": "audioName", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "audioRef", "type": "char*" },
                { "name": "isNetwork", "type": "BOOL" },
                { "name": "range", "type": "int" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW  \ngtaforums.com/topic/795622-audio-for-mods  \n```",
            "examples": [],
            "hash": "0x8D8686B622B88120",
            "ns": "AUDIO",
            "jhash": "0xCAD3E2D5",
            "manualHash": true
        },
        "0x7FF4944CC209192D": {
            "name": "PLAY_SOUND",
            "params": [
                { "name": "soundId", "type": "int" },
                { "name": "audioName", "type": "char*" },
                { "name": "audioRef", "type": "char*" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ  \n```",
            "examples": [],
            "hash": "0x7FF4944CC209192D",
            "ns": "AUDIO",
            "jhash": "0xB6E1917F",
            "manualHash": true
        },
        "0x8E04FEDD28D42462": {
            "name": "PLAY_PED_AMBIENT_SPEECH_NATIVE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to play the ambient speech."
                },
                {
                    "name": "speechName",
                    "type": "char*",
                    "description": "Name of the speech to play, eg. \"GENERIC_HI\"."
                },
                { "name": "speechParam", "type": "char*" }
            ],
            "results": "void",
            "description": "Plays ambient speech; see also [`PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE`](#\\_0xC6941B4A3A8FBBB9).\n\n```\nspeechParam: Can be one of the following:\nSPEECH_PARAMS_STANDARD\nSPEECH_PARAMS_ALLOW_REPEAT\nSPEECH_PARAMS_BEAT\nSPEECH_PARAMS_FORCE\nSPEECH_PARAMS_FORCE_FRONTEND\nSPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND\nSPEECH_PARAMS_FORCE_NORMAL\nSPEECH_PARAMS_FORCE_NORMAL_CLEAR\nSPEECH_PARAMS_FORCE_NORMAL_CRITICAL\nSPEECH_PARAMS_FORCE_SHOUTED\nSPEECH_PARAMS_FORCE_SHOUTED_CLEAR\nSPEECH_PARAMS_FORCE_SHOUTED_CRITICAL\nSPEECH_PARAMS_FORCE_PRELOAD_ONLY\nSPEECH_PARAMS_MEGAPHONE\nSPEECH_PARAMS_HELI\nSPEECH_PARAMS_FORCE_MEGAPHONE\nSPEECH_PARAMS_FORCE_HELI\nSPEECH_PARAMS_INTERRUPT\nSPEECH_PARAMS_INTERRUPT_SHOUTED\nSPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR\nSPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL\nSPEECH_PARAMS_INTERRUPT_NO_FORCE\nSPEECH_PARAMS_INTERRUPT_FRONTEND\nSPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND\nSPEECH_PARAMS_ADD_BLIP\nSPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT\nSPEECH_PARAMS_ADD_BLIP_FORCE\nSPEECH_PARAMS_ADD_BLIP_SHOUTED\nSPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE\nSPEECH_PARAMS_ADD_BLIP_INTERRUPT\nSPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE\nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED\nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR\nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL\nSPEECH_PARAMS_SHOUTED\nSPEECH_PARAMS_SHOUTED_CLEAR\nSPEECH_PARAMS_SHOUTED_CRITICAL\nNote: A list of Name and Parameters can be found here pastebin.com/1GZS5dCL\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0x8E04FEDD28D42462",
            "ns": "AUDIO",
            "aliases": ["_PLAY_AMBIENT_SPEECH1"],
            "jhash": "0x5C57B85D",
            "manualHash": true
        },
        "0xE65F427EB70AB1ED": {
            "name": "PLAY_SOUND_FROM_ENTITY",
            "params": [
                { "name": "soundId", "type": "int" },
                { "name": "audioName", "type": "char*" },
                { "name": "entity", "type": "Entity" },
                { "name": "audioRef", "type": "char*" },
                { "name": "isNetwork", "type": "BOOL" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0   \nNo changes made in b678d.  \ngtaforums.com/topic/795622-audio-for-mods  \n```",
            "examples": [],
            "hash": "0xE65F427EB70AB1ED",
            "ns": "AUDIO",
            "jhash": "0x95AE00F8",
            "manualHash": true
        },
        "0x21442F412E8DE56B": {
            "name": "PLAY_STREAM_FROM_POSITION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x21442F412E8DE56B",
            "ns": "AUDIO",
            "aliases": ["SPECIAL_FRONTEND_EQUAL"],
            "jhash": "0x6FE5D865",
            "manualHash": true
        },
        "0x89049DD63C08B5D1": {
            "name": "PLAY_STREAM_FROM_PED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x89049DD63C08B5D1",
            "ns": "AUDIO",
            "aliases": ["0x89049DD63C08B5D1"],
            "jhash": "0xA1D7FABE",
            "manualHash": true
        },
        "0xDFEBD56D9BD1EB16": {
            "name": "PLAY_POLICE_REPORT",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "p1", "type": "float" }
            ],
            "results": "int",
            "description": "```\nPlays the given police radio message.\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr\n```",
            "examples": [],
            "hash": "0xDFEBD56D9BD1EB16",
            "ns": "AUDIO",
            "jhash": "0x3F277B62",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB70374A758007DFA": {
            "name": "PLAY_STREAM_FROM_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB70374A758007DFA",
            "ns": "AUDIO",
            "jhash": "0xF8E4BDA2",
            "manualHash": true
        },
        "0x62A456AA4769EF34": {
            "name": "PLAY_VEHICLE_DOOR_CLOSE_SOUND",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x62A456AA4769EF34",
            "ns": "AUDIO",
            "jhash": "0xBA2CF407",
            "manualHash": true
        },
        "0x67C540AA08E4A6F5": {
            "name": "PLAY_SOUND_FRONTEND",
            "params": [
                { "name": "soundId", "type": "int" },
                { "name": "audioName", "type": "char*" },
                { "name": "audioRef", "type": "char*" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nList: https://pastebin.com/DCeRiaLJ\nAll occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM\n```",
            "examples": [],
            "hash": "0x67C540AA08E4A6F5",
            "ns": "AUDIO",
            "jhash": "0x2E458F74",
            "manualHash": true
        },
        "0x58FCE43488F9F5F4": {
            "name": "PLAY_STREAM_FRONTEND",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x58FCE43488F9F5F4",
            "ns": "AUDIO",
            "jhash": "0x2C2A16BC",
            "manualHash": true
        },
        "0x6004BCB0E226AAEA": {
            "name": "PRELOAD_SCRIPT_PHONE_CONVERSATION",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6004BCB0E226AAEA",
            "ns": "AUDIO",
            "jhash": "0x9ACB213A",
            "manualHash": true
        },
        "0x3B3CAD6166916D87": {
            "name": "PRELOAD_SCRIPT_CONVERSATION",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3B3CAD6166916D87",
            "ns": "AUDIO",
            "jhash": "0xDDF5C579",
            "manualHash": true
        },
        "0x3A539D52857EA82D": {
            "name": "PLAY_VEHICLE_DOOR_OPEN_SOUND",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3A539D52857EA82D",
            "ns": "AUDIO",
            "jhash": "0x84930330",
            "manualHash": true
        },
        "0xEBAA9B64D76356FD": {
            "name": "PLAY_STREAM_FROM_OBJECT",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "void",
            "description": "```\nUsed with AUDIO::LOAD_STREAM\nExample from finale_heist2b.c4:\nTASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2/*14*/], l_4C8[2/*14*/]._f7, l_30A, \"push_out_vault_l\", 4.0, -1.5, 5, 713, 4.0, 0);\n                    PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2/*14*/]._f7, 0.0);\n                    PED::_2208438012482A1A(l_4C8[2/*14*/], 0, 0);\n                    PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2/*14*/], 38, 1);\n                    PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2/*14*/], 1);\n                    if (AUDIO::LOAD_STREAM(\"Gold_Cart_Push_Anim_01\", \"BIG_SCORE_3B_SOUNDS\")) {\n                        AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0/*1*/]);\n                    }\n```",
            "examples": [],
            "hash": "0xEBAA9B64D76356FD",
            "ns": "AUDIO",
            "jhash": "0xC5266BF7",
            "manualHash": true
        },
        "0x1E5185B72EF5158A": {
            "name": "PREPARE_MUSIC_EVENT",
            "params": [{ "name": "eventName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P  \n```",
            "examples": [],
            "hash": "0x1E5185B72EF5158A",
            "ns": "AUDIO",
            "jhash": "0x534A5C1C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7ABCACA4985A766": {
            "name": "PREPARE_SYNCHRONIZED_AUDIO_EVENT",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC7ABCACA4985A766",
            "ns": "AUDIO",
            "jhash": "0xE1D91FD0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D74AE343DB65533": {
            "name": "PREPARE_ALARM",
            "params": [{ "name": "alarmName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nExample:  \nbool prepareAlarm = AUDIO::PREPARE_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\");  \n```",
            "examples": [],
            "hash": "0x9D74AE343DB65533",
            "ns": "AUDIO",
            "jhash": "0x084932E8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8B2FD4560E55DD2D": {
            "name": "PLAY_SYNCHRONIZED_AUDIO_EVENT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8B2FD4560E55DD2D",
            "ns": "AUDIO",
            "jhash": "0x507F3241",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA4CEA6AE0000A7E": {
            "name": "_PRELOAD_VEHICLE_AUDIO",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xCA4CEA6AE0000A7E",
            "ns": "AUDIO",
            "aliases": ["0xCA4CEA6AE0000A7E"],
            "manualHash": true
        },
        "0xC6ED9D5092438D91": {
            "name": "REGISTER_SCRIPT_WITH_AUDIO",
            "params": [
                {
                    "name": "inChargeOfAudio",
                    "type": "BOOL",
                    "annotations": { "cs_type": "int" }
                }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xC6ED9D5092438D91",
            "ns": "AUDIO",
            "jhash": "0xA6203643",
            "manualHash": true
        },
        "0x5D2BFAAB8D956E0E": {
            "name": "REFRESH_CLOSEST_OCEAN_SHORELINE",
            "params": [],
            "results": "void",
            "description": "Refreshes the closest shoreline using the nearest road position.",
            "examples": [],
            "hash": "0x5D2BFAAB8D956E0E",
            "ns": "AUDIO",
            "aliases": ["0x5D2BFAAB8D956E0E"],
            "manualHash": true
        },
        "0x029FE7CD1B7E2E75": {
            "name": "PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE",
            "params": [
                { "name": "sceneId", "type": "int" },
                {
                    "name": "audioEvent",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x029FE7CD1B7E2E75",
            "ns": "AUDIO",
            "jhash": "0x7652DD49",
            "manualHash": true,
            "resultsDescription": "Returns true if prepared, false otherwise"
        },
        "0x0EC92A1BF0857187": {
            "name": "RELEASE_MISSION_AUDIO_BANK",
            "params": [],
            "results": "void",
            "description": "This native has been marked as deprecated internally, please use [RELEASE_SCRIPT_AUDIO_BANK](#\\_0x7A2D8AD0A9EB9C3F) instead.",
            "examples": [],
            "hash": "0x0EC92A1BF0857187",
            "ns": "AUDIO",
            "jhash": "0x8E8824C7",
            "manualHash": true
        },
        "0x65475A218FFAA93D": {
            "name": "RELEASE_AMBIENT_AUDIO_BANK",
            "params": [],
            "results": "void",
            "description": "This native has been marked as deprecated internally, please use [RELEASE_SCRIPT_AUDIO_BANK](#\\_0x7A2D8AD0A9EB9C3F) instead.",
            "examples": [],
            "hash": "0x65475A218FFAA93D",
            "ns": "AUDIO",
            "jhash": "0x8C938784",
            "manualHash": true
        },
        "0xFBE20329593DEC9D": {
            "name": "RECORD_BROKEN_GLASS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "Creates a broken glass area",
            "examples": [],
            "hash": "0xFBE20329593DEC9D",
            "ns": "AUDIO",
            "aliases": ["0xFBE20329593DEC9D"],
            "jhash": "0x53FC3FEC",
            "manualHash": true
        },
        "0x7A2D8AD0A9EB9C3F": {
            "name": "RELEASE_SCRIPT_AUDIO_BANK",
            "params": [],
            "results": "void",
            "description": "Unloads all audio banks requested by this script.",
            "examples": [],
            "hash": "0x7A2D8AD0A9EB9C3F",
            "ns": "AUDIO",
            "jhash": "0x22F865E5",
            "manualHash": true
        },
        "0x77ED170667F50170": {
            "name": "RELEASE_NAMED_SCRIPT_AUDIO_BANK",
            "params": [{ "name": "audioBank", "type": "char*" }],
            "results": "void",
            "description": "Unloads the specified audioBank",
            "examples": [],
            "hash": "0x77ED170667F50170",
            "ns": "AUDIO",
            "jhash": "0x16707ABC",
            "manualHash": true
        },
        "0x353FC880830B88FA": {
            "name": "RELEASE_SOUND_ID",
            "params": [{ "name": "soundId", "type": "int" }],
            "results": "void",
            "description": "This should be called once a sound has finished being manipulated by the script so that its SoundId can be released and re-used.",
            "examples": [],
            "hash": "0x353FC880830B88FA",
            "ns": "AUDIO",
            "jhash": "0x9C080899",
            "manualHash": true
        },
        "0x18EB48CFC41F2EA0": {
            "name": "REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x18EB48CFC41F2EA0",
            "ns": "AUDIO",
            "aliases": ["0x18EB48CFC41F2EA0"],
            "jhash": "0x308ED0EC",
            "manualHash": true
        },
        "0xCE4AC0439F607045": {
            "name": "RELEASE_WEAPON_AUDIO",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xCE4AC0439F607045",
            "ns": "AUDIO",
            "jhash": "0x6096504C",
            "manualHash": true
        },
        "0xFE02FFBED8CA9D99": {
            "name": "REQUEST_AMBIENT_AUDIO_BANK",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nAll occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/XZ1tmGEz\n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0xFE02FFBED8CA9D99",
            "ns": "AUDIO",
            "jhash": "0x23C88BC7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB4BBFD9CD8B3922B": {
            "name": "REMOVE_PORTAL_SETTINGS_OVERRIDE",
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "```\n Found in the b617d scripts, duplicates removed:\n AUDIO::_B4BBFD9CD8B3922B(\"V_CARSHOWROOM_PS_WINDOW_UNBROKEN\");\n AUDIO::_B4BBFD9CD8B3922B(\"V_CIA_PS_WINDOW_UNBROKEN\");\n AUDIO::_B4BBFD9CD8B3922B(\"V_DLC_HEIST_APARTMENT_DOOR_CLOSED\");\n AUDIO::_B4BBFD9CD8B3922B(\"V_FINALEBANK_PS_VAULT_INTACT\");\n AUDIO::_B4BBFD9CD8B3922B(\"V_MICHAEL_PS_BATHROOM_WITH_WINDOW\");\n```",
            "examples": [],
            "hash": "0xB4BBFD9CD8B3922B",
            "ns": "AUDIO",
            "aliases": ["0xB4BBFD9CD8B3922B"],
            "jhash": "0xD24B4D0C",
            "manualHash": true
        },
        "0xF54BB7B61036F335": {
            "name": "RESET_PED_AUDIO_FLAGS",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF54BB7B61036F335",
            "ns": "AUDIO",
            "jhash": "0xDF720C86",
            "manualHash": true
        },
        "0x2F844A8B08D76685": {
            "name": "REQUEST_SCRIPT_AUDIO_BANK",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nAll occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/AkmDAVn6  \n```\n\n```\nNativeDB Added Parameter 3: int p2\n```",
            "examples": [],
            "hash": "0x2F844A8B08D76685",
            "ns": "AUDIO",
            "jhash": "0x21322887",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE78503B10C4314E0": {
            "name": "RESET_TREVOR_RAGE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE78503B10C4314E0",
            "ns": "AUDIO",
            "jhash": "0xE80CF0D4",
            "manualHash": true
        },
        "0x7345BDD95E62E0F2": {
            "name": "REQUEST_MISSION_AUDIO_BANK",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nAll occurrences and usages found in b617d: pastebin.com/NzZZ2Tmm  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x7345BDD95E62E0F2",
            "ns": "AUDIO",
            "jhash": "0x916E37CA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9AEB285D1818C9AC": {
            "name": "RESTART_SCRIPTED_CONVERSATION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9AEB285D1818C9AC",
            "ns": "AUDIO",
            "jhash": "0x6CB24B56",
            "manualHash": true
        },
        "0x395BF71085D1B1D9": {
            "name": "SET_AGGRESSIVE_HORNS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nMakes pedestrians sound their horn longer, faster and more agressive when they use their horn.  \n```",
            "examples": [],
            "hash": "0x395BF71085D1B1D9",
            "ns": "AUDIO",
            "jhash": "0x01D6EABE",
            "manualHash": true
        },
        "0xF3638DAE8C4045E1": {
            "name": "SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT",
            "params": [
                { "name": "ambientZone", "type": "char*" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF3638DAE8C4045E1",
            "ns": "AUDIO",
            "jhash": "0x5F5A2605",
            "manualHash": true
        },
        "0x6C8065A3B780185B": {
            "name": "SET_AMBIENT_VOICE_NAME",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nAudio List  \ngtaforums.com/topic/795622-audio-for-mods/  \nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/FTeAj4yZ  \nYes  \n```",
            "examples": [],
            "hash": "0x6C8065A3B780185B",
            "ns": "AUDIO",
            "jhash": "0xBD2EA1A1",
            "manualHash": true
        },
        "0x9A53DED9921DE990": {
            "name": "_SET_AMBIENT_VOICE_NAME_HASH",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9A53DED9921DE990",
            "ns": "AUDIO",
            "aliases": ["0x9A53DED9921DE990"],
            "manualHash": true
        },
        "0x9748FA4DE50CCE3E": {
            "name": "SET_AMBIENT_ZONE_LIST_STATE",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9748FA4DE50CCE3E",
            "ns": "AUDIO",
            "jhash": "0xBF80B412",
            "manualHash": true
        },
        "0xBDA07E5950085E46": {
            "name": "SET_AMBIENT_ZONE_STATE",
            "params": [
                {
                    "name": "zoneName",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBDA07E5950085E46",
            "ns": "AUDIO",
            "jhash": "0x2849CAC9",
            "manualHash": true
        },
        "0xCC97B29285B1DC3B": {
            "name": "SET_ANIMAL_MOOD",
            "params": [
                { "name": "animal", "type": "Ped" },
                { "name": "mood", "type": "int" }
            ],
            "results": "void",
            "description": "```\nmood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.  \n```",
            "examples": [],
            "hash": "0xCC97B29285B1DC3B",
            "ns": "AUDIO",
            "jhash": "0x3EA7C6CB",
            "manualHash": true
        },
        "0x1D6650420CEC9D3B": {
            "name": "SET_AMBIENT_ZONE_STATE_PERSISTENT",
            "params": [
                { "name": "ambientZone", "type": "char*" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1D6650420CEC9D3B",
            "ns": "AUDIO",
            "jhash": "0xC1FFB672",
            "manualHash": true
        },
        "0xEF21A9EF089A2668": {
            "name": "SET_AUDIO_SCENE_VARIABLE",
            "params": [
                { "name": "scene", "type": "char*" },
                { "name": "variable", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEF21A9EF089A2668",
            "ns": "AUDIO",
            "jhash": "0x19BB3CE8",
            "manualHash": true
        },
        "0xB9EFD5C25018725A": {
            "name": "SET_AUDIO_FLAG",
            "params": [
                { "name": "flagName", "type": "char*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nPossible flag names:  \n\"ActivateSwitchWheelAudio\"  \n\"AllowAmbientSpeechInSlowMo\"  \n\"AllowCutsceneOverScreenFade\"  \n\"AllowForceRadioAfterRetune\"  \n\"AllowPainAndAmbientSpeechToPlayDuringCutscene\"  \n\"AllowPlayerAIOnMission\"  \n\"AllowPoliceScannerWhenPlayerHasNoControl\"  \n\"AllowRadioDuringSwitch\"  \n\"AllowRadioOverScreenFade\"  \n\"AllowScoreAndRadio\"  \n\"AllowScriptedSpeechInSlowMo\"  \n\"AvoidMissionCompleteDelay\"  \n\"DisableAbortConversationForDeathAndInjury\"  \n\"DisableAbortConversationForRagdoll\"  \n\"DisableBarks\"  \n\"DisableFlightMusic\"  \n\"DisableReplayScriptStreamRecording\"  \n\"EnableHeadsetBeep\"  \n\"ForceConversationInterrupt\"  \n\"ForceSeamlessRadioSwitch\"  \n\"ForceSniperAudio\"  \n\"FrontendRadioDisabled\"  \n\"HoldMissionCompleteWhenPrepared\"  \n\"IsDirectorModeActive\"  \n\"IsPlayerOnMissionForSpeech\"  \n\"ListenerReverbDisabled\"  \n\"LoadMPData\"  \n\"MobileRadioInGame\"  \n\"OnlyAllowScriptTriggerPoliceScanner\"  \n\"PlayMenuMusic\"  \n\"PoliceScannerDisabled\"  \n\"ScriptedConvListenerMaySpeak\"  \n\"SpeechDucksScore\"  \n\"SuppressPlayerScubaBreathing\"  \n\"WantedMusicDisabled\"  \n\"WantedMusicOnMission\"  \n-------------------------------  \nNo added flag names between b393d and b573d, including b573d.  \n#######################################################################  \n\"IsDirectorModeActive\" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.  \n-----------------------------------------------------------------------  \nAll flag IDs and hashes:  \nID: 01 | Hash: 0x20A7858F  \nID: 02 | Hash: 0xA11C2259  \nID: 03 | Hash: 0x08DE4700  \nID: 04 | Hash: 0x989F652F  \nID: 05 | Hash: 0x3C9E76BA  \nID: 06 | Hash: 0xA805FEB0  \nID: 07 | Hash: 0x4B94EA26  \nID: 08 | Hash: 0x803ACD34  \nID: 09 | Hash: 0x7C741226  \nID: 10 | Hash: 0x31DB9EBD  \nID: 11 | Hash: 0xDF386F18  \nID: 12 | Hash: 0x669CED42  \nID: 13 | Hash: 0x51F22743  \nID: 14 | Hash: 0x2052B35C  \nID: 15 | Hash: 0x071472DC  \nID: 16 | Hash: 0xF9928BCC  \nID: 17 | Hash: 0x7ADBDD48  \nID: 18 | Hash: 0xA959BA1A  \nID: 19 | Hash: 0xBBE89B60  \nID: 20 | Hash: 0x87A08871  \nID: 21 | Hash: 0xED1057CE  \nID: 22 | Hash: 0x1584AD7A  \nID: 23 | Hash: 0x8582CFCB  \nID: 24 | Hash: 0x7E5E2FB0  \nID: 25 | Hash: 0xAE4F72DB  \nID: 26 | Hash: 0x5D16D1FA  \nID: 27 | Hash: 0x06B2F4B8  \nID: 28 | Hash: 0x5D4CDC96  \nID: 29 | Hash: 0x8B5A48BA  \nID: 30 | Hash: 0x98FBD539  \nID: 31 | Hash: 0xD8CB0473  \nID: 32 | Hash: 0x5CBB4874  \nID: 33 | Hash: 0x2E9F93A9  \nID: 34 | Hash: 0xD93BEA86  \nID: 35 | Hash: 0x92109B7D  \nID: 36 | Hash: 0xB7EC9E4D  \nID: 37 | Hash: 0xCABDBB1D  \nID: 38 | Hash: 0xB3FD4A52  \nID: 39 | Hash: 0x370D94E5  \nID: 40 | Hash: 0xA0F7938F  \nID: 41 | Hash: 0xCBE1CE81  \nID: 42 | Hash: 0xC27F1271  \nID: 43 | Hash: 0x9E3258EB  \nID: 44 | Hash: 0x551CDA5B  \nID: 45 | Hash: 0xCB6D663C  \nID: 46 | Hash: 0x7DACE87F  \nID: 47 | Hash: 0xF9DE416F  \nID: 48 | Hash: 0x882E6E9E  \nID: 49 | Hash: 0x16B447E7  \nID: 50 | Hash: 0xBD867739  \nID: 51 | Hash: 0xA3A58604  \nID: 52 | Hash: 0x7E046BBC  \nID: 53 | Hash: 0xD95FDB98  \nID: 54 | Hash: 0x5842C0ED  \nID: 55 | Hash: 0x285FECC6  \nID: 56 | Hash: 0x9351AC43  \nID: 57 | Hash: 0x50032E75  \nID: 58 | Hash: 0xAE6D0D59  \nID: 59 | Hash: 0xD6351785  \nID: 60 | Hash: 0xD25D71BC  \nID: 61 | Hash: 0x1F7F6423  \nID: 62 | Hash: 0xE24C3AA6  \nID: 63 | Hash: 0xBFFDD2B7  \n```",
            "examples": [],
            "hash": "0xB9EFD5C25018725A",
            "ns": "AUDIO",
            "jhash": "0x1C09C9E0",
            "manualHash": true
        },
        "0xE5564483E407F914": {
            "name": "SET_AUDIO_VEHICLE_PRIORITY",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "priority", "type": "int" }
            ],
            "results": "void",
            "description": "Sets the priority for the given vehicle. This is a hint for the audio system as to what LOD the\nvehicle should use.\n\n'High' priority will bump up the activation range significantly and prevent it\nfrom dropping when the vehicle is not within the view frustrum.\n\n'Max' will attempt to keep the vehicle at maximum LOD regardless of how far it is from the listener or what it is currently doing. Be careful with this!\n\nThere is a hard limit of 5 simulataneous granular cars (including the player) so we are quite limited on the number\nwe can play at once, so setting vehicles to max priority will reduce the number of engines availble for regular NPC vehicles\n\n```cpp\nenum eAudVehiclePriority {\n\tAUDIO_VEHICLE_PRIORITY_NORMAL = 0,\n\tAUDIO_VEHICLE_PRIORITY_MEDIUM = 1,\n\tAUDIO_VEHICLE_PRIORITY_MAX = 2,\n\tAUDIO_VEHICLE_PRIORITY_HIGH = 3,\n}\n```",
            "examples": [],
            "hash": "0xE5564483E407F914",
            "ns": "AUDIO",
            "jhash": "0x271A9766",
            "manualHash": true
        },
        "0xA5F377B175A699C5": {
            "name": "SET_AUDIO_SCRIPT_CLEANUP_TIME",
            "params": [{ "name": "timeMs", "type": "int" }],
            "results": "void",
            "description": "Set a delay in milliseconds for the audio to be cleaned up when the script finishes.",
            "examples": [],
            "hash": "0xA5F377B175A699C5",
            "ns": "AUDIO",
            "aliases": ["0xA5F377B175A699C5"],
            "jhash": "0xE812925D",
            "manualHash": true
        },
        "0x4E404A9361F75BB2": {
            "name": "SET_CUSTOM_RADIO_TRACK_LIST",
            "params": [
                { "name": "radioStation", "type": "char*" },
                { "name": "trackListName", "type": "char*" },
                {
                    "name": "forceNow",
                    "type": "BOOL",
                    "description": "wheter or not to interrupt the current track on the tracklist"
                }
            ],
            "results": "void",
            "description": "Queues up a custom track list on the specified radio station. The content in the track list will be played as soon as possible.\nThe station does not have to be frozen.",
            "examples": [],
            "hash": "0x4E404A9361F75BB2",
            "ns": "AUDIO",
            "aliases": ["0x4E404A9361F75BB2"],
            "jhash": "0x128C3873",
            "manualHash": true
        },
        "0x12561FCBB62D5B9C": {
            "name": "SET_AUDIO_SPECIAL_EFFECT_MODE",
            "params": [
                {
                    "name": "mode",
                    "type": "int",
                    "description": "Audio mode to apply this frame"
                }
            ],
            "results": "void",
            "description": "Needs to be called every frame.\n\n```cpp\nenum audSpecialEffectMode\n{\n\tkSpecialEffectModeNormal = 0,\n\tkSpecialEffectModeUnderwater = 1,\n\tkSpecialEffectModeStoned = 2,\n\tkSpecialEffectModePauseMenu = 3,\n\tkSpecialEffectModeSlowMotion = 4,\n\tkSpecialEffectModeDrunkStage01 = 5,\n\tkSpecialEffectModeDrunkStage02 = 6,\n\tkSpecialEffectModeDrunkStage03 = 7,\n\tNUM_AUDSPECIALEFFECTMODE\n};\n```",
            "examples": [],
            "hash": "0x12561FCBB62D5B9C",
            "ns": "AUDIO",
            "aliases": ["0x12561FCBB62D5B9C"],
            "jhash": "0x62B43677",
            "manualHash": true
        },
        "0x0B568201DD99F0EB": {
            "name": "SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM",
            "params": [
                {
                    "name": "enable",
                    "type": "BOOL",
                    "description": "Pass in true to set conversation flow to be controlled by animation triggers."
                }
            ],
            "results": "void",
            "description": "Sets whether or not scripted conversation flow should be controlled by anim triggers",
            "examples": [],
            "hash": "0x0B568201DD99F0EB",
            "ns": "AUDIO",
            "aliases": ["0x0B568201DD99F0EB"],
            "jhash": "0x1193ED6E",
            "manualHash": true
        },
        "0x61631F5DF50D1C34": {
            "name": "SET_CONVERSATION_AUDIO_PLACEHOLDER",
            "params": [
                {
                    "name": "isPlaceHolder",
                    "type": "BOOL",
                    "description": "Whether or not the conversation should use robot speech or not"
                }
            ],
            "results": "void",
            "description": "Used to determine whether conversation should use robot speech or not",
            "examples": [],
            "hash": "0x61631F5DF50D1C34",
            "ns": "AUDIO",
            "aliases": ["0x61631F5DF50D1C34"],
            "manualHash": true
        },
        "0x892B6AB8F33606F5": {
            "name": "SET_ENTITY_FOR_NULL_CONV_PED",
            "params": [
                { "name": "speakerConversationIndex", "type": "int" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x892B6AB8F33606F5",
            "ns": "AUDIO",
            "aliases": ["0x892B6AB8F33606F5"],
            "jhash": "0x88203DDA",
            "manualHash": true
        },
        "0x3B4BF5F0859204D9": {
            "name": "SET_CUTSCENE_AUDIO_OVERRIDE",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "```\nAll occurrences found in b617d, sorted alphabetically and identical lines removed:\nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_AK\");\nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_CUSTOM\");\nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_TOOTHLESS\");\n```\n\nAdd a suffix to the cutscene audio name. Call before loading the cutscene.",
            "examples": [],
            "hash": "0x3B4BF5F0859204D9",
            "ns": "AUDIO",
            "jhash": "0xCE1332B7",
            "manualHash": true
        },
        "0x88795F13FACDA88D": {
            "name": "SET_INITIAL_PLAYER_STATION",
            "params": [{ "name": "radioStation", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x88795F13FACDA88D",
            "ns": "AUDIO",
            "jhash": "0x9B069233",
            "manualHash": true
        },
        "0xF7F26C6E9CC9EBB8": {
            "name": "SET_FRONTEND_RADIO_ACTIVE",
            "params": [{ "name": "active", "type": "BOOL" }],
            "results": "void",
            "description": "Allows the radio to be played in the frontend.",
            "examples": [],
            "hash": "0xF7F26C6E9CC9EBB8",
            "ns": "AUDIO",
            "jhash": "0xB1172075",
            "manualHash": true
        },
        "0x3BD3F52BA9B1E4E8": {
            "name": "SET_GPS_ACTIVE",
            "params": [{ "name": "active", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3BD3F52BA9B1E4E8",
            "ns": "AUDIO",
            "jhash": "0x0FC3379A",
            "manualHash": true
        },
        "0xACF57305B12AF907": {
            "name": "SET_EMITTER_RADIO_STATION",
            "params": [
                { "name": "emitterName", "type": "char*" },
                { "name": "radioStation", "type": "char*" }
            ],
            "results": "void",
            "description": "Retunes a named static emitter to the specified station",
            "examples": [],
            "hash": "0xACF57305B12AF907",
            "ns": "AUDIO",
            "jhash": "0x87431585",
            "manualHash": true
        },
        "0xB6AE90EDDE95C762": {
            "name": "SET_MICROPHONE_POSITION",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "x3", "type": "float" },
                { "name": "y3", "type": "float" },
                { "name": "z3", "type": "float" }
            ],
            "results": "void",
            "description": "```\nIf this is the correct name, what microphone? I know your TV isn't going to reach out and adjust your headset so..  \n```",
            "examples": [],
            "hash": "0xB6AE90EDDE95C762",
            "ns": "AUDIO",
            "jhash": "0xAD7BB191",
            "manualHash": true
        },
        "0xBF286C554784F3DF": {
            "name": "SET_MOBILE_PHONE_RADIO_STATE",
            "params": [{ "name": "state", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF286C554784F3DF",
            "ns": "AUDIO",
            "jhash": "0xE1E0ED34",
            "manualHash": true
        },
        "0x76D683C108594D0E": {
            "name": "SET_HORN_ENABLED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x76D683C108594D0E",
            "ns": "AUDIO",
            "jhash": "0x6EB92D05",
            "manualHash": true
        },
        "0xA5342D390CDA41D6": {
            "name": "_SET_PED_AUDIO_GENDER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA5342D390CDA41D6",
            "ns": "AUDIO",
            "aliases": ["0xA5342D390CDA41D6"],
            "manualHash": true
        },
        "0x1098355A16064BB3": {
            "name": "SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1098355A16064BB3",
            "ns": "AUDIO",
            "jhash": "0x990085F0",
            "manualHash": true
        },
        "0x4ADA3F19BE4A6047": {
            "name": "_SET_PED_TALK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nSpeech related.  \n```",
            "examples": [],
            "hash": "0x4ADA3F19BE4A6047",
            "ns": "AUDIO",
            "aliases": ["0x4ADA3F19BE4A6047"],
            "jhash": "0x13777A0B",
            "manualHash": true
        },
        "0x0653B735BFBDFE87": {
            "name": "_SET_PED_AUDIO_FOOTSTEP_LOUD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nEnables/disables ped's \"loud\" footstep sound.\n```\n\n```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x0653B735BFBDFE87",
            "ns": "AUDIO",
            "aliases": ["0x0653B735BFBDFE87"],
            "manualHash": true
        },
        "0x0BABC1345ABBFB16": {
            "name": "_SET_PED_VOICE_GROUP_RACE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "voiceGroupHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nDat151RelType == 29\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x0BABC1345ABBFB16",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0x29DA3CA8D8B2692D": {
            "name": "_SET_PED_AUDIO_FOOTSTEP_QUIET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nEnables/disables ped's \"quiet\" footstep sound.\n```\n\n```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x29DA3CA8D8B2692D",
            "ns": "AUDIO",
            "aliases": ["0x29DA3CA8D8B2692D"],
            "manualHash": true
        },
        "0x1B7ABE26CBCBF8C7": {
            "name": "SET_PED_RACE_AND_VOICE_GROUP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "pedRace", "type": "int" },
                {
                    "name": "pvgHash",
                    "type": "int",
                    "description": "PedVoiceGroup hash, defaults to 0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1B7ABE26CBCBF8C7",
            "ns": "AUDIO",
            "aliases": ["0x1B7ABE26CBCBF8C7"],
            "manualHash": true
        },
        "0x95D2D383D5396B8A": {
            "name": "SET_PED_IS_DRUNK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Sets the ped so they sound drunk",
            "examples": [],
            "hash": "0x95D2D383D5396B8A",
            "ns": "AUDIO",
            "jhash": "0xD2EA77A3",
            "manualHash": true
        },
        "0x40CF0D12D142A9E8": {
            "name": "SET_PED_VOICE_FULL",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "Calls the same internal function [`_SET_PED_VOICE_GROUP`](#\\_0x7CDC8C3B89F661B3) calls, but passes `voiceGroupHash` (defined as a parameter in the referenced native) as `0`.",
            "examples": [],
            "hash": "0x40CF0D12D142A9E8",
            "ns": "AUDIO",
            "aliases": ["0x40CF0D12D142A9E8", "_SET_PED_SCREAM"],
            "manualHash": true
        },
        "0x149AEE66F0CB3A99": {
            "name": "SET_PED_WALLA_DENSITY",
            "params": [
                {
                    "name": "density",
                    "type": "float",
                    "description": "desired walla density"
                },
                {
                    "name": "applyValue",
                    "type": "float",
                    "description": "how much the desired density affects the actual one"
                }
            ],
            "results": "void",
            "description": "Overrides the calculated ped density that is used to modulate the ambient ped walla sounds (in exteriors only)\n\nIf you want to use this for interiors, use [SET_PED_INTERIOR_WALLA_DENSITY](#\\_0x8BF907833BE275DE)",
            "examples": [],
            "hash": "0x149AEE66F0CB3A99",
            "ns": "AUDIO",
            "aliases": ["0x149AEE66F0CB3A99"],
            "jhash": "0xE64F97A0",
            "manualHash": true
        },
        "0x7CDC8C3B89F661B3": {
            "name": "_SET_PED_VOICE_GROUP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "voiceGroupHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nFrom the scripts:\nAUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"PAIGE_PVG\"));\nAUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"TALINA_PVG\"));\nAUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"FEMALE_LOST_BLACK_PVG\"));\nAUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"FEMALE_LOST_WHITE_PVG\"));\n```",
            "examples": [],
            "hash": "0x7CDC8C3B89F661B3",
            "ns": "AUDIO",
            "aliases": ["0x7CDC8C3B89F661B3"],
            "manualHash": true
        },
        "0xEA241BB04110F091": {
            "name": "SET_PLAYER_ANGRY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "isAngry", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Sets a player ped to use his ANGRY speech contexts",
            "examples": [],
            "hash": "0xEA241BB04110F091",
            "ns": "AUDIO",
            "jhash": "0x782CA58D",
            "manualHash": true
        },
        "0x6FDDAD856E36988A": {
            "name": "SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "active", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Enable player vehicle specific alarm disarm/arm sound triggering",
            "examples": [],
            "hash": "0x6FDDAD856E36988A",
            "ns": "AUDIO",
            "aliases": ["0x6FDDAD856E36988A"],
            "jhash": "0x934BE749",
            "manualHash": true
        },
        "0xDA07819E452FFE8F": {
            "name": "SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED",
            "params": [
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Any" },
                    "description": "enables/disables a positioned emitter for the player vehicle radio"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDA07819E452FFE8F",
            "ns": "AUDIO",
            "aliases": ["0xDA07819E452FFE8F"],
            "manualHash": true
        },
        "0x044DBAD7A7FA2BE5": {
            "name": "SET_PORTAL_SETTINGS_OVERRIDE",
            "params": [
                { "name": "oldPortalSettingsName", "type": "char*" },
                { "name": "newPortalSettingsName", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x044DBAD7A7FA2BE5",
            "ns": "AUDIO",
            "aliases": ["0x044DBAD7A7FA2BE5"],
            "jhash": "0x8AD670EC",
            "manualHash": true
        },
        "0x33E3C6C6F2F0B506": {
            "name": "SET_POSITION_FOR_NULL_CONV_PED",
            "params": [
                { "name": "speakerConversationIndex", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x33E3C6C6F2F0B506",
            "ns": "AUDIO",
            "aliases": ["0x33E3C6C6F2F0B506"],
            "jhash": "0x73C6F979",
            "manualHash": true
        },
        "0x4CAFEBFA21EC188D": {
            "name": "_SET_RADIO_STATION_IS_VISIBLE",
            "params": [
                { "name": "radioStation", "type": "char*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Doesn't have an effect in Story Mode.\n\n```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x4CAFEBFA21EC188D",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0xA619B168B8A8570F": {
            "name": "SET_RADIO_TO_STATION_INDEX",
            "params": [{ "name": "radioStation", "type": "int" }],
            "results": "void",
            "description": "```\nSets radio station by index.  \n```",
            "examples": [],
            "hash": "0xA619B168B8A8570F",
            "ns": "AUDIO",
            "jhash": "0x1D82766D",
            "manualHash": true
        },
        "0xC1AA9F53CE982990": {
            "name": "SET_RADIO_AUTO_UNFREEZE",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "if true the radio will automatically unfreeze as soon as the player gets in a vehicle"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC1AA9F53CE982990",
            "ns": "AUDIO",
            "jhash": "0xA40196BF",
            "manualHash": true
        },
        "0x774BD811F656A122": {
            "name": "SET_RADIO_STATION_MUSIC_ONLY",
            "params": [
                { "name": "radioStation", "type": "char*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\n6 calls in the b617d scripts, removed identical lines:\nAUDIO::SET_RADIO_STATION_MUSIC_ONLY(\"RADIO_01_CLASS_ROCK\", 1);\nAUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);\nAUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);\n```",
            "examples": [],
            "hash": "0x774BD811F656A122",
            "ns": "AUDIO",
            "aliases": ["0x774BD811F656A122"],
            "jhash": "0xB1FF7137",
            "manualHash": true
        },
        "0x2C96CDB04FCA358E": {
            "name": "SET_RADIO_FRONTEND_FADE_TIME",
            "params": [{ "name": "fadeTime", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2C96CDB04FCA358E",
            "ns": "AUDIO",
            "aliases": ["0x2C96CDB04FCA358E"],
            "jhash": "0xC8B514E2",
            "manualHash": true
        },
        "0x2CB0075110BE1E56": {
            "name": "_SET_RADIO_TRACK_MIX",
            "params": [
                { "name": "radioStationName", "type": "char*" },
                { "name": "mixName", "type": "char*" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x2CB0075110BE1E56",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0xB39786F201FEE30B": {
            "name": "SET_RADIO_TRACK",
            "params": [
                { "name": "radioStation", "type": "char*" },
                { "name": "radioTrack", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nOnly found this one in the decompiled scripts:  \nAUDIO::SET_RADIO_TRACK(\"RADIO_03_HIPHOP_NEW\", \"ARM1_RADIO_STARTS\");  \n```",
            "examples": [],
            "hash": "0xB39786F201FEE30B",
            "ns": "AUDIO",
            "jhash": "0x76E96212",
            "manualHash": true
        },
        "0xC69EDA28699D5107": {
            "name": "SET_RADIO_TO_STATION_NAME",
            "params": [{ "name": "stationName", "type": "char*" }],
            "results": "void",
            "description": "Find the radio station list [here](https://gist.github.com/4mmonium/b47d6512a2d992cbf4eea15d9038b581)",
            "examples": [],
            "hash": "0xC69EDA28699D5107",
            "ns": "AUDIO",
            "jhash": "0x7B36E35E",
            "manualHash": true
        },
        "0xF584CF8529B51434": {
            "name": "_SET_SIREN_KEEP_ON",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xF584CF8529B51434",
            "ns": "AUDIO",
            "aliases": ["0xF584CF8529B51434"],
            "manualHash": true
        },
        "0x1FEF0683B96EBCF2": {
            "name": "SET_SIREN_WITH_NO_DRIVER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "annotations": { "cs_type": "ScrHandlePtr" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1FEF0683B96EBCF2",
            "ns": "AUDIO",
            "jhash": "0x77182D58",
            "manualHash": true
        },
        "0x950A154B8DAB6185": {
            "name": "_SET_SYNCHRONIZED_AUDIO_EVENT_POSITION_THIS_FRAME",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "Entity" }
            ],
            "results": "void",
            "description": "```\nSets the position of the audio event to the entity's position for one frame(?)\nif (l_8C3 == 0) {\n    sub_27fd1(0, -1, 1);\n    if (PED::IS_SYNCHRONIZED_SCENE_RUNNING(l_87D)) {\n        AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(l_87D);\n    }\n    if (sub_7dd(l_A00)) {\n        AUDIO::_950A154B8DAB6185(\"PAP2_IG1_POPPYSEX\", l_A00);\n    }\n    sub_91c(\"TK************ SETTING SYNCH SCENE AUDIO POSITION THIS FRAME ************TK\");\n    l_8C3 = 1;\n}\n--\nFound in the b617d scripts, duplicates removed:\nAUDIO::_950A154B8DAB6185(\"CAR_5_IG_6\", l_7FE[1/*1*/]);\nAUDIO::_950A154B8DAB6185(\"EX03_TRAIN_BIKE_LAND\",   PLAYER::PLAYER_PED_ID());\nAUDIO::_950A154B8DAB6185(\"FBI_2_MCS_1_LeadIn\", l_40[2/*1*/]);\nAUDIO::_950A154B8DAB6185(\"FIN_C2_MCS_1\", l_24C[0/*1*/]);\nAUDIO::_950A154B8DAB6185(\"MNT_DNC\", l_5F);\nAUDIO::_950A154B8DAB6185(\"PAP2_IG1_POPPYSEX\", l_A00);\n```",
            "examples": [],
            "hash": "0x950A154B8DAB6185",
            "ns": "AUDIO",
            "aliases": ["0x950A154B8DAB6185"],
            "jhash": "0xA17F9AB0",
            "manualHash": true
        },
        "0x06C0023BED16DD6B": {
            "name": "SET_SCRIPT_UPDATE_DOOR_AUDIO",
            "params": [
                {
                    "name": "doorHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x06C0023BED16DD6B",
            "ns": "AUDIO",
            "aliases": ["0x06C0023BED16DD6B"],
            "jhash": "0xE61110A2",
            "manualHash": true
        },
        "0x399D2D3B33F1B8EB": {
            "name": "SET_STATIC_EMITTER_ENABLED",
            "params": [
                { "name": "emitterName", "type": "char*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nExample:\nAUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_01_STAGE\", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM\", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM\", false);\nThis turns off surrounding sounds not connected directly to peds.\n```",
            "examples": [],
            "hash": "0x399D2D3B33F1B8EB",
            "ns": "AUDIO",
            "jhash": "0x91F72E92",
            "manualHash": true
        },
        "0x19F21E63AE6EAE4E": {
            "name": "SET_USER_RADIO_CONTROL_ENABLED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x19F21E63AE6EAE4E",
            "ns": "AUDIO",
            "jhash": "0x52E054CE",
            "manualHash": true
        },
        "0xBCC29F935ED07688": {
            "name": "_SET_VARIABLE_ON_CUTSCENE_AUDIO",
            "params": [
                { "name": "variableName", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSET_VARIABLE_ON_*\n```",
            "examples": [],
            "hash": "0xBCC29F935ED07688",
            "ns": "AUDIO",
            "aliases": ["GET_PLAYER_HEADSET_SOUND_ALTERNATE"],
            "jhash": "0xD63CF33A",
            "manualHash": true
        },
        "0xAD6B3148A78AE9B6": {
            "name": "SET_VARIABLE_ON_SOUND",
            "params": [
                { "name": "soundId", "type": "int" },
                { "name": "variableName", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAD6B3148A78AE9B6",
            "ns": "AUDIO",
            "jhash": "0x606EE5FA",
            "manualHash": true
        },
        "0x2F9D3834AEB9EF79": {
            "name": "SET_VARIABLE_ON_STREAM",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nFrom the scripts, p0:  \n\"ArmWrestlingIntensity\",  \n\"INOUT\",  \n\"Monkey_Stream\",  \n\"ZoomLevel\"  \n```",
            "examples": [],
            "hash": "0x2F9D3834AEB9EF79",
            "ns": "AUDIO",
            "jhash": "0xF67BB44C",
            "manualHash": true
        },
        "0x3E45765F3FBB582F": {
            "name": "_SET_VEH_HAS_RADIO_OVERRIDE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x3E45765F3FBB582F",
            "ns": "AUDIO",
            "aliases": ["0x3E45765F3FBB582F"],
            "manualHash": true
        },
        "0x1B9C0099CB942AC6": {
            "name": "SET_VEH_RADIO_STATION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "radioStation", "type": "char*" }
            ],
            "results": "void",
            "description": "Find the radio station list [here](https://gist.github.com/4mmonium/b47d6512a2d992cbf4eea15d9038b581)",
            "examples": [],
            "hash": "0x1B9C0099CB942AC6",
            "ns": "AUDIO",
            "jhash": "0xE391F55F",
            "manualHash": true
        },
        "0x733ADF241531E5C2": {
            "name": "SET_VARIABLE_ON_UNDER_WATER_STREAM",
            "params": [
                { "name": "variableName", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nAUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM(\"inTunnel\", 1.0);\nAUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM(\"inTunnel\", 0.0);\n```",
            "examples": [],
            "hash": "0x733ADF241531E5C2",
            "ns": "AUDIO",
            "aliases": ["0x733ADF241531E5C2"],
            "jhash": "0x62D026BE",
            "manualHash": true
        },
        "0x0350E7E17BA767D0": {
            "name": "_SET_VEHICLE_HORN_VARIATION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x0350E7E17BA767D0",
            "ns": "AUDIO",
            "aliases": ["0x0350E7E17BA767D0", "0xCDA42C4BB9BDE779"],
            "manualHash": true
        },
        "0x01BB4D577D38BD9E": {
            "name": "SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle to modify"
                },
                {
                    "name": "intensity",
                    "type": "float",
                    "description": "A value 0.0 - 1.0. Higher the value, the more likely the vehicle is to make the sound while decelerating"
                }
            ],
            "results": "void",
            "description": "Vehicle will make a 'rattling' noise when decelerating",
            "examples": [],
            "hash": "0x01BB4D577D38BD9E",
            "ns": "AUDIO",
            "aliases": ["0x01BB4D577D38BD9E"],
            "jhash": "0xE81FAC68",
            "manualHash": true
        },
        "0x59E7B488451F4D3A": {
            "name": "SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "damageFactor", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x59E7B488451F4D3A",
            "ns": "AUDIO",
            "aliases": ["0x59E7B488451F4D3A"],
            "jhash": "0x23BE6432",
            "manualHash": true
        },
        "0x9C11908013EA4715": {
            "name": "_SOUND_VEHICLE_HORN_THIS_FRAME",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nSET_*\n```",
            "examples": [],
            "hash": "0x9C11908013EA4715",
            "ns": "AUDIO",
            "aliases": ["0x9C11908013EA4715"],
            "jhash": "0xDE8BA3CD",
            "manualHash": true
        },
        "0x3B988190C0AA6C0B": {
            "name": "SET_VEHICLE_RADIO_ENABLED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\ncan't seem to enable radio on cop cars etc  \n```",
            "examples": [],
            "hash": "0x3B988190C0AA6C0B",
            "ns": "AUDIO",
            "jhash": "0x6F812CAB",
            "manualHash": true
        },
        "0xBB6F1CAEC68B0BCE": {
            "name": "SET_VEHICLE_RADIO_LOUD",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBB6F1CAEC68B0BCE",
            "ns": "AUDIO",
            "jhash": "0x8D9EDD99",
            "manualHash": true
        },
        "0x013A80FC08F6E4F2": {
            "name": "START_AUDIO_SCENE",
            "params": [{ "name": "scene", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nUsed to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.  \nList of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC  \n```",
            "examples": [],
            "hash": "0x013A80FC08F6E4F2",
            "ns": "AUDIO",
            "jhash": "0xE48D757B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4A04DE7CAB2739A1": {
            "name": "SET_VEHICLE_BOOST_ACTIVE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);  \nSET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);   \nWill give a boost-soundeffect.  \n```",
            "examples": [],
            "hash": "0x4A04DE7CAB2739A1",
            "ns": "AUDIO",
            "jhash": "0x072F15F2",
            "manualHash": true
        },
        "0xF1F8157B8C3F171C": {
            "name": "SET_VEHICLE_STARTUP_REV_SOUND",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "char*" }
            ],
            "results": "void",
            "description": "Overrides the vehicle's startup engine rev sound.\n\n2 calls found in the b617d scripts:\n\n```cpp\nAUDIO::SET_VEHICLE_STARTUP_REV_SOUND(l_A42, \"Franklin_Bike_Rev\", \"BIG_SCORE_3A_SOUNDS\");  \nAUDIO::SET_VEHICLE_STARTUP_REV_SOUND(l_166, \"Trevor_Revs_Off\", \"PALETO_SCORE_SETUP_SOUNDS\");\n```",
            "examples": [],
            "hash": "0xF1F8157B8C3F171C",
            "ns": "AUDIO",
            "aliases": ["0xF1F8157B8C3F171C"],
            "jhash": "0x1C0C5E4C",
            "manualHash": true
        },
        "0x6DDBBDD98E2E9C25": {
            "name": "SKIP_RADIO_FORWARD",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6DDBBDD98E2E9C25",
            "ns": "AUDIO",
            "jhash": "0x10D36630",
            "manualHash": true
        },
        "0x9663FE6B7A61EB00": {
            "name": "SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9663FE6B7A61EB00",
            "ns": "AUDIO",
            "jhash": "0x85C98304",
            "manualHash": true
        },
        "0x0355EF116C4C97B2": {
            "name": "START_ALARM",
            "params": [
                { "name": "alarmName", "type": "char*" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nExample:\nThis will start the alarm at Fort Zancudo.\nAUDIO::START_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);\nFirst parameter (char) is the name of the alarm.\nSecond parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.\n----------\nIt DOES make a difference but it has to do with the duration or something I dunno yet\n----------\n Found in the b617d scripts:\n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS\", 0);\n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER\", 1);\n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B\", 0);\n AUDIO::START_ALARM(\"BIG_SCORE_HEIST_VAULT_ALARMS\", a_0);\n AUDIO::START_ALARM(\"FBI_01_MORGUE_ALARMS\", 1);\n AUDIO::START_ALARM(\"FIB_05_BIOTECH_LAB_ALARMS\", 0);\n AUDIO::START_ALARM(\"JEWEL_STORE_HEIST_ALARMS\", 0);\n AUDIO::START_ALARM(\"PALETO_BAY_SCORE_ALARM\", 1);\n AUDIO::START_ALARM(\"PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM\", 0);\n AUDIO::START_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);\n AUDIO::START_ALARM(\"PORT_OF_LS_HEIST_SHIP_ALARMS\", 0);\n AUDIO::START_ALARM(\"PRISON_ALARMS\", 0);\n AUDIO::START_ALARM(\"PROLOGUE_VAULT_ALARMS\", 0);\n```",
            "examples": [],
            "hash": "0x0355EF116C4C97B2",
            "ns": "AUDIO",
            "jhash": "0x703F524B",
            "manualHash": true
        },
        "0x252E5F915EABB675": {
            "name": "START_SCRIPT_PHONE_CONVERSATION",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x252E5F915EABB675",
            "ns": "AUDIO",
            "jhash": "0x38E42D07",
            "manualHash": true
        },
        "0xBAC7FC81A75EC1A1": {
            "name": "STOP_AUDIO_SCENES",
            "params": [],
            "results": "void",
            "description": "Stops all mixed scenes which were previously started by this script",
            "examples": [],
            "hash": "0xBAC7FC81A75EC1A1",
            "ns": "AUDIO",
            "jhash": "0xF6C7342A",
            "manualHash": true
        },
        "0x6B17C62C9635D2DC": {
            "name": "START_SCRIPT_CONVERSATION",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6B17C62C9635D2DC",
            "ns": "AUDIO",
            "jhash": "0xE5DE7D9D",
            "manualHash": true
        },
        "0x23641AFE870AF385": {
            "name": "START_PRELOADED_CONVERSATION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x23641AFE870AF385",
            "ns": "AUDIO",
            "jhash": "0xA170261B",
            "manualHash": true
        },
        "0x2F794A877ADD4C92": {
            "name": "STOP_ALL_ALARMS",
            "params": [{ "name": "stop", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F794A877ADD4C92",
            "ns": "AUDIO",
            "jhash": "0xC3CB9DC6",
            "manualHash": true
        },
        "0xB8BEC0CA6F0EDB0F": {
            "name": "STOP_CURRENT_PLAYING_AMBIENT_SPEECH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "Stops currently playing ambient speech.",
            "examples": [],
            "hash": "0xB8BEC0CA6F0EDB0F",
            "ns": "AUDIO",
            "jhash": "0xBB8E64BF",
            "manualHash": true
        },
        "0xDFE8422B3B94E688": {
            "name": "STOP_AUDIO_SCENE",
            "params": [{ "name": "scene", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDFE8422B3B94E688",
            "ns": "AUDIO",
            "jhash": "0xA08D8C58",
            "manualHash": true
        },
        "0x6C5AE23EFA885092": {
            "name": "STOP_PED_RINGTONE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "Stops a ped's ringtone from playing",
            "examples": [],
            "hash": "0x6C5AE23EFA885092",
            "ns": "AUDIO",
            "jhash": "0xFEEA107C",
            "manualHash": true
        },
        "0xA1CADDCD98415A41": {
            "name": "STOP_ALARM",
            "params": [
                { "name": "alarmName", "type": "char*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nExample:  \nThis will stop the alarm at Fort Zancudo.  \nAUDIO::STOP_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);  \nFirst parameter (char) is the name of the alarm.  \nSecond parameter (bool) has to be true (1) to have any effect.  \n```",
            "examples": [],
            "hash": "0xA1CADDCD98415A41",
            "ns": "AUDIO",
            "jhash": "0xF987BE8C",
            "manualHash": true
        },
        "0x7A73D05A607734C7": {
            "name": "STOP_CURRENT_PLAYING_SPEECH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "Stops currently playing speech (Pain, ambient, scripted, breathing).",
            "examples": [],
            "hash": "0x7A73D05A607734C7",
            "ns": "AUDIO",
            "aliases": ["0x7A73D05A607734C7", "_SET_PED_MUTE"],
            "jhash": "0x5B7463F4",
            "manualHash": true
        },
        "0x9D64D7405520E3D3": {
            "name": "STOP_PED_SPEAKING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "shouldDisable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "This doesn't stop a piece of dialogue that has been triggered.\n\nThis stops the ability to force ambient dialogue if set to true - however setting it to false, then triggering a context, then setting it to true again will allow this.\n\nNb. This does not sync over the network, it will only affect peds locally. Use [STOP_PED_SPEAKING_SYNCED](#\\_0xAB6781A5F3101470) if you need to affect peds on other machines too.",
            "examples": [],
            "hash": "0x9D64D7405520E3D3",
            "ns": "AUDIO",
            "jhash": "0xFF92B49D",
            "manualHash": true
        },
        "0xA4718A1419D18151": {
            "name": "STOP_STREAM",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA4718A1419D18151",
            "ns": "AUDIO",
            "jhash": "0xD1E364DE",
            "manualHash": true
        },
        "0x806058BBDC136E06": {
            "name": "STOP_CUTSCENE_AUDIO",
            "params": [],
            "results": "void",
            "description": "Stops audio for the current cutscene.",
            "examples": [],
            "hash": "0x806058BBDC136E06",
            "ns": "AUDIO",
            "aliases": ["0x806058BBDC136E06"],
            "jhash": "0x55461BE6",
            "manualHash": true
        },
        "0x706D57B0F50DA710": {
            "name": "TRIGGER_MUSIC_EVENT",
            "params": [{ "name": "eventName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nList of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W  \nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P  \n```",
            "examples": [],
            "hash": "0x706D57B0F50DA710",
            "ns": "AUDIO",
            "jhash": "0xB6094948",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA3B0C41BA5CC0BB5": {
            "name": "STOP_SOUND",
            "params": [
                {
                    "name": "soundId",
                    "type": "int",
                    "description": "The sound id to stop"
                }
            ],
            "results": "void",
            "description": "Stops the sound from currently playing, there isn't a way to resume a sound\nafter stopping it.",
            "examples": [],
            "hash": "0xA3B0C41BA5CC0BB5",
            "ns": "AUDIO",
            "jhash": "0xCD7F4030",
            "manualHash": true
        },
        "0xD79DEEFB53455EBA": {
            "name": "STOP_SCRIPTED_CONVERSATION",
            "params": [{ "name": "finishCurrentLine", "type": "BOOL" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xD79DEEFB53455EBA",
            "ns": "AUDIO",
            "jhash": "0xAB77DA7D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x66C3FB05206041BA": {
            "name": "_TRIGGER_SIREN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "... When not in a vehicle\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x66C3FB05206041BA",
            "ns": "AUDIO",
            "aliases": ["0x66C3FB05206041BA"],
            "manualHash": true
        },
        "0x47AED84213A47510": {
            "name": "_UPDATE_LSUR",
            "params": [{ "name": "enableMixes", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x47AED84213A47510",
            "ns": "AUDIO",
            "manualHash": true
        },
        "0xAB6781A5F3101470": {
            "name": "STOP_PED_SPEAKING_SYNCED",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "shouldDisable",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "This doesn't stop a piece of dialogue that has been triggered.\n\nThis stops the ability to force ambient dialogue if set to true - however setting it to false, then triggering a context, then setting it to true again will allow this.\n\nThe ped will also be prevented from speaking on remote machines. Use [STOP_PED_SPEAKING](#\\_0x9D64D7405520E3D3) if you just want to affect the local machine.",
            "examples": [],
            "hash": "0xAB6781A5F3101470",
            "ns": "AUDIO",
            "aliases": ["0xAB6781A5F3101470"],
            "manualHash": true
        },
        "0xFC00454CF60B91DD": {
            "name": "UNFREEZE_RADIO_STATION",
            "params": [{ "name": "radioStation", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFC00454CF60B91DD",
            "ns": "AUDIO",
            "jhash": "0x4D46202C",
            "manualHash": true
        },
        "0xE4E6DD5566D28C82": {
            "name": "STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS",
            "params": [],
            "results": "void",
            "description": "Stops all smoke grenade sounds",
            "examples": [],
            "hash": "0xE4E6DD5566D28C82",
            "ns": "AUDIO",
            "aliases": ["0xE4E6DD5566D28C82"],
            "jhash": "0x7262B5BA",
            "manualHash": true
        },
        "0x031ACB6ABA18C729": {
            "name": "UNLOCK_RADIO_STATION_TRACK_LIST",
            "params": [
                { "name": "radioStation", "type": "char*" },
                { "name": "trackListName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nAUDIO::UNLOCK_RADIO_STATION_TRACK_LIST(\"RADIO_16_SILVERLAKE\", \"MIRRORPARK_LOCKED\");\n```",
            "examples": [],
            "hash": "0x031ACB6ABA18C729",
            "ns": "AUDIO",
            "aliases": ["0x031ACB6ABA18C729"],
            "jhash": "0xBE998184",
            "manualHash": true
        },
        "0xA8638BE228D4751A": {
            "name": "UNREGISTER_SCRIPT_WITH_AUDIO",
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**\n\n```\nOn last-gen this just runs blr and this func is called by several other functions other then the native's table.  \n```",
            "examples": [],
            "hash": "0xA8638BE228D4751A",
            "ns": "AUDIO",
            "jhash": "0x66728EFE",
            "manualHash": true
        },
        "0xFA932DE350266EF8": {
            "name": "USE_SIREN_AS_HORN",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFA932DE350266EF8",
            "ns": "AUDIO",
            "jhash": "0xC6BC16F3",
            "manualHash": true
        },
        "0x92D6A88E64A94430": {
            "name": "STOP_SYNCHRONIZED_AUDIO_EVENT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x92D6A88E64A94430",
            "ns": "AUDIO",
            "jhash": "0xADEED2B4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB165AB7C248B2DC1": {
            "name": "UNLOCK_MISSION_NEWS_STORY",
            "params": [{ "name": "newsStory", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB165AB7C248B2DC1",
            "ns": "AUDIO",
            "jhash": "0xCCD9ABE4",
            "manualHash": true
        }
    },
    "CLOCK": {
        "0xD716F30D8C8980E2": {
            "name": "ADD_TO_CLOCK_TIME",
            "params": [
                { "name": "hours", "type": "int" },
                { "name": "minutes", "type": "int" },
                { "name": "seconds", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD716F30D8C8980E2",
            "ns": "CLOCK",
            "jhash": "0xCC40D20D",
            "manualHash": true
        },
        "0x3D10BC92A4DB1D35": {
            "name": "GET_CLOCK_DAY_OF_MONTH",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x3D10BC92A4DB1D35",
            "ns": "CLOCK",
            "jhash": "0xC7A5ACB7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC8CA9670B9D83B3B": {
            "name": "ADVANCE_CLOCK_TIME_TO",
            "params": [
                { "name": "hour", "type": "int" },
                { "name": "minute", "type": "int" },
                { "name": "second", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC8CA9670B9D83B3B",
            "ns": "CLOCK",
            "jhash": "0x57B8DA7C",
            "manualHash": true
        },
        "0x13D2B8ADD79640F2": {
            "name": "GET_CLOCK_MINUTES",
            "params": [],
            "results": "int",
            "description": "```\nGets the current ingame clock minute.  \n```",
            "examples": [],
            "hash": "0x13D2B8ADD79640F2",
            "ns": "CLOCK",
            "jhash": "0x94AAC486",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x25223CA6B4D20B7F": {
            "name": "GET_CLOCK_HOURS",
            "params": [],
            "results": "int",
            "description": "```\nGets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)  \n```",
            "examples": [],
            "hash": "0x25223CA6B4D20B7F",
            "ns": "CLOCK",
            "jhash": "0x7EF8316F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBBC72712E80257A1": {
            "name": "GET_CLOCK_MONTH",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xBBC72712E80257A1",
            "ns": "CLOCK",
            "jhash": "0x3C48A3D5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x961777E64BDAF717": {
            "name": "GET_CLOCK_YEAR",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x961777E64BDAF717",
            "ns": "CLOCK",
            "jhash": "0xB8BECF15",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x494E97C2EF27C470": {
            "name": "GET_CLOCK_SECONDS",
            "params": [],
            "results": "int",
            "description": "```\nGets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.  \n```",
            "examples": [],
            "hash": "0x494E97C2EF27C470",
            "ns": "CLOCK",
            "jhash": "0x099C927E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2F8B4D1C595B11DB": {
            "name": "GET_MILLISECONDS_PER_GAME_MINUTE",
            "params": [],
            "results": "int",
            "description": "Returns how many real ms are equal to one game minute.\nA getter for [`SetMillisecondsPerGameMinute`](#\\_0x36CA2554).",
            "examples": [],
            "hash": "0x2F8B4D1C595B11DB",
            "ns": "CLOCK",
            "jhash": "0x3B74095C",
            "manualHash": true,
            "resultsDescription": "A number of milliseconds that equals to one game minute."
        },
        "0xD972E4BD7AEB235F": {
            "name": "GET_CLOCK_DAY_OF_WEEK",
            "params": [],
            "results": "int",
            "description": "```\nGets the current day of the week.  \n0: Sunday  \n1: Monday  \n2: Tuesday  \n3: Wednesday  \n4: Thursday  \n5: Friday  \n6: Saturday  \n```",
            "examples": [],
            "hash": "0xD972E4BD7AEB235F",
            "ns": "CLOCK",
            "jhash": "0x84E4A289",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8117E09A19EEF4D3": {
            "name": "GET_UTC_TIME",
            "params": [
                { "name": "year", "type": "int*" },
                { "name": "month", "type": "int*" },
                { "name": "day", "type": "int*" },
                { "name": "hour", "type": "int*" },
                { "name": "minute", "type": "int*" },
                { "name": "second", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nGets current UTC time\n```",
            "examples": [],
            "hash": "0x8117E09A19EEF4D3",
            "ns": "CLOCK",
            "aliases": ["_GET_UTC_TIME"],
            "jhash": "0xC589CD7D",
            "manualHash": true
        },
        "0x50C7A99057A69748": {
            "name": "GET_LOCAL_TIME",
            "params": [
                { "name": "year", "type": "int*" },
                { "name": "month", "type": "int*" },
                { "name": "day", "type": "int*" },
                { "name": "hour", "type": "int*" },
                { "name": "minute", "type": "int*" },
                { "name": "second", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nGets local system time as year, month, day, hour, minute and second.  \nExample usage:  \nint year;  \nint month;  \nint day;  \nint hour;  \nint minute;  \nint second;  \nor use std::tm struct  \nTIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);  \n```",
            "examples": [],
            "hash": "0x50C7A99057A69748",
            "ns": "CLOCK",
            "jhash": "0x124BCFA2",
            "manualHash": true
        },
        "0x47C3B5848C3E45D8": {
            "name": "SET_CLOCK_TIME",
            "params": [
                { "name": "hour", "type": "int" },
                { "name": "minute", "type": "int" },
                { "name": "second", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSET_CLOCK_TIME(12, 34, 56);  \n```",
            "examples": [],
            "hash": "0x47C3B5848C3E45D8",
            "ns": "CLOCK",
            "jhash": "0x26F6AF14",
            "manualHash": true
        },
        "0xDA488F299A5B164E": {
            "name": "GET_POSIX_TIME",
            "params": [
                { "name": "year", "type": "int*" },
                { "name": "month", "type": "int*" },
                { "name": "day", "type": "int*" },
                { "name": "hour", "type": "int*" },
                { "name": "minute", "type": "int*" },
                { "name": "second", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nGets system time as year, month, day, hour, minute and second.  \nExample usage:  \n\tint year;  \n\tint month;  \n\tint day;  \n\tint hour;  \n\tint minute;  \n\tint second;  \n\tTIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);  \n```",
            "examples": [],
            "hash": "0xDA488F299A5B164E",
            "ns": "CLOCK",
            "jhash": "0xE15A5281",
            "manualHash": true
        },
        "0x4055E40BD2DBEC1D": {
            "name": "PAUSE_CLOCK",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4055E40BD2DBEC1D",
            "ns": "CLOCK",
            "jhash": "0xB02D6124",
            "manualHash": true
        },
        "0xB096419DF0D06CE7": {
            "name": "SET_CLOCK_DATE",
            "params": [
                { "name": "day", "type": "int" },
                { "name": "month", "type": "int" },
                { "name": "year", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB096419DF0D06CE7",
            "ns": "CLOCK",
            "jhash": "0x96891C94",
            "manualHash": true
        }
    },
    "CUTSCENE": {
        "0xB56BBBCC2955D9CB": {
            "name": "CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY",
            "params": [],
            "results": "BOOL",
            "description": "Returns when it is safe to start applying changes to cutscene entities.\n\nShould always be used for applying components.\n\nSee [`SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED`](#\\_0x2A56C06EBEF2B0D9) and [`REGISTER_ENTITY_FOR_CUTSCENE`](#\\_0xE40C1C56DF95C2E8) for an example.\n\nThis will be true before the cutscene is considered loaded",
            "examples": [],
            "hash": "0xB56BBBCC2955D9CB",
            "ns": "CUTSCENE",
            "aliases": ["0xB56BBBCC2955D9CB"],
            "jhash": "0xDD8878E9",
            "manualHash": true,
            "resultsDescription": "Whether you can request assets for cutscene entities, like components."
        },
        "0x4C6A6451C79E4662": {
            "name": "CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY",
            "params": [
                {
                    "name": "cutsceneEntName",
                    "type": "char*",
                    "description": "i.e Michael"
                },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Can be 0"
                }
            ],
            "results": "BOOL",
            "description": "Returns if the script can begin interacting with the registered entity. Primarly used for lead-outs of cutscenes.\nReturns on frame after cutscene ends, so you cannot get is while using IsCutsceneActive()\n\nWhether it is safe to start doing scripted actions on the entity, like simulating walking out of a cutscene.",
            "examples": [],
            "hash": "0x4C6A6451C79E4662",
            "ns": "CUTSCENE",
            "jhash": "0x8FF5D3C4",
            "manualHash": true,
            "resultsDescription": "Whether or not it is safe to begin interacting with the entity"
        },
        "0x499EF20C5DB25C59": {
            "name": "DOES_CUTSCENE_ENTITY_EXIST",
            "params": [
                { "name": "cutsceneEntName", "type": "char*" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x499EF20C5DB25C59",
            "ns": "CUTSCENE",
            "jhash": "0x58E67409",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x645D0B458D8E17B5": {
            "name": "CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY",
            "params": [
                { "name": "cutsceneEntName", "type": "char*" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "```\nmodelHash (p1) was always 0 in R* scripts  \n```",
            "examples": [],
            "hash": "0x645D0B458D8E17B5",
            "ns": "CUTSCENE",
            "jhash": "0x55C30B26",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB2CBCD0930DFB420": {
            "name": "CAN_SET_EXIT_STATE_FOR_CAMERA",
            "params": [
                { "name": "p0", "type": "BOOL", "description": "Mostly false" }
            ],
            "results": "BOOL",
            "description": "Whether or not it is safe to run functions on the camera,\nas the camera is now no longer being used by the cutscene.",
            "examples": [],
            "hash": "0xB2CBCD0930DFB420",
            "ns": "CUTSCENE",
            "jhash": "0xEDAE6C02",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x49010A6A396553D8": {
            "name": "GET_CUTSCENE_SECTION_PLAYING",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x49010A6A396553D8",
            "ns": "CUTSCENE",
            "jhash": "0x1026F0D6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0ABC54DE641DC0FC": {
            "name": "_GET_CUT_FILE_NUM_SECTIONS",
            "params": [{ "name": "cutsceneName", "type": "char*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0ABC54DE641DC0FC",
            "ns": "CUTSCENE",
            "aliases": ["0x0ABC54DE641DC0FC"],
            "jhash": "0xFD8B1AC2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x011883f41211432a": {
            "name": "_GET_CUTSCENE_END_TIME",
            "params": [],
            "results": "int",
            "description": "Returns the time of the cutscene's end accounting for [`REQUEST_CUTSCENE_WITH_PLAYBACK_LIST`](#\\_0xC23DE0E91C30B58C)\n\nIf a cutscene is laid out with 10 second sections, and section 0 and 1 are enabled then it would be 20000ms.\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x011883f41211432a",
            "ns": "CUTSCENE",
            "aliases": ["0x971D7B15BCDBEF99"],
            "manualHash": true
        },
        "0x0A2E9FDB9A8C62F6": {
            "name": "GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY",
            "params": [
                {
                    "name": "cutsceneEntName",
                    "type": "char*",
                    "description": "I.E MP\\_1, MP\\_4, Michael, Trevor"
                },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Not strictly neccasary, can get 0"
                }
            ],
            "results": "Entity",
            "description": "Returns the handle of a cutscene entity, can be ped",
            "examples": [],
            "hash": "0x0A2E9FDB9A8C62F6",
            "ns": "CUTSCENE",
            "jhash": "0x1D09ABC7",
            "manualHash": true,
            "resultsDescription": "Returns entity handle"
        },
        "0xE625BEABBAFFDAB9": {
            "name": "GET_CUTSCENE_TIME",
            "params": [],
            "results": "int",
            "description": "Gets the elapsed time of the current cutscene in",
            "examples": [],
            "hash": "0xE625BEABBAFFDAB9",
            "ns": "CUTSCENE",
            "jhash": "0x53F5B5AB",
            "manualHash": true,
            "resultsDescription": "Elapsed time in milliseconds"
        },
        "0x708BDD8CD795B043": {
            "name": "HAS_CUTSCENE_CUT_THIS_FRAME",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x708BDD8CD795B043",
            "ns": "CUTSCENE",
            "aliases": ["0x708BDD8CD795B043"],
            "jhash": "0x4315A7C5",
            "manualHash": true
        },
        "0xEE53B14A19E480D4": {
            "name": "GET_CUTSCENE_TOTAL_DURATION",
            "params": [],
            "results": "int",
            "description": "Gets the total length of the cutscene irrespective of playback list in milliseconds\nTo account for sections, see [`_GET_CUTSCENE_END_TIME`](#\\_0x971D7B15BCDBEF99)",
            "examples": [],
            "hash": "0xEE53B14A19E480D4",
            "ns": "CUTSCENE",
            "jhash": "0x0824EBE8",
            "manualHash": true,
            "resultsDescription": "Cutscene total length in milliseconds"
        },
        "0x991251AFC3981F84": {
            "name": "IS_CUTSCENE_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x991251AFC3981F84",
            "ns": "CUTSCENE",
            "jhash": "0xCCE2FE9D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0741A26499654CD": {
            "name": "GET_ENTITY_INDEX_OF_REGISTERED_ENTITY",
            "params": [
                { "name": "cutsceneEntName", "type": "char*" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "Entity",
            "description": "",
            "examples": [],
            "hash": "0xC0741A26499654CD",
            "ns": "CUTSCENE",
            "jhash": "0x46D18755",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA1C996C2A744262E": {
            "name": "HAS_CUT_FILE_LOADED",
            "params": [{ "name": "cutsceneName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nSimply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.\n```",
            "examples": [],
            "hash": "0xA1C996C2A744262E",
            "ns": "CUTSCENE",
            "aliases": ["0xA1C996C2A744262E"],
            "jhash": "0x56D5B144",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC59F528E9AB9F339": {
            "name": "HAS_CUTSCENE_LOADED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC59F528E9AB9F339",
            "ns": "CUTSCENE",
            "jhash": "0xF9998582",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x228D3D94F8A11C3C": {
            "name": "HAS_THIS_CUTSCENE_LOADED",
            "params": [{ "name": "cutsceneName", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x228D3D94F8A11C3C",
            "ns": "CUTSCENE",
            "jhash": "0x3C5619F2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x06EE9048FD080382": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x06EE9048FD080382",
            "ns": "CUTSCENE",
            "manualHash": true
        },
        "0x7C0A893088881D57": {
            "name": "HAS_CUTSCENE_FINISHED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7C0A893088881D57",
            "ns": "CUTSCENE",
            "jhash": "0x5DED14B4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x71B74D2AE19338D0": {
            "name": "IS_CUTSCENE_PLAYBACK_FLAG_SET",
            "params": [{ "name": "flag", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x71B74D2AE19338D0",
            "ns": "CUTSCENE",
            "aliases": ["0x71B74D2AE19338D0"],
            "jhash": "0x7B93CDAA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD3C2E180A40F031E": {
            "name": "IS_CUTSCENE_PLAYING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD3C2E180A40F031E",
            "ns": "CUTSCENE",
            "jhash": "0xA3A78392",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4CEBC1ED31E8925E": {
            "params": [{ "name": "cutsceneName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nThis function is hard-coded to always return 1.  \n```",
            "examples": [],
            "hash": "0x4CEBC1ED31E8925E",
            "ns": "CUTSCENE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x583DF8E3D4AFBD98": {
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x583DF8E3D4AFBD98",
            "ns": "CUTSCENE",
            "jhash": "0x5AE68AE6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x20746F7B1032A3C7": {
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x20746F7B1032A3C7",
            "ns": "CUTSCENE",
            "manualHash": true
        },
        "0x8D9DF6ECA8768583": {
            "params": [{ "name": "threadId", "type": "int" }],
            "results": "void",
            "description": "```\nSET_SCRIPT_*\nSets the cutscene's owning thread ID.\n```",
            "examples": [],
            "hash": "0x8D9DF6ECA8768583",
            "ns": "CUTSCENE",
            "jhash": "0x25A2CABC",
            "manualHash": true
        },
        "0x011883F41211432A": {
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "p6", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x011883F41211432A",
            "ns": "CUTSCENE",
            "manualHash": true
        },
        "0x7F96F23FA9B73327": {
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "void",
            "description": "```\nSET_VEHICLE_*\n```",
            "examples": [],
            "hash": "0x7F96F23FA9B73327",
            "ns": "CUTSCENE",
            "manualHash": true
        },
        "0xE36A98D8AB3D3C66": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE36A98D8AB3D3C66",
            "ns": "CUTSCENE",
            "jhash": "0x04377C10",
            "manualHash": true
        },
        "0x2F137B508DE238F2": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F137B508DE238F2",
            "ns": "CUTSCENE",
            "jhash": "0x8338DA1D",
            "manualHash": true
        },
        "0x4FCD976DA686580C": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x4FCD976DA686580C",
            "ns": "CUTSCENE",
            "manualHash": true
        },
        "0x5EDEF0CF8C1DAB3C": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5EDEF0CF8C1DAB3C",
            "ns": "CUTSCENE",
            "jhash": "0xDBD88708",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2131046957F31B04": {
            "name": "REGISTER_SYNCHRONISED_SCRIPT_SPEECH",
            "params": [],
            "results": "void",
            "description": "Only used twice in armenian1.c",
            "examples": [],
            "hash": "0x2131046957F31B04",
            "ns": "CUTSCENE",
            "jhash": "0xB60CFBB9",
            "manualHash": true
        },
        "0xA0FE76168A189DDB": {
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA0FE76168A189DDB",
            "ns": "CUTSCENE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE40C1C56DF95C2E8": {
            "name": "REGISTER_ENTITY_FOR_CUTSCENE",
            "params": [
                {
                    "name": "cutsceneEntity",
                    "type": "Entity",
                    "description": "Entity to put into the cutscene."
                },
                {
                    "name": "cutsceneEntName",
                    "type": "char*",
                    "description": "cHandle of cutscene entity, i.e Michael, MP\\_1, MP\\_4, Lamar"
                },
                { "name": "p2", "type": "int" },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Not strictly neccasary, often 0 in R\\* scripts"
                },
                {
                    "name": "p4",
                    "type": "int",
                    "description": "0 for SP, 64 for MP seemingly"
                }
            ],
            "results": "void",
            "description": "This can only be run once [`CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY`](#\\_0xB56BBBCC2955D9CB) is true, but can be run before [`HAS_CUTSCENE_LOADED`](#\\_0xC59F528E9AB9F339)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "    -- An example that allows for registering non player_zero peds in place, i.e MP peds.\n    RequestCutscene(\"family_5_mcs_5_p5\", 8)\n    repeat Wait(0) until CanRequestAssetsForCutsceneEntity()\n    SetCutscenePedComponentVariationFromPed(\"Michael\", PlayerPedId(), 0)\n    -- Registering can occur at any point past here before starting the cutscene.\n    RegisterEntityForCutscene(PlayerPedId(), \"Michael\", 0, 0, 64)\n    repeat Wait(0) until HasCutsceneLoaded()\n    StartCutscene(0)"
                }
            ],
            "hash": "0xE40C1C56DF95C2E8",
            "ns": "CUTSCENE",
            "jhash": "0x7CBC3EC7",
            "manualHash": true
        },
        "0x440AF51A3462B86F": {
            "name": "REMOVE_CUTSCENE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x440AF51A3462B86F",
            "ns": "CUTSCENE",
            "jhash": "0x8052F533",
            "manualHash": true
        },
        "0xC61B86C9F61EB404": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nToggles a value (bool) for cutscenes.\nSET_*\n```",
            "examples": [],
            "hash": "0xC61B86C9F61EB404",
            "ns": "CUTSCENE",
            "jhash": "0x35721A08",
            "manualHash": true
        },
        "0xD00D76A7DFC9D852": {
            "name": "REMOVE_CUT_FILE",
            "params": [{ "name": "cutsceneName", "type": "char*" }],
            "results": "void",
            "description": "```\nSimply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.\n```",
            "examples": [],
            "hash": "0xD00D76A7DFC9D852",
            "ns": "CUTSCENE",
            "aliases": ["0xD00D76A7DFC9D852"],
            "jhash": "0xB70D7C6D",
            "manualHash": true
        },
        "0x06A3524161C502BA": {
            "name": "REQUEST_CUT_FILE",
            "params": [{ "name": "cutsceneName", "type": "char*" }],
            "results": "void",
            "description": "```\nSimply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.\n```",
            "examples": [],
            "hash": "0x06A3524161C502BA",
            "ns": "CUTSCENE",
            "aliases": ["0x06A3524161C502BA"],
            "jhash": "0x0D732CD6",
            "manualHash": true
        },
        "0x7A86743F475D9E09": {
            "name": "REQUEST_CUTSCENE",
            "params": [
                {
                    "name": "cutsceneName",
                    "type": "char*",
                    "description": "Case insensitive"
                },
                { "name": "flags", "type": "int", "description": "Usually 8" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7A86743F475D9E09",
            "ns": "CUTSCENE",
            "jhash": "0xB5977853",
            "manualHash": true
        },
        "0x4C61C75BEE8184C2": {
            "name": "SET_CUTSCENE_ENTITY_STREAMING_FLAGS",
            "params": [
                {
                    "name": "cutsceneEntName",
                    "type": "char*",
                    "description": "MP\\_1, MP\\_2, etc"
                },
                {
                    "name": "p1",
                    "type": "int",
                    "description": "Always 0 in R\\* scripts"
                },
                {
                    "name": "p2",
                    "type": "int",
                    "description": "Always 1 in R\\* scripts"
                }
            ],
            "results": "void",
            "description": "Only used in networked environment with MP cutscenes",
            "examples": [],
            "hash": "0x4C61C75BEE8184C2",
            "ns": "CUTSCENE",
            "aliases": ["0x4C61C75BEE8184C2"],
            "jhash": "0x47DB08A9",
            "manualHash": true
        },
        "0x2A56C06EBEF2B0D9": {
            "name": "SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED",
            "params": [
                {
                    "name": "cutsceneEntName",
                    "type": "char*",
                    "description": "cut file cHandle, i.e Michael, Lamar, Franklin, MP\\_1-MP\\_4 etc"
                },
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped to copy components from"
                },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Not strictly neccasary, can be 0"
                }
            ],
            "results": "void",
            "description": "Sets the components for a cutscene ped, this will take precendence over the cutscene's component overrides. This does not require the entity be registered.\n\nSee",
            "examples": [],
            "hash": "0x2A56C06EBEF2B0D9",
            "ns": "CUTSCENE",
            "aliases": ["0x2A56C06EBEF2B0D9"],
            "jhash": "0x1E7DA95E",
            "manualHash": true
        },
        "0x41FAA8FB2ECE8720": {
            "name": "SET_CUTSCENE_CAN_BE_SKIPPED",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x41FAA8FB2ECE8720",
            "ns": "CUTSCENE",
            "aliases": ["0x41FAA8FB2ECE8720"],
            "jhash": "0x28D54A7F",
            "manualHash": true
        },
        "0xC23DE0E91C30B58C": {
            "name": "REQUEST_CUTSCENE_WITH_PLAYBACK_LIST",
            "params": [
                { "name": "cutsceneName", "type": "char*" },
                { "name": "playbackFlags", "type": "int" },
                { "name": "flags", "type": "int", "description": "Usually 8" }
            ],
            "results": "void",
            "description": "```\nplaybackFlags: Which scenes should be played.\nExample: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.\n```",
            "examples": [],
            "hash": "0xC23DE0E91C30B58C",
            "ns": "CUTSCENE",
            "aliases": ["0xC23DE0E91C30B58C", "_REQUEST_CUTSCENE_EX"],
            "jhash": "0xD98F656A",
            "manualHash": true
        },
        "0x8093F23ABACCC7D4": {
            "name": "SET_CUTSCENE_FADE_VALUES",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8093F23ABACCC7D4",
            "ns": "CUTSCENE",
            "jhash": "0xD19EF0DD",
            "manualHash": true
        },
        "0x186D5CB5E7B0FF7B": {
            "name": "START_CUTSCENE",
            "params": [{ "name": "flags", "type": "int" }],
            "results": "void",
            "description": "```\nflags: Usually 0.\n```",
            "examples": [],
            "hash": "0x186D5CB5E7B0FF7B",
            "ns": "CUTSCENE",
            "jhash": "0x210106F6",
            "manualHash": true
        },
        "0xBA01E7B6DEEFBBC9": {
            "name": "SET_CUTSCENE_PED_COMPONENT_VARIATION",
            "params": [
                { "name": "cutsceneEntName", "type": "char*" },
                { "name": "componentId", "type": "int" },
                { "name": "drawableId", "type": "int" },
                { "name": "textureId", "type": "int" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "See [`SET_PED_COMPONENT_VARIATION`](#\\_0x262B14F48D29DE80)",
            "examples": [],
            "hash": "0xBA01E7B6DEEFBBC9",
            "ns": "CUTSCENE",
            "jhash": "0x6AF994A1",
            "manualHash": true
        },
        "0xD220BDD222AC4A1E": {
            "name": "STOP_CUTSCENE_IMMEDIATELY",
            "params": [],
            "results": "void",
            "description": "Stop cutscene instantly, will dump registered entities right where they were when ran.",
            "examples": [],
            "hash": "0xD220BDD222AC4A1E",
            "ns": "CUTSCENE",
            "jhash": "0xF528A2AD",
            "manualHash": true
        },
        "0xC7272775B4DC786E": {
            "name": "STOP_CUTSCENE",
            "params": [
                { "name": "p0", "type": "BOOL", "description": "Always false" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC7272775B4DC786E",
            "ns": "CUTSCENE",
            "jhash": "0x5EE84DC7",
            "manualHash": true
        },
        "0xB812B3FD1C01CF27": {
            "name": "SET_CUTSCENE_ORIGIN",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                {
                    "name": "p4",
                    "type": "int",
                    "description": "Often -1, 0 or 1"
                }
            ],
            "results": "void",
            "description": "Sets cutscene location, used for multiplayer apartments/businesses.",
            "examples": [],
            "hash": "0xB812B3FD1C01CF27",
            "ns": "CUTSCENE",
            "jhash": "0xB0AD7792",
            "manualHash": true
        },
        "0x0546524ADE2E9723": {
            "name": "SET_CUTSCENE_PED_PROP_VARIATION",
            "params": [
                {
                    "name": "cutsceneEntName",
                    "type": "char*",
                    "description": "i.e Michael, Trevor, MP\\_1, MP\\_4"
                },
                { "name": "componentId", "type": "int" },
                { "name": "drawableId", "type": "int" },
                { "name": "textureId", "type": "int" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "See [`SET_PED_PROP_INDEX`](#\\_0x93376B65A266EB5F)",
            "examples": [],
            "hash": "0x0546524ADE2E9723",
            "ns": "CUTSCENE",
            "aliases": ["0x0546524ADE2E9723"],
            "jhash": "0x22E9A9DE",
            "manualHash": true
        },
        "0x9896CE4721BE84BA": {
            "name": "SET_CUTSCENE_TRIGGER_AREA",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "void",
            "description": "```\nOnly used twice in R* scripts  \n```",
            "examples": [],
            "hash": "0x9896CE4721BE84BA",
            "ns": "CUTSCENE",
            "jhash": "0x9D76D9DE",
            "manualHash": true
        },
        "0x40C8656EDAEDD569": {
            "name": "WAS_CUTSCENE_SKIPPED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x40C8656EDAEDD569",
            "ns": "CUTSCENE",
            "jhash": "0xC9B6949D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1C9ADDA3244A1FBF": {
            "name": "START_CUTSCENE_AT_COORDS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "flags", "type": "int", "description": "Usually 0" }
            ],
            "results": "void",
            "description": "Similar to [`SET_CUTSCENE_ORIGIN`](#\\_0xB812B3FD1C01CF27) but without heading and doesn't need [`START_CUTSCENE`](#\\_0x186D5CB5E7B0FF7B)",
            "examples": [],
            "hash": "0x1C9ADDA3244A1FBF",
            "ns": "CUTSCENE",
            "jhash": "0x58BEA436",
            "manualHash": true
        }
    },
    "CAM": {
        "0x8609C75EC438FB3B": {
            "name": "ADD_CAM_SPLINE_NODE",
            "params": [
                { "name": "camera", "type": "Cam" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "length", "type": "int" },
                { "name": "p8", "type": "int" },
                { "name": "transitionType", "type": "int" }
            ],
            "results": "void",
            "description": "```\nI filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.  \np7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one  \np8 big values ~100 will slow down the camera movement before reaching this node  \np9 != 0 seems to override the rotation/pitch (bool?)  \n```",
            "examples": [],
            "hash": "0x8609C75EC438FB3B",
            "ns": "CAM",
            "jhash": "0xAD3C7EAA",
            "manualHash": true
        },
        "0x0A9F2A468B328E74": {
            "name": "ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "cam2", "type": "Cam" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A9F2A468B328E74",
            "ns": "CAM",
            "aliases": ["0x0A9F2A468B328E74"],
            "jhash": "0x30510511",
            "manualHash": true
        },
        "0xDF2E1F7742402E81": {
            "name": "_ANIMATE_GAMEPLAY_CAM_ZOOM",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "distance", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSeems to animate the gameplay camera zoom.  \nEg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f);  \nwill animate the camera zooming in from 1000 meters away.  \nGame scripts use it like this:  \n// Setting this to 1 prevents V key from changing zoom  \nPLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);  \n// These restrict how far you can move cam up/down left/right  \nCAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f);  \nCAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);  \nCAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);  \n```",
            "examples": [],
            "hash": "0xDF2E1F7742402E81",
            "ns": "CAM",
            "jhash": "0x77340650",
            "manualHash": true
        },
        "0x0FB82563989CF4FB": {
            "name": "ADD_CAM_SPLINE_NODE_USING_CAMERA",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "Camera to add cam2 as a node to"
                },
                {
                    "name": "cam2",
                    "type": "Cam",
                    "description": "Camera used for reference"
                },
                {
                    "name": "length",
                    "type": "int",
                    "description": "Duration used for transition, has no effect for the first node."
                },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "Takes a camera and uses the information from it as a camera spline node.",
            "examples": [
                {
                    "lang": "cs",
                    "code": "AddCamSplineNodeUsingCamera(cam, CreateCamWithParams(\"DEFAULT_SCRIPTED_CAMERA\", 975.9832f, 191.3923f, 86.82342f, -2.795285f, -0f, 154.0656f, 45f, true, 2), 5000, 3);"
                }
            ],
            "hash": "0x0FB82563989CF4FB",
            "ns": "CAM",
            "aliases": ["0x0FB82563989CF4FB"],
            "jhash": "0xBA6C085B",
            "manualHash": true
        },
        "0x609278246A29CA34": {
            "name": "ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x609278246A29CA34",
            "ns": "CAM",
            "aliases": ["0x609278246A29CA34"],
            "jhash": "0xB4737F03",
            "manualHash": true
        },
        "0xC2EAE3FB8CDBED31": {
            "name": "ANIMATED_SHAKE_SCRIPT_GLOBAL",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "char*" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "```\nCAM::ANIMATED_SHAKE_SCRIPT_GLOBAL(\"SHAKE_CAM_medium\", \"medium\", \"\", 0.5f);\n```",
            "examples": [],
            "hash": "0xC2EAE3FB8CDBED31",
            "ns": "CAM",
            "aliases": ["0xC2EAE3FB8CDBED31"],
            "jhash": "0xCB75BD9C",
            "manualHash": true
        },
        "0x61A3DBA14AB7F411": {
            "name": "ATTACH_CAM_TO_PED_BONE",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle."
                },
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "boneIndex",
                    "type": "int",
                    "description": "This is different to boneID, use ['GET_PED_BONE_INDEX'](#\\_0x3F428D08BE5AAE31) to get the index from the ID. use the index for attaching to specific bones. `cam` will be attached to the center of `ped` if bone index given doesn't correspond to bone indexes for that entity type."
                },
                {
                    "name": "xOffset",
                    "type": "float",
                    "description": "X-axis offset"
                },
                {
                    "name": "yOffset",
                    "type": "float",
                    "description": "Y-axis offset"
                },
                {
                    "name": "zOffset",
                    "type": "float",
                    "description": "Z-axis offset"
                },
                {
                    "name": "isRelative",
                    "type": "BOOL",
                    "description": "Whether or not the camera will be relative to the bone"
                }
            ],
            "results": "void",
            "description": "This native works with peds only.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\nlocal cam = CreateCam(\"DEFAULT_SCRIPTED_CAMERA\", true)\n\nAttachCamToPedBone(cam,ped,4089, 0.0, 0.0, 0.0, true) -- attach it to a finger on the left hand\n\nSetCamActive(cam, true)\nRenderScriptCams(true, false, 0, true, true)\n"
                }
            ],
            "hash": "0x61A3DBA14AB7F411",
            "ns": "CAM",
            "jhash": "0x506BB35C",
            "manualHash": true
        },
        "0x8DB3F12A02CAEF72": {
            "name": "_ATTACH_CAM_TO_VEHICLE_BONE",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                { "name": "boneIndex", "type": "int" },
                {
                    "name": "relativeRotation",
                    "type": "BOOL",
                    "description": "Whether or not the camera rotation will relative the vehicle rotation."
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "The X rotation."
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "The Y rotation."
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "The Z rotation."
                },
                {
                    "name": "offX",
                    "type": "float",
                    "description": "The X offset direction."
                },
                {
                    "name": "offY",
                    "type": "float",
                    "description": "The Y offset direction."
                },
                {
                    "name": "offZ",
                    "type": "float",
                    "description": "The Z offset direction."
                },
                {
                    "name": "fixedDirection",
                    "type": "BOOL",
                    "description": "Whether or not the camera direction will relative to the vehicle direction."
                }
            ],
            "results": "void",
            "description": "This native works with vehicles only.\nBone indexes are usually given by this native [GET_ENTITY_BONE_INDEX_BY_NAME](#\\_0xFB71170B7E76ACBA).",
            "examples": [],
            "hash": "0x8DB3F12A02CAEF72",
            "ns": "CAM",
            "aliases": ["0x8DB3F12A02CAEF72"],
            "manualHash": true
        },
        "0xA2746EEAE3E577CD": {
            "name": "ANIMATED_SHAKE_CAM",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "char*" },
                { "name": "p3", "type": "char*" },
                { "name": "amplitude", "type": "float" }
            ],
            "results": "void",
            "description": "```\nExample from michael2 script.  \nCAM::ANIMATED_SHAKE_CAM(l_5069, \"shake_cam_all@\", \"light\", \"\", 1f);  \n```",
            "examples": [],
            "hash": "0xA2746EEAE3E577CD",
            "ns": "CAM",
            "jhash": "0xE1168767",
            "manualHash": true
        },
        "0xFEDB7D269E8C60E3": {
            "name": "ATTACH_CAM_TO_ENTITY",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle."
                },
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity handle."
                },
                {
                    "name": "xOffset",
                    "type": "float",
                    "description": "X-axis offset"
                },
                {
                    "name": "yOffset",
                    "type": "float",
                    "description": "Y-axis offset"
                },
                {
                    "name": "zOffset",
                    "type": "float",
                    "description": "Z-axis offset"
                },
                {
                    "name": "isRelative",
                    "type": "BOOL",
                    "description": "Whether or not the camera will be relative to the entity"
                }
            ],
            "results": "void",
            "description": "```\nLast param determines if its relative to the Entity  \n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local entity = PlayerPedId()\nlocal cam = CreateCam(\"DEFAULT_SCRIPTED_CAMERA\", true)\n\nAttachCamToEntity(cam,entity, 0.0, 0.0, 0.0, true) --attach camera to the center of the entity\n\nSetCamActive(cam, true)\nRenderScriptCams(true, false, 0, true, true)"
                }
            ],
            "hash": "0xFEDB7D269E8C60E3",
            "ns": "CAM",
            "jhash": "0xAD7C45F6",
            "manualHash": true
        },
        "0xA516C198B7DCA1E1": {
            "name": "_CLAMP_GAMEPLAY_CAM_PITCH",
            "params": [
                { "name": "minimum", "type": "float" },
                { "name": "maximum", "type": "float" }
            ],
            "results": "void",
            "description": "```\nminimum: Degrees between -90f and 90f.\nmaximum: Degrees between -90f and 90f.\nClamps the gameplay camera's current pitch.\nEg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.\n```",
            "examples": [],
            "hash": "0xA516C198B7DCA1E1",
            "ns": "CAM",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xFA3A16E7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8F993D26E0CA5E8E": {
            "name": "_CLAMP_GAMEPLAY_CAM_YAW",
            "params": [
                { "name": "minimum", "type": "float" },
                { "name": "maximum", "type": "float" }
            ],
            "results": "void",
            "description": "```\nminimum: Degrees between -180f and 180f.\nmaximum: Degrees between -180f and 180f.\nClamps the gameplay camera's current yaw.\nEg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.\n```",
            "examples": [],
            "hash": "0x8F993D26E0CA5E8E",
            "ns": "CAM",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x749909AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x149916F50C34A40D": {
            "name": "_ATTACH_CAM_TO_PED_BONE_2",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "ped", "type": "Ped" },
                { "name": "boneIndex", "type": "int" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x149916F50C34A40D",
            "ns": "CAM",
            "manualHash": true
        },
        "0x5E3CF89C6BCCA67D": {
            "name": "CREATE_CAMERA",
            "params": [
                { "name": "camHash", "type": "Hash" },
                { "name": "active", "type": "BOOL" }
            ],
            "results": "Cam",
            "description": "",
            "examples": [],
            "hash": "0x5E3CF89C6BCCA67D",
            "ns": "CAM",
            "jhash": "0x5D6739AE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB51194800B257161": {
            "name": "CREATE_CAM_WITH_PARAMS",
            "params": [
                {
                    "name": "camName",
                    "type": "char*",
                    "description": "A string representing the camera type, the game will convert the string into a joaat hash upon native execution."
                },
                {
                    "name": "posX",
                    "type": "float",
                    "description": "The x position of the camera (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "The y position of the camera (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "The z position of the camera (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "The x rotation of the camera"
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "The y rotation of the camera"
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "The z rotation of the camera"
                },
                {
                    "name": "fov",
                    "type": "float",
                    "description": "The Field Of View of the camera, is the observable world that is seen"
                },
                {
                    "name": "active",
                    "type": "BOOL",
                    "description": "Set to true if you wish to make this new camera the active camera."
                },
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "The order of rotation, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9)"
                }
            ],
            "results": "Cam",
            "description": "Create a camera with the specified cam name/type, You can use `SET_CAM_` natives to manipulate the camera.\n\nTake a look at [CREATE_CAM](#\\_0xC3981DCE61D9E13F) if you would like to see the available camera names.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local cam = CreateCamWithParams(\"DEFAULT_SCRIPTED_CAMERA\", 561.3, 301.3, 63.0, 0.0, 0.0, 0.0, 90.0)"
                },
                {
                    "lang": "js",
                    "code": "const cam = CreateCamWithParams(\"DEFAULT_SCRIPTED_CAMERA\", 561.3, 301.3, 63.0, 0.0, 0.0, 0.0, 90.0);"
                },
                {
                    "lang": "cs",
                    "code": "int cam = CreateCamWithParams(\"DEFAULT_SCRIPTED_CAMERA\", 561.3f, 301.3f, 63.0f, 0.0f, 0.0f, 0.0f, 90.0f);"
                }
            ],
            "hash": "0xB51194800B257161",
            "ns": "CAM",
            "jhash": "0x23B02F15",
            "manualHash": true,
            "resultsDescription": "A camera handle."
        },
        "0x6ABFA3E16460F22D": {
            "name": "CREATE_CAMERA_WITH_PARAMS",
            "params": [
                { "name": "camHash", "type": "Hash" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "fov", "type": "float" },
                { "name": "active", "type": "BOOL" },
                { "name": "rotationOrder", "type": "int" }
            ],
            "results": "Cam",
            "description": "CAM::\\_GET_GAMEPLAY_CAM_COORDS can be used instead of posX,Y,Z\\\nCAM::\\_GET_GAMEPLAY_CAM_ROT can be used instead of rotX,Y,Z\\\nCAM::\\_GET_FINAL_RENDERED_CAM_FOV can be used instead of p7 (Possible p7 is FOV parameter. )\\\nrotationOrder is 2 usually",
            "examples": [],
            "hash": "0x6ABFA3E16460F22D",
            "ns": "CAM",
            "jhash": "0x0688BE9A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x487A82C650EB7799": {
            "name": "CUSTOM_MENU_COORDINATES",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "```\nsome camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.  \n```",
            "examples": [],
            "hash": "0x487A82C650EB7799",
            "ns": "CAM",
            "aliases": ["0x487A82C650EB7799"],
            "jhash": "0xA6E73135",
            "manualHash": true
        },
        "0x741B0129D4560F31": {
            "name": "CREATE_CINEMATIC_SHOT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "Any" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x741B0129D4560F31",
            "ns": "CAM",
            "jhash": "0xAC494E35",
            "manualHash": true
        },
        "0xC3981DCE61D9E13F": {
            "name": "CREATE_CAM",
            "params": [
                {
                    "name": "camName",
                    "type": "char*",
                    "description": "A string representing the camera type, the game will convert the string into a joaat hash upon native execution."
                },
                {
                    "name": "active",
                    "type": "BOOL",
                    "description": "Set to true if you wish to make this new camera the active camera."
                }
            ],
            "results": "Cam",
            "description": "Creates a camera with the specified cam name, You can use `SET_CAM_` natives to manipulate the camera.\\\nMake sure to call [RENDER_SCRIPT_CAMS](#\\_0x07E5B515DB0636FC) once the camera is created, or this won't have any visible effect.\n\n### Camera names:\n\n*   DEFAULT_SCRIPTED_CAMERA\n*   DEFAULT_ANIMATED_CAMERA\n*   DEFAULT_SPLINE_CAMERA\n*   DEFAULT_SCRIPTED_FLY_CAMERA\n*   TIMED_SPLINE_CAMERA\n*   CUSTOM_TIMED_SPLINE_CAMERA\n*   ROUNDED_SPLINE_CAMERA\n*   SMOOTHED_SPLINE_CAMERA",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local cam = CreateCam(\"DEFAULT_SCRIPTED_CAMERA\", true)"
                },
                {
                    "lang": "js",
                    "code": "const cam = CreateCam(\"DEFAULT_SCRIPTED_CAMERA\", true);"
                },
                {
                    "lang": "cs",
                    "code": "int cam = CreateCam(\"DEFAULT_SCRIPTED_CAMERA\", true);"
                }
            ],
            "hash": "0xC3981DCE61D9E13F",
            "ns": "CAM",
            "jhash": "0xE9BF2A7D",
            "manualHash": true,
            "resultsDescription": "A camera handle referencing the camera that was created."
        },
        "0x8E5FB15663F79120": {
            "name": "DESTROY_ALL_CAMS",
            "params": [{ "name": "bScriptHostCam", "type": "BOOL" }],
            "results": "void",
            "description": "```\nBOOL param indicates whether the cam should be destroyed if it belongs to the calling script.  \n```",
            "examples": [],
            "hash": "0x8E5FB15663F79120",
            "ns": "CAM",
            "jhash": "0x10C151CE",
            "manualHash": true
        },
        "0x865908C81A2C22E9": {
            "name": "DESTROY_CAM",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "bScriptHostCam", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nBOOL param indicates whether the cam should be destroyed if it belongs to the calling script.  \n```",
            "examples": [],
            "hash": "0x865908C81A2C22E9",
            "ns": "CAM",
            "jhash": "0xC39302BD",
            "manualHash": true
        },
        "0xA2FABBE87F4BAD82": {
            "name": "DETACH_CAM",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA2FABBE87F4BAD82",
            "ns": "CAM",
            "jhash": "0xF4FBF14A",
            "manualHash": true
        },
        "0x1A31FE0049E542F6": {
            "name": "DISABLE_AIM_CAM_THIS_UPDATE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1A31FE0049E542F6",
            "ns": "CAM",
            "aliases": ["0x1A31FE0049E542F6"],
            "jhash": "0x1BAA7182",
            "manualHash": true
        },
        "0x2AED6301F67007D5": {
            "name": "_DISABLE_CAM_COLLISION_FOR_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2AED6301F67007D5",
            "ns": "CAM",
            "aliases": ["0x2AED6301F67007D5"],
            "jhash": "0x2701A9AD",
            "manualHash": true
        },
        "0x49482F9FCD825AAA": {
            "name": "DISABLE_CAM_COLLISION_FOR_OBJECT",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x49482F9FCD825AAA",
            "ns": "CAM",
            "aliases": ["0x49482F9FCD825AAA"],
            "jhash": "0xC4736ED3",
            "manualHash": true
        },
        "0xDE2EF5DA284CC8DF": {
            "name": "_DISABLE_FIRST_PERSON_CAM_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "```\nDisables first person camera for the current frame.  \nFound in decompiled scripts:  \nGRAPHICS::DRAW_DEBUG_TEXT_2D(\"Disabling First Person Cam\", 0.5, 0.8, 0.0, 0, 0, 255, 255);  \nCAM::_DE2EF5DA284CC8DF();  \n```",
            "examples": [],
            "hash": "0xDE2EF5DA284CC8DF",
            "ns": "CAM",
            "manualHash": true
        },
        "0xA7A932170592B50E": {
            "name": "DOES_CAM_EXIST",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle to look for."
                }
            ],
            "results": "BOOL",
            "description": "Looks up a camera handle in the current camera pool and returns `true` if the handle is found, otherwise it returns `false`.",
            "examples": [],
            "hash": "0xA7A932170592B50E",
            "ns": "CAM",
            "jhash": "0x1EF89DC0",
            "manualHash": true,
            "resultsDescription": "A boolean value representing whether the camera exists or not."
        },
        "0xD4E8E24955024033": {
            "name": "DO_SCREEN_FADE_IN",
            "params": [{ "name": "duration", "type": "int" }],
            "results": "void",
            "description": "```\nFades the screen in.  \nduration: The time the fade should take, in milliseconds.  \n```",
            "examples": [],
            "hash": "0xD4E8E24955024033",
            "ns": "CAM",
            "jhash": "0x66C1BDEE",
            "manualHash": true
        },
        "0xADFF1B2A555F5FBA": {
            "name": "_DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xADFF1B2A555F5FBA",
            "ns": "CAM",
            "jhash": "0x5AC6DAC9",
            "manualHash": true
        },
        "0x891B5B39AC6302AF": {
            "name": "DO_SCREEN_FADE_OUT",
            "params": [{ "name": "duration", "type": "int" }],
            "results": "void",
            "description": "```\nFades the screen out.  \nduration: The time the fade should take, in milliseconds.  \n```",
            "examples": [],
            "hash": "0x891B5B39AC6302AF",
            "ns": "CAM",
            "jhash": "0x89D01805",
            "manualHash": true
        },
        "0xA41BCD7213805AAC": {
            "name": "FORCE_CINEMATIC_RENDERING_THIS_UPDATE",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA41BCD7213805AAC",
            "ns": "CAM",
            "aliases": ["0xA41BCD7213805AAC"],
            "jhash": "0xFBB85E02",
            "manualHash": true
        },
        "0x19CAFA3C87F7C2FF": {
            "name": "_GET_CAM_ACTIVE_VIEW_MODE_CONTEXT",
            "params": [],
            "results": "int",
            "description": "Enumerated type defined in camControlHelperMetadataViewModes:\n\n```cpp\nenum Context {\n    ON_FOOT = 0, // [G|S]ET_FOLLOW_PED_CAM_*\n    IN_VEHICLE = 1, // [G|S]ET_FOLLOW_VEHICLE_CAM_*\n    ON_BIKE = 2,\n    IN_BOAT = 3,\n    IN_AIRCRAFT = 4,\n    IN_SUBMARINE = 5,\n    IN_HELI = 6,\n    IN_TURRET = 7,\n}\n```",
            "examples": [],
            "hash": "0x19CAFA3C87F7C2FF",
            "ns": "CAM",
            "aliases": ["0x19CAFA3C87F7C2FF"],
            "manualHash": true,
            "resultsDescription": "The active view mode context."
        },
        "0x06D153C0B99B6128": {
            "name": "_GET_CAM_DOF_STRENGTH",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x06D153C0B99B6128",
            "ns": "CAM",
            "manualHash": true
        },
        "0xBAC038F7459AE5AE": {
            "name": "GET_CAM_COORD",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xBAC038F7459AE5AE",
            "ns": "CAM",
            "jhash": "0x7C40F09C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB60A9CFEB21CA6AA": {
            "name": "GET_CAM_FAR_CLIP",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xB60A9CFEB21CA6AA",
            "ns": "CAM",
            "jhash": "0x09F119B8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEA7F0AD7E9BA676F": {
            "name": "_ENABLE_CROSSHAIR_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "```\nShows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.  \n```",
            "examples": [],
            "hash": "0xEA7F0AD7E9BA676F",
            "ns": "CAM",
            "jhash": "0xA61FF9AC",
            "manualHash": true
        },
        "0xC3330A45CCCDB26A": {
            "name": "GET_CAM_FOV",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xC3330A45CCCDB26A",
            "ns": "CAM",
            "jhash": "0xD6E9FCF5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC520A34DAFBF24B1": {
            "name": "GET_CAM_NEAR_CLIP",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xC520A34DAFBF24B1",
            "ns": "CAM",
            "jhash": "0xCFCD35EE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC2612D223D915A1C": {
            "name": "_GET_CAM_NEAR_DOF",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0xC2612D223D915A1C",
            "ns": "CAM",
            "manualHash": true
        },
        "0xA10B2DB49E92A6B0": {
            "name": "GET_CAM_ANIM_CURRENT_PHASE",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xA10B2DB49E92A6B0",
            "ns": "CAM",
            "jhash": "0x345F72D0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD9D0E694C8282C96": {
            "name": "GET_CAM_SPLINE_NODE_PHASE",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "```\nI'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.  \n```",
            "examples": [],
            "hash": "0xD9D0E694C8282C96",
            "ns": "CAM",
            "jhash": "0x7B9522F6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB22B17DF858716A6": {
            "name": "GET_CAM_SPLINE_NODE_INDEX",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xB22B17DF858716A6",
            "ns": "CAM",
            "jhash": "0xF8AEB6BD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB5349E36C546509A": {
            "name": "GET_CAM_SPLINE_PHASE",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "```\nCan use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.  \n(returns 1.0f when no nodes has been added, reached end of non existing spline)  \n```",
            "examples": [],
            "hash": "0xB5349E36C546509A",
            "ns": "CAM",
            "jhash": "0x39784DD9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x255F8DAFD540D397": {
            "name": "GET_CAM_FAR_DOF",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x255F8DAFD540D397",
            "ns": "CAM",
            "jhash": "0x98C5CCE9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDFC8CBC606FDB0FC": {
            "name": "GET_FINAL_RENDERED_CAM_FAR_CLIP",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xDFC8CBC606FDB0FC",
            "ns": "CAM",
            "aliases": ["0xDFC8CBC606FDB0FC", "_GET_GAMEPLAY_CAM_FAR_CLIP"],
            "jhash": "0x46CB3A49",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x77C3CEC46BE286F6": {
            "name": "_GET_DEBUG_CAMERA",
            "params": [],
            "results": "Cam",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x77C3CEC46BE286F6",
            "ns": "CAM",
            "aliases": ["0x77C3CEC46BE286F6"],
            "manualHash": true
        },
        "0x9780F32BCAF72431": {
            "name": "GET_FINAL_RENDERED_CAM_FAR_DOF",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x9780F32BCAF72431",
            "ns": "CAM",
            "aliases": ["0x9780F32BCAF72431", "_GET_GAMEPLAY_CAM_FAR_DOF"],
            "jhash": "0xF24777CA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7D304C1C955E3E12": {
            "name": "GET_CAM_ROT",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle."
                },
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "The order of rotation, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9)"
                }
            ],
            "results": "Vector3",
            "description": "Gets a camera's rotation by handle (`cam`) lookup, outputs a `Vector3` in degrees.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- We need a valid camera handle for this to work.\nlocal theCamHandle = CreateCam(\"DEFAULT_SCRIPTED_CAMERA\", true)\n\n-- Let's set the camera rotation for illustrative purposes\nSetCamRot(theCamHandle, 0.1, 0.2, 0.3, 0)\n\n-- We are now able to get the camera rotation.\nlocal camRot = GetCamRot(theCamHandle, 0) -- vector3(0.100000, 0.200000, 0.300000)\nCitizen.Trace(string.format(\"Cam Rotation is x: %f, y: %f, z: %f\", camRot.x, camRot.y, camRot.z))"
                }
            ],
            "hash": "0x7D304C1C955E3E12",
            "ns": "CAM",
            "jhash": "0xDAC84C9F",
            "manualHash": true,
            "resultsDescription": "A `Vector3` representing the camera rotation in degrees."
        },
        "0xD0082607100D7193": {
            "name": "GET_FINAL_RENDERED_CAM_NEAR_CLIP",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xD0082607100D7193",
            "ns": "CAM",
            "aliases": ["0xD0082607100D7193", "_GET_GAMEPLAY_CAM_NEAR_CLIP"],
            "jhash": "0x457AE195",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x80EC114669DAEFF4": {
            "name": "GET_FINAL_RENDERED_CAM_FOV",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x80EC114669DAEFF4",
            "ns": "CAM",
            "aliases": ["0x80EC114669DAEFF4"],
            "jhash": "0x721B763B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x162F9D995753DC19": {
            "name": "GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x162F9D995753DC19",
            "ns": "CAM",
            "aliases": ["0x162F9D995753DC19", "_GET_GAMEPLAY_CAM_FAR_CLIP_2"],
            "jhash": "0x38992E83",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEE778F8C7E1142E2": {
            "name": "GET_CAM_VIEW_MODE_FOR_CONTEXT",
            "params": [
                {
                    "name": "context",
                    "type": "int",
                    "description": "See [`_GET_CAM_ACTIVE_VIEW_MODE_CONTEXT`](#\\_0x19CAFA3C87F7C2FF)."
                }
            ],
            "results": "int",
            "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the view mode enum.",
            "examples": [],
            "hash": "0xEE778F8C7E1142E2",
            "ns": "CAM",
            "aliases": ["0xEE778F8C7E1142E2"],
            "jhash": "0xF3B148A6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B4E4C817FCC2DFB": {
            "name": "GET_FINAL_RENDERED_CAM_ROT",
            "params": [{ "name": "rotationOrder", "type": "int" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x5B4E4C817FCC2DFB",
            "ns": "CAM",
            "aliases": ["_GET_GAMEPLAY_CAM_ROT_2"],
            "jhash": "0x1FFBEFC5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA03502FC581F7D9B": {
            "name": "GET_FINAL_RENDERED_CAM_NEAR_DOF",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xA03502FC581F7D9B",
            "ns": "CAM",
            "aliases": ["0xA03502FC581F7D9B", "_GET_GAMEPLAY_CAM_NEAR_DOF"],
            "jhash": "0x19297A7A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x26903D9CD1175F2C": {
            "name": "GET_FINAL_RENDERED_IN_WHEN_FRIENDLY_ROT",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "rotationOrder", "type": "int" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x26903D9CD1175F2C",
            "ns": "CAM",
            "aliases": ["0x26903D9CD1175F2C"],
            "jhash": "0xACADF916",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA200EB1EE790F448": {
            "name": "GET_FINAL_RENDERED_CAM_COORD",
            "params": [],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xA200EB1EE790F448",
            "ns": "CAM",
            "aliases": ["_GET_GAMEPLAY_CAM_COORDS"],
            "jhash": "0x9C84BDA0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7EC52CC40597D170": {
            "name": "GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x7EC52CC40597D170",
            "ns": "CAM",
            "aliases": ["_GET_GAMEPLAY_CAM_ZOOM"],
            "jhash": "0x33951005",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x89215EC747DF244A": {
            "name": "GET_FOCUS_PED_ON_SCREEN",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "int" },
                { "name": "p8", "type": "int" }
            ],
            "results": "Ped",
            "description": "",
            "examples": [],
            "hash": "0x89215EC747DF244A",
            "ns": "CAM",
            "aliases": ["0x89215EC747DF244A"],
            "jhash": "0xFD99BE2B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5F35F6732C3FBBA0": {
            "name": "GET_FINAL_RENDERED_IN_WHEN_FRIENDLY_FOV",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x5F35F6732C3FBBA0",
            "ns": "CAM",
            "aliases": ["0x5F35F6732C3FBBA0"],
            "jhash": "0x23E3F106",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA4FF579AC0E3AAAE": {
            "name": "GET_FOLLOW_VEHICLE_CAM_VIEW_MODE",
            "params": [],
            "results": "int",
            "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum.",
            "examples": [],
            "hash": "0xA4FF579AC0E3AAAE",
            "ns": "CAM",
            "jhash": "0xA4B4DB03",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x33E6C8EFD0CD93E9": {
            "name": "GET_FOLLOW_PED_CAM_ZOOM_LEVEL",
            "params": [],
            "results": "int",
            "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum.",
            "examples": [],
            "hash": "0x33E6C8EFD0CD93E9",
            "ns": "CAM",
            "jhash": "0x57583DF1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEE82280AB767B690": {
            "name": "GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL",
            "params": [],
            "results": "int",
            "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum.",
            "examples": [],
            "hash": "0xEE82280AB767B690",
            "ns": "CAM",
            "jhash": "0x8CD67DE3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8D4D46230B2C353A": {
            "name": "GET_FOLLOW_PED_CAM_VIEW_MODE",
            "params": [],
            "results": "int",
            "description": "```cpp\n// view mode enumeration\nenum _0xA11D7CA8\n{\n\tTHIRD_PERSON_NEAR = 0,\n\tTHIRD_PERSON_MEDIUM = 1,\n\tTHIRD_PERSON_FAR = 2,\n\tCINEMATIC = 3,\n\tFIRST_PERSON = 4,\n};\n```",
            "examples": [],
            "hash": "0x8D4D46230B2C353A",
            "ns": "CAM",
            "jhash": "0xA65FF946",
            "manualHash": true,
            "resultsDescription": "Returns a value from the view mode enumeration"
        },
        "0x14D6F5678D8F1B37": {
            "name": "GET_GAMEPLAY_CAM_COORD",
            "params": [],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x14D6F5678D8F1B37",
            "ns": "CAM",
            "jhash": "0x9388CF79",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x65019750A0324133": {
            "name": "GET_GAMEPLAY_CAM_FOV",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x65019750A0324133",
            "ns": "CAM",
            "jhash": "0x4D6B3BFA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5234F9F10919EABA": {
            "name": "GET_RENDERING_CAM",
            "params": [],
            "results": "Cam",
            "description": "",
            "examples": [],
            "hash": "0x5234F9F10919EABA",
            "ns": "CAM",
            "jhash": "0x0FCF4DF1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A6867B4845BEDA2": {
            "name": "GET_GAMEPLAY_CAM_RELATIVE_PITCH",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local pitch = GetGameplayCamRelativePitch()\nprint(\"LocalPlayer pitch: \" .. pitch)"
                }
            ],
            "hash": "0x3A6867B4845BEDA2",
            "ns": "CAM",
            "jhash": "0xFC5A4946",
            "manualHash": true,
            "resultsDescription": "Returns the relative pitch of the gameplay camera"
        },
        "0x837765A25378F0BB": {
            "name": "GET_GAMEPLAY_CAM_ROT",
            "params": [
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "The order of rotation, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9)"
                }
            ],
            "results": "Vector3",
            "description": "This function takes a rotation order and outputs a `Vector3` in degrees.\n\nIt first calls a game function to calculate these values given the rotation order and effectively multiplies those values by `180/PI`, hence degrees since the function it calls outputs radians which are then converted to degrees.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local camRot = GetGameplayCamRot(0) -- vector3(-14.74518, 0.05254443, 95.24616)\nCitizen.Trace(string.format(\"Cam Rotation is x: %f, y: %f, z: %f\", camRot.x, camRot.y, camRot.z))"
                }
            ],
            "hash": "0x837765A25378F0BB",
            "ns": "CAM",
            "jhash": "0x13A010B5",
            "manualHash": true,
            "resultsDescription": "A `Vector3` representing the gameplay camera rotation in degrees."
        },
        "0x743607648ADD4587": {
            "name": "GET_GAMEPLAY_CAM_RELATIVE_HEADING",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x743607648ADD4587",
            "ns": "CAM",
            "jhash": "0xCAF839C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x74BD83EA840F6BC9": {
            "name": "_IS_AIM_CAM_THIRD_PERSON_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "```\nIS_A*\n```",
            "examples": [],
            "hash": "0x74BD83EA840F6BC9",
            "ns": "CAM",
            "aliases": ["0x74BD83EA840F6BC9"],
            "jhash": "0x8F320DE4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x68EDDA28A5976D07": {
            "name": "IS_AIM_CAM_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x68EDDA28A5976D07",
            "ns": "CAM",
            "jhash": "0xC24B4F6F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDFB2B516207D3534": {
            "name": "IS_CAM_ACTIVE",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "BOOL",
            "description": "```\nReturns whether or not the passed camera handle is active.  \n```",
            "examples": [],
            "hash": "0xDFB2B516207D3534",
            "ns": "CAM",
            "jhash": "0x4B58F177",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF4F2C0D4EE209E20": {
            "name": "INVALIDATE_IDLE_CAM",
            "params": [],
            "results": "void",
            "description": "Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n\twhile true do\n\t\tInvalidateIdleCam()\n\t\tInvalidateVehicleIdleCam()\n\t\tWait(1000) --The idle camera activates after 30 second so we don't need to call this per frame\n\tend\nend)"
                }
            ],
            "hash": "0xF4F2C0D4EE209E20",
            "ns": "CAM",
            "aliases": ["0xF4F2C0D4EE209E20"],
            "jhash": "0xD75CDD75",
            "manualHash": true
        },
        "0x9E4CFFF989258472": {
            "name": "_INVALIDATE_VEHICLE_IDLE_CAM",
            "params": [],
            "results": "void",
            "description": "Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n\twhile true do\n\t\tInvalidateIdleCam()\n\t\tInvalidateVehicleIdleCam()\n\t\tWait(1000) --The idle camera activates after 30 second so we don't need to call this per frame\n\tend\nend)"
                }
            ],
            "hash": "0x9E4CFFF989258472",
            "ns": "CAM",
            "aliases": ["0x9E4CFFF989258472"],
            "jhash": "0x65DDE8AF",
            "manualHash": true
        },
        "0x6B24BFE83A2BE47B": {
            "name": "IS_CAM_SHAKING",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6B24BFE83A2BE47B",
            "ns": "CAM",
            "jhash": "0x0961FD9B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x036F97C908C2B52C": {
            "name": "IS_CAM_INTERPOLATING",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x036F97C908C2B52C",
            "ns": "CAM",
            "jhash": "0x7159CB5D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD7360051C885628B": {
            "name": "IS_BONNET_CINEMATIC_CAM_RENDERING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD7360051C885628B",
            "ns": "CAM",
            "aliases": ["0xD7360051C885628B"],
            "jhash": "0x1DD55F13",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC90621D8A0CEECF2": {
            "name": "IS_CAM_PLAYING_ANIM",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "animName", "type": "char*" },
                { "name": "animDictionary", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0xC90621D8A0CEECF2",
            "ns": "CAM",
            "jhash": "0xB998CB49",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0290F35C0AD97864": {
            "name": "IS_CAM_SPLINE_PAUSED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0290F35C0AD97864",
            "ns": "CAM",
            "jhash": "0x60B34FF5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF5F1E89A970B7796": {
            "name": "IS_CINEMATIC_CAM_INPUT_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xF5F1E89A970B7796",
            "ns": "CAM",
            "aliases": ["0xF5F1E89A970B7796", "_IS_CINEMATIC_CAM_ACTIVE"],
            "jhash": "0x01A900C8",
            "manualHash": true
        },
        "0x02EC0AF5C5A49B7A": {
            "name": "IS_CAM_RENDERING",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x02EC0AF5C5A49B7A",
            "ns": "CAM",
            "jhash": "0x6EC6B5B2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA9D2AA3E326D720": {
            "name": "IS_CINEMATIC_IDLE_CAM_RENDERING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCA9D2AA3E326D720",
            "ns": "CAM",
            "aliases": ["0xCA9D2AA3E326D720"],
            "jhash": "0x96A07066",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCC9F3371A7C28BC9": {
            "name": "IS_CINEMATIC_SHOT_ACTIVE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCC9F3371A7C28BC9",
            "ns": "CAM",
            "jhash": "0xA4049042",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x016C090630DF1F89": {
            "name": "IS_GAMEPLAY_CAM_SHAKING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x016C090630DF1F89",
            "ns": "CAM",
            "jhash": "0x3457D681",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB15162CB5826E9E8": {
            "name": "IS_CINEMATIC_CAM_RENDERING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB15162CB5826E9E8",
            "ns": "CAM",
            "jhash": "0x80471AD9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCBBDE6D335D6D496": {
            "name": "IS_FOLLOW_VEHICLE_CAM_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCBBDE6D335D6D496",
            "ns": "CAM",
            "jhash": "0x8DD49B77",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBBC08F6B4CB8FF0A": {
            "name": "IS_CINEMATIC_CAM_SHAKING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBBC08F6B4CB8FF0A",
            "ns": "CAM",
            "jhash": "0x8376D939",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5E346D934122613F": {
            "name": "IS_FIRST_PERSON_AIM_CAM_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5E346D934122613F",
            "ns": "CAM",
            "jhash": "0xD6280468",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE520FF1AD2785B40": {
            "name": "IS_GAMEPLAY_HINT_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE520FF1AD2785B40",
            "ns": "CAM",
            "jhash": "0xAD8DA205",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5A859503B0C08678": {
            "name": "IS_SCREEN_FADED_IN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5A859503B0C08678",
            "ns": "CAM",
            "jhash": "0x4F37276D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x39B5D1B10383F0C8": {
            "name": "IS_GAMEPLAY_CAM_RENDERING",
            "params": [],
            "results": "BOOL",
            "description": "```\nExamples when this function will return 0 are:\n- During busted screen.\n- When player is coming out from a hospital.\n- When player is coming out from a police station.\n- When player is buying gun from AmmuNation.\n```",
            "examples": [],
            "hash": "0x39B5D1B10383F0C8",
            "ns": "CAM",
            "jhash": "0x0EF276DA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x797AC7CB535BA28F": {
            "name": "IS_SCREEN_FADING_OUT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x797AC7CB535BA28F",
            "ns": "CAM",
            "jhash": "0x79275A57",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5C544BC6C57AC575": {
            "name": "IS_SCREEN_FADING_IN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5C544BC6C57AC575",
            "ns": "CAM",
            "jhash": "0xC7C82800",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x12DED8CA53D47EA5": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "```\nHardcoded to only work in multiplayer.  \n```",
            "examples": [],
            "hash": "0x12DED8CA53D47EA5",
            "ns": "CAM",
            "jhash": "0x067BA6F5",
            "manualHash": true
        },
        "0xC6D3D26810C8E0F9": {
            "name": "IS_FOLLOW_PED_CAM_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC6D3D26810C8E0F9",
            "ns": "CAM",
            "jhash": "0x9F9E856C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4F32C0D5A90A9B40": {
            "name": "_IS_IN_VEHICLE_CAM_DISABLED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4F32C0D5A90A9B40",
            "ns": "CAM",
            "aliases": ["0x4F32C0D5A90A9B40"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x70FDA869F3317EA9": {
            "name": "IS_GAMEPLAY_CAM_LOOKING_BEHIND",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x70FDA869F3317EA9",
            "ns": "CAM",
            "jhash": "0x33C83F17",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE33D59DA70B58FDF": {
            "name": "IS_SPHERE_VISIBLE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE33D59DA70B58FDF",
            "ns": "CAM",
            "jhash": "0xDD1329E2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB16FCE9DDC7BA182": {
            "name": "IS_SCREEN_FADED_OUT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB16FCE9DDC7BA182",
            "ns": "CAM",
            "jhash": "0x9CAA05FA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC912AF078AF19212": {
            "name": "IS_SCRIPT_GLOBAL_SHAKING",
            "params": [],
            "results": "BOOL",
            "description": "```\nIn drunk_controller.c4, sub_309\nif (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {\n    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);\n}\n```",
            "examples": [],
            "hash": "0xC912AF078AF19212",
            "ns": "CAM",
            "aliases": ["0xC912AF078AF19212"],
            "jhash": "0x6AEFE6A5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0225778816FDC28C": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "```\nsome camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. Possibly a cinematic or script-cam version of _0x487A82C650EB7799  \n```",
            "examples": [],
            "hash": "0x0225778816FDC28C",
            "ns": "CAM",
            "jhash": "0x1126E37C",
            "manualHash": true
        },
        "0x17FCA7199A530203": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x17FCA7199A530203",
            "ns": "CAM",
            "jhash": "0xF26E339C",
            "manualHash": true
        },
        "0x0AA27680A0BD43FA": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0AA27680A0BD43FA",
            "ns": "CAM",
            "manualHash": true
        },
        "0x247ACBC4ABBC9D1C": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x247ACBC4ABBC9D1C",
            "ns": "CAM",
            "manualHash": true
        },
        "0x1F2300CB7FA7B7F6": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x1F2300CB7FA7B7F6",
            "ns": "CAM",
            "jhash": "0x6739AD55",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3044240D2E0FA842": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3044240D2E0FA842",
            "ns": "CAM",
            "jhash": "0xC0B00C20",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x324C5AA411DA7737": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x324C5AA411DA7737",
            "ns": "CAM",
            "manualHash": true
        },
        "0x202A5ED9CE01D6E7": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x202A5ED9CE01D6E7",
            "ns": "CAM",
            "manualHash": true
        },
        "0x271401846BD26E92": {
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x271401846BD26E92",
            "ns": "CAM",
            "jhash": "0x8DC53629",
            "manualHash": true
        },
        "0x28B022A17B068A3A": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "F\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x28B022A17B068A3A",
            "ns": "CAM",
            "manualHash": true
        },
        "0x469F2ECDEC046337": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x469F2ECDEC046337",
            "ns": "CAM",
            "manualHash": true
        },
        "0x4008EDF7D6E48175": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4008EDF7D6E48175",
            "ns": "CAM",
            "jhash": "0xD1EEBC45",
            "manualHash": true
        },
        "0x380B4968D1E09E55": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x380B4968D1E09E55",
            "ns": "CAM",
            "manualHash": true
        },
        "0x271017B9BA825366": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x271017B9BA825366",
            "ns": "CAM",
            "jhash": "0x43220969",
            "manualHash": true
        },
        "0x59424BD75174C9B1": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x59424BD75174C9B1",
            "ns": "CAM",
            "manualHash": true
        },
        "0x4879E4FE39074CDF": {
            "params": [],
            "results": "BOOL",
            "description": "```\nA*\n```",
            "examples": [],
            "hash": "0x4879E4FE39074CDF",
            "ns": "CAM",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5D96CFB59DA076A0": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "p1: 0..16\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x5D96CFB59DA076A0",
            "ns": "CAM",
            "manualHash": true
        },
        "0x2F7F2B26DD3F18EE": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F7F2B26DD3F18EE",
            "ns": "CAM",
            "jhash": "0x2F29F0D5",
            "manualHash": true
        },
        "0x5C41E6BABC9E2112": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5C41E6BABC9E2112",
            "ns": "CAM",
            "manualHash": true
        },
        "0x5C48A1D6E3B33179": {
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "BOOL",
            "description": "```\nW*\n```",
            "examples": [],
            "hash": "0x5C48A1D6E3B33179",
            "ns": "CAM",
            "jhash": "0xDA931D65",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x62374889A4D59F72": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x62374889A4D59F72",
            "ns": "CAM",
            "manualHash": true
        },
        "0x5A43C76F7FC7BA5F": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5A43C76F7FC7BA5F",
            "ns": "CAM",
            "jhash": "0xE206C450",
            "manualHash": true
        },
        "0x705A276EBFF3133D": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x705A276EBFF3133D",
            "ns": "CAM",
            "jhash": "0x60C23785",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x62ECFCFDEE7885D6": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x62ECFCFDEE7885D6",
            "ns": "CAM",
            "jhash": "0x837F8581",
            "manualHash": true
        },
        "0x661B5C8654ADD825": {
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_CAM_*\n```",
            "examples": [],
            "hash": "0x661B5C8654ADD825",
            "ns": "CAM",
            "jhash": "0xE1A0B2F1",
            "manualHash": true
        },
        "0x91EF6EE6419E5B97": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x91EF6EE6419E5B97",
            "ns": "CAM",
            "jhash": "0x9DB5D391",
            "manualHash": true
        },
        "0x7295C203DD659DFE": {
            "params": [],
            "results": "void",
            "description": "```\n_RESET_*\n\n_RESET_GAMEPLAY_CAM_RELATIVE_ORBIT_HOLD_TIME?\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x7295C203DD659DFE",
            "ns": "CAM",
            "manualHash": true
        },
        "0x9F97DA93681F87EA": {
            "params": [],
            "results": "void",
            "description": "B\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x9F97DA93681F87EA",
            "ns": "CAM",
            "manualHash": true
        },
        "0x7B8A361C1813FBEF": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7B8A361C1813FBEF",
            "ns": "CAM",
            "manualHash": true
        },
        "0xBF72910D0F26F025": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xBF72910D0F26F025",
            "ns": "CAM",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA2767257A320FC82": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA2767257A320FC82",
            "ns": "CAM",
            "manualHash": true
        },
        "0xA7092AFE81944852": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xA7092AFE81944852",
            "ns": "CAM",
            "manualHash": true
        },
        "0x9DFE13ECDC1EC196": {
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_FOLLOW_*\n```",
            "examples": [],
            "hash": "0x9DFE13ECDC1EC196",
            "ns": "CAM",
            "aliases": ["SET_TIME_IDLE_DROP"],
            "jhash": "0x92302899",
            "manualHash": true
        },
        "0xC8B5C4A79CC18B94": {
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC8B5C4A79CC18B94",
            "ns": "CAM",
            "jhash": "0x44473EFC",
            "manualHash": true
        },
        "0xC8391C309684595A": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC8391C309684595A",
            "ns": "CAM",
            "jhash": "0x1F9DE6E4",
            "manualHash": true
        },
        "0xB1381B97F70C7B30": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xB1381B97F70C7B30",
            "ns": "CAM",
            "manualHash": true
        },
        "0xAABD62873FFB1A33": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xAABD62873FFB1A33",
            "ns": "CAM",
            "manualHash": true
        },
        "0xDB90C6CCA48940F1": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDB90C6CCA48940F1",
            "ns": "CAM",
            "jhash": "0x20BFF6E5",
            "manualHash": true
        },
        "0xCCD078C2665D2973": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xCCD078C2665D2973",
            "ns": "CAM",
            "jhash": "0xCAFEE798",
            "manualHash": true
        },
        "0xCED08CBE8EBB97C7": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCED08CBE8EBB97C7",
            "ns": "CAM",
            "jhash": "0x68BA0730",
            "manualHash": true
        },
        "0xDD79DF9F4D26E1C9": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDD79DF9F4D26E1C9",
            "ns": "CAM",
            "jhash": "0x6B0E9D57",
            "manualHash": true
        },
        "0xE111A7C0D200CBC5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE111A7C0D200CBC5",
            "ns": "CAM",
            "manualHash": true
        },
        "0xF55E4046F6F831DC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF55E4046F6F831DC",
            "ns": "CAM",
            "manualHash": true
        },
        "0xEAF0FA793D05C592": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xEAF0FA793D05C592",
            "ns": "CAM",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7DCF7C708D292D55": {
            "name": "OVERRIDE_CAM_SPLINE_MOTION_BLUR",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "```\nMax value for p1 is 15.  \n```",
            "examples": [],
            "hash": "0x7DCF7C708D292D55",
            "ns": "CAM",
            "jhash": "0x633179E6",
            "manualHash": true
        },
        "0xFD3151CD37EA2245": {
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFD3151CD37EA2245",
            "ns": "CAM",
            "manualHash": true
        },
        "0xF75497BB865F0803": {
            "name": "POINT_CAM_AT_COORD",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local coords = vector3(402.99, -998.02, -99.00)\nlocal cam = CreateCamWithParams(\"DEFAULT_SCRIPTED_CAMERA\", coords.x, coords.y, coords.z, 0.00, 0.00, 0.00, 50.00, false, 0)\nPointCamAtCoord(cam, coords.x, coords.y, coords.z)"
                }
            ],
            "hash": "0xF75497BB865F0803",
            "ns": "CAM",
            "jhash": "0x914BC21A",
            "manualHash": true
        },
        "0xE32EFE9AB4A9AA0C": {
            "name": "PLAY_SYNCHRONIZED_CAM_ANIM",
            "params": [
                { "name": "camera", "type": "Cam" },
                { "name": "scene", "type": "int" },
                { "name": "animName", "type": "char*" },
                { "name": "animDictionary", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nExamples:  \nCAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), \"PLAYER_EXIT_L_CAM\", \"mp_doorbell\");  \nCAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/*1*/], l_F4D[15/*1*/], \"ah3b_attackheli_cam2\", \"missheistfbi3b_helicrash\");  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0xE32EFE9AB4A9AA0C",
            "ns": "CAM",
            "jhash": "0x9458459E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x40B62FA033EB0346": {
            "name": "OVERRIDE_CAM_SPLINE_VELOCITY",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x40B62FA033EB0346",
            "ns": "CAM",
            "jhash": "0x326A17E2",
            "manualHash": true
        },
        "0x5640BFF86B16E8DC": {
            "name": "POINT_CAM_AT_ENTITY",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "Cam (Return value of CREATE_CAM or CREATE_CAM_WITH_PARAMS)."
                },
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "Entity for the camera to point at."
                },
                {
                    "name": "offsetX",
                    "type": "float",
                    "description": "X offset for the camera (left/right)."
                },
                {
                    "name": "offsetY",
                    "type": "float",
                    "description": "Y offset for the camera (forward/backward)."
                },
                {
                    "name": "offsetZ",
                    "type": "float",
                    "description": "Z offset for the camera (up/down)."
                },
                {
                    "name": "p5",
                    "type": "BOOL",
                    "description": "Always seems to be 1 (true)."
                }
            ],
            "results": "void",
            "description": "Points the camera at the specified entity.\n\nOffset works like [GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS](#\\_0x1899F328B0E12848).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local cam = CreateCameraWithParams(\"DEFAULT_SCRIPTED_CAMERA\", GetEntityCoords(PlayerPedId()), 0.0, 0.0, 0.0, 90.0, true, 2)\nPointCamAtEntity(cam, PlayerPedId(), 0.0, 0.0, 0.0, true)\nRenderScriptCams(true, false, 0, true, true)"
                }
            ],
            "hash": "0x5640BFF86B16E8DC",
            "ns": "CAM",
            "jhash": "0x7597A0F7",
            "manualHash": true
        },
        "0x68B2B5F33BA63C41": {
            "name": "POINT_CAM_AT_PED_BONE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "ped", "type": "Ped" },
                { "name": "boneIndex", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nParameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.  \n```",
            "examples": [],
            "hash": "0x68B2B5F33BA63C41",
            "ns": "CAM",
            "jhash": "0x09F47049",
            "manualHash": true
        },
        "0x07E5B515DB0636FC": {
            "name": "RENDER_SCRIPT_CAMS",
            "params": [
                { "name": "render", "type": "BOOL" },
                { "name": "ease", "type": "BOOL" },
                { "name": "easeTime", "type": "int" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nease - smooth transition between the camera's positions  \neaseTime - Time in milliseconds for the transition to happen  \nIf you have created a script (rendering) camera, and want to go back to the   \ncharacter (gameplay) camera, call this native with render set to 0.  \nSetting ease to 1 will smooth the transition.  \n```\n\n```\nNativeDB Added Parameter 6: Any p5\n```",
            "examples": [],
            "hash": "0x07E5B515DB0636FC",
            "ns": "CAM",
            "jhash": "0x74337969",
            "manualHash": true
        },
        "0x9A2D0FB2E7852392": {
            "name": "PLAY_CAM_ANIM",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "animName", "type": "char*" },
                { "name": "animDictionary", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "p9", "type": "BOOL" },
                { "name": "p10", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nAtleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.  \np9 is unknown at this time.  \np10 throughout all the X360 Scripts is always 2.  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x9A2D0FB2E7852392",
            "ns": "CAM",
            "jhash": "0xBCEFB87E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x026FB97D0A425F84": {
            "name": "SET_CAM_ACTIVE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "active", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSet camera as active/inactive.  \n```",
            "examples": [],
            "hash": "0x026FB97D0A425F84",
            "ns": "CAM",
            "jhash": "0x064659C2",
            "manualHash": true
        },
        "0x9FBDA379383A52A4": {
            "name": "SET_CAM_ACTIVE_WITH_INTERP",
            "params": [
                { "name": "camTo", "type": "Cam" },
                { "name": "camFrom", "type": "Cam" },
                { "name": "duration", "type": "int" },
                { "name": "easeLocation", "type": "int" },
                { "name": "easeRotation", "type": "int" }
            ],
            "results": "void",
            "description": "```\nPrevious declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...  \n```",
            "examples": [],
            "hash": "0x9FBDA379383A52A4",
            "ns": "CAM",
            "jhash": "0x7983E7F0",
            "manualHash": true
        },
        "0x8BFCEB5EA1B161B6": {
            "name": "_REPLAY_FREE_CAM_GET_MAX_RANGE",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x8BFCEB5EA1B161B6",
            "ns": "CAM",
            "aliases": ["0x8BFCEB5EA1B161B6"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4145A4C44FF3B5A6": {
            "name": "SET_CAM_ANIM_CURRENT_PHASE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "phase", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4145A4C44FF3B5A6",
            "ns": "CAM",
            "jhash": "0x3CB1D17F",
            "manualHash": true
        },
        "0x1B93E0107865DD40": {
            "name": "SET_CAM_DEBUG_NAME",
            "params": [
                { "name": "camera", "type": "Cam" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0x1B93E0107865DD40",
            "ns": "CAM",
            "jhash": "0x9B00DF3F",
            "manualHash": true
        },
        "0x4D41783FB745E42E": {
            "name": "SET_CAM_COORD",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets the position of the cam.  \n```",
            "examples": [],
            "hash": "0x4D41783FB745E42E",
            "ns": "CAM",
            "jhash": "0x7A8053AF",
            "manualHash": true
        },
        "0x7DD234D6F3914C5B": {
            "name": "_SET_CAM_DOF_FNUMBER_OF_LENS",
            "params": [
                { "name": "camera", "type": "Cam" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThis native has its name defined inside its codE  \n```",
            "examples": [],
            "hash": "0x7DD234D6F3914C5B",
            "ns": "CAM",
            "aliases": ["0x7DD234D6F3914C5B"],
            "manualHash": true
        },
        "0x8C1DC7770C51DC8D": {
            "name": "SET_CAM_AFFECTS_AIMING",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAllows you to aim and shoot at the direction the camera is facing.  \n```",
            "examples": [],
            "hash": "0x8C1DC7770C51DC8D",
            "ns": "CAM",
            "jhash": "0x0C74F9AF",
            "manualHash": true
        },
        "0xC669EEA5D031B7DE": {
            "name": "_SET_CAM_DOF_FOCUS_DISTANCE_BIAS",
            "params": [
                { "name": "camera", "type": "Cam" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThis native has a name defined inside its code  \n```",
            "examples": [],
            "hash": "0xC669EEA5D031B7DE",
            "ns": "CAM",
            "aliases": ["0xC669EEA5D031B7DE"],
            "manualHash": true
        },
        "0xC3654A441402562D": {
            "name": "_SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE",
            "params": [
                { "name": "camera", "type": "Cam" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThis native has a name defined inside its code  \n```",
            "examples": [],
            "hash": "0xC3654A441402562D",
            "ns": "CAM",
            "aliases": ["0xC3654A441402562D"],
            "manualHash": true
        },
        "0x47B595D60664CFFA": {
            "name": "_SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER",
            "params": [
                { "name": "camera", "type": "Cam" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNative name labeled within its code\n```",
            "examples": [],
            "hash": "0x47B595D60664CFFA",
            "ns": "CAM",
            "aliases": ["0x47B595D60664CFFA"],
            "manualHash": true
        },
        "0x2C654B4943BDDF7C": {
            "name": "_SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL",
            "params": [
                { "name": "camera", "type": "Cam" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThis native has a name defined inside its code  \n```",
            "examples": [],
            "hash": "0x2C654B4943BDDF7C",
            "ns": "CAM",
            "aliases": ["0x2C654B4943BDDF7C"],
            "manualHash": true
        },
        "0x5EE29B4D7D5DF897": {
            "name": "SET_CAM_DOF_STRENGTH",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle"
                },
                {
                    "name": "dofStrength",
                    "type": "float",
                    "description": "Depth of Field strength (between 0.0 and 1.0)"
                }
            ],
            "results": "void",
            "description": "Specifies how much the DoF effect should be applied (Set using [`SET_CAM_NEAR_DOF`](#\\_0x3FA4BF0A7AB7DE2C), [`SET_CAM_FAR_DOF`](#\\_0xEDD91296CD01AEE0), etc.)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\n    local camera = CreateCam(\"DEFAULT_SCRIPTED_FLY_CAMERA\", true)\n    -- Set the cam coordinates to the player coords\n    local playerCoords = GetEntityCoords(PlayerPedId())\n    SetCamCoord(camera, playerCoords)\n    -- Render the camera we just created\n    RenderScriptCams(true)\n    -- Use a shallow depth of field\n    SetCamUseShallowDofMode(camera, true)\n    -- Set at what distance your camera should start to focus (Example: 0.7 meters)\n    SetCamNearDof(camera, 0.7)\n    -- Set at what distance your camera should stop focusing (Example: 1.3 meters)\n    SetCamFarDof(camera, 1.3)\n    -- Apply 100% of the DoF effect (The native you're reading documentation on)\n    SetCamDofStrength(camera, 1.0)\n\n    while DoesCamExist(camera) do\n        -- Use DoF effect (needs to be called every tick)\n        SetUseHiDof()\n        Citizen.Wait(0)  \n    end\nend)"
                }
            ],
            "hash": "0x5EE29B4D7D5DF897",
            "ns": "CAM",
            "jhash": "0x3CC4EB3F",
            "manualHash": true
        },
        "0x80C8B1846639BB19": {
            "name": "_SET_CAM_EFFECT",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "```\nif p0 is 0, effect is cancelled  \nif p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.  \nif p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.  \n```",
            "examples": [],
            "hash": "0x80C8B1846639BB19",
            "ns": "CAM",
            "jhash": "0xB06CCD38",
            "manualHash": true
        },
        "0x3CF48F6F96E749DC": {
            "name": "SET_CAM_DOF_PLANES",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3CF48F6F96E749DC",
            "ns": "CAM",
            "jhash": "0xAD6C2B8F",
            "manualHash": true
        },
        "0x45F1DE9C34B93AE6": {
            "name": "SET_CAM_INHERIT_ROLL_VEHICLE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThe native seems to only be called once.  \nThe native is used as so,  \nCAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));  \nIn the exile1 script.  \n```",
            "examples": [],
            "hash": "0x45F1DE9C34B93AE6",
            "ns": "CAM",
            "jhash": "0xE4BD5342",
            "manualHash": true
        },
        "0x6F0F77FBA9A8F2E6": {
            "name": "SET_CAM_MOTION_BLUR_STRENGTH",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "strength", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6F0F77FBA9A8F2E6",
            "ns": "CAM",
            "jhash": "0xFD6E0D67",
            "manualHash": true
        },
        "0xB13C14F66A00D047": {
            "name": "SET_CAM_FOV",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "fieldOfView", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets the field of view of the cam.  \n---------------------------------------------  \nMin: 1.0f  \nMax: 130.0f  \n```",
            "examples": [],
            "hash": "0xB13C14F66A00D047",
            "ns": "CAM",
            "jhash": "0xD3D5D74F",
            "manualHash": true
        },
        "0xAE306F2A904BF86E": {
            "name": "SET_CAM_FAR_CLIP",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "farClip", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAE306F2A904BF86E",
            "ns": "CAM",
            "jhash": "0x0D23E381",
            "manualHash": true
        },
        "0x85973643155D0B07": {
            "name": "SET_CAM_ROT",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle to use, in order to change the rotation"
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "Rotation on X"
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "Rotation on Y"
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "Rotation on Z"
                },
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "The order of rotation, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9)"
                }
            ],
            "results": "void",
            "description": "Sets the rotation of the camera.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- We need a valid camera handle for this to work.\nlocal theCamHandle = CreateCam(\"DEFAULT_SCRIPTED_CAMERA\", true)\nSetCamRot(theCamHandle, 0.1, 0.2, 0.3, 0)"
                }
            ],
            "hash": "0x85973643155D0B07",
            "ns": "CAM",
            "jhash": "0xEE38B3C1",
            "manualHash": true
        },
        "0xBFD8727AEA3CCEBA": {
            "name": "SET_CAM_PARAMS",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "fieldOfView", "type": "float" },
                {
                    "name": "transitionSpeed",
                    "type": "int",
                    "description": "The speed of transition/interpolation to these new values"
                },
                { "name": "p9", "type": "int" },
                { "name": "p10", "type": "int" },
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "The order of rotation, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9)"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This is recreating the above mentioned heli transition from finale_heist2a.c\n  local cam = CreateCameraWithParams('DEFAULT_SCRIPTED_CAMERA', -1659.574, -707.8544, 29.23778, -7.422939, 0.059666, -117.3886, 43.0557, false, 2)\nSetCamActive(cam, true)\nRenderScriptCams(true, false, 3000, true, false, false)\nSetCamParams(cam, -1660.919, -710.7487, 28.88381, -7.50235, 0.059666, -111.7328, 43.0557, 9100, 0, 0, 2);"
                },
                {
                    "lang": "js",
                    "code": "// This is recreating the above mentioned heli transition from finale_heist2a.c\nlet cam = CreateCameraWithParams('DEFAULT_SCRIPTED_CAMERA', -1659.574, -707.8544, 29.23778, -7.422939, 0.059666, -117.3886, 43.0557, false, 2)\nSetCamActive(cam, true)\nRenderScriptCams(true, false, 3000, true, false, false)\nSetCamParams(cam, -1660.919, -710.7487, 28.88381, -7.50235, 0.059666, -111.7328, 43.0557, 9100, 0, 0, 2);"
                }
            ],
            "hash": "0xBFD8727AEA3CCEBA",
            "ns": "CAM",
            "jhash": "0x2167CEBF",
            "manualHash": true
        },
        "0x3FA4BF0A7AB7DE2C": {
            "name": "SET_CAM_NEAR_DOF",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle"
                },
                {
                    "name": "nearDOF",
                    "type": "float",
                    "description": "Distance in in standard units"
                }
            ],
            "results": "void",
            "description": "Specifies when the camera should start being in focus. Can be used together with [`SET_USE_HI_DOF`](#\\_0xA13B0222F3D94A94), [`SET_CAM_FAR_DOF`](#\\_0xEDD91296CD01AEE0), [`SET_CAM_USE_SHALLOW_DOF_MODE`](#\\_0x16A96863A17552BB), [`SET_CAM_DOF_STRENGTH`](#\\_0x5EE29B4D7D5DF897) and other DoF related natives.\n\n### Usage Example\n\nA usage example for this native can be found in the following native documentation: [`SET_CAM_DOF_STRENGTH`](#\\_0x5EE29B4D7D5DF897).",
            "examples": [],
            "hash": "0x3FA4BF0A7AB7DE2C",
            "ns": "CAM",
            "jhash": "0xF28254DF",
            "manualHash": true
        },
        "0xD93DB43B82BC0D00": {
            "name": "SET_CAM_SHAKE_AMPLITUDE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "amplitude", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD93DB43B82BC0D00",
            "ns": "CAM",
            "jhash": "0x60FF6382",
            "manualHash": true
        },
        "0x83B8201ED82A9A2D": {
            "name": "SET_CAM_SPLINE_NODE_EASE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x83B8201ED82A9A2D",
            "ns": "CAM",
            "aliases": ["0x83B8201ED82A9A2D"],
            "jhash": "0x21D275DA",
            "manualHash": true
        },
        "0xEDD91296CD01AEE0": {
            "name": "SET_CAM_FAR_DOF",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle"
                },
                {
                    "name": "farDOF",
                    "type": "float",
                    "description": "Distance in in standard units"
                }
            ],
            "results": "void",
            "description": "Specifies when the camera should stop being in focus. Can be used together with [`SET_USE_HI_DOF`](#\\_0xA13B0222F3D94A94), [`SET_CAM_NEAR_DOF`](#\\_0x3FA4BF0A7AB7DE2C), [`SET_CAM_USE_SHALLOW_DOF_MODE`](#\\_0x16A96863A17552BB), [`SET_CAM_DOF_STRENGTH`](#\\_0x5EE29B4D7D5DF897) and other DoF related natives.\n\n### Usage Example\n\nA usage example for this native can be found in the following native documentation: [`SET_CAM_DOF_STRENGTH`](#\\_0x5EE29B4D7D5DF897).",
            "examples": [],
            "hash": "0xEDD91296CD01AEE0",
            "ns": "CAM",
            "jhash": "0x58515E8E",
            "manualHash": true
        },
        "0x7BF1A54AE67AC070": {
            "name": "SET_CAM_SPLINE_NODE_EXTRA_FLAGS",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "int" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7BF1A54AE67AC070",
            "ns": "CAM",
            "aliases": ["0x7BF1A54AE67AC070"],
            "jhash": "0xC90B2DDC",
            "manualHash": true
        },
        "0xC7848EFCCC545182": {
            "name": "SET_CAM_NEAR_CLIP",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "nearClip", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC7848EFCCC545182",
            "ns": "CAM",
            "jhash": "0x46DB13B1",
            "manualHash": true
        },
        "0xA6385DEB180F319F": {
            "name": "SET_CAM_SPLINE_NODE_VELOCITY_SCALE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "int" },
                { "name": "scale", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA6385DEB180F319F",
            "ns": "CAM",
            "aliases": ["0xA6385DEB180F319F"],
            "jhash": "0xA3BD9E94",
            "manualHash": true
        },
        "0x1381539FEE034CDA": {
            "name": "SET_CAM_SPLINE_DURATION",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "timeDuration", "type": "int" }
            ],
            "results": "void",
            "description": "```\nI named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.  \n```",
            "examples": [],
            "hash": "0x1381539FEE034CDA",
            "ns": "CAM",
            "jhash": "0x3E91FC8A",
            "manualHash": true
        },
        "0x242B5874F0A4E052": {
            "name": "SET_CAM_SPLINE_PHASE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x242B5874F0A4E052",
            "ns": "CAM",
            "jhash": "0xF0AED233",
            "manualHash": true
        },
        "0x16A96863A17552BB": {
            "name": "SET_CAM_USE_SHALLOW_DOF_MODE",
            "params": [
                {
                    "name": "cam",
                    "type": "Cam",
                    "description": "The camera handle"
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Boolean if the camera should use a shallow depth of field or not"
                }
            ],
            "results": "void",
            "description": "Enables or disables the usage of a shallow DOF. Needs to be set to true to use [`SET_CAM_NEAR_DOF`](#\\_0x3FA4BF0A7AB7DE2C), [`SET_CAM_FAR_DOF`](#\\_0xEDD91296CD01AEE0), etc. Doesn't need to be called every tick.\n\n### Usage Example\n\nA usage example for this native can be found in the following native documentation: [`SET_CAM_DOF_STRENGTH`](#\\_0x5EE29B4D7D5DF897).",
            "examples": [],
            "hash": "0x16A96863A17552BB",
            "ns": "CAM",
            "jhash": "0x8306C256",
            "manualHash": true
        },
        "0xD1B0F412F109EA5D": {
            "name": "SET_CAM_SPLINE_SMOOTHING_STYLE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "smoothingStyle", "type": "int" }
            ],
            "results": "void",
            "description": "Sets the smoothing style for a DEFAULT_SPLINE_CAMERA\nRanges from 0 to 3 in rockstar scripts although there are actually 26\n\n```\n0: No lead-in or lead-out smoothing\n1: Smooth lead-in\n2: Smooth lead-out\n3: Both lead-in and lead-out are smoothed\n4-6: Longer speed up, lead-in, lead-out, and both in order as above. \n6: see above, but missed a node in testing(?)\n7: Smoothed lead-in, longer smoothed lead-out\n8: Longer lead-in and lead-out than 6, didn't drop node\n9: Constant acceleration\n10: Constant deceleration. Dropped 2 nodes in testing.\n11: Same as 0\n12: 10 but slower lead-in, reaches end node less early\n13: Extremely close to 3, slightly longer lead-in/lead-out\n14: Constant acceleration, dropped last 2 nodes in testing and halted (?)\n15: Very similar to 10, did not drop any nodes.\n16: Long lead-in, dropped 2 nodes in testing, very long leadout.\n17: Constant acceleration, slower speed-up than 9\n18: Same as 17 is to 9, slightly longer lead-out, lingers at end node\n19: Very long lead in and out\n20: Very long, gradual lead-in acceleration at start, gets extremely fast\n21: Same as 20 but for constant deceleration\n22: 20 and 21 combined, long linger at end node. Dropped 2 nodes in testing\n23: Constant acceleration, doesn't complete path before it stops\n24: Same as 23 but with constant deceleration, but completes path\n25: 23 and 24 combined, insanely fast at middle.\n26: No noticable lead-in, misses last 2 nodes in testing\n27+: Alternates between 0 and 26\n```\n\nThe above is documented and graphed at [Spline Cam Interp Graphs](https://docs.google.com/spreadsheets/d/1ejyiMcEYrhhQOL0mLe8664UN-vU4Oh-SBqQnVcKlFIk/edit?usp=sharing)\n\n```\n\nUsing 1-3 will result in misalignment from the passed durations for the spline nodes, the overall duration will remain but other nodes will be shortened if smoothing anything.\n\nGraph below demonstrates interpolation between 0-1000 and back 10 times.\n\n![](https://i.imgur.com/cixWh7m.png)\n\n## Parameters\n* **cam**: The DEFAULT_SPLINE_CAMERA to apply the smoothing to\n* **smoothingStyle**: 0 to 3, 0 no additional smoothing, 1 smooth lead-in, 2 smooth lead-out, 3 smooth lead-in & lead-out\n```",
            "examples": [],
            "hash": "0xD1B0F412F109EA5D",
            "ns": "CAM",
            "aliases": ["0xD1B0F412F109EA5D"],
            "jhash": "0x15E141CE",
            "manualHash": true
        },
        "0xC724C701C30B2FE7": {
            "name": "SET_CINEMATIC_CAM_SHAKE_AMPLITUDE",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC724C701C30B2FE7",
            "ns": "CAM",
            "jhash": "0x67510C4B",
            "manualHash": true
        },
        "0x51669F7D1FB53D9F": {
            "name": "SET_CINEMATIC_BUTTON_ACTIVE",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x51669F7D1FB53D9F",
            "ns": "CAM",
            "jhash": "0x3FBC5D00",
            "manualHash": true
        },
        "0xDCF0754AC3D6FD4E": {
            "name": "SET_CINEMATIC_MODE_ACTIVE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nToggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.\n```",
            "examples": [],
            "hash": "0xDCF0754AC3D6FD4E",
            "ns": "CAM",
            "jhash": "0x2009E747",
            "manualHash": true
        },
        "0x2A2173E46DAECD12": {
            "name": "SET_CAM_VIEW_MODE_FOR_CONTEXT",
            "params": [
                {
                    "name": "context",
                    "type": "int",
                    "description": "The view context; see [`_GET_CAM_ACTIVE_VIEW_MODE_CONTEXT`](#\\_0x19CAFA3C87F7C2FF)."
                },
                {
                    "name": "viewMode",
                    "type": "int",
                    "description": "The view mode; see [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A)."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A2173E46DAECD12",
            "ns": "CAM",
            "aliases": ["0x2A2173E46DAECD12"],
            "jhash": "0x1DEBCB45",
            "manualHash": true
        },
        "0x0AF7B437918103B3": {
            "name": "SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE",
            "params": [{ "name": "distance", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0AF7B437918103B3",
            "ns": "CAM",
            "aliases": [
                "0x0AF7B437918103B3",
                "_SET_FIRST_PERSON_CAM_NEAR_CLIP"
            ],
            "jhash": "0x0E21069D",
            "manualHash": true
        },
        "0x70894BD0915C5BCA": {
            "name": "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR",
            "params": [{ "name": "zoomFactor", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x70894BD0915C5BCA",
            "ns": "CAM",
            "aliases": ["0x70894BD0915C5BCA"],
            "jhash": "0x9F4AF763",
            "manualHash": true
        },
        "0xDC9DA9E8789F5246": {
            "name": "SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC9DA9E8789F5246",
            "ns": "CAM",
            "aliases": ["0xDC9DA9E8789F5246"],
            "jhash": "0x4938C82F",
            "manualHash": true
        },
        "0xC91C6C55199308CA": {
            "name": "SET_FLY_CAM_COORD_AND_CONSTRAIN",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC91C6C55199308CA",
            "ns": "CAM",
            "aliases": ["0xC91C6C55199308CA"],
            "jhash": "0x60B345DE",
            "manualHash": true
        },
        "0xBCFC632DB7673BF0": {
            "name": "_SET_FIRST_PERSON_CAM_PITCH_RANGE",
            "params": [
                { "name": "minAngle", "type": "float" },
                { "name": "maxAngle", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBCFC632DB7673BF0",
            "ns": "CAM",
            "aliases": ["0xBCFC632DB7673BF0"],
            "jhash": "0x76DAC96C",
            "manualHash": true
        },
        "0x503F5920162365B2": {
            "name": "SET_FLY_CAM_HORIZONTAL_RESPONSE",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x503F5920162365B2",
            "ns": "CAM",
            "aliases": ["0x503F5920162365B2"],
            "jhash": "0x56F9ED27",
            "manualHash": true
        },
        "0x5A4F9EDF1673F704": {
            "name": "SET_FOLLOW_PED_CAM_VIEW_MODE",
            "params": [{ "name": "viewMode", "type": "int" }],
            "results": "void",
            "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum.",
            "examples": [],
            "hash": "0x5A4F9EDF1673F704",
            "ns": "CAM",
            "jhash": "0x495DBE8D",
            "manualHash": true
        },
        "0xF9D02130ECDD1D77": {
            "name": "SET_FLY_CAM_MAX_HEIGHT",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "height", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF9D02130ECDD1D77",
            "ns": "CAM",
            "aliases": ["0xF9D02130ECDD1D77", "_SET_CAMERA_RANGE"],
            "jhash": "0x71570DBA",
            "manualHash": true
        },
        "0xAC253D7842768F48": {
            "name": "SET_FOLLOW_VEHICLE_CAM_VIEW_MODE",
            "params": [{ "name": "viewMode", "type": "int" }],
            "results": "void",
            "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum.",
            "examples": [],
            "hash": "0xAC253D7842768F48",
            "ns": "CAM",
            "jhash": "0xC4FBBBD3",
            "manualHash": true
        },
        "0x44A113DD6FFC48D1": {
            "name": "SET_FOLLOW_PED_CAM_THIS_UPDATE",
            "params": [
                { "name": "camName", "type": "char*" },
                { "name": "p1", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nFrom the scripts:\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA\", 0);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_ON_EXILE1_LADDER_CAMERA\", 1500);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 0);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 3000);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA\", 0);\nCAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 0);\n```",
            "examples": [],
            "hash": "0x44A113DD6FFC48D1",
            "ns": "CAM",
            "aliases": ["SET_FOLLOW_PED_CAM_CUTSCENE_CHAT"],
            "jhash": "0x1425F6AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE827B9382CFB41BA": {
            "name": "_SET_FLY_CAM_VERTICAL_SPEED_MULTIPLIER",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE827B9382CFB41BA",
            "ns": "CAM",
            "aliases": ["0xE827B9382CFB41BA"],
            "manualHash": true
        },
        "0x425A920FDB9A0DDA": {
            "name": "_SET_GAMEPLAY_CAM_HASH",
            "params": [{ "name": "camName", "type": "char*" }],
            "results": "void",
            "description": "```\nSets gameplay camera to hash\n```\n\n```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x425A920FDB9A0DDA",
            "ns": "CAM",
            "aliases": ["0x425A920FDB9A0DDA"],
            "manualHash": true
        },
        "0x19464CB6E4078C8A": {
            "name": "SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL",
            "params": [{ "name": "zoomLevel", "type": "int" }],
            "results": "void",
            "description": "See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\\_0x8D4D46230B2C353A) for the follow mode enum.",
            "examples": [],
            "hash": "0x19464CB6E4078C8A",
            "ns": "CAM",
            "jhash": "0x8F55EBBE",
            "manualHash": true
        },
        "0x5C90CAB09951A12F": {
            "name": "_SET_FOLLOW_TURRET_SEAT_CAM",
            "params": [
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See [IS_TURRET_SEAT](#\\_0xE33FFA906CE74880)"
                }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x5C90CAB09951A12F",
            "ns": "CAM",
            "aliases": ["0x5C90CAB09951A12F"],
            "manualHash": true
        },
        "0x8BBACBF51DA047A8": {
            "name": "SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8BBACBF51DA047A8",
            "ns": "CAM",
            "aliases": ["0x8BBACBF51DA047A8"],
            "jhash": "0x7D3007A2",
            "manualHash": true
        },
        "0x759E13EBC1C15C5A": {
            "name": "_SET_GAMEPLAY_CAM_RAW_PITCH",
            "params": [{ "name": "pitch", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x759E13EBC1C15C5A",
            "ns": "CAM",
            "manualHash": true
        },
        "0x103991D4A307D472": {
            "name": "_SET_GAMEPLAY_CAM_RAW_YAW",
            "params": [{ "name": "yaw", "type": "float" }],
            "results": "void",
            "description": "```\nDoes nothing  \n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x103991D4A307D472",
            "ns": "CAM",
            "manualHash": true
        },
        "0x6D0858B8EDFD2B7D": {
            "name": "SET_GAMEPLAY_CAM_RELATIVE_PITCH",
            "params": [
                {
                    "name": "angle",
                    "type": "float",
                    "description": "the angle to rotate the camera by"
                },
                {
                    "name": "scalingFactor",
                    "type": "float",
                    "description": "always seems to be set to 1.0 in native calls"
                }
            ],
            "results": "void",
            "description": "This native sets the camera's pitch (rotation on the x-axis).",
            "examples": [],
            "hash": "0x6D0858B8EDFD2B7D",
            "ns": "CAM",
            "jhash": "0x6381B963",
            "manualHash": true
        },
        "0xB4EC2312F4E5B1F1": {
            "name": "SET_GAMEPLAY_CAM_RELATIVE_HEADING",
            "params": [{ "name": "heading", "type": "float" }],
            "results": "void",
            "description": "```\nSets the camera position relative to heading in float from -360 to +360.  \nHeading is alwyas 0 in aiming camera.  \n```",
            "examples": [],
            "hash": "0xB4EC2312F4E5B1F1",
            "ns": "CAM",
            "jhash": "0x20C6217C",
            "manualHash": true
        },
        "0x21E253A7F8DA5DFB": {
            "name": "_SET_GAMEPLAY_CAM_VEHICLE_CAMERA",
            "params": [{ "name": "vehicleName", "type": "char*" }],
            "results": "void",
            "description": "```\nFrom b617 scripts:\nCAM::_21E253A7F8DA5DFB(\"DINGHY\");\nCAM::_21E253A7F8DA5DFB(\"ISSI2\");\nCAM::_21E253A7F8DA5DFB(\"SPEEDO\");\n```",
            "examples": [],
            "hash": "0x21E253A7F8DA5DFB",
            "ns": "CAM",
            "aliases": ["0x21E253A7F8DA5DFB"],
            "manualHash": true
        },
        "0x11FA5D3479C7DD47": {
            "name": "_SET_GAMEPLAY_CAM_VEHICLE_CAMERA_NAME",
            "params": [
                {
                    "name": "vehicleModel",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x11FA5D3479C7DD47",
            "ns": "CAM",
            "aliases": ["0x11FA5D3479C7DD47"],
            "manualHash": true
        },
        "0xA87E00932DB4D85D": {
            "name": "SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE",
            "params": [{ "name": "amplitude", "type": "float" }],
            "results": "void",
            "description": "```\nSets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script \"drunk_controller.ysc.c4\" to simulate making the player drunk.  \n```",
            "examples": [],
            "hash": "0xA87E00932DB4D85D",
            "ns": "CAM",
            "jhash": "0x9219D44A",
            "manualHash": true
        },
        "0x48608C3464F58AB4": {
            "name": "_SET_GAMEPLAY_CAM_RELATIVE_ROTATION",
            "params": [
                { "name": "roll", "type": "float" },
                { "name": "pitch", "type": "float" },
                { "name": "yaw", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x48608C3464F58AB4",
            "ns": "CAM",
            "aliases": ["0x48608C3464F58AB4"],
            "manualHash": true
        },
        "0xE3433EADAAF7EE40": {
            "name": "_SET_GAMEPLAY_HINT_ANIM_CLOSEUP",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE3433EADAAF7EE40",
            "ns": "CAM",
            "aliases": ["GET_IS_MULTIPLAYER_BRIEF", "0xE3433EADAAF7EE40"],
            "jhash": "0x2F0CE859",
            "manualHash": true
        },
        "0xD1F8363DFAD03848": {
            "name": "SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET",
            "params": [{ "name": "value", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD1F8363DFAD03848",
            "ns": "CAM",
            "aliases": ["0xD1F8363DFAD03848", "_SET_GAMEPLAY_HINT_ANGLE"],
            "jhash": "0x79472AE3",
            "manualHash": true
        },
        "0xC92717EF615B6704": {
            "name": "_SET_GAMEPLAY_HINT_ANIM_OFFSETY",
            "params": [{ "name": "yOffset", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC92717EF615B6704",
            "ns": "CAM",
            "aliases": ["0xC92717EF615B6704"],
            "jhash": "0x3554AA0E",
            "manualHash": true
        },
        "0xD51ADCD2D8BC0FB3": {
            "name": "SET_GAMEPLAY_COORD_HINT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "duration", "type": "int" },
                { "name": "blendOutDuration", "type": "int" },
                { "name": "blendInDuration", "type": "int" },
                { "name": "unk", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD51ADCD2D8BC0FB3",
            "ns": "CAM",
            "jhash": "0xF27483C9",
            "manualHash": true
        },
        "0x83E87508A2CA2AC6": {
            "name": "SET_GAMEPLAY_OBJECT_HINT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x83E87508A2CA2AC6",
            "ns": "CAM",
            "jhash": "0x2ED5E2F8",
            "manualHash": true
        },
        "0x189E955A8313E298": {
            "name": "SET_GAMEPLAY_ENTITY_HINT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "int" },
                { "name": "p6", "type": "int" },
                { "name": "p7", "type": "int" },
                { "name": "p8", "type": "Any" }
            ],
            "results": "void",
            "description": "```\np6 & p7 - possibly length or time  \n```",
            "examples": [],
            "hash": "0x189E955A8313E298",
            "ns": "CAM",
            "jhash": "0x66C32306",
            "manualHash": true
        },
        "0x513403FB9C56211F": {
            "name": "SET_GAMEPLAY_HINT_FOV",
            "params": [{ "name": "FOV", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x513403FB9C56211F",
            "ns": "CAM",
            "jhash": "0x96FD173B",
            "manualHash": true
        },
        "0x5D7B620DAE436138": {
            "name": "_SET_GAMEPLAY_HINT_ANIM_OFFSETX",
            "params": [{ "name": "xOffset", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5D7B620DAE436138",
            "ns": "CAM",
            "aliases": ["0x5D7B620DAE436138"],
            "jhash": "0xFC7464A0",
            "manualHash": true
        },
        "0xF8BDBF3D573049A1": {
            "name": "SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR",
            "params": [{ "name": "value", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF8BDBF3D573049A1",
            "ns": "CAM",
            "aliases": [
                "0xF8BDBF3D573049A1",
                "_SET_GAMEPLAY_HINT_ANIM_OFFSETZ"
            ],
            "jhash": "0x72E8CD3A",
            "manualHash": true
        },
        "0x2B486269ACD548D3": {
            "name": "SET_GAMEPLAY_PED_HINT",
            "params": [
                { "name": "p0", "type": "Ped" },
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "duration", "type": "int" },
                { "name": "blendOutDuration", "type": "int" },
                { "name": "blendInDuration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B486269ACD548D3",
            "ns": "CAM",
            "jhash": "0x7C27343E",
            "manualHash": true
        },
        "0x42156508606DE65E": {
            "name": "SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE",
            "params": [{ "name": "distance", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x42156508606DE65E",
            "ns": "CAM",
            "aliases": [
                "0x42156508606DE65E",
                "_SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP"
            ],
            "jhash": "0x71E9C63E",
            "manualHash": true
        },
        "0xA2297E18F3E71C2E": {
            "name": "SET_GAMEPLAY_VEHICLE_HINT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to focus on."
                },
                {
                    "name": "offsetX",
                    "type": "float",
                    "description": "Position offset X"
                },
                {
                    "name": "offsetY",
                    "type": "float",
                    "description": "Position offset Y"
                },
                {
                    "name": "offsetZ",
                    "type": "float",
                    "description": "Position offset Z"
                },
                { "name": "p4", "type": "BOOL" },
                {
                    "name": "time",
                    "type": "int",
                    "description": "Effect duration"
                },
                {
                    "name": "easeInTime",
                    "type": "int",
                    "description": "Effect fade in duration"
                },
                {
                    "name": "easeOutTime",
                    "type": "int",
                    "description": "EFfect fade out duration"
                }
            ],
            "results": "void",
            "description": "Focuses the camera on the specified vehicle.",
            "examples": [],
            "hash": "0xA2297E18F3E71C2E",
            "ns": "CAM",
            "jhash": "0x2C9A11D8",
            "manualHash": true
        },
        "0x79C0E43EB9B944E2": {
            "name": "SET_TABLE_GAMES_CAMERA_THIS_UPDATE",
            "params": [
                {
                    "name": "hash",
                    "type": "Hash",
                    "description": "Hash for table game"
                }
            ],
            "results": "BOOL",
            "description": "Override the camera work of the third-person camera to table game for current frame only.\n\n|                  HashKey                    |       Hash        |    Game         |\n| :---------------------------------: | :-----------:| :-------------:  |\n| `CASINO_LUCKY_WHEEL_CAMERA` |   `5891389`   |  Lucky Wheel    |\n| `CASINO_SLOT_MACHINE_CAMERA` |  `518572876`  |     Slots       |\n| `CASINO_ROULETTE_CAMERA` |   `71681063`  |    Roulette     |\n| `CASINO_BLACKJACK_CAMERA` | `-2124244681` |    Blackjack    |\n| `CASINO_POKER_CAMERA` | `-1938411241` |   Three Cards   |\n| `CASINO_INSIDE_TRACK_CAMERA` | `1929822423` |   Inside Track    |\n| `ARCADE_LOVE_PROFESSOR_P1_CAMERA` | `545868034` |   LoveProfessorP1   |\n| `ARCADE_LOVE_PROFESSOR_P2_CAMERA` | `935304251` |   LoveProfessorP2   |",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\n    while true do\n      -- override to lucky wheel camera work\n      SetTableGamesCameraThisUpdate(GetHashKey(\"CASINO_LUCKY_WHEEL_CAMERA\"))\n      Wait(0)\n    end\nend)"
                }
            ],
            "hash": "0x79C0E43EB9B944E2",
            "ns": "CAM",
            "aliases": ["0x79C0E43EB9B944E2"],
            "manualHash": true,
            "resultsDescription": "Returns a boolean value indicating if the camera settings were successfully overriden for this current frame."
        },
        "0xA13B0222F3D94A94": {
            "name": "SET_USE_HI_DOF",
            "params": [],
            "results": "void",
            "description": "Needs to be called every tick to make the active camera use a high depth of field.\\\nThe DoF can be customized using [`SET_CAM_NEAR_DOF`](#\\_0x3FA4BF0A7AB7DE2C), [`SET_CAM_FAR_DOF`](#\\_0xEDD91296CD01AEE0), [`SET_CAM_USE_SHALLOW_DOF_MODE`](#\\_0x16A96863A17552BB), [`SET_CAM_DOF_STRENGTH`](#\\_0x5EE29B4D7D5DF897) and other DoF related natives.\n\n### Usage Example\n\nA usage example for this native can be found in the following native documentation: [`SET_CAM_DOF_STRENGTH`](#\\_0x5EE29B4D7D5DF897).",
            "examples": [],
            "hash": "0xA13B0222F3D94A94",
            "ns": "CAM",
            "jhash": "0x8BBF2950",
            "manualHash": true
        },
        "0xDCD4EA924F42D01A": {
            "name": "SET_WIDESCREEN_BORDERS",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDCD4EA924F42D01A",
            "ns": "CAM",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x1A75DC9A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6A25241C340D3822": {
            "name": "SHAKE_CAM",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "type", "type": "char*" },
                { "name": "amplitude", "type": "float" }
            ],
            "results": "void",
            "description": "```\nPossible shake types (updated b617d):  \nDEATH_FAIL_IN_EFFECT_SHAKE  \nDRUNK_SHAKE  \nFAMILY5_DRUG_TRIP_SHAKE  \nHAND_SHAKE  \nJOLT_SHAKE  \nLARGE_EXPLOSION_SHAKE  \nMEDIUM_EXPLOSION_SHAKE  \nSMALL_EXPLOSION_SHAKE  \nROAD_VIBRATION_SHAKE  \nSKY_DIVING_SHAKE  \nVIBRATE_SHAKE  \n```",
            "examples": [],
            "hash": "0x6A25241C340D3822",
            "ns": "CAM",
            "jhash": "0x1D4211B0",
            "manualHash": true
        },
        "0xE9EA16D6E54CDCA4": {
            "name": "SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE",
            "params": [
                { "name": "p0", "type": "Vehicle" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE9EA16D6E54CDCA4",
            "ns": "CAM",
            "aliases": ["0xE9EA16D6E54CDCA4"],
            "jhash": "0x4B22C5CB",
            "manualHash": true
        },
        "0xF33AB75780BA57DE": {
            "name": "STOP_CAM_POINTING",
            "params": [{ "name": "cam", "type": "Cam" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF33AB75780BA57DE",
            "ns": "CAM",
            "jhash": "0x5435F6A5",
            "manualHash": true
        },
        "0xF4C8CF9E353AFECA": {
            "name": "SHAKE_SCRIPT_GLOBAL",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nCAM::SHAKE_SCRIPT_GLOBAL(\"HAND_SHAKE\", 0.2);\n```",
            "examples": [],
            "hash": "0xF4C8CF9E353AFECA",
            "ns": "CAM",
            "aliases": ["0xF4C8CF9E353AFECA"],
            "jhash": "0x2B0F05CD",
            "manualHash": true
        },
        "0x731A880555DA3647": {
            "name": "_SET_USE_HI_DOF_IN_CUTSCENE",
            "params": [],
            "results": "void",
            "description": "```\nOnly used in R* Script fm_mission_controller_2020\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x731A880555DA3647",
            "ns": "CAM",
            "manualHash": true
        },
        "0x7660C6E75D3A078E": {
            "name": "STOP_CINEMATIC_SHOT",
            "params": [
                {
                    "name": "p0",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7660C6E75D3A078E",
            "ns": "CAM",
            "jhash": "0xD78358C5",
            "manualHash": true
        },
        "0xF46C581C61718916": {
            "name": "STOP_GAMEPLAY_HINT",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF46C581C61718916",
            "ns": "CAM",
            "jhash": "0x1BC28B7B",
            "manualHash": true
        },
        "0xDCE214D9ED58F3CF": {
            "name": "SHAKE_CINEMATIC_CAM",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\np0 argument found in the b617d scripts: \"DRUNK_SHAKE\"  \n```",
            "examples": [],
            "hash": "0xDCE214D9ED58F3CF",
            "ns": "CAM",
            "jhash": "0x61815F31",
            "manualHash": true
        },
        "0xFD55E49555E017CF": {
            "name": "SHAKE_GAMEPLAY_CAM",
            "params": [
                { "name": "shakeName", "type": "char*" },
                { "name": "intensity", "type": "float" }
            ],
            "results": "void",
            "description": "```\nPossible shake types (updated b617d):  \nDEATH_FAIL_IN_EFFECT_SHAKE  \nDRUNK_SHAKE  \nFAMILY5_DRUG_TRIP_SHAKE  \nHAND_SHAKE  \nJOLT_SHAKE  \nLARGE_EXPLOSION_SHAKE  \nMEDIUM_EXPLOSION_SHAKE  \nSMALL_EXPLOSION_SHAKE  \nROAD_VIBRATION_SHAKE  \nSKY_DIVING_SHAKE  \nVIBRATE_SHAKE  \n```",
            "examples": [],
            "hash": "0xFD55E49555E017CF",
            "ns": "CAM",
            "jhash": "0xF2EFE660",
            "manualHash": true
        },
        "0xBDECF64367884AC3": {
            "name": "STOP_CAM_SHAKING",
            "params": [
                { "name": "cam", "type": "Cam" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBDECF64367884AC3",
            "ns": "CAM",
            "jhash": "0x40D0EB87",
            "manualHash": true
        },
        "0xDB629FFD9285FA06": {
            "name": "STOP_CUTSCENE_CAM_SHAKING",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDB629FFD9285FA06",
            "ns": "CAM",
            "jhash": "0xF07D603D",
            "manualHash": true
        },
        "0x2238E588E588A6D7": {
            "name": "STOP_CINEMATIC_CAM_SHAKING",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2238E588E588A6D7",
            "ns": "CAM",
            "jhash": "0x71C12904",
            "manualHash": true
        },
        "0x1C9D7949FA533490": {
            "name": "STOP_SCRIPT_GLOBAL_SHAKING",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIn drunk_controller.c4, sub_309\nif (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {\n    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);\n}\n```",
            "examples": [],
            "hash": "0x1C9D7949FA533490",
            "ns": "CAM",
            "aliases": ["0x1C9D7949FA533490"],
            "jhash": "0x26FCFB96",
            "manualHash": true
        },
        "0x0EF93E9F3D08C178": {
            "name": "STOP_GAMEPLAY_CAM_SHAKING",
            "params": [
                {
                    "name": "bStopImmediately",
                    "type": "BOOL",
                    "description": "Should the shake stop this frame."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0EF93E9F3D08C178",
            "ns": "CAM",
            "jhash": "0xFD569E4E",
            "manualHash": true
        },
        "0xC819F3CBB62BF692": {
            "name": "STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP",
            "params": [
                { "name": "render", "type": "BOOL" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nThis native makes the gameplay camera zoom into first person/third person with a special effect.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0xC819F3CBB62BF692",
            "ns": "CAM",
            "aliases": ["0xC819F3CBB62BF692", "_RENDER_FIRST_PERSON_CAM"],
            "jhash": "0xD3C08183",
            "manualHash": true
        },
        "0x6493CF69859B116A": {
            "name": "_USE_STUNT_CAMERA_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6493CF69859B116A",
            "ns": "CAM",
            "aliases": ["0x6493CF69859B116A"],
            "manualHash": true
        }
    },
    "DATAFILE": {
        "0xCABDB751D86FE93B": {
            "name": "DATAARRAY_ADD_INT",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCABDB751D86FE93B",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_ADD_INTEGER"],
            "jhash": "0xF29C0B36",
            "manualHash": true
        },
        "0xF8B0F5A43E928C76": {
            "name": "DATAARRAY_ADD_BOOL",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "value", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF8B0F5A43E928C76",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_ADD_BOOLEAN"],
            "jhash": "0x08174B90",
            "manualHash": true
        },
        "0x57A995FD75D37F56": {
            "name": "DATAARRAY_ADD_FLOAT",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x57A995FD75D37F56",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_ADD_FLOAT"],
            "jhash": "0xE4302123",
            "manualHash": true
        },
        "0x407F8D034F70F0C2": {
            "name": "DATAARRAY_ADD_VECTOR",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "valueX", "type": "float" },
                { "name": "valueY", "type": "float" },
                { "name": "valueZ", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x407F8D034F70F0C2",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_ADD_VECTOR3"],
            "jhash": "0x16F464B6",
            "manualHash": true
        },
        "0x6889498B3E19C797": {
            "name": "DATAARRAY_ADD_DICT",
            "params": [{ "name": "arrayData", "type": "Any*" }],
            "results": "Any*",
            "description": "",
            "examples": [],
            "hash": "0x6889498B3E19C797",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_ADD_OBJECT"],
            "jhash": "0xC174C71B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0C527B525D7CFB5": {
            "name": "DATAARRAY_GET_FLOAT",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "arrayIndex", "type": "int" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xC0C527B525D7CFB5",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_GET_FLOAT"],
            "jhash": "0x08AD2CC2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x50C1B2874E50C114": {
            "name": "DATAARRAY_GET_BOOL",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "arrayIndex", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x50C1B2874E50C114",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_GET_BOOLEAN"],
            "jhash": "0xA2E5F921",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2F0661C155AEEEAA": {
            "name": "DATAARRAY_ADD_STRING",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "value", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F0661C155AEEEAA",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_ADD_STRING"],
            "jhash": "0xF3C01350",
            "manualHash": true
        },
        "0xD3F2FFEB8D836F52": {
            "name": "DATAARRAY_GET_STRING",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "arrayIndex", "type": "int" }
            ],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xD3F2FFEB8D836F52",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_GET_STRING"],
            "jhash": "0x93F985A6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x065DB281590CEA2D": {
            "name": "DATAARRAY_GET_COUNT",
            "params": [{ "name": "arrayData", "type": "Any*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x065DB281590CEA2D",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_GET_SIZE"],
            "jhash": "0xA8A21766",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8B5FADCC4E3A145F": {
            "name": "DATAARRAY_GET_DICT",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "arrayIndex", "type": "int" }
            ],
            "results": "Any*",
            "description": "",
            "examples": [],
            "hash": "0x8B5FADCC4E3A145F",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_GET_OBJECT"],
            "jhash": "0xECE81278",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3E5AE19425CD74BE": {
            "name": "DATAARRAY_GET_INT",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "arrayIndex", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x3E5AE19425CD74BE",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_GET_INTEGER"],
            "jhash": "0xBB120CFC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A0014ADB172A3C5": {
            "name": "DATAARRAY_GET_TYPE",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "arrayIndex", "type": "int" }
            ],
            "results": "int",
            "description": "```\nTypes:  \n1 = Boolean  \n2 = Integer  \n3 = Float  \n4 = String  \n5 = Vector3  \n6 = Object  \n7 = Array  \n```",
            "examples": [],
            "hash": "0x3A0014ADB172A3C5",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_GET_TYPE"],
            "jhash": "0xFA2402C8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8D2064E5B64A628A": {
            "name": "DATAARRAY_GET_VECTOR",
            "params": [
                { "name": "arrayData", "type": "Any*" },
                { "name": "arrayIndex", "type": "int" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x8D2064E5B64A628A",
            "ns": "DATAFILE",
            "aliases": ["_ARRAY_VALUE_GET_VECTOR3"],
            "jhash": "0x80E3DA55",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA358F56F10732EE1": {
            "name": "DATADICT_CREATE_DICT",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "Any*",
            "description": "",
            "examples": [],
            "hash": "0xA358F56F10732EE1",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_ADD_OBJECT"],
            "jhash": "0x96A8E05F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B11728527CA6E5F": {
            "name": "DATADICT_CREATE_ARRAY",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "Any*",
            "description": "",
            "examples": [],
            "hash": "0x5B11728527CA6E5F",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_ADD_ARRAY"],
            "jhash": "0x03939B8D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7A983AA9DA2659ED": {
            "name": "DATADICT_GET_ARRAY",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "Any*",
            "description": "",
            "examples": [],
            "hash": "0x7A983AA9DA2659ED",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_GET_ARRAY"],
            "jhash": "0x1F2F7D00",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB6B9DDC412FCEEE2": {
            "name": "DATADICT_GET_DICT",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "Any*",
            "description": "",
            "examples": [],
            "hash": "0xB6B9DDC412FCEEE2",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_GET_OBJECT"],
            "jhash": "0xC9C13D8D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1186940ED72FFEEC": {
            "name": "DATADICT_GET_BOOL",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1186940ED72FFEEC",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_GET_BOOLEAN"],
            "jhash": "0x8876C872",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3D2FD9E763B24472": {
            "name": "DATADICT_GET_STRING",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x3D2FD9E763B24472",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_GET_STRING"],
            "jhash": "0x942160EC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x06610343E73B9727": {
            "name": "DATADICT_GET_FLOAT",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x06610343E73B9727",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_GET_FLOAT"],
            "jhash": "0xA92C1AF4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x46CD3CB66E0825CC": {
            "name": "DATADICT_GET_VECTOR",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x46CD3CB66E0825CC",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_GET_VECTOR3"],
            "jhash": "0xE84A127A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x35124302A556A325": {
            "name": "DATADICT_SET_BOOL",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" },
                { "name": "value", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x35124302A556A325",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_ADD_BOOLEAN"],
            "jhash": "0x9B29D99B",
            "manualHash": true
        },
        "0x78F06F6B1FB5A80C": {
            "name": "DATADICT_GET_INT",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x78F06F6B1FB5A80C",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_GET_INTEGER"],
            "jhash": "0xA6C68693",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x031C55ED33227371": {
            "name": "DATADICT_GET_TYPE",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" }
            ],
            "results": "int",
            "description": "```\nTypes:  \n1 = Boolean  \n2 = Integer  \n3 = Float  \n4 = String  \n5 = Vector3  \n6 = Object  \n7 = Array  \n```",
            "examples": [],
            "hash": "0x031C55ED33227371",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_GET_TYPE"],
            "jhash": "0x2678342A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8FF3847DADD8E30C": {
            "name": "DATADICT_SET_STRING",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" },
                { "name": "value", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8FF3847DADD8E30C",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_ADD_STRING"],
            "jhash": "0xD437615C",
            "manualHash": true
        },
        "0xE7E035450A7948D5": {
            "name": "DATADICT_SET_INT",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE7E035450A7948D5",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_ADD_INTEGER"],
            "jhash": "0xEFCF554A",
            "manualHash": true
        },
        "0xC27E1CC2D795105E": {
            "name": "DATADICT_SET_FLOAT",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC27E1CC2D795105E",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_ADD_FLOAT"],
            "jhash": "0xE972CACF",
            "manualHash": true
        },
        "0x6CC86E78358D5119": {
            "name": "DATAFILE_CLEAR_WATCH_LIST",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6CC86E78358D5119",
            "ns": "DATAFILE",
            "aliases": ["0x6CC86E78358D5119"],
            "jhash": "0x5B39D0AC",
            "manualHash": true
        },
        "0x9AB9C1CFC8862DFB": {
            "name": "DATAFILE_DELETE",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 1: int p0\n```",
            "examples": [],
            "hash": "0x9AB9C1CFC8862DFB",
            "ns": "DATAFILE",
            "jhash": "0xDEF31B0A",
            "manualHash": true
        },
        "0xD27058A1CA2B13EE": {
            "name": "DATAFILE_CREATE",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 1: int p0\n```",
            "examples": [],
            "hash": "0xD27058A1CA2B13EE",
            "ns": "DATAFILE",
            "jhash": "0x95F8A221",
            "manualHash": true
        },
        "0x4CD49B76338C7DEE": {
            "name": "DATADICT_SET_VECTOR",
            "params": [
                { "name": "objectData", "type": "Any*" },
                { "name": "key", "type": "char*" },
                { "name": "valueX", "type": "float" },
                { "name": "valueY", "type": "float" },
                { "name": "valueZ", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4CD49B76338C7DEE",
            "ns": "DATAFILE",
            "aliases": ["_OBJECT_VALUE_ADD_VECTOR3"],
            "jhash": "0x75FC6C3C",
            "manualHash": true
        },
        "0x906B778CA1DC72B6": {
            "name": "DATAFILE_GET_FILE_DICT",
            "params": [],
            "results": "char*",
            "description": "```\nNativeDB Added Parameter 1: int p0\n```",
            "examples": [],
            "hash": "0x906B778CA1DC72B6",
            "ns": "DATAFILE",
            "aliases": ["0x906B778CA1DC72B6"],
            "jhash": "0x86DDF9C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC55854C7D7274882": {
            "name": "DATAFILE_FLUSH_MISSION_HEADER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC55854C7D7274882",
            "ns": "DATAFILE",
            "aliases": ["0xC55854C7D7274882"],
            "jhash": "0xF11F956F",
            "manualHash": true
        },
        "0x15FF52B809DB2353": {
            "name": "DATAFILE_HAS_LOADED_FILE_DATA",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x15FF52B809DB2353",
            "ns": "DATAFILE",
            "aliases": ["0x15FF52B809DB2353"],
            "jhash": "0x36FB8B3F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC5238C011AF405E4": {
            "name": "DATAFILE_LOAD_OFFLINE_UGC",
            "params": [{ "name": "filename", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nLoads a User-Generated Content (UGC) file. These files can be found in \"[GTA5]\\data\\ugc\" and \"[GTA5]\\common\\patch\\ugc\". They seem to follow a naming convention, most likely of \"[name]_[part].ugc\". See example below for usage.\nReturns whether or not the file was successfully loaded.\nExample:\nDATAFILE::_LOAD_UGC_FILE(\"RockstarPlaylists\") // loads \"rockstarplaylists_00.ugc\"\n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xC5238C011AF405E4",
            "ns": "DATAFILE",
            "aliases": ["_LOAD_UGC_FILE"],
            "jhash": "0x660C468E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF8CC1EBE0B62E29F": {
            "name": "DATAFILE_HAS_VALID_FILE_DATA",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF8CC1EBE0B62E29F",
            "ns": "DATAFILE",
            "aliases": ["0xF8CC1EBE0B62E29F"],
            "jhash": "0x2A9411DA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFCCAE5B92A830878": {
            "name": "DATAFILE_IS_VALID_REQUEST_ID",
            "params": [{ "name": "index", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFCCAE5B92A830878",
            "ns": "DATAFILE",
            "aliases": ["0xFCCAE5B92A830878"],
            "jhash": "0x01393D16",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8F5EA1C01D65A100": {
            "name": "DATAFILE_DELETE_REQUESTED_FILE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8F5EA1C01D65A100",
            "ns": "DATAFILE",
            "aliases": ["0x8F5EA1C01D65A100"],
            "jhash": "0x9DB63CFF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x01095C95CD46B624": {
            "name": "DATAFILE_SELECT_CREATOR_STATS",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x01095C95CD46B624",
            "ns": "DATAFILE",
            "aliases": ["0x01095C95CD46B624"],
            "jhash": "0xB8515B2F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBEDB96A7584AA8CF": {
            "name": "DATAFILE_IS_SAVE_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "```\nExample:  \nif (!DATAFILE::_BEDB96A7584AA8CF())  \n{  \n    if (!g_109E3)  \n\t{  \n        if (((sub_d4f() == 2) == 0) && (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))  \n{  \n            if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())  \n\t{  \n                g_17A8B = 0;  \n            }  \n            if (!g_D52C)  \n\t{  \n                sub_730();  \n            }  \n        }  \n    }  \n}  \n```",
            "examples": [],
            "hash": "0xBEDB96A7584AA8CF",
            "ns": "DATAFILE",
            "aliases": ["0xBEDB96A7584AA8CF"],
            "jhash": "0x5DCD0796",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x52818819057F2B40": {
            "name": "DATAFILE_SELECT_UGC_PLAYER_DATA",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x52818819057F2B40",
            "ns": "DATAFILE",
            "aliases": ["0x52818819057F2B40"],
            "jhash": "0xA4D1B30E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA69AC4ADE82B57A4": {
            "name": "DATAFILE_SELECT_UGC_DATA",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xA69AC4ADE82B57A4",
            "ns": "DATAFILE",
            "aliases": ["0xA69AC4ADE82B57A4"],
            "jhash": "0xE8D56DA2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2ED61456317B8178": {
            "name": "DATAFILE_STORE_MISSION_HEADER",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 1: int p0\n```",
            "examples": [],
            "hash": "0x2ED61456317B8178",
            "ns": "DATAFILE",
            "aliases": ["0x2ED61456317B8178"],
            "jhash": "0x4E03F632",
            "manualHash": true
        },
        "0x22DA66936E0FFF37": {
            "name": "DATAFILE_SELECT_ACTIVE_FILE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x22DA66936E0FFF37",
            "ns": "DATAFILE",
            "aliases": ["0x22DA66936E0FFF37"],
            "jhash": "0xB41064A4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x83BCCE3224735F05": {
            "name": "DATAFILE_START_SAVE_TO_CLOUD",
            "params": [{ "name": "filename", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x83BCCE3224735F05",
            "ns": "DATAFILE",
            "aliases": ["0x83BCCE3224735F05"],
            "jhash": "0x768CBB35",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6AD0BD5E087866CB": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x6AD0BD5E087866CB",
            "ns": "DATAFILE",
            "manualHash": true
        },
        "0xDBF860CF1DB8E599": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xDBF860CF1DB8E599",
            "ns": "DATAFILE",
            "manualHash": true
        },
        "0x9CB0BFA7A9342C3D": {
            "name": "DATAFILE_SELECT_UGC_STATS",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x9CB0BFA7A9342C3D",
            "ns": "DATAFILE",
            "aliases": ["0x9CB0BFA7A9342C3D"],
            "jhash": "0xCB6A351E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAD6875BBC0FC899C": {
            "name": "DATAFILE_WATCH_REQUEST_ID",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "```\nAdds the given request ID to the watch list.\n```",
            "examples": [],
            "hash": "0xAD6875BBC0FC899C",
            "ns": "DATAFILE",
            "aliases": ["0xAD6875BBC0FC899C"],
            "jhash": "0x621388FF",
            "manualHash": true
        },
        "0x4DFDD9EB705F8140": {
            "name": "DATAFILE_UPDATE_SAVE_TO_CLOUD",
            "params": [{ "name": "p0", "type": "BOOL*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4DFDD9EB705F8140",
            "ns": "DATAFILE",
            "aliases": ["0x4DFDD9EB705F8140"],
            "jhash": "0x0B4087F7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA5EFC3E847D60507": {
            "name": "UGC_CREATE_MISSION",
            "params": [
                { "name": "contentName", "type": "char*" },
                { "name": "description", "type": "char*" },
                { "name": "tagsCsv", "type": "char*" },
                { "name": "contentTypeName", "type": "char*" },
                { "name": "publish", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 6: Any p5\n```",
            "examples": [],
            "hash": "0xA5EFC3E847D60507",
            "ns": "DATAFILE",
            "aliases": ["0xA5EFC3E847D60507"],
            "jhash": "0xD96860FC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC84527E235FCA219": {
            "name": "UGC_CREATE_CONTENT",
            "params": [
                { "name": "data", "type": "char*" },
                {
                    "name": "dataCount",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                },
                { "name": "contentName", "type": "char*" },
                { "name": "description", "type": "char*" },
                { "name": "tagsCsv", "type": "char*" },
                { "name": "contentTypeName", "type": "char*" },
                { "name": "publish", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 8: Any p7\n```",
            "examples": [],
            "hash": "0xC84527E235FCA219",
            "ns": "DATAFILE",
            "aliases": ["0xC84527E235FCA219"],
            "jhash": "0xF09157B0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x692D808C34A82143": {
            "name": "UGC_SET_PLAYER_DATA",
            "params": [
                { "name": "contentId", "type": "char*" },
                { "name": "rating", "type": "float" },
                { "name": "contentTypeName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0x692D808C34A82143",
            "ns": "DATAFILE",
            "aliases": ["0x692D808C34A82143"],
            "jhash": "0xBB6321BD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA6EEF01087181EDD": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xA6EEF01087181EDD",
            "ns": "DATAFILE",
            "manualHash": true
        },
        "0x4645DE9980999E93": {
            "name": "UGC_UPDATE_MISSION",
            "params": [
                { "name": "contentId", "type": "char*" },
                { "name": "contentName", "type": "char*" },
                { "name": "description", "type": "char*" },
                { "name": "tagsCsv", "type": "char*" },
                { "name": "contentTypeName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 6: Any p5\n```",
            "examples": [],
            "hash": "0x4645DE9980999E93",
            "ns": "DATAFILE",
            "aliases": ["0x4645DE9980999E93"],
            "jhash": "0xDBB83E2B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x648E7A5434AF7969": {
            "name": "UGC_UPDATE_CONTENT",
            "params": [
                { "name": "contentId", "type": "char*" },
                { "name": "data", "type": "Any*" },
                {
                    "name": "dataCount",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                },
                { "name": "contentName", "type": "char*" },
                { "name": "description", "type": "char*" },
                { "name": "tagsCsv", "type": "char*" },
                { "name": "contentTypeName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 8: Any p7\n```",
            "examples": [],
            "hash": "0x648E7A5434AF7969",
            "ns": "DATAFILE",
            "aliases": ["0x648E7A5434AF7969"],
            "jhash": "0x459F2683",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "DECORATOR": {
        "0xDACE671663F2F5DB": {
            "name": "DECOR_GET_BOOL",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDACE671663F2F5DB",
            "ns": "DECORATOR",
            "jhash": "0xDBCE51E0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x05661B80A8C9165F": {
            "name": "DECOR_EXIST_ON",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nReturns whether or not the specified property is set for the entity.  \n```",
            "examples": [],
            "hash": "0x05661B80A8C9165F",
            "ns": "DECORATOR",
            "jhash": "0x74EF9C40",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6524A2F114706F43": {
            "name": "DECOR_GET_FLOAT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x6524A2F114706F43",
            "ns": "DECORATOR",
            "aliases": ["_DECOR_GET_FLOAT"],
            "jhash": "0x8DE5382F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA06C969B02A97298": {
            "name": "DECOR_GET_INT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA06C969B02A97298",
            "ns": "DECORATOR",
            "jhash": "0xDDDE59B5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4F14F9F870D6FBC8": {
            "name": "DECOR_IS_REGISTERED_AS_TYPE",
            "params": [
                { "name": "propertyName", "type": "char*" },
                {
                    "name": "type",
                    "type": "int",
                    "description": "See [`DECOR_REGISTER`](#\\_0x9FD90732F56403CE)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4F14F9F870D6FBC8",
            "ns": "DECORATOR",
            "jhash": "0x7CF0971D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA9D14EEA259F9248": {
            "name": "DECOR_REGISTER_LOCK",
            "params": [],
            "results": "void",
            "description": "```\nCalled after all decorator type initializations.  \n```",
            "examples": [],
            "hash": "0xA9D14EEA259F9248",
            "ns": "DECORATOR",
            "jhash": "0x7F3F1C02",
            "manualHash": true
        },
        "0x9FD90732F56403CE": {
            "name": "DECOR_REGISTER",
            "params": [
                { "name": "propertyName", "type": "char*" },
                { "name": "type", "type": "int" }
            ],
            "results": "void",
            "description": "Decor types:\n\n```\nenum eDecorType\n{\n    DECOR_TYPE_FLOAT = 1,\n    DECOR_TYPE_BOOL = 2,\n    DECOR_TYPE_INT = 3,\n    DECOR_TYPE_UNK = 4,\n    DECOR_TYPE_TIME = 5\n};\n```",
            "examples": [],
            "hash": "0x9FD90732F56403CE",
            "ns": "DECORATOR",
            "jhash": "0x68BD42A9",
            "manualHash": true
        },
        "0x00EE9F297C738720": {
            "name": "DECOR_REMOVE",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x00EE9F297C738720",
            "ns": "DECORATOR",
            "jhash": "0xE0E2640B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0CE3AA5E1CA19E10": {
            "name": "DECOR_SET_INT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" },
                { "name": "value", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nSets property to int.  \n```",
            "examples": [],
            "hash": "0x0CE3AA5E1CA19E10",
            "ns": "DECORATOR",
            "jhash": "0xDB718B21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x211AB1DD8D0F363A": {
            "name": "DECOR_SET_FLOAT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x211AB1DD8D0F363A",
            "ns": "DECORATOR",
            "aliases": ["_DECOR_SET_FLOAT"],
            "jhash": "0xBC7BD5CB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6B1E8E2ED1335B71": {
            "name": "DECOR_SET_BOOL",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" },
                { "name": "value", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nThis function sets metadata of type bool to specified entity.  \n```",
            "examples": [],
            "hash": "0x6B1E8E2ED1335B71",
            "ns": "DECORATOR",
            "jhash": "0x8E101F5C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x95AED7B8E39ECAA4": {
            "name": "DECOR_SET_TIME",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "propertyName", "type": "char*" },
                { "name": "timestamp", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x95AED7B8E39ECAA4",
            "ns": "DECORATOR",
            "jhash": "0xBBAEEF94",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "DLC": {
        "0x8D30F648014A92B5": {
            "name": "_GET_EXTRA_CONTENT_PACK_HAS_BEEN_INSTALLED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8D30F648014A92B5",
            "ns": "DLC",
            "aliases": ["0x8D30F648014A92B5"],
            "jhash": "0xF69B729C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x10D0A8F259E93EC9": {
            "name": "GET_IS_LOADING_SCREEN_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x10D0A8F259E93EC9",
            "ns": "DLC",
            "jhash": "0x517B601B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x46E2B844905BC5F0": {
            "name": "HAS_CLOUD_REQUESTS_FINISHED",
            "params": [
                {
                    "name": "variable",
                    "type": "BOOL*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                { "name": "unused", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nSets the value of the specified variable to 0.\nAlways returns true.\n```",
            "examples": [],
            "hash": "0x46E2B844905BC5F0",
            "ns": "DLC",
            "aliases": ["_NULLIFY"],
            "jhash": "0x6087C10C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x241FCA5B1AA14F75": {
            "params": [],
            "results": "BOOL",
            "description": "```\nOnly used once in scripts, in maintransition.\nmaintransition.c4, line ~82432:\nif (PED::_7350823473013C02(PLAYER::PLAYER_PED_ID()) && (DECORATOR::_241FCA5B1AA14F75() == 0)) {\n    g_2542A5 = a_1; // 'g_2542A5' used in 'building_controller.ysc' for IPL stuff?\n    return 1;\n}\nLikely used solely for the players ped. The function it's in seems to only be used for initialization/quitting. Called among natives to discard scaleforms, disable frontend, fading in/out, etc. Neighboring strings to some calls include \"HUD_JOINING\", \"HUD_QUITTING\".\nMost likely ARE_*\n```",
            "examples": [],
            "hash": "0x241FCA5B1AA14F75",
            "ns": "DLC",
            "jhash": "0x0AF83036",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0888C3502DBBEEF5": {
            "name": "ON_ENTER_MP",
            "params": [],
            "results": "void",
            "description": "```\nThis loads the GTA:O dlc map parts (high end garages, apartments).\nWorks in singleplayer.\nIn order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);\n```",
            "examples": [],
            "hash": "0x0888C3502DBBEEF5",
            "ns": "DLC",
            "aliases": ["_LOAD_MP_DLC_MAPS"],
            "jhash": "0xC65586A9",
            "manualHash": true
        },
        "0x9489659372A81585": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9489659372A81585",
            "ns": "DLC",
            "jhash": "0xC2169164",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0xC4637A6D03C24CC3": {
            "params": [],
            "results": "BOOL",
            "description": "GET_IS_LOADING_\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xC4637A6D03C24CC3",
            "ns": "DLC",
            "manualHash": true
        },
        "0x812595A0644CE1DE": {
            "name": "IS_DLC_PRESENT",
            "params": [{ "name": "dlcHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nExample:\nDLC::IS_DLC_PRESENT($\\mpbusiness2\\);\n($ = gethashkey)\nbruteforce these:\n0xB119F6D\n0x96F02EE6\n```",
            "examples": [],
            "hash": "0x812595A0644CE1DE",
            "ns": "DLC",
            "jhash": "0x1F321943",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF2E07819EF1A5289": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF2E07819EF1A5289",
            "ns": "DLC",
            "jhash": "0x881B1FDB",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 1."
        },
        "0xA213B11DFF526300": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA213B11DFF526300",
            "ns": "DLC",
            "jhash": "0xF79A97F5",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 1."
        },
        "0xD7C10C4A637992C9": {
            "name": "ON_ENTER_SP",
            "params": [],
            "results": "void",
            "description": "```\nUnloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).\nThe original (and wrong) definition is below:\nThis unload the GTA:O DLC map parts (like high end garages/apartments).\nWorks in singleplayer.\n```",
            "examples": [],
            "hash": "0xD7C10C4A637992C9",
            "ns": "DLC",
            "aliases": ["0xD7C10C4A637992C9", "_LOAD_SP_DLC_MAPS"],
            "jhash": "0x8BF60FC3",
            "manualHash": true
        }
    },
    "EVENT": {
        "0xD9F8455409B525E9": {
            "name": "ADD_SHOCKING_EVENT_AT_POSITION",
            "params": [
                { "name": "eventType", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "duration", "type": "float" }
            ],
            "results": "ScrHandle",
            "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```",
            "examples": [],
            "hash": "0xD9F8455409B525E9",
            "ns": "EVENT",
            "jhash": "0x0B30F779",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1374ABB7C15BAB92": {
            "name": "IS_SHOCKING_EVENT_IN_SPHERE",
            "params": [
                { "name": "eventType", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```",
            "examples": [],
            "hash": "0x1374ABB7C15BAB92",
            "ns": "EVENT",
            "jhash": "0x2F98823E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE42FCDFD0E4196F7": {
            "name": "BLOCK_DECISION_MAKER_EVENT",
            "params": [
                { "name": "name", "type": "Hash" },
                { "name": "eventType", "type": "int" }
            ],
            "results": "void",
            "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\nThis is limited to 4 blocked events at a time.\n```",
            "examples": [],
            "hash": "0xE42FCDFD0E4196F7",
            "ns": "EVENT",
            "jhash": "0x57506EA6",
            "manualHash": true
        },
        "0x7FD8F3BE76F89422": {
            "name": "ADD_SHOCKING_EVENT_FOR_ENTITY",
            "params": [
                { "name": "eventType", "type": "int" },
                { "name": "entity", "type": "Entity" },
                { "name": "duration", "type": "float" }
            ],
            "results": "ScrHandle",
            "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```",
            "examples": [],
            "hash": "0x7FD8F3BE76F89422",
            "ns": "EVENT",
            "jhash": "0xA81B5B71",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB604A2942ADED0EE": {
            "name": "SET_DECISION_MAKER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "name", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB604A2942ADED0EE",
            "ns": "EVENT",
            "jhash": "0x19CEAC9E",
            "manualHash": true
        },
        "0x2CDA538C44C6CCE5": {
            "name": "REMOVE_SHOCKING_EVENT",
            "params": [{ "name": "event", "type": "ScrHandle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2CDA538C44C6CCE5",
            "ns": "EVENT",
            "jhash": "0xF82D5A87",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEAABE8FDFA21274C": {
            "name": "REMOVE_ALL_SHOCKING_EVENTS",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEAABE8FDFA21274C",
            "ns": "EVENT",
            "jhash": "0x64DF6282",
            "manualHash": true
        },
        "0x3FD2EC8BF1F1CF30": {
            "name": "SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME",
            "params": [{ "name": "eventType", "type": "int" }],
            "results": "void",
            "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```",
            "examples": [],
            "hash": "0x3FD2EC8BF1F1CF30",
            "ns": "EVENT",
            "jhash": "0xA0FDCB82",
            "manualHash": true
        },
        "0xD7CD9CF34F2C99E8": {
            "name": "UNBLOCK_DECISION_MAKER_EVENT",
            "params": [
                { "name": "name", "type": "Hash" },
                { "name": "eventType", "type": "int" }
            ],
            "results": "void",
            "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```",
            "examples": [],
            "hash": "0xD7CD9CF34F2C99E8",
            "ns": "EVENT",
            "jhash": "0x62A3161D",
            "manualHash": true
        },
        "0x4FC9381A7AEE8968": {
            "name": "CLEAR_DECISION_MAKER_EVENT_RESPONSE",
            "params": [
                { "name": "name", "type": "Hash" },
                { "name": "eventType", "type": "int" }
            ],
            "results": "void",
            "description": "```\neventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt\n```",
            "examples": [],
            "hash": "0x4FC9381A7AEE8968",
            "ns": "EVENT",
            "jhash": "0x07ABD94D",
            "manualHash": true
        },
        "0x5F3B7749C112D552": {
            "name": "SUPPRESS_AGITATION_EVENTS_NEXT_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F3B7749C112D552",
            "ns": "EVENT",
            "jhash": "0x80340396",
            "manualHash": true
        },
        "0x340F1415B68AEADE": {
            "name": "REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x340F1415B68AEADE",
            "ns": "EVENT",
            "jhash": "0xA0CE89C8",
            "manualHash": true
        },
        "0x2F9A292AD0A3BD89": {
            "name": "SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F9A292AD0A3BD89",
            "ns": "EVENT",
            "jhash": "0x4CC674B5",
            "manualHash": true
        }
    },
    "ENTITY": {
        "0x18FF00FC7EFF559E": {
            "name": "APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "forceType", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p5", "type": "BOOL" },
                { "name": "isDirectionRel", "type": "BOOL" },
                { "name": "isForceRel", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nApplies a force to the specified entity.\n**List of force types (p1)**:\npublic enum ForceType\n{\n    MinForce = 0,\n    MaxForceRot = 1,\n    MinForce2 = 2,\n    MaxForceRot2 = 3,\n    ForceNoRot = 4,\n    ForceRotPlusForce = 5\n}\nResearch/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.\np6/relative - makes the xyz force not relative to world coords, but to something else\np7/highForce - setting false will make the force really low\n```",
            "examples": [],
            "hash": "0x18FF00FC7EFF559E",
            "ns": "ENTITY",
            "jhash": "0x28924E98",
            "manualHash": true
        },
        "0xFD1695C5D3B05439": {
            "name": "_ATTACH_ENTITY_BONE_TO_ENTITY_BONE_PHYSICALLY",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" },
                { "name": "entityBone", "type": "int" },
                { "name": "entityBone2", "type": "int" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFD1695C5D3B05439",
            "ns": "ENTITY",
            "aliases": ["0xFD1695C5D3B05439"],
            "manualHash": true
        },
        "0x5C48B75732C8456C": {
            "name": "_ATTACH_ENTITY_BONE_TO_ENTITY_BONE",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" },
                { "name": "entityBone", "type": "int" },
                { "name": "entityBone2", "type": "int" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5C48B75732C8456C",
            "ns": "ENTITY",
            "aliases": ["0x5C48B75732C8456C"],
            "manualHash": true
        },
        "0xC3675780C92F90F9": {
            "name": "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" },
                { "name": "boneIndex1", "type": "int" },
                { "name": "boneIndex2", "type": "int" },
                { "name": "xPos1", "type": "float" },
                { "name": "yPos1", "type": "float" },
                { "name": "zPos1", "type": "float" },
                { "name": "xPos2", "type": "float" },
                { "name": "yPos2", "type": "float" },
                { "name": "zPos2", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "breakForce", "type": "float" },
                { "name": "fixedRot", "type": "BOOL" },
                { "name": "p15", "type": "BOOL" },
                { "name": "collision", "type": "BOOL" },
                { "name": "teleport", "type": "BOOL" },
                { "name": "p18", "type": "int" }
            ],
            "results": "void",
            "description": "```\nbreakForce is the amount of force required to break the bond.\np14 - is always 1 in scripts\np15 - is 1 or 0 in scripts - unknown what it does\np16 - controls collision between the two entities (FALSE disables collision).\np17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)\np18 - is always 2 in scripts.\n```",
            "examples": [],
            "hash": "0xC3675780C92F90F9",
            "ns": "ENTITY",
            "jhash": "0x0547417F",
            "manualHash": true
        },
        "0xC5F68BE9613E2D18": {
            "name": "APPLY_FORCE_TO_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity you want to apply a force on"
                },
                {
                    "name": "forceType",
                    "type": "int",
                    "description": "See native description above for a list of commonly used values"
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Force amount (X)"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Force amount (Y)"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Force amount (Z)"
                },
                {
                    "name": "offX",
                    "type": "float",
                    "description": "Rotation/offset force (X)"
                },
                {
                    "name": "offY",
                    "type": "float",
                    "description": "Rotation/offset force (Y)"
                },
                {
                    "name": "offZ",
                    "type": "float",
                    "description": "Rotation/offset force (Z)"
                },
                {
                    "name": "boneIndex",
                    "type": "int",
                    "description": "(Often 0) Entity bone index"
                },
                {
                    "name": "isDirectionRel",
                    "type": "BOOL",
                    "description": "(Usually false) Vector defined in local (body-fixed) coordinate frame"
                },
                {
                    "name": "ignoreUpVec",
                    "type": "BOOL",
                    "description": "(Usually true)"
                },
                {
                    "name": "isForceRel",
                    "type": "BOOL",
                    "description": "(Usually true) When true, force gets multiplied with the objects mass and different objects will have the same acceleration"
                },
                {
                    "name": "p12",
                    "type": "BOOL",
                    "description": "(Usually false)"
                },
                {
                    "name": "p13",
                    "type": "BOOL",
                    "description": "(Usually true)"
                }
            ],
            "results": "void",
            "description": "Applies a force to the specified entity.\n\n**List of force types (p1)**:\n\n```\npublic enum ForceType\n{\n    MinForce = 0,\n    MaxForceRot = 1,\n    MinForce2 = 2,\n    MaxForceRot2 = 3,\n    ForceNoRot = 4,\n    ForceRotPlusForce = 5\n}\n```\n\nResearch/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local forceTypes = {\n    MinForce = 0,\n    MaxForceRot = 1,\n    MinForce2 = 2,\n    MaxForceRot2 = 3,\n    ForceNoRot = 4,\n    ForceRotPlusForce = 5\n}\n\nlocal entity = PlayerPedId()\nlocal forceType = forceTypes.MaxForceRot2\n -- sends the entity straight up into the sky:\nlocal direction = vector3(0.0, 0.0, 15.0)\nlocal rotation = vector3(0.0, 0.0, 0.0)\nlocal boneIndex = 0\nlocal isDirectionRel = false\nlocal ignoreUpVec = true\nlocal isForceRel = true\nlocal p12 = false\nlocal p13 = true\n\nApplyForceToEntity(\n    entity,\n    forceType,\n    direction,\n    rotation,\n    boneIndex,\n    isDirectionRel,\n    ignoreUpVec,\n    isForceRel,\n    p12,\n    p13\n)"
                }
            ],
            "hash": "0xC5F68BE9613E2D18",
            "ns": "ENTITY",
            "jhash": "0xC1C0855A",
            "manualHash": true
        },
        "0xAE3CBE5BF394C9C9": {
            "name": "DELETE_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity*",
                    "description": "The entity to delete."
                }
            ],
            "results": "void",
            "description": "Delete the specified entity, and invalidate the passed handle (i.e., the in/out argument).\nYou might want to check if the entity exists before with [DOES_ENTITY_EXIST](#\\_0x7239B21A38F536BA).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Retrieve the vehicle the player is currently in. \nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\n\n-- Check if the vehicle exists in the game world.\nif not DoesEntityExist(vehicle) then \n    -- If the vehicle does not exist, end the execution of the code here.\n    return \nend\n\n-- If the vehicle does exist, delete the vehicle entity from the game world.\nDeleteEntity(vehicle)"
                },
                {
                    "lang": "js",
                    "code": "// Retrieve the vehicle the player is currently in.\nconst vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle)) {\n  // If the vehicle does not exist, end the execution of the code here.\n  return;\n}\n\n// If the vehicle does exist, delete the vehicle entity from the game world.\nDeleteEntity(vehicle);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n\n// Retrieve the vehicle the player is currently in.\nVehicle vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle))\n{\n    // If the vehicle does not exist, end the execution of the code here.\n    return;\n}\n\n// If the vehicle does exist, delete the vehicle entity from the game world.\nDeleteEntity(vehicle);"
                }
            ],
            "hash": "0xAE3CBE5BF394C9C9",
            "ns": "ENTITY",
            "jhash": "0xFAA3D236",
            "manualHash": true
        },
        "0x6B9BBD38AB0796DF": {
            "name": "ATTACH_ENTITY_TO_ENTITY",
            "params": [
                {
                    "name": "entity1",
                    "type": "Entity",
                    "description": "Entity to attach."
                },
                {
                    "name": "entity2",
                    "type": "Entity",
                    "description": "Entity to attach `entity1` with."
                },
                {
                    "name": "boneIndex",
                    "type": "int",
                    "description": "This is different to boneID, use ['GET_PED_BONE_INDEX'](#\\_0x3F428D08BE5AAE31) to get the index from the ID. use the index for attaching to specific bones. `entity1` will be attached to the center of `entity2` if bone index given doesn't correspond to bone indexes for that entity type."
                },
                {
                    "name": "xPos",
                    "type": "float",
                    "description": "X-axis offset from the center of `entity2`."
                },
                {
                    "name": "yPos",
                    "type": "float",
                    "description": "Y-axis offset from the center of `entity2`."
                },
                {
                    "name": "zPos",
                    "type": "float",
                    "description": "Z-axis offset from the center of `entity2`."
                },
                {
                    "name": "xRot",
                    "type": "float",
                    "description": "X-axis rotation."
                },
                {
                    "name": "yRot",
                    "type": "float",
                    "description": "Y-axis rotation."
                },
                {
                    "name": "zRot",
                    "type": "float",
                    "description": "Z-axis rotation."
                },
                {
                    "name": "p9",
                    "type": "BOOL",
                    "description": "Unknown. Does not seem to have any effect."
                },
                {
                    "name": "useSoftPinning",
                    "type": "BOOL",
                    "description": "If set to false attached entity will not detach when fixed."
                },
                {
                    "name": "collision",
                    "type": "BOOL",
                    "description": "Controls collision between the two entities (FALSE disables collision)."
                },
                {
                    "name": "isPed",
                    "type": "BOOL",
                    "description": "Pitch doesnt work when false and roll will only work on negative numbers (only peds)"
                },
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "The order in which the rotation is applied. See [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9)"
                },
                {
                    "name": "syncRot",
                    "type": "BOOL",
                    "description": "If false it ignores entity rotation."
                }
            ],
            "results": "void",
            "description": "Attach an entity to the specified entity.",
            "examples": [],
            "hash": "0x6B9BBD38AB0796DF",
            "ns": "ENTITY",
            "jhash": "0xEC024237",
            "manualHash": true
        },
        "0x150E808B375A385A": {
            "name": "CREATE_FORCED_OBJECT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "Any" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x150E808B375A385A",
            "ns": "ENTITY",
            "jhash": "0x335190A2",
            "manualHash": true
        },
        "0x2158E81A6AF65EA9": {
            "name": "_DOES_ENTITY_HAVE_ANIM_DIRECTOR",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x2158E81A6AF65EA9",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x3A52AE588830BF7F": {
            "name": "CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "model", "type": "Hash" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3A52AE588830BF7F",
            "ns": "ENTITY",
            "jhash": "0x07AAF22C",
            "manualHash": true
        },
        "0xA72CD9CA74A5ECBA": {
            "name": "CLEAR_ENTITY_LAST_DAMAGE_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to clear the last damaging entity from."
                }
            ],
            "results": "void",
            "description": "This native **could affect** the arguments of the `CEventNetworkEntityDamage` game event, by clearing the damaging entity before the event is fired.",
            "examples": [],
            "hash": "0xA72CD9CA74A5ECBA",
            "ns": "ENTITY",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x2B83F43B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x92C47782FDA8B2A3": {
            "name": "CREATE_MODEL_SWAP",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "originalModel", "type": "Hash" },
                { "name": "newModel", "type": "Hash" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOnly works with objects!  \nNetwork players do not see changes done with this.  \n```",
            "examples": [],
            "hash": "0x92C47782FDA8B2A3",
            "ns": "ENTITY",
            "jhash": "0x0BC12F9E",
            "manualHash": true
        },
        "0x6CE177D014502E8A": {
            "name": "_ENABLE_ENTITY_UNK",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "```\nENABLE_*\n```",
            "examples": [],
            "hash": "0x6CE177D014502E8A",
            "ns": "ENTITY",
            "aliases": ["0x6CE177D014502E8A"],
            "manualHash": true
        },
        "0xDDE6DF5AE89981D2": {
            "name": "DOES_ENTITY_BELONG_TO_THIS_SCRIPT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDDE6DF5AE89981D2",
            "ns": "ENTITY",
            "jhash": "0xACFEB3F9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A97BCA30A0CE478": {
            "name": "CREATE_MODEL_HIDE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "model", "type": "Hash" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np5 = sets as true in scripts  \nSame as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.  \nNetwork players do not see changes done with this.  \n```",
            "examples": [],
            "hash": "0x8A97BCA30A0CE478",
            "ns": "ENTITY",
            "jhash": "0x7BD5CF2F",
            "manualHash": true
        },
        "0x764EB96874EFFDC1": {
            "name": "_DOES_ENTITY_HAVE_SKELETON_DATA",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x764EB96874EFFDC1",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x7239B21A38F536BA": {
            "name": "DOES_ENTITY_EXIST",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to check if it exists."
                }
            ],
            "results": "BOOL",
            "description": "Checks whether an entity exists in the game world.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentVehicle = GetVehiclePedIsIn(PlayerPedId(), false)\n\nif DoesEntityExist(currentVehicle) then\n    DeleteEntity(currentVehicle)\nend"
                },
                {
                    "lang": "js",
                    "code": "const currentVehicle = GetVehiclePedIsIn(PlayerPedId(), false);\n\nif (DoesEntityExist(currentVehicle)) {\n  DeleteEntity(currentVehicle);\n}"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API\n// ...\n\nint currentVehicle = GetVehiclePedIsIn(PlayerPedId(), false);\n\nif(DoesEntityExist(currentVehicle))\n{\n    DeleteEntity(currentVehicle);\n}\n\n// or the preferred use of C# wrapper\nVehicle currentVehicle = Game.PlayerPed.CurrentVehicle;\n\n// DoesEntityExist already invoked using Game.PlayerPed.CurrentVehicle\nif(currentVehicle != null)\n{\n    currentVehicle.Delete();\n}"
                }
            ],
            "hash": "0x7239B21A38F536BA",
            "ns": "ENTITY",
            "jhash": "0x3AC90869",
            "manualHash": true,
            "resultsDescription": "Whether the entity exists or not."
        },
        "0x961AC54BF0613F5D": {
            "name": "DETACH_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                {
                    "name": "dynamic",
                    "type": "BOOL",
                    "description": "Set to `true` to keep velocity after detaching"
                },
                { "name": "collision", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x961AC54BF0613F5D",
            "ns": "ENTITY",
            "jhash": "0xC8EFCB41",
            "manualHash": true
        },
        "0xDA95EA3317CC5064": {
            "name": "DOES_ENTITY_HAVE_PHYSICS",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDA95EA3317CC5064",
            "ns": "ENTITY",
            "jhash": "0x9BCD2979",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x40FDEDB72F8293B2": {
            "name": "FORCE_ENTITY_AI_AND_ANIMATION_UPDATE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "```\nBased on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.  \n```",
            "examples": [],
            "hash": "0x40FDEDB72F8293B2",
            "ns": "ENTITY",
            "jhash": "0x58D9775F",
            "manualHash": true
        },
        "0xFEDDF04D62B8D790": {
            "name": "GET_ANIM_DURATION",
            "params": [
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" }
            ],
            "results": "float",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0xFEDDF04D62B8D790",
            "ns": "ENTITY",
            "aliases": ["_GET_ANIM_DURATION"],
            "jhash": "0x8B5E3E3D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x50BD2730B191E360": {
            "name": "GET_ENTITY_ANIM_TOTAL_TIME",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" }
            ],
            "results": "float",
            "description": "```\nReturns a float value representing animation's total playtime in milliseconds.  \nExample:  \nGET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),\"amb@world_human_yoga@female@base\",\"base_b\")   \nreturn 20800.000000  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x50BD2730B191E360",
            "ns": "ENTITY",
            "jhash": "0x433A9D18",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x07F1BE2BCCAA27A7": {
            "name": "FIND_ANIM_EVENT_PHASE",
            "params": [
                { "name": "animDictionary", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "p2", "type": "char*" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "```\nIn the script \"player_scene_t_bbfight.c4\":  \n\"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4/*16*/], v_9, &v_A, &v_B))\"  \n-- &l_16E (p0) is requested as an anim dictionary earlier in the script.  \n-- &l_19F[v_4/*16*/] (p1) is used in other natives in the script as the \"animation\" param.  \n-- v_9 (p2) is instantiated as \"victim_fall\"; I'm guessing that's another anim  \n--v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:   \n\"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))\"  \nBoth v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though  \n-alphazolam  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x07F1BE2BCCAA27A7",
            "ns": "ENTITY",
            "jhash": "0xC41DDA62",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5A47B3B5E63E94C6": {
            "name": "GET_ENTITY_ALPHA",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5A47B3B5E63E94C6",
            "ns": "ENTITY",
            "jhash": "0x1560B017",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x060D6E96F8B8E48D": {
            "name": "DOES_ENTITY_HAVE_DRAWABLE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x060D6E96F8B8E48D",
            "ns": "ENTITY",
            "jhash": "0xA5B33300",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x346D81500D088F42": {
            "name": "GET_ENTITY_ANIM_CURRENT_TIME",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" }
            ],
            "results": "float",
            "description": "```\nReturns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.  \nExample:  \n0.000000 - mark the starting of animation.  \n0.500000 - mark the midpoint of the animation.  \n1.000000 - mark the end of animation.  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x346D81500D088F42",
            "ns": "ENTITY",
            "jhash": "0x83943F41",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB328DCC3A3AA401B": {
            "name": "_GET_ENTITY_BONE_COUNT",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xB328DCC3A3AA401B",
            "ns": "ENTITY",
            "aliases": ["0xB328DCC3A3AA401B"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x428CA6DBD1094446": {
            "name": "FREEZE_ENTITY_POSITION",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to freeze/unfreeze."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Freeze or unfreeze entity."
                }
            ],
            "results": "void",
            "description": "Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "FreezeEntityPosition(PlayerPedId(), true)"
                },
                {
                    "lang": "js",
                    "code": "FreezeEntityPosition(PlayerPedId(), true);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\n\nFreezeEntityPosition(PlayerPedId(), true);\n\n// or the preferred use of C# wrapper\nGame.PlayerPed.IsPositionFrozen = true;"
                }
            ],
            "hash": "0x428CA6DBD1094446",
            "ns": "ENTITY",
            "jhash": "0x65C16D57",
            "manualHash": true
        },
        "0x48C2BED9180FE123": {
            "name": "GET_ENTITY_ATTACHED_TO",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Entity",
            "description": "",
            "examples": [],
            "hash": "0x48C2BED9180FE123",
            "ns": "ENTITY",
            "jhash": "0xFE1589F9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCE6294A232D03786": {
            "name": "_GET_ENTITY_BONE_ROTATION",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "boneIndex", "type": "int" }
            ],
            "results": "Vector3",
            "description": "```\nGets the world rotation of the specified bone of the specified entity.\n```",
            "examples": [],
            "hash": "0xCE6294A232D03786",
            "ns": "ENTITY",
            "aliases": [
                "0xCE6294A232D03786",
                "_GET_WORLD_ROTATION_OF_ENTITY_BONE"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE465D4AB7CA6AE72": {
            "name": "GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xE465D4AB7CA6AE72",
            "ns": "ENTITY",
            "jhash": "0xAB415C07",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x46F8696933A63C9B": {
            "name": "_GET_ENTITY_BONE_POSITION_2",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "boneIndex", "type": "int" }
            ],
            "results": "Vector3",
            "description": "```\nGets the world rotation of the specified bone of the specified entity.\nThis native is used in casinoroulette.c but I don't know yet what is the difference with _GET_ENTITY_BONE_ROTATION\n```",
            "examples": [],
            "hash": "0x46F8696933A63C9B",
            "ns": "ENTITY",
            "aliases": [
                "0x46F8696933A63C9B",
                "_GET_WORLD_POSITION_OF_ENTITY_BONE_2"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3FEF770D40960D5A": {
            "name": "GET_ENTITY_COORDS",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the coordinates from."
                },
                {
                    "name": "alive",
                    "type": "BOOL",
                    "description": "Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive."
                }
            ],
            "results": "Vector3",
            "description": "Gets the current coordinates (world position) for a specified entity.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerCoords = GetEntityCoords(PlayerPedId())\nprint(playerCoords) -- vector3(...)"
                },
                {
                    "lang": "js",
                    "code": "const [playerX, playerY, playerZ] = GetEntityCoords(PlayerPedId(), false);\nconsole.log(`${playerX}, ${playerY}, ${playerZ}`);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\nVector3 playerCoords = GetEntityCoords(PlayerPedId(), false);\n\n// or the preferred use of C# wrapper\nVector3 playerCoords = Game.PlayerPed.Position;\n\nDebug.WriteLine($\"{playerCoords}\");"
                }
            ],
            "hash": "0x3FEF770D40960D5A",
            "ns": "ENTITY",
            "apiset": "client",
            "jhash": "0x1647F1CB",
            "manualHash": true,
            "resultsDescription": "The current entity coordinates."
        },
        "0xCCF1E97BEFDAE480": {
            "name": "GET_ENTITY_COLLISION_DISABLED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCCF1E97BEFDAE480",
            "ns": "ENTITY",
            "aliases": ["0xCCF1E97BEFDAE480", "_GET_ENTITY_COLLISON_DISABLED"],
            "jhash": "0xE8C0C629",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD95CC5D2AB15A09F": {
            "name": "GET_ENTITY_CAN_BE_DAMAGED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD95CC5D2AB15A09F",
            "ns": "ENTITY",
            "aliases": ["0xD95CC5D2AB15A09F"],
            "jhash": "0xE4938B5D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFB71170B7E76ACBA": {
            "name": "GET_ENTITY_BONE_INDEX_BY_NAME",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "boneName", "type": "char*" }
            ],
            "results": "int",
            "description": "```\nReturns the index of the bone. If the bone was not found, -1 will be returned.   \nlist:  \npastebin.com/D7JMnX1g  \nBoneNames:  \n\tchassis,  \n\twindscreen,  \n\tseat_pside_r,  \n\tseat_dside_r,  \n\tbodyshell,  \n\tsuspension_lm,  \n\tsuspension_lr,  \n\tplatelight,  \n\tattach_female,  \n\tattach_male,  \n\tbonnet,  \n\tboot,  \n\tchassis_dummy,\t//Center of the dummy  \n\tchassis_Control,\t//Not found yet  \n\tdoor_dside_f,\t//Door left, front  \n\tdoor_dside_r,\t//Door left, back  \n\tdoor_pside_f,\t//Door right, front  \n\tdoor_pside_r,\t//Door right, back  \n\tGun_GripR,  \n\twindscreen_f,  \n\tplatelight,\t//Position where the light above the numberplate is located  \n\tVFX_Emitter,  \n\twindow_lf,\t//Window left, front  \n\twindow_lr,\t//Window left, back  \n\twindow_rf,\t//Window right, front  \n\twindow_rr,\t//Window right, back  \n\tengine,\t//Position of the engine  \n\tgun_ammo,  \n\tROPE_ATTATCH,\t//Not misspelled. In script \"finale_heist2b.c4\".  \n\twheel_lf,\t//Wheel left, front  \n\twheel_lr,\t//Wheel left, back  \n\twheel_rf,\t//Wheel right, front  \n\twheel_rr,\t//Wheel right, back  \n\texhaust,\t//Exhaust. shows only the position of the stock-exhaust  \n\toverheat,\t//A position on the engine(not exactly sure, how to name it)  \n\tmisc_e,\t//Not a car-bone.  \n\tseat_dside_f,\t//Driver-seat  \n\tseat_pside_f,\t//Seat next to driver  \n\tGun_Nuzzle,  \n\tseat_r  \nI doubt that the function is case-sensitive, since I found a \"Chassis\" and a \"chassis\". - Just tested: Definitely not case-sensitive.  \n```",
            "examples": [],
            "hash": "0xFB71170B7E76ACBA",
            "ns": "ENTITY",
            "jhash": "0xE4ECAC22",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE83D4F9BA2A38914": {
            "name": "GET_ENTITY_HEADING",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the heading from."
                }
            ],
            "results": "float",
            "description": "```\nReturns the heading of the entity in degrees. Also know as the \"Yaw\" of an entity.\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local heading = GetEntityHeading(PlayerPedId())\nprint(heading)"
                },
                {
                    "lang": "js",
                    "code": "const heading = GetEntityHeading(PlayerPedId());\nconsole.log(`${heading}`);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\nfloat heading = GetEntityHeading(PlayerPedId());\n\n// or the preferred use of C# wrapper\nfloat heading = Game.PlayerPed.Heading;\n\nDebug.WriteLine($\"{heading}\");"
                }
            ],
            "hash": "0xE83D4F9BA2A38914",
            "ns": "ENTITY",
            "jhash": "0x972CC383",
            "manualHash": true,
            "resultsDescription": "The current entity heading."
        },
        "0x866A4A5FAE349510": {
            "name": "GET_ENTITY_FORWARD_Y",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "float",
            "description": "```\nGets the Y-component of the entity's forward vector.  \n```",
            "examples": [],
            "hash": "0x866A4A5FAE349510",
            "ns": "ENTITY",
            "jhash": "0x9E2F917C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8BB4EF4214E0E6D5": {
            "name": "GET_ENTITY_FORWARD_X",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "float",
            "description": "```\nGets the X-component of the entity's forward vector.  \n```",
            "examples": [],
            "hash": "0x8BB4EF4214E0E6D5",
            "ns": "ENTITY",
            "jhash": "0x49FAE914",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBD8D32550E5CEBFE": {
            "name": "_GET_ENTITY_BONE_ROTATION_LOCAL",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "boneIndex", "type": "int" }
            ],
            "results": "Vector3",
            "description": "Gets the local rotation of the specified bone of the specified entity.\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xBD8D32550E5CEBFE",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x4159C2762B5791D6": {
            "name": "GET_ENTITY_LOD_DIST",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "int",
            "description": "```\nReturns the LOD distance of an entity.  \n```",
            "examples": [],
            "hash": "0x4159C2762B5791D6",
            "ns": "ENTITY",
            "jhash": "0x4DA3D51F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEEF059FAD016D209": {
            "name": "GET_ENTITY_HEALTH",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the health from."
                }
            ],
            "results": "int",
            "description": "```\nReturns an integer value of entity's current health.\nExample of range for ped:\n- Player [0 to 200]\n- Ped [100 to 200]\n- Vehicle [0 to 1000]\n- Object [0 to 1000]\nHealth is actually a float value but this native casts it to int.\nIn order to get the actual value, do:\nfloat health = *(float *)(entityAddress + 0x280);\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local health = GetEntityHealth(PlayerPedId())\nprint(health)"
                },
                {
                    "lang": "js",
                    "code": "const health = GetEntityHealth(PlayerPedId());\nconsole.log(`${health}`);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\nint health = GetEntityHealth(PlayerPedId());\n\n// or the preferred use of C# wrapper\n// Note: Returns 0-100 using this property.\nint health = Game.PlayerPed.Health;\n\nDebug.WriteLine($\"{health}\");"
                }
            ],
            "hash": "0xEEF059FAD016D209",
            "ns": "ENTITY",
            "jhash": "0x8E3222B7",
            "manualHash": true,
            "resultsDescription": "The current entity health."
        },
        "0x5A504562485944DD": {
            "name": "GET_ENTITY_HEIGHT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "X", "type": "float" },
                { "name": "Y", "type": "float" },
                { "name": "Z", "type": "float" },
                { "name": "atTop", "type": "BOOL" },
                { "name": "inWorldCoords", "type": "BOOL" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x5A504562485944DD",
            "ns": "ENTITY",
            "jhash": "0xEE443481",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0A794A5A57F8DF91": {
            "name": "GET_ENTITY_FORWARD_VECTOR",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the forward vector for."
                }
            ],
            "results": "Vector3",
            "description": "```\nGets the entity's forward vector.\n```",
            "examples": [],
            "hash": "0x0A794A5A57F8DF91",
            "ns": "ENTITY",
            "jhash": "0x84DCECBF",
            "manualHash": true,
            "resultsDescription": "The forward vector."
        },
        "0x15D757606D170C3C": {
            "name": "GET_ENTITY_MAX_HEALTH",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "int",
            "description": "```\nReturn an integer value of entity's maximum health.  \nExample:  \n- Player = 200  \n```",
            "examples": [],
            "hash": "0x15D757606D170C3C",
            "ns": "ENTITY",
            "jhash": "0xC7AE6AA1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1DD55701034110E5": {
            "name": "GET_ENTITY_HEIGHT_ABOVE_GROUND",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "float",
            "description": "```\nReturn height (z-dimension) above ground.   \nExample: The pilot in a titan plane is 1.844176 above ground.  \nHow can i convert it to meters?  \nEverything seems to be in meters, probably this too.  \n```",
            "examples": [],
            "hash": "0x1DD55701034110E5",
            "ns": "ENTITY",
            "jhash": "0x57F56A4D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD45DC2893621E1FE": {
            "name": "GET_ENTITY_PITCH",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xD45DC2893621E1FE",
            "ns": "ENTITY",
            "jhash": "0xFCE6ECE5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xECB2FC7235A7D137": {
            "name": "GET_ENTITY_MATRIX",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "forwardVector", "type": "Vector3*" },
                { "name": "rightVector", "type": "Vector3*" },
                { "name": "upVector", "type": "Vector3*" },
                { "name": "position", "type": "Vector3*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xECB2FC7235A7D137",
            "ns": "ENTITY",
            "jhash": "0xEB9EB001",
            "manualHash": true
        },
        "0x1F922734E259BD26": {
            "name": "_GET_ENTITY_PICKUP",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "Entity",
            "description": "```\nGET_ENTITY_*\n\nSeems to return the handle of the entity's portable pickup.\n\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x1F922734E259BD26",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x831E0242595560DF": {
            "name": "GET_ENTITY_ROLL",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "float",
            "description": "```\nDisplays the current ROLL axis of the entity [-180.0000/180.0000+]  \n(Sideways Roll) such as a vehicle tipped on its side  \n```",
            "examples": [],
            "hash": "0x831E0242595560DF",
            "ns": "ENTITY",
            "jhash": "0x36610842",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x846BF6291198A71E": {
            "name": "_GET_ENTITY_PHYSICS_HEADING",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "float",
            "description": "```\nGets the heading of the entity physics in degrees, which tends to be more accurate than just \"GET_ENTITY_HEADING\". This can be clearly seen while, for example, ragdolling a ped/player.  \nNOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.  \n```",
            "examples": [],
            "hash": "0x846BF6291198A71E",
            "ns": "ENTITY",
            "aliases": ["0x846BF6291198A71E"],
            "jhash": "0x9320E642",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7B3703D2D32DFA18": {
            "name": "GET_ENTITY_QUATERNION",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "x", "type": "float*" },
                { "name": "y", "type": "float*" },
                { "name": "z", "type": "float*" },
                { "name": "w", "type": "float*" }
            ],
            "results": "void",
            "description": "```\nw is the correct parameter name!  \n```",
            "examples": [],
            "hash": "0x7B3703D2D32DFA18",
            "ns": "ENTITY",
            "jhash": "0x5154EC90",
            "manualHash": true
        },
        "0x9F47B058362C84B5": {
            "name": "GET_ENTITY_MODEL",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the model for."
                }
            ],
            "results": "Hash",
            "description": "Returns the model hash from an entity.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local hash = GetEntityModel(PlayerPedId())\n\nif hash == `mp_m_freemode_01` then\n    print(\"This player is using the male freemode model.\")\nend"
                },
                {
                    "lang": "js",
                    "code": "const hash = GetEntityModel(PlayerPedId());\n\nif (hash === GetHashKey('mp_m_freemode_01')) {\n  console.log('This player is using the male freemode model.');\n}"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\n\nuint hash = GetEntityModel(PlayerPedId());\n\nif(hash == GetHashKey(\"mp_m_freemode_01\"))\n{\n    Debug.WriteLine(\"This player is using the male freemode model.\");\n}\n\n// or the preferred use of C# wrapper\nif(Game.PlayerPed.Model.Hash == Game.GenerateHash(\"mp_m_freemode_01\"))\n{\n    Debug.WriteLine(\"This player is using the male freemode model.\");\n}"
                }
            ],
            "hash": "0x9F47B058362C84B5",
            "ns": "ENTITY",
            "jhash": "0xDAFCB3EC",
            "manualHash": true,
            "resultsDescription": "The model hash of the entity."
        },
        "0xA6E9C38DB51D7748": {
            "name": "GET_ENTITY_SCRIPT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "script", "type": "ScrHandle*" }
            ],
            "results": "char*",
            "description": "```\nAll ambient entities in-world seem to have the same value for the second argument (Any *script), depending on when the scripthook was activated/re-activated. I've seen numbers from ~5 to almost 70 when the value was translated with to_string. The function return value seems to always be 0.  \n```",
            "examples": [],
            "hash": "0xA6E9C38DB51D7748",
            "ns": "ENTITY",
            "jhash": "0xB7F70784",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBE8CD9BE829BBEBF": {
            "name": "_GET_ENTITY_PROOFS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "bulletProof", "type": "BOOL*" },
                { "name": "fireProof", "type": "BOOL*" },
                { "name": "explosionProof", "type": "BOOL*" },
                { "name": "collisionProof", "type": "BOOL*" },
                { "name": "meleeProof", "type": "BOOL*" },
                { "name": "steamProof", "type": "BOOL*" },
                { "name": "p7", "type": "BOOL*" },
                { "name": "drownProof", "type": "BOOL*" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xBE8CD9BE829BBEBF",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0xAFBD61CC738D9EB9": {
            "name": "GET_ENTITY_ROTATION",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the rotation for."
                },
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "The order yaw, pitch and roll is applied. Usually 2."
                }
            ],
            "results": "Vector3",
            "description": "```\nrotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.\n\nWhat you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.\n\nWhat it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll:\nwww.allstar.fiu.edu/aero/images/pic5-1.gif\n```\n\n### Rotation Orders\n\n*   **0**: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.\n*   **1**: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.\n*   **2**: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.\n*   **3**: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.\n*   **4**: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.\n*   **5**: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerRotation = GetEntityRotation(PlayerPedId(), 2)\nprint(playerRotation)"
                },
                {
                    "lang": "js",
                    "code": "const [rotationX, rotationY, rotationZ] = GetEntityRotation(PlayerPedId(), 2);\nconsole.log(`${rotationX} ${rotationY} ${rotationZ}`);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\n\nVector3 playerRotation = GetEntityRotation(Game.PlayerPed.Handle, 2);\n\n// or the preferred use of C# wrapper\nVector3 playerRotation = Game.PlayerPed.Rotation;\n\nDebug.WriteLine($\"{playerRotation}\");"
                }
            ],
            "hash": "0xAFBD61CC738D9EB9",
            "ns": "ENTITY",
            "jhash": "0x8FF45B04",
            "manualHash": true,
            "resultsDescription": "A vector where the Z coordinate is the yaw."
        },
        "0xD5037BA82E12416F": {
            "name": "GET_ENTITY_SPEED",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "Entity id you want to test for speed."
                }
            ],
            "results": "float",
            "description": "Get the speed of a entity.",
            "examples": [],
            "hash": "0xD5037BA82E12416F",
            "ns": "ENTITY",
            "jhash": "0x9E1E4798",
            "manualHash": true,
            "resultsDescription": "Speed of a entity in m/s. You can convert to km/h using the value you get and multiply by 3.6, and miles/h by 2.236936. Also, the float returned is the length of [GET_ENTITY_SPEED_VECTOR](?\\_0x9A8D700A51CB7B0D)"
        },
        "0xF6F5161F4534EDFF": {
            "name": "GET_ENTITY_POPULATION_TYPE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to obtain the population type from."
                }
            ],
            "results": "int",
            "description": "A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt",
            "examples": [],
            "hash": "0xF6F5161F4534EDFF",
            "ns": "ENTITY",
            "jhash": "0xFC30DDFF",
            "manualHash": true,
            "resultsDescription": "A population type, from the enumeration above."
        },
        "0x9A8D700A51CB7B0D": {
            "name": "GET_ENTITY_SPEED_VECTOR",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "relative", "type": "BOOL" }
            ],
            "results": "Vector3",
            "description": "```\nRelative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).  \n```",
            "examples": [],
            "hash": "0x9A8D700A51CB7B0D",
            "ns": "ENTITY",
            "jhash": "0x3ED2B997",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x95EED5A694951F9F": {
            "name": "GET_ENTITY_UPRIGHT_VALUE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x95EED5A694951F9F",
            "ns": "ENTITY",
            "jhash": "0xF4268190",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x213B91045D09B983": {
            "name": "GET_ENTITY_ROTATION_VELOCITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x213B91045D09B983",
            "ns": "ENTITY",
            "jhash": "0x9BF8A73F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE81AFC1BC4CC41CE": {
            "name": "GET_ENTITY_SUBMERGED_LEVEL",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "float",
            "description": "```\nGet how much of the entity is submerged.  1.0f is whole entity.  \n```",
            "examples": [],
            "hash": "0xE81AFC1BC4CC41CE",
            "ns": "ENTITY",
            "jhash": "0x0170F68C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8ACD366038D14505": {
            "name": "GET_ENTITY_TYPE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "int",
            "description": "```\nReturns:\n0 = no entity\n1 = ped\n2 = vehicle\n3 = object\n```",
            "examples": [],
            "hash": "0x8ACD366038D14505",
            "ns": "ENTITY",
            "jhash": "0x0B1BD08D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4805D2B1D8CF94A9": {
            "name": "GET_ENTITY_VELOCITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x4805D2B1D8CF94A9",
            "ns": "ENTITY",
            "jhash": "0xC14C9B6B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4DC9A62F844D9337": {
            "name": "GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "team", "type": "int" }
            ],
            "results": "Player",
            "description": "",
            "examples": [],
            "hash": "0x4DC9A62F844D9337",
            "ns": "ENTITY",
            "jhash": "0xB1808F56",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5C3D0A935F535C4C": {
            "name": "GET_LAST_MATERIAL_HIT_BY_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x5C3D0A935F535C4C",
            "ns": "ENTITY",
            "jhash": "0xC0E3AA47",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7196842CB375CDB3": {
            "name": "GET_NEAREST_PLAYER_TO_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Player",
            "description": "",
            "examples": [],
            "hash": "0x7196842CB375CDB3",
            "ns": "ENTITY",
            "jhash": "0xCE17FDEC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD7E3B9735C0F89D6": {
            "name": "GET_OBJECT_INDEX_FROM_ENTITY_INDEX",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Object",
            "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n```",
            "examples": [],
            "hash": "0xD7E3B9735C0F89D6",
            "ns": "ENTITY",
            "jhash": "0xBC5A9C58",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2274BC1C4885E333": {
            "name": "GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" }
            ],
            "results": "Vector3",
            "description": "```\nConverts world coords (posX - Z) to coords relative to the entity  \nExample:  \nposX = 50  \nposY = 1000  \nposZ = 60  \nEntity's coords are: x=30, y=1000, z=60.  \nAll three returned coords will then be in range of [-20,20] depending on rotation of the entity.  \n```",
            "examples": [],
            "hash": "0x2274BC1C4885E333",
            "ns": "ENTITY",
            "jhash": "0x6477EC9E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1899F328B0E12848": {
            "name": "GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" }
            ],
            "results": "Vector3",
            "description": "```\nOffset values are relative to the entity.  \nx = left/right  \ny = forward/backward  \nz = up/down  \n```",
            "examples": [],
            "hash": "0x1899F328B0E12848",
            "ns": "ENTITY",
            "jhash": "0xABCF043A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x04A2A40C73395041": {
            "name": "GET_PED_INDEX_FROM_ENTITY_INDEX",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Ped",
            "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n```",
            "examples": [],
            "hash": "0x04A2A40C73395041",
            "ns": "ENTITY",
            "jhash": "0xC46F74AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4B53F92932ADFAC0": {
            "name": "GET_VEHICLE_INDEX_FROM_ENTITY_INDEX",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Vehicle",
            "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n```",
            "examples": [],
            "hash": "0x4B53F92932ADFAC0",
            "ns": "ENTITY",
            "jhash": "0xC69CF43D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEAF4CD9EA3E7E922": {
            "name": "HAS_ANIM_EVENT_FIRED",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "actionHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "```\nif (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"CreateObject\")))\n```",
            "examples": [],
            "hash": "0xEAF4CD9EA3E7E922",
            "ns": "ENTITY",
            "jhash": "0x66571CA0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x20B711662962B472": {
            "name": "HAS_ENTITY_ANIM_FINISHED",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "p3", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nP3 is always 3 as far as i cant tell  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x20B711662962B472",
            "ns": "ENTITY",
            "jhash": "0x1D9CAB92",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE9676F61BC0B3321": {
            "name": "HAS_COLLISION_LOADED_AROUND_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE9676F61BC0B3321",
            "ns": "ENTITY",
            "jhash": "0x851687F9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x605F5A140F202491": {
            "name": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x605F5A140F202491",
            "ns": "ENTITY",
            "jhash": "0x53FD4A25",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44A8FCB8ED227738": {
            "name": "GET_WORLD_POSITION_OF_ENTITY_BONE",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "boneIndex", "type": "int" }
            ],
            "results": "Vector3",
            "description": "```\nReturns the coordinates of an entity-bone.  \n```",
            "examples": [],
            "hash": "0x44A8FCB8ED227738",
            "ns": "ENTITY",
            "jhash": "0x7C6339DF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC86D67D52A707CF8": {
            "name": "HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nEntity 1 = Victim  \nEntity 2 = Attacker  \np2 seems to always be 1  \n```",
            "examples": [],
            "hash": "0xC86D67D52A707CF8",
            "ns": "ENTITY",
            "jhash": "0x07FC77E0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDFD5033FDBA0A9C8": {
            "name": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDFD5033FDBA0A9C8",
            "ns": "ENTITY",
            "jhash": "0x878C2CE0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0267D00AF114F17A": {
            "name": "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" }
            ],
            "results": "BOOL",
            "description": "```\nHas the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.  \nThis is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops  \n```",
            "examples": [],
            "hash": "0x0267D00AF114F17A",
            "ns": "ENTITY",
            "jhash": "0x210D87C8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8BAD02F0368D9E14": {
            "name": "HAS_ENTITY_COLLIDED_WITH_ANYTHING",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "```\nCalled on tick.  \nTested with vehicles, returns true whenever the vehicle is touching any entity.  \nNote: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.  \n```",
            "examples": [],
            "hash": "0x8BAD02F0368D9E14",
            "ns": "ENTITY",
            "jhash": "0x662A2F41",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x394BDE2A7BBA031E": {
            "name": "_HAS_ENTITY_CLEAR_LOS_TO_ENTITY_2",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" },
                { "name": "traceType", "type": "int" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x394BDE2A7BBA031E",
            "ns": "ENTITY",
            "aliases": ["0x394BDE2A7BBA031E"],
            "manualHash": true
        },
        "0x95EB9964FF5C5C65": {
            "name": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x95EB9964FF5C5C65",
            "ns": "ENTITY",
            "jhash": "0x6B74582E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0A7B270912999B3C": {
            "name": "IS_ENTITY_A_MISSION_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0A7B270912999B3C",
            "ns": "ENTITY",
            "jhash": "0x2632E124",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFCDFF7B72D23A1AC": {
            "name": "HAS_ENTITY_CLEAR_LOS_TO_ENTITY",
            "params": [
                {
                    "name": "entity1",
                    "type": "Entity",
                    "description": "Entity to start from"
                },
                {
                    "name": "entity2",
                    "type": "Entity",
                    "description": "Entity to check to"
                },
                {
                    "name": "flags",
                    "type": "int",
                    "description": "A bit mask with bits 1, 2, 4, etc, relating to collider types (see: [START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE](#\\_0x377906D8A31E5586)). 17 is most common in GTA scripts."
                }
            ],
            "results": "BOOL",
            "description": "Checks if entity1 has a clear line of sight to entity2. So a simple raycast which if it collides with any of the given colliderTypes returns false.\n\nThe direction of the check matters with for example bushes, so checking from inside to outside a bush with traceType 256 returns true, but the other way around returns false.",
            "examples": [],
            "hash": "0xFCDFF7B72D23A1AC",
            "ns": "ENTITY",
            "jhash": "0x53576FA7",
            "manualHash": true,
            "resultsDescription": "Returns `true` if no collider of specified bitmask is hit."
        },
        "0x6AC7003FA6E5575E": {
            "name": "IS_ENTITY_A_VEHICLE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6AC7003FA6E5575E",
            "ns": "ENTITY",
            "jhash": "0xBE800B01",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x731EC8A916BD11A1": {
            "name": "IS_AN_ENTITY",
            "params": [{ "name": "handle", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x731EC8A916BD11A1",
            "ns": "ENTITY",
            "jhash": "0xD4B9715A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8D68C8FD0FACA94E": {
            "name": "IS_ENTITY_AN_OBJECT",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8D68C8FD0FACA94E",
            "ns": "ENTITY",
            "jhash": "0x3F52E561",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x751B70C3D034E187": {
            "name": "IS_ENTITY_AT_ENTITY",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" },
                { "name": "xSize", "type": "float" },
                { "name": "ySize", "type": "float" },
                { "name": "zSize", "type": "float" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nChecks if entity1 is within the box defined by x/y/zSize of entity2.  \nLast three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0  \n```",
            "examples": [],
            "hash": "0x751B70C3D034E187",
            "ns": "ENTITY",
            "jhash": "0xDABDCB52",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCF511840CEEDE0CC": {
            "name": "IS_ENTITY_ATTACHED_TO_ANY_OBJECT",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCF511840CEEDE0CC",
            "ns": "ENTITY",
            "jhash": "0x0B5DE340",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB346476EF1A64897": {
            "name": "IS_ENTITY_ATTACHED",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to check if it is attached to another entity."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\n\nif IsEntityAttached(ped) then\n    DetachEntity(ped, true, true)\nend"
                },
                {
                    "lang": "js",
                    "code": "int ped = PlayerPedId();\n\nif(IsEntityAttached(ped)) {\n    DetachEntity(ped, true, true);\n}"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\n\nint ped = PlayerPedId();\n\nif(IsEntityAttached(ped))\n{\n    DetachEntity(ped, true, true);\n}\n\n// or the preferred use of C# wrapper\nif(Game.PlayerPed.IsAttached()) {\n    Game.PlayerPed.Detach();\n}"
                }
            ],
            "hash": "0xB346476EF1A64897",
            "ns": "ENTITY",
            "jhash": "0xEC1479D5",
            "manualHash": true,
            "resultsDescription": "Whether the entity is attached to another entity."
        },
        "0x26AA915AD89BFB4B": {
            "name": "IS_ENTITY_ATTACHED_TO_ANY_VEHICLE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x26AA915AD89BFB4B",
            "ns": "ENTITY",
            "jhash": "0xDE5C995E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x524AC5ECEA15343E": {
            "name": "IS_ENTITY_A_PED",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to check if it's a Ped."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x524AC5ECEA15343E",
            "ns": "ENTITY",
            "jhash": "0x55D33EAB",
            "manualHash": true,
            "resultsDescription": "Whether the entity is a Ped."
        },
        "0x886E37EC497200B6": {
            "name": "IS_ENTITY_IN_AIR",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x886E37EC497200B6",
            "ns": "ENTITY",
            "jhash": "0xA4157987",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEFBE71898A993728": {
            "name": "IS_ENTITY_ATTACHED_TO_ENTITY",
            "params": [
                { "name": "from", "type": "Entity" },
                { "name": "to", "type": "Entity" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEFBE71898A993728",
            "ns": "ENTITY",
            "jhash": "0xB0ABFEA8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x20B60995556D004F": {
            "name": "IS_ENTITY_AT_COORD",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "xPos", "type": "float" },
                { "name": "yPos", "type": "float" },
                { "name": "zPos", "type": "float" },
                { "name": "xSize", "type": "float" },
                { "name": "ySize", "type": "float" },
                { "name": "zSize", "type": "float" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nChecks if entity is within x/y/zSize distance of x/y/z.   \nLast three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0  \n```",
            "examples": [],
            "hash": "0x20B60995556D004F",
            "ns": "ENTITY",
            "jhash": "0xD749B606",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCFB0A0D8EDD145A3": {
            "name": "IS_ENTITY_IN_WATER",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCFB0A0D8EDD145A3",
            "ns": "ENTITY",
            "jhash": "0x4C3C2508",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1218E6886D3D8327": {
            "name": "IS_ENTITY_STATIC",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "```\nA static ped will not react to natives like \"APPLY_FORCE_TO_ENTITY\" or \"SET_ENTITY_VELOCITY\" and oftentimes will not react to task-natives like \"AI::TASK_COMBAT_PED\". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.  \n^ Attach a phCollider to the ped.  \n```",
            "examples": [],
            "hash": "0x1218E6886D3D8327",
            "ns": "ENTITY",
            "jhash": "0x928E12E9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x51210CED3DA1C78A": {
            "name": "IS_ENTITY_IN_ANGLED_AREA",
            "params": [
                { "name": "entity", "type": "Entity" },
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                },
                {
                    "name": "debug",
                    "type": "BOOL",
                    "description": "a debug flag invoking functions in the same path as `DRAW_MARKER`"
                },
                {
                    "name": "includez",
                    "type": "BOOL",
                    "description": "If true, include the Z dimension when doing the height check; otherwise the query becomes two-dimensional"
                },
                { "name": "p10", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "p10 is some entity flag check, also used in [`IS_ENTITY_AT_ENTITY`](#\\_0x751B70C3D034E187), [`IS_ENTITY_IN_AREA`](#\\_0x54736AA40E271165) and [`IS_ENTITY_AT_COORD`](#\\_0x20B60995556D004F).\n\nSee [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.",
            "examples": [],
            "hash": "0x51210CED3DA1C78A",
            "ns": "ENTITY",
            "jhash": "0x883622FA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB1632E9A5F988D11": {
            "name": "IS_ENTITY_ATTACHED_TO_ANY_PED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB1632E9A5F988D11",
            "ns": "ENTITY",
            "jhash": "0x9D7A609C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5F9532F3B5CC2551": {
            "name": "IS_ENTITY_DEAD",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: BOOL p1\n```",
            "examples": [],
            "hash": "0x5F9532F3B5CC2551",
            "ns": "ENTITY",
            "jhash": "0xB6F7CBAC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE31C2C72B8692B64": {
            "name": "IS_ENTITY_OCCLUDED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE31C2C72B8692B64",
            "ns": "ENTITY",
            "jhash": "0x46BC5B40",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x54736AA40E271165": {
            "name": "IS_ENTITY_IN_AREA",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x54736AA40E271165",
            "ns": "ENTITY",
            "jhash": "0x8C2DFA9D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB6463CF6AF527071": {
            "name": "IS_ENTITY_IN_ZONE",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "zone", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB6463CF6AF527071",
            "ns": "ENTITY",
            "jhash": "0x45C82B21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0F42323798A58C8C": {
            "name": "IS_ENTITY_TOUCHING_MODEL",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0F42323798A58C8C",
            "ns": "ENTITY",
            "jhash": "0x307E7611",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE659E47AF827484B": {
            "name": "IS_ENTITY_ON_SCREEN",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to check."
                }
            ],
            "results": "BOOL",
            "description": "Determines whether the screen position of the specified entity is within the 2D bounds of the screen.\n\nThis native will not check if the entity is not visible due to being occluded (for example, behind a wall). To check if a entity is on screen and is not occluded, use [IS_ENTITY_OCCLUDED](#\\_0xE31C2C72B8692B64).",
            "examples": [],
            "hash": "0xE659E47AF827484B",
            "ns": "ENTITY",
            "jhash": "0xC1FEC5ED",
            "manualHash": true,
            "resultsDescription": "Returns `true` if the the entity is in between the minimum and maximum values for the 2D screen bound coords; otherwise, `false`."
        },
        "0x1F0B79228E461EC9": {
            "name": "IS_ENTITY_PLAYING_ANIM",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "taskFlag", "type": "int" }
            ],
            "results": "BOOL",
            "description": "See also [`IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM`](#\\_0x6EC47A344923E1ED)\n\n```\nTaken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), \"creatures@shark@move\", \"attack_player\", 3)  \np4 is always 3 in the scripts.  \ntaskFlag:  \n2 - Check synchronized scene  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x1F0B79228E461EC9",
            "ns": "ENTITY",
            "jhash": "0x0D130D34",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1DBD58820FA61D71": {
            "name": "IS_ENTITY_UPSIDEDOWN",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1DBD58820FA61D71",
            "ns": "ENTITY",
            "jhash": "0x5ACAA48F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x17FFC1B2BA35A494": {
            "name": "IS_ENTITY_TOUCHING_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "targetEntity", "type": "Entity" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x17FFC1B2BA35A494",
            "ns": "ENTITY",
            "jhash": "0x6B931477",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x47D6F43D77935C75": {
            "name": "IS_ENTITY_VISIBLE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x47D6F43D77935C75",
            "ns": "ENTITY",
            "jhash": "0x120B4ED5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5333F526F6AB19AA": {
            "name": "IS_ENTITY_UPRIGHT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "angle", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5333F526F6AB19AA",
            "ns": "ENTITY",
            "jhash": "0x3BCDF4E1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD05BFF0C0A12C68F": {
            "name": "IS_ENTITY_WAITING_FOR_WORLD_COLLISION",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD05BFF0C0A12C68F",
            "ns": "ENTITY",
            "jhash": "0x00AB7A4A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1A092BB0C3808B96": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_ENTITY_*  \n```",
            "examples": [],
            "hash": "0x1A092BB0C3808B96",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0xD796CB5BA8F20E32": {
            "name": "IS_ENTITY_VISIBLE_TO_SCRIPT",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD796CB5BA8F20E32",
            "ns": "ENTITY",
            "jhash": "0x5D240E9D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x490861B88F4FD846": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nDoes nothing (essentially a nullsub).\n```",
            "examples": [],
            "hash": "0x490861B88F4FD846",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x5C3B791D580E0BC2": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nOnly called once in the scripts.  \nRelated to weapon objects.  \n```",
            "examples": [],
            "hash": "0x5C3B791D580E0BC2",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x36F32DE87082343E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x36F32DE87082343E",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x352E2B5CF420BF3B": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x352E2B5CF420BF3B",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0xC34BC448DA29F5E9": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_ENTITY_*\n```",
            "examples": [],
            "hash": "0xC34BC448DA29F5E9",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x694E00132F2823ED": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_ENTITY_R*\n```",
            "examples": [],
            "hash": "0x694E00132F2823ED",
            "ns": "ENTITY",
            "jhash": "0x40C84A74",
            "manualHash": true
        },
        "0x78E8E3A640178255": {
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "```\nRelated to cutscene entities. Unsure about the use.\nSET_ENTITY_*\n```",
            "examples": [],
            "hash": "0x78E8E3A640178255",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0xD7B80E7C3BEFC396": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xD7B80E7C3BEFC396",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0x68B562E124CC0AEF": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x68B562E124CC0AEF",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0xE66377CDDADA4810": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "SET_ENTITY_M\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xE66377CDDADA4810",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0xCEA7C8E1B48FF68C": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCEA7C8E1B48FF68C",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0xB17BC6453F6CF5AC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB17BC6453F6CF5AC",
            "ns": "ENTITY",
            "manualHash": true
        },
        "0xDC6F8601FAF2E893": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_*\nOnly called within 1 script for x360. 'fm_mission_controller' and it used on an object.\nRan after these 2 natives,\nset_object_targettable(uParam0, 0);\nset_entity_invincible(uParam0, 1);\n```",
            "examples": [],
            "hash": "0xDC6F8601FAF2E893",
            "ns": "ENTITY",
            "jhash": "0xA0466A69",
            "manualHash": true
        },
        "0xD9E3006FB3CBD765": {
            "name": "REMOVE_MODEL_HIDE",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "y",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "z",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "radius",
                    "type": "float",
                    "annotations": { "cs_type": "Any" },
                    "description": "The radius specified in gta units"
                },
                {
                    "name": "model",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" },
                    "description": "The model that you want to make visible"
                },
                {
                    "name": "p5",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "p5 requires more research. See also [`CREATE_MODEL_HIDE`](#\\_0x8A97BCA30A0CE478) and [`CREATE_MODEL_SWAP`](#\\_0x92C47782FDA8B2A3).\n\nNetwork players do not see changes done with this.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This could be any coordinates, in this example I am using the players ped coordinates\nlocal playerPedCoords = GetEntityCoords(PlayerPedId())\n\n-- Hides all entities with the hash \"1437508529\" within 1.0 gta units.\nCreateModelHide(playerPedCoords, 1.0, 1437508529, true)\n\nCitizen.Wait(2500)\n\n-- This will make all hidden entities with the hash \"1437508529\" within 1.0 gta units visible.\nRemoveModelHide(playerPedCoords, 1.0, 1437508529, false)"
                }
            ],
            "hash": "0xD9E3006FB3CBD765",
            "ns": "ENTITY",
            "jhash": "0x993DBC10",
            "manualHash": true
        },
        "0xC77720A12FE14A86": {
            "name": "PLAY_SYNCHRONIZED_ENTITY_ANIM",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "syncedScene", "type": "int" },
                { "name": "animation", "type": "char*" },
                { "name": "propName", "type": "char*" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\np4 and p7 are usually 1000.0f.  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0xC77720A12FE14A86",
            "ns": "ENTITY",
            "jhash": "0x012760AA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7FB218262B810701": {
            "name": "PLAY_ENTITY_ANIM",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "animName", "type": "char*" },
                { "name": "animDict", "type": "char*" },
                { "name": "p3", "type": "float" },
                { "name": "loop", "type": "BOOL" },
                { "name": "stayInAnim", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" },
                { "name": "delta", "type": "float" },
                { "name": "bitset", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\ndelta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.  \nThe only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x7FB218262B810701",
            "ns": "ENTITY",
            "jhash": "0x878753D5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB9C54555ED30FBC4": {
            "name": "PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any*" },
                { "name": "p7", "type": "Any*" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "p10", "type": "Any" },
                { "name": "p11", "type": "float" }
            ],
            "results": "BOOL",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0xB9C54555ED30FBC4",
            "ns": "ENTITY",
            "jhash": "0xEB4CBA74",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x61B6775E83C0DB6F": {
            "name": "REMOVE_FORCED_OBJECT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x61B6775E83C0DB6F",
            "ns": "ENTITY",
            "jhash": "0xAED73ADD",
            "manualHash": true
        },
        "0xE12ABE5E3A389A6C": {
            "name": "SET_CAN_AUTO_VAULT_ON_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE12ABE5E3A389A6C",
            "ns": "ENTITY",
            "aliases": ["0xE12ABE5E3A389A6C"],
            "jhash": "0x44767B31",
            "manualHash": true
        },
        "0xF4080490ADC51C6F": {
            "name": "PROCESS_ENTITY_ATTACHMENTS",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "```\nCalled to update entity attachments.\n```",
            "examples": [],
            "hash": "0xF4080490ADC51C6F",
            "ns": "ENTITY",
            "jhash": "0x6909BA59",
            "manualHash": true
        },
        "0x8339643499D1222E": {
            "name": "_SET_ENTITY_ANGULAR_VELOCITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x8339643499D1222E",
            "ns": "ENTITY",
            "aliases": ["0x8339643499D1222E"],
            "manualHash": true
        },
        "0x9B1E824FFBB7027A": {
            "name": "RESET_ENTITY_ALPHA",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9B1E824FFBB7027A",
            "ns": "ENTITY",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x8A30761C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xACAD101E1FB66689": {
            "name": "SET_ENTITY_ALWAYS_PRERENDER",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xACAD101E1FB66689",
            "ns": "ENTITY",
            "jhash": "0xD8FF798A",
            "manualHash": true
        },
        "0x4487C259F0F70977": {
            "name": "SET_ENTITY_ANIM_CURRENT_TIME",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "animDictionary", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "time", "type": "float" }
            ],
            "results": "void",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x4487C259F0F70977",
            "ns": "ENTITY",
            "jhash": "0x99D90735",
            "manualHash": true
        },
        "0x28D1A16553C51776": {
            "name": "SET_ENTITY_ANIM_SPEED",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "animDictionary", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "speedMultiplier", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x28D1A16553C51776",
            "ns": "ENTITY",
            "jhash": "0x3990C90A",
            "manualHash": true
        },
        "0x033C0F9A64E229AE": {
            "name": "REMOVE_MODEL_SWAP",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "originalModel", "type": "Hash" },
                { "name": "newModel", "type": "Hash" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x033C0F9A64E229AE",
            "ns": "ENTITY",
            "jhash": "0xCE0AA8BC",
            "manualHash": true
        },
        "0xAD738C3085FE7E11": {
            "name": "SET_ENTITY_AS_MISSION_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "An entity handle."
                },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Assigns an existing entity to be owned by the current script. If the entity was not owned by a script yet, this also means the entity will remain persistent until released.\n\nNote that this is not needed right after creating an entity as a script-created entity will automatically be assigned.",
            "examples": [],
            "hash": "0xAD738C3085FE7E11",
            "ns": "ENTITY",
            "jhash": "0x5D1F9E0F",
            "manualHash": true
        },
        "0xD3997889736FD899": {
            "name": "SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSets whether the entity can be targeted without being in line-of-sight.  \n```",
            "examples": [],
            "hash": "0xD3997889736FD899",
            "ns": "ENTITY",
            "jhash": "0x3B13797C",
            "manualHash": true
        },
        "0xA80AE305E0A3044F": {
            "name": "SET_CAN_CLIMB_ON_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA80AE305E0A3044F",
            "ns": "ENTITY",
            "aliases": ["0xA80AE305E0A3044F"],
            "jhash": "0xE224A6A5",
            "manualHash": true
        },
        "0xB736A491E64A32CF": {
            "name": "SET_ENTITY_AS_NO_LONGER_NEEDED",
            "params": [{ "name": "entity", "type": "Entity*" }],
            "results": "void",
            "description": "```\nMarks the specified entity (ped, vehicle or object) as no longer needed.  \nEntities marked as no longer needed, will be deleted as the engine sees fit.  \n```",
            "examples": [],
            "hash": "0xB736A491E64A32CF",
            "ns": "ENTITY",
            "jhash": "0xADF2267C",
            "manualHash": true
        },
        "0xE22D8FDE858B8119": {
            "name": "SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "bCanBeDamaged", "type": "BOOL" },
                { "name": "relGroup", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE22D8FDE858B8119",
            "ns": "ENTITY",
            "jhash": "0x34165B5D",
            "manualHash": true
        },
        "0x9EBC85ED0FFFE51C": {
            "name": "SET_ENTITY_COMPLETELY_DISABLE_COLLISION",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "keepPhysics", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9EBC85ED0FFFE51C",
            "ns": "ENTITY",
            "aliases": ["0x9EBC85ED0FFFE51C", "_SET_ENTITY_COLLISION_2"],
            "jhash": "0xBD0D4831",
            "manualHash": true
        },
        "0x1A9205C1B9EE827F": {
            "name": "SET_ENTITY_COLLISION",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "keepPhysics", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1A9205C1B9EE827F",
            "ns": "ENTITY",
            "jhash": "0x139FD37D",
            "manualHash": true
        },
        "0x06843DA7060A026B": {
            "name": "SET_ENTITY_COORDS",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to change coordinates for."
                },
                {
                    "name": "xPos",
                    "type": "float",
                    "description": "The X coordinate."
                },
                {
                    "name": "yPos",
                    "type": "float",
                    "description": "The Y coordinate."
                },
                {
                    "name": "zPos",
                    "type": "float",
                    "description": "The Z coordinate, ground level."
                },
                {
                    "name": "alive",
                    "type": "BOOL",
                    "description": "Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive."
                },
                {
                    "name": "deadFlag",
                    "type": "BOOL",
                    "description": "Whether to disable physics for dead peds, too, and not just living peds."
                },
                {
                    "name": "ragdollFlag",
                    "type": "BOOL",
                    "description": "A special flag used for ragdolling peds."
                },
                {
                    "name": "clearArea",
                    "type": "BOOL",
                    "description": "Whether to clear any entities in the target area."
                }
            ],
            "results": "void",
            "description": "Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\nlocal currentPos = GetEntityCoords(ped)\nprint(currentPos)\n\nSetEntityCoords(ped, 674.883, 548.269, 133.94, false, false, false, true)\n\ncurrentPos = GetEntityCoords(ped)\nprint(currentPos) -- changed!"
                },
                {
                    "lang": "js",
                    "code": "const ped = PlayerPedId();\nlet currentPos = GetEntityCoords(ped, false);\nconsole.log(`${currentPos[0]} ${currentPos[1]} ${currentPos[2]}`);\n\nSetEntityCoords(ped, 674.883, 548.269, 133.94, false, false, false, true);\n\ncurrentPos = GetEntityCoords(ped, false);\nconsole.log(`${currentPos[0]} ${currentPos[1]} ${currentPos[2]}`); // changed!"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\n\nint ped = PlayerPedId();\nVector3 currentPos = GetEntityCoords(ped, false);\nDebug.WriteLine($\"{currentPos}\");\n\nSetEntityCoords(ped, 674.883f, 548.269f, 133.94f, false, false, false, true);\n\ncurrentPos = GetEntityCoords(ped, false);\nDebug.WriteLine($\"{currentPos}\"); // changed!\n\n// or the preferred use of C# wrapper\nDebug.WriteLine($\"{Game.PlayerPed.Position}\");\n\nGame.PlayerPed.Position = new Vector3(674.883f, 548.269f, 133.94f);\n\nDebug.WriteLine($\"{Game.PlayerPed.Position}\"); // changed!"
                }
            ],
            "hash": "0x06843DA7060A026B",
            "ns": "ENTITY",
            "jhash": "0xDF70B41B",
            "manualHash": true
        },
        "0x44A0870B7E92D7C0": {
            "name": "SET_ENTITY_ALPHA",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to change the alpha for."
                },
                {
                    "name": "alphaLevel",
                    "type": "int",
                    "description": "The alpha level ranges from 0 to 255, but changes occur every 20% (every 51)."
                },
                {
                    "name": "skin",
                    "type": "BOOL",
                    "annotations": { "cs_type": "int" },
                    "description": "Whether or not to change the alpha of the entity's skin."
                }
            ],
            "results": "void",
            "description": "This native sets the entity's alpha level.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetEntityAlpha(PlayerPedId(), 51, false)"
                },
                {
                    "lang": "js",
                    "code": "SetEntityAlpha(PlayerPedId(), 51, false);"
                },
                {
                    "lang": "csharp",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\n\nSetEntityAlpha(PlayerPedId(), 51, 0);\n\n// or the preferred use of C# wrapper\nGame.PlayerPed.Opacity = 51;"
                }
            ],
            "hash": "0x44A0870B7E92D7C0",
            "ns": "ENTITY",
            "jhash": "0xAE667CB0",
            "manualHash": true
        },
        "0x1760FFA8AB074D66": {
            "name": "SET_ENTITY_CAN_BE_DAMAGED",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1760FFA8AB074D66",
            "ns": "ENTITY",
            "jhash": "0x60B6E744",
            "manualHash": true
        },
        "0x239A3351AC1DA385": {
            "name": "SET_ENTITY_COORDS_NO_OFFSET",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to change coordinates for."
                },
                {
                    "name": "xPos",
                    "type": "float",
                    "description": "The X coordinate."
                },
                {
                    "name": "yPos",
                    "type": "float",
                    "description": "The Y coordinate."
                },
                {
                    "name": "zPos",
                    "type": "float",
                    "description": "The Z coordinate, origin level."
                },
                {
                    "name": "alive",
                    "type": "BOOL",
                    "description": "Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive."
                },
                {
                    "name": "deadFlag",
                    "type": "BOOL",
                    "description": "Whether to disable physics for dead peds, too, and not just living peds."
                },
                {
                    "name": "ragdollFlag",
                    "type": "BOOL",
                    "description": "A special flag used for ragdolling peds."
                }
            ],
            "results": "void",
            "description": "Sets the coordinates (world position) for a specified entity.",
            "examples": [],
            "hash": "0x239A3351AC1DA385",
            "ns": "ENTITY",
            "jhash": "0x4C83DE8D",
            "manualHash": true
        },
        "0x2C2E3DC128F44309": {
            "name": "_SET_ENTITY_DECALS_DISABLED",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_ENTITY_*\n```",
            "examples": [],
            "hash": "0x2C2E3DC128F44309",
            "ns": "ENTITY",
            "aliases": ["0x2C2E3DC128F44309"],
            "manualHash": true
        },
        "0x3910051CCECDB00C": {
            "name": "_SET_ENTITY_CLEANUP_BY_ENGINE",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nTrue means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.\n```",
            "examples": [],
            "hash": "0x3910051CCECDB00C",
            "ns": "ENTITY",
            "aliases": [
                "0x3910051CCECDB00C",
                "_SET_ENTITY_REGISTER",
                "_SET_ENTITY_SOMETHING"
            ],
            "jhash": "0xD3850671",
            "manualHash": true
        },
        "0x8E2530AA8ADA980E": {
            "name": "SET_ENTITY_HEADING",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to set the heading for."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "The heading in degrees."
                }
            ],
            "results": "void",
            "description": "Set the heading of an entity in degrees also known as \"Yaw\".",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetEntityHeading(PlayerPedId(), 40.0)"
                },
                {
                    "lang": "js",
                    "code": "SetEntityHeading(PlayerPedId(), 40);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// ...\n\nSetEntityHeading(PlayerPedId(), 40.0f);\n\n// or the preferred use of C# wrapper\nGame.PlayerPed.Heading = 40.0f;"
                }
            ],
            "hash": "0x8E2530AA8ADA980E",
            "ns": "ENTITY",
            "jhash": "0xE0FF064D",
            "manualHash": true
        },
        "0x6B76DC1F3AE6E6A3": {
            "name": "SET_ENTITY_HEALTH",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "health", "type": "int" }
            ],
            "results": "void",
            "description": "health >= 0\n\nmale ped ~= 100 - 200\n\nfemale ped ~= 0 - 100\n\n```\nNativeDB Added Parameter 3: int p2\n```",
            "examples": [],
            "hash": "0x6B76DC1F3AE6E6A3",
            "ns": "ENTITY",
            "jhash": "0xFBCD1831",
            "manualHash": true
        },
        "0x1718DE8E3F2823CA": {
            "name": "SET_ENTITY_DYNAMIC",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1718DE8E3F2823CA",
            "ns": "ENTITY",
            "jhash": "0x236F525B",
            "manualHash": true
        },
        "0xEA02E132F5C68722": {
            "name": "SET_ENTITY_IS_TARGET_PRIORITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEA02E132F5C68722",
            "ns": "ENTITY",
            "jhash": "0x9729EE32",
            "manualHash": true
        },
        "0x621873ECE1178967": {
            "name": "SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "xPos", "type": "float" },
                { "name": "yPos", "type": "float" },
                { "name": "zPos", "type": "float" },
                { "name": "alive", "type": "BOOL" },
                { "name": "deadFlag", "type": "BOOL" },
                { "name": "ragdollFlag", "type": "BOOL" },
                { "name": "clearArea", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x621873ECE1178967",
            "ns": "ENTITY",
            "aliases": ["_SET_ENTITY_COORDS_2"],
            "jhash": "0x749B282E",
            "manualHash": true
        },
        "0x5927F96A78577363": {
            "name": "SET_ENTITY_LOD_DIST",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "```\nLOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).  \n```",
            "examples": [],
            "hash": "0x5927F96A78577363",
            "ns": "ENTITY",
            "jhash": "0xD7ACC7AD",
            "manualHash": true
        },
        "0x3882114BDE571AD4": {
            "name": "SET_ENTITY_INVINCIBLE",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.  \nIf you use this for a ped and you want Ragdoll to stay enabled, then do:  \n*(DWORD *)(pedAddress + 0x188) |= (1 << 9);  \nUse this if you want to get the invincibility status:  \n\tbool IsPedInvincible(Ped ped)  \n\t{  \nauto addr = getScriptHandleBaseAddress(ped);\t  \nif (addr)  \n{  \n\tDWORD flag = *(DWORD *)(addr + 0x188);  \n\treturn ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);  \n}  \nreturn false;  \n\t}  \n```",
            "examples": [],
            "hash": "0x3882114BDE571AD4",
            "ns": "ENTITY",
            "jhash": "0xC1213A21",
            "manualHash": true
        },
        "0x295D82A8559F9150": {
            "name": "SET_ENTITY_MOTION_BLUR",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x295D82A8559F9150",
            "ns": "ENTITY",
            "jhash": "0xE90005B8",
            "manualHash": true
        },
        "0x0DC7CABAB1E9B67E": {
            "name": "SET_ENTITY_LOAD_COLLISION_FLAG",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.\n\nCertainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x0DC7CABAB1E9B67E",
            "ns": "ENTITY",
            "jhash": "0xC52F295B",
            "manualHash": true
        },
        "0x4A4722448F18EEF5": {
            "name": "SET_ENTITY_HAS_GRAVITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4A4722448F18EEF5",
            "ns": "ENTITY",
            "jhash": "0xE2F262BF",
            "manualHash": true
        },
        "0x166E7CF68597D8B5": {
            "name": "SET_ENTITY_MAX_HEALTH",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "```\nFor instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849  \n```",
            "examples": [],
            "hash": "0x166E7CF68597D8B5",
            "ns": "ENTITY",
            "jhash": "0x96F84DF8",
            "manualHash": true
        },
        "0xA53ED5520C07654A": {
            "name": "SET_ENTITY_NO_COLLISION_ENTITY",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" },
                { "name": "thisFrameOnly", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nCalling this function disables collision between two entities.\nThe importance of the order for entity1 and entity2 is unclear.\nThe third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.\n```",
            "examples": [],
            "hash": "0xA53ED5520C07654A",
            "ns": "ENTITY",
            "jhash": "0x1E11BFE9",
            "manualHash": true
        },
        "0x7CFBA6A80BDF3874": {
            "name": "SET_ENTITY_LIGHTS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7CFBA6A80BDF3874",
            "ns": "ENTITY",
            "jhash": "0xE8FC85AF",
            "manualHash": true
        },
        "0x79F020FF9EDC0748": {
            "name": "SET_ENTITY_ONLY_DAMAGED_BY_PLAYER",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x79F020FF9EDC0748",
            "ns": "ENTITY",
            "jhash": "0x4B707F50",
            "manualHash": true
        },
        "0x0E46A3FCBDE2A1B1": {
            "name": "SET_ENTITY_MAX_SPEED",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "Entity to apply a maximum speed on"
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "Speed in meters per second"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0E46A3FCBDE2A1B1",
            "ns": "ENTITY",
            "jhash": "0x46AFFED3",
            "manualHash": true
        },
        "0x7022BD828FA0B082": {
            "name": "SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "BOOL" },
                { "name": "relationshipHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7022BD828FA0B082",
            "ns": "ENTITY",
            "jhash": "0x202237E2",
            "manualHash": true
        },
        "0xFAEE099C6F890BB8": {
            "name": "SET_ENTITY_PROOFS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "bulletProof", "type": "BOOL" },
                { "name": "fireProof", "type": "BOOL" },
                { "name": "explosionProof", "type": "BOOL" },
                { "name": "collisionProof", "type": "BOOL" },
                { "name": "meleeProof", "type": "BOOL" },
                { "name": "steamProof", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" },
                { "name": "drownProof", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nEnable / disable each type of damage.  \n--------------  \np7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);  \n```",
            "examples": [],
            "hash": "0xFAEE099C6F890BB8",
            "ns": "ENTITY",
            "jhash": "0x7E9EAB66",
            "manualHash": true
        },
        "0x730F5F8D3F0F2050": {
            "name": "SET_ENTITY_RENDER_SCORCHED",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x730F5F8D3F0F2050",
            "ns": "ENTITY",
            "jhash": "0xAAC9317B",
            "manualHash": true
        },
        "0x0A50A1EEDAD01E65": {
            "name": "SET_ENTITY_RECORDS_COLLISIONS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A50A1EEDAD01E65",
            "ns": "ENTITY",
            "jhash": "0x6B189A1A",
            "manualHash": true
        },
        "0x8524A8B0171D5E07": {
            "name": "SET_ENTITY_ROTATION",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "pitch", "type": "float" },
                { "name": "roll", "type": "float" },
                { "name": "yaw", "type": "float" },
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "The order yaw pitch roll are applied, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9)."
                },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8524A8B0171D5E07",
            "ns": "ENTITY",
            "jhash": "0x0A345EFE",
            "manualHash": true
        },
        "0x57C5DB656185EAC4": {
            "name": "SET_ENTITY_TRAFFICLIGHT_OVERRIDE",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "state", "type": "int" }
            ],
            "results": "void",
            "description": "```\nExample here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340\n0 = green\n1 = red\n2 = yellow\n3 = reset changes\nchanging lights may not change the behavior of vehicles\n```",
            "examples": [],
            "hash": "0x57C5DB656185EAC4",
            "ns": "ENTITY",
            "jhash": "0xC47F5B91",
            "manualHash": true
        },
        "0x3AE22DEB5BA5A3E6": {
            "name": "SET_OBJECT_AS_NO_LONGER_NEEDED",
            "params": [{ "name": "object", "type": "Object*" }],
            "results": "void",
            "description": "```\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n```",
            "examples": [],
            "hash": "0x3AE22DEB5BA5A3E6",
            "ns": "ENTITY",
            "jhash": "0x3F6B949F",
            "manualHash": true
        },
        "0x1C99BB7B6E96D16F": {
            "name": "SET_ENTITY_VELOCITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNote that the third parameter(denoted as z) is \"up and down\" with positive numbers encouraging upwards movement.\n```",
            "examples": [],
            "hash": "0x1C99BB7B6E96D16F",
            "ns": "ENTITY",
            "jhash": "0xFF5A1988",
            "manualHash": true
        },
        "0xEE5D2A122E09EC42": {
            "name": "WOULD_ENTITY_BE_OCCLUDED",
            "params": [
                { "name": "entityModelHash", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEE5D2A122E09EC42",
            "ns": "ENTITY",
            "jhash": "0xEA127CBC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEA1C610A04DB6BBB": {
            "name": "SET_ENTITY_VISIBLE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to change the visibility of"
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Whether or not the entity will be visible"
                },
                {
                    "name": "unk",
                    "type": "BOOL",
                    "description": "Always 0 in scripts"
                }
            ],
            "results": "void",
            "description": "Toggle the visibility of a given entity.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetEntityVisible(PlayerPedId(), false, 0)"
                }
            ],
            "hash": "0xEA1C610A04DB6BBB",
            "ns": "ENTITY",
            "jhash": "0xD043E8E1",
            "manualHash": true
        },
        "0x77B21BE7AC540F07": {
            "name": "SET_ENTITY_QUATERNION",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "w", "type": "float" }
            ],
            "results": "void",
            "description": "```\nw is the correct parameter name!  \n```",
            "examples": [],
            "hash": "0x77B21BE7AC540F07",
            "ns": "ENTITY",
            "jhash": "0x83B6046F",
            "manualHash": true
        },
        "0x2595DD4236549CE3": {
            "name": "SET_PED_AS_NO_LONGER_NEEDED",
            "params": [{ "name": "ped", "type": "Ped*" }],
            "results": "void",
            "description": "```\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n```",
            "examples": [],
            "hash": "0x2595DD4236549CE3",
            "ns": "ENTITY",
            "jhash": "0x9A388380",
            "manualHash": true
        },
        "0x629BFA74418D6239": {
            "name": "SET_VEHICLE_AS_NO_LONGER_NEEDED",
            "params": [{ "name": "vehicle", "type": "Vehicle*" }],
            "results": "void",
            "description": "```\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n```",
            "examples": [],
            "hash": "0x629BFA74418D6239",
            "ns": "ENTITY",
            "jhash": "0x9B0E10BE",
            "manualHash": true
        },
        "0x11E79CAB7183B6F5": {
            "name": "STOP_SYNCHRONIZED_MAP_ENTITY_ANIM",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x11E79CAB7183B6F5",
            "ns": "ENTITY",
            "jhash": "0x7253D5B2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x28004F88151E03E0": {
            "name": "STOP_ENTITY_ANIM",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "animation", "type": "char*" },
                { "name": "animGroup", "type": "char*" },
                { "name": "p3", "type": "float" }
            ],
            "results": "Any",
            "description": "```\nRAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm\n```",
            "examples": [],
            "hash": "0x28004F88151E03E0",
            "ns": "ENTITY",
            "jhash": "0xC4769830",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x43D3807C077261E3": {
            "name": "STOP_SYNCHRONIZED_ENTITY_ANIM",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np1 sync task id?  \n```",
            "examples": [],
            "hash": "0x43D3807C077261E3",
            "ns": "ENTITY",
            "jhash": "0xE27D2FC1",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "FILES": {
        "0x5549EE11FA22FCF2": {
            "name": "GET_DLC_VEHICLE_FLAGS",
            "params": [{ "name": "dlcVehicleIndex", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5549EE11FA22FCF2",
            "ns": "FILES",
            "jhash": "0xAB12738C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x341DE7ED1D2A1BFD": {
            "name": "DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG",
            "params": [
                { "name": "componentHash", "type": "Hash" },
                { "name": "restrictionTagHash", "type": "Hash" },
                { "name": "componentId", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x341DE7ED1D2A1BFD",
            "ns": "FILES",
            "aliases": ["0x341DE7ED1D2A1BFD"],
            "jhash": "0x8E2C7FD5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x33468EDC08E371F6": {
            "name": "GET_DLC_VEHICLE_DATA",
            "params": [
                {
                    "name": "dlcVehicleIndex",
                    "type": "int",
                    "description": "takes a number from 0 to `GET_NUM_DLC_VEHICLES()` - 1."
                },
                {
                    "name": "outData",
                    "type": "Any*",
                    "description": "a struct of 3 8-byte items."
                }
            ],
            "results": "BOOL",
            "description": "The Second item in the struct `*(Hash *)(outData + 1)` is the vehicle hash.",
            "examples": [],
            "hash": "0x33468EDC08E371F6",
            "ns": "FILES",
            "jhash": "0xCF428FA4",
            "manualHash": true,
            "resultsDescription": "A boolean value return if find or not the dlcVehicleIndex."
        },
        "0x31D5E073B6F93CDC": {
            "name": "_GET_DLC_WEAPON_COMPONENT_DATA_SP",
            "params": [
                { "name": "dlcWeaponIndex", "type": "int" },
                { "name": "dlcWeapCompIndex", "type": "int" },
                { "name": "ComponentDataPtr", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x31D5E073B6F93CDC",
            "ns": "FILES",
            "manualHash": true
        },
        "0x0368B3A838070348": {
            "name": "GET_HASH_NAME_FOR_COMPONENT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "componentId", "type": "int" },
                { "name": "drawableVariant", "type": "int" },
                { "name": "textureVariant", "type": "int" }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x0368B3A838070348",
            "ns": "FILES",
            "jhash": "0xC8A4BF12",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC098810437312FFF": {
            "name": "GET_DLC_VEHICLE_MOD_LOCK_HASH",
            "params": [
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "int" }
                }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xC098810437312FFF",
            "ns": "FILES",
            "aliases": ["0xC098810437312FFF"],
            "annotations": { "cs_type": "int" },
            "jhash": "0x59352658",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6CF598A2957C2BF8": {
            "name": "GET_DLC_WEAPON_COMPONENT_DATA",
            "params": [
                { "name": "dlcWeaponIndex", "type": "int" },
                { "name": "dlcWeapCompIndex", "type": "int" },
                {
                    "name": "ComponentDataPtr",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "```\np0 seems to be the weapon index  \np1 seems to be the weapon component index  \nstruct DlcComponentData{  \nint attachBone;  \nint padding1;  \nint bActiveByDefault;  \nint padding2;  \nint unk;  \nint padding3;  \nint componentHash;  \nint padding4;  \nint unk2;  \nint padding5;  \nint componentCost;  \nint padding6;  \nchar nameLabel[64];  \nchar descLabel[64];  \n};  \n```",
            "examples": [],
            "hash": "0x6CF598A2957C2BF8",
            "ns": "FILES",
            "jhash": "0x4B83FCAF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAD2A7A6DFF55841B": {
            "name": "_GET_NUM_DLC_WEAPON_COMPONENTS_SP",
            "params": [{ "name": "dlcWeaponIndex", "type": "int" }],
            "results": "int",
            "description": "Returns the total number of DLC weapon components that are available in SP.\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xAD2A7A6DFF55841B",
            "ns": "FILES",
            "manualHash": true
        },
        "0x6C93ED8C2F74859B": {
            "name": "GET_FORCED_COMPONENT",
            "params": [
                { "name": "componentHash", "type": "Hash" },
                { "name": "forcedComponentIndex", "type": "int" },
                {
                    "name": "nameHash",
                    "type": "Hash*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "enumValue",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "componentType",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6C93ED8C2F74859B",
            "ns": "FILES",
            "jhash": "0x382C70BE",
            "manualHash": true
        },
        "0x79923CD21BECE14E": {
            "name": "GET_DLC_WEAPON_DATA",
            "params": [
                { "name": "dlcWeaponIndex", "type": "int" },
                { "name": "outData", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\ndlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.  \nstruct DlcWeaponData  \n{  \nint emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this  \nint padding1;  \nint weaponHash;  \nint padding2;  \nint unk;  \nint padding3;  \nint weaponCost;  \nint padding4;  \nint ammoCost;  \nint padding5;  \nint ammoType;  \nint padding6;  \nint defaultClipSize;  \nint padding7;  \nchar nameLabel[64];  \nchar descLabel[64];  \nchar desc2Label[64]; // usually \"the\" + name  \nchar upperCaseNameLabel[64];  \n};  \n```",
            "examples": [],
            "hash": "0x79923CD21BECE14E",
            "ns": "FILES",
            "jhash": "0xD88EC8EA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4160B65AE085B5A9": {
            "name": "_GET_NUM_DLC_WEAPONS_SP",
            "params": [],
            "results": "int",
            "description": "Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x4160B65AE085B5A9",
            "ns": "FILES",
            "manualHash": true
        },
        "0xECC01B7C5763333C": {
            "name": "GET_DLC_VEHICLE_MODEL",
            "params": [{ "name": "dlcVehicleIndex", "type": "int" }],
            "results": "Hash",
            "description": "```\ndlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS()  \n```",
            "examples": [],
            "hash": "0xECC01B7C5763333C",
            "ns": "FILES",
            "jhash": "0xA2201E09",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5D6160275CAEC8DD": {
            "name": "GET_HASH_NAME_FOR_PROP",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "componentId", "type": "int" },
                { "name": "propIndex", "type": "int" },
                { "name": "propTextureIndex", "type": "int" }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x5D6160275CAEC8DD",
            "ns": "FILES",
            "jhash": "0x7D876DC0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE1CA84EBF72E691D": {
            "name": "GET_FORCED_PROP",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "forcedPropIndex", "type": "int" },
                {
                    "name": "nameHash",
                    "type": "Hash*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "enumValue",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "anchorPoint",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE1CA84EBF72E691D",
            "ns": "FILES",
            "aliases": ["0xE1CA84EBF72E691D"],
            "jhash": "0x22DAE257",
            "manualHash": true
        },
        "0xC6B9DB42C04DD8C3": {
            "name": "GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT",
            "params": [{ "name": "componentHash", "type": "Hash" }],
            "results": "int",
            "description": "```\nReturns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.\n```",
            "examples": [],
            "hash": "0xC6B9DB42C04DD8C3",
            "ns": "FILES",
            "aliases": ["_GET_NUM_FORCED_COMPONENTS"],
            "jhash": "0xCE70F183",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x310836EE7129BA33": {
            "name": "_GET_DLC_WEAPON_DATA_SP",
            "params": [
                { "name": "dlcWeaponIndex", "type": "int" },
                { "name": "outData", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x310836EE7129BA33",
            "ns": "FILES",
            "manualHash": true
        },
        "0x405425358A7D61FE": {
            "name": "GET_NUM_DLC_WEAPON_COMPONENTS",
            "params": [{ "name": "dlcWeaponIndex", "type": "int" }],
            "results": "int",
            "description": "```\nReturns the total number of DLC weapon components.\n```",
            "examples": [],
            "hash": "0x405425358A7D61FE",
            "ns": "FILES",
            "jhash": "0x476B23A9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEE47635F352DA367": {
            "name": "GET_NUM_DLC_WEAPONS",
            "params": [],
            "results": "int",
            "description": "```\nReturns the total number of DLC weapons.\n```",
            "examples": [],
            "hash": "0xEE47635F352DA367",
            "ns": "FILES",
            "jhash": "0x2B757E6C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA7A866D21CD2329B": {
            "name": "GET_NUM_DLC_VEHICLES",
            "params": [],
            "results": "int",
            "description": "Returns the total number of DLC vehicles.",
            "examples": [],
            "hash": "0xA7A866D21CD2329B",
            "ns": "FILES",
            "jhash": "0x8EAF9CF6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD40AAC51E8E4C663": {
            "name": "_GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT",
            "params": [
                {
                    "name": "propHash",
                    "type": "Hash",
                    "description": "Ped helmet prop hash"
                }
            ],
            "results": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local iVar16 = GetPedPropIndex(PlayerPedId(), 0) -- helmet prop index\nlocal iVar17 = GetPedPropTextureIndex(PlayerPedId(), 0) -- helmet prop index\nlocal iVar18 = GetHashNameForProp(PlayerPedId(), 0, iVar16, iVar17) -- gets the hash name for the helmet\nif N_0xd40aac51e8e4c663(iVar18) > 0 then -- visor variant so can toggle the visor\n    BeginTextCommandDisplayHelp(\"VISOR_TOGGLE\") -- Hold ~INPUT_SWITCH_VISOR~ to flip your helmet visor open or closed when on foot or on a motorcycle. You can also set the default state of your Helmet Visor in the Style section of the Interaction menu.\n    EndTextCommandDisplayHelp(0, 0, true, 6000)\nend"
                }
            ],
            "hash": "0xD40AAC51E8E4C663",
            "ns": "FILES",
            "aliases": ["0xD40AAC51E8E4C663"],
            "manualHash": true,
            "resultsDescription": "This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop."
        },
        "0x278F76C3B0A8F109": {
            "name": "GET_NUM_TATTOO_SHOP_DLC_ITEMS",
            "params": [{ "name": "character", "type": "int" }],
            "results": "int",
            "description": "```\nCharacter types:\n0 = Michael,\n1 = Franklin,\n2 = Trevor,\n3 = MPMale,\n4 = MPFemale\n```",
            "examples": [],
            "hash": "0x278F76C3B0A8F109",
            "ns": "FILES",
            "aliases": ["0x278F76C3B0A8F109", "_GET_NUM_DECORATIONS"],
            "jhash": "0x71D0CF3E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x017568A8182D98A6": {
            "name": "GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "```\nReturns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.\n```",
            "examples": [],
            "hash": "0x017568A8182D98A6",
            "ns": "FILES",
            "aliases": ["0x017568A8182D98A6"],
            "jhash": "0xC560D7C0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x073CA26B079F956E": {
            "name": "GET_SHOP_PED_OUTFIT_LOCATE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x073CA26B079F956E",
            "ns": "FILES",
            "aliases": ["0x073CA26B079F956E"],
            "jhash": "0x2798F56F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC17AD0E5752BECDA": {
            "name": "GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT",
            "params": [{ "name": "componentHash", "type": "Hash" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC17AD0E5752BECDA",
            "ns": "FILES",
            "aliases": ["0xC17AD0E5752BECDA"],
            "jhash": "0x159751B4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB7952076E444979D": {
            "name": "GET_SHOP_PED_OUTFIT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB7952076E444979D",
            "ns": "FILES",
            "jhash": "0xCAFE9209",
            "manualHash": true
        },
        "0x249E310B2D920699": {
            "name": "GET_SHOP_PED_QUERY_COMPONENT",
            "params": [
                { "name": "componentId", "type": "int" },
                { "name": "outComponent", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x249E310B2D920699",
            "ns": "FILES",
            "jhash": "0xC0718904",
            "manualHash": true
        },
        "0x74C0E2A57EC66760": {
            "name": "GET_SHOP_PED_COMPONENT",
            "params": [
                { "name": "componentHash", "type": "Hash" },
                { "name": "outComponent", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nMore info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86\n```",
            "examples": [],
            "hash": "0x74C0E2A57EC66760",
            "ns": "FILES",
            "jhash": "0xB39677C5",
            "manualHash": true
        },
        "0xA9F9C2E0FDE11CBB": {
            "name": "GET_SHOP_PED_OUTFIT_PROP_VARIANT",
            "params": [
                {
                    "name": "outfitHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "variantIndex", "type": "int" },
                { "name": "outPropVariant", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA9F9C2E0FDE11CBB",
            "ns": "FILES",
            "aliases": ["0xA9F9C2E0FDE11CBB"],
            "jhash": "0x6641A864",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x19F2A026EDF0013F": {
            "name": "GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT",
            "params": [
                {
                    "name": "outfit",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" },
                    "description": "A structure, see [`GET_SHOP_PED_QUERY_OUTFIT`](#\\_0x6D793F03A631FE56)."
                },
                {
                    "name": "slot",
                    "type": "int",
                    "description": "outfit slot."
                },
                { "name": "outComponentVariant", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x19F2A026EDF0013F",
            "ns": "FILES",
            "aliases": ["_GET_PROP_FROM_OUTFIT"],
            "jhash": "0x818534AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6D793F03A631FE56": {
            "name": "GET_SHOP_PED_QUERY_OUTFIT",
            "params": [
                { "name": "outfitIndex", "type": "int" },
                { "name": "outfit", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nstruct Outfit_s  \n{  \n\tint mask, torso, pants, parachute, shoes, misc1, tops1, armour, crew, tops2, hat, glasses, earpiece;  \n\tint maskTexture, torsoTexture, pantsTexture, parachuteTexture, shoesTexture, misc1Texture, tops1Texture,   \n\t\tarmourTexture, crewTexture, tops2Texture, hatTexture, glassesTexture, earpieceTexture;  \n};  \n```",
            "examples": [],
            "hash": "0x6D793F03A631FE56",
            "ns": "FILES",
            "jhash": "0x2F8013A1",
            "manualHash": true
        },
        "0x5D5CAFF661DDF6FC": {
            "name": "GET_SHOP_PED_PROP",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "outProp", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5D5CAFF661DDF6FC",
            "ns": "FILES",
            "aliases": ["0x5D5CAFF661DDF6FC"],
            "jhash": "0xDB0A7A58",
            "manualHash": true
        },
        "0x10144267DD22866C": {
            "name": "GET_TATTOO_SHOP_DLC_ITEM_INDEX",
            "params": [
                {
                    "name": "character",
                    "type": "int",
                    "annotations": { "cs_type": "Hash" },
                    "description": "AKA eFaction in shop_tattoo.meta. Which character this tattoo belongs to. See [GET_NUM_TATTOO_SHOP_DLC_ITEMS](#\\_0x278F76C3B0A8F109)."
                },
                {
                    "name": "collection",
                    "type": "int",
                    "description": "Which collection this tattoo belongs to. If you specify `-1`, it will check all collections."
                },
                {
                    "name": "preset",
                    "type": "int",
                    "description": "Which preset this tattoo belongs to."
                }
            ],
            "results": "int",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x10144267DD22866C",
            "ns": "FILES",
            "aliases": ["0x10144267DD22866C"],
            "manualHash": true,
            "resultsDescription": "Returns the actual index (Not ID from `shop_tattoo.meta`) from `0` to [GET_NUM_TATTOO_SHOP_DLC_ITEMS](#\\_0x278F76C3B0A8F109), or `-1` (if it failed to find the tattoo) of a tattoo."
        },
        "0xDE44A00999B2837D": {
            "name": "GET_SHOP_PED_QUERY_PROP",
            "params": [
                { "name": "componentId", "type": "int" },
                { "name": "outProp", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDE44A00999B2837D",
            "ns": "FILES",
            "jhash": "0x1D3C1466",
            "manualHash": true
        },
        "0xFF56381874F82086": {
            "name": "GET_TATTOO_SHOP_DLC_ITEM_DATA",
            "params": [
                {
                    "name": "characterType",
                    "type": "int",
                    "description": "Character types 0 = Michael, 1 = Franklin, 2 = Trevor, 3 = MPMale, 4 = MPFemale."
                },
                {
                    "name": "decorationIndex",
                    "type": "int",
                    "description": "Tattoo index, value between 0 and GetNumDecorations(characterType)."
                },
                {
                    "name": "outComponent",
                    "type": "Any*",
                    "description": "The referenced struct."
                }
            ],
            "results": "BOOL",
            "description": "Character types:\n\n```\n0 = Michael,\n1 = Franklin,\n2 = Trevor,\n3 = MPMale,\n4 = MPFemale\n```\n\n```csharp\nenum TattooZoneData\n{\n    ZONE_TORSO = 0,\n    ZONE_HEAD = 1,\n    ZONE_LEFT_ARM = 2,\n    ZONE_RIGHT_ARM = 3,\n    ZONE_LEFT_LEG = 4,\n    ZONE_RIGHT_LEG = 5,\n    ZONE_UNKNOWN = 6,\n    ZONE_NONE = 7,\n};\n\nstruct outComponent\n{\n    // these vars are suffixed with 4 bytes of padding each.\n    uint unk;\n    int unk2;\n    uint tattooCollectionHash;\n    uint tattooNameHash;\n    int unk3;\n    TattooZoneData zoneId;\n    uint unk4;\n    uint unk5;\n    // maybe more, not sure exactly, decompiled scripts are very vague around this part.\n}\n```",
            "examples": [
                {
                    "lang": "js",
                    "code": "var characterType = 4; // MPFemale.\nvar tattooIndex = 0; // Value between 0 and GetNumDecorations(characterType).\n\nvar structArray = new Uint32Array(new ArrayBuffer(10 * 8));\n\nif (Citizen.invokeNative(\"0xFF56381874F82086\", characterType, tattooIndex, structArray))\n{\n    Console.Log(JSON.stringify(structArray));\n}"
                }
            ],
            "hash": "0xFF56381874F82086",
            "ns": "FILES",
            "aliases": ["0xFF56381874F82086", "_GET_TATTOO_COLLECTION_DATA"],
            "jhash": "0x2E9D628C",
            "manualHash": true,
            "resultsDescription": "A bool indicating that the tattoo data could be fetched(?)"
        },
        "0xD81B7F27BC773E66": {
            "name": "_GET_VARIANT_PROP",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "variantPropIndex", "type": "int" },
                {
                    "name": "nameHash",
                    "type": "Hash*",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "enumValue",
                    "type": "int*",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "anchorPoint",
                    "type": "int*",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD81B7F27BC773E66",
            "ns": "FILES",
            "aliases": ["0xD81B7F27BC773E66"],
            "manualHash": true
        },
        "0x6E11F282F11863B6": {
            "name": "GET_VARIANT_COMPONENT",
            "params": [
                { "name": "componentHash", "type": "Hash" },
                { "name": "variantComponentIndex", "type": "int" },
                {
                    "name": "nameHash",
                    "type": "Hash*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "enumValue",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "componentType",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6E11F282F11863B6",
            "ns": "FILES",
            "jhash": "0xE4FF7103",
            "manualHash": true
        },
        "0xEB0A2B758F7B850F": {
            "name": "INIT_SHOP_PED_PROP",
            "params": [{ "name": "outProp", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEB0A2B758F7B850F",
            "ns": "FILES",
            "jhash": "0xF5659E50",
            "manualHash": true
        },
        "0x6BEDF5769AC2DC07": {
            "name": "_LOAD_CONTENT_CHANGE_SET_GROUP",
            "params": [{ "name": "hash", "type": "Hash" }],
            "results": "void",
            "description": "```\nFrom fm_deathmatch_creator and fm_race_creator:\n\nFILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat(\"GROUP_MAP_SP\"));\nFILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat(\"GROUP_MAP\"));\n\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x6BEDF5769AC2DC07",
            "ns": "FILES",
            "manualHash": true
        },
        "0x0564B9FF9631B82C": {
            "name": "IS_DLC_VEHICLE_MOD",
            "params": [
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0564B9FF9631B82C",
            "ns": "FILES",
            "aliases": ["0x0564B9FF9631B82C"],
            "jhash": "0x35BCA844",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x96E2929292A4DB77": {
            "params": [{ "name": "componentHash", "type": "Hash" }],
            "results": "int",
            "description": "Returns some sort of index/offset for components.\nNeeds \\_GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x96E2929292A4DB77",
            "ns": "FILES",
            "manualHash": true
        },
        "0x1E8C308FD312C036": {
            "name": "INIT_SHOP_PED_COMPONENT",
            "params": [{ "name": "outComponent", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E8C308FD312C036",
            "ns": "FILES",
            "jhash": "0xB818C7FC",
            "manualHash": true
        },
        "0x6CEBE002E58DEE97": {
            "params": [{ "name": "componentHash", "type": "Hash" }],
            "results": "int",
            "description": "Returns some sort of index/offset for props.\nNeeds \\_GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x6CEBE002E58DEE97",
            "ns": "FILES",
            "manualHash": true
        },
        "0x50F457823CE6EB5F": {
            "name": "SETUP_SHOP_PED_APPAREL_QUERY",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x50F457823CE6EB5F",
            "ns": "FILES",
            "aliases": ["0x50F457823CE6EB5F"],
            "jhash": "0xC937FF3D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD4D7B033C3AA243C": {
            "name": "IS_CONTENT_ITEM_LOCKED",
            "params": [
                {
                    "name": "itemHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD4D7B033C3AA243C",
            "ns": "FILES",
            "aliases": ["_IS_OUTFIT_EMPTY", "_IS_DLC_DATA_EMPTY"],
            "jhash": "0x06396058",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF3FBE2D50A6A8C28": {
            "name": "SETUP_SHOP_PED_OUTFIT_QUERY",
            "params": [
                { "name": "character", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\ncharacters\n0: Michael\n1: Franklin\n2: Trevor\n3: MPMale\n4: MPFemale\n```",
            "examples": [],
            "hash": "0xF3FBE2D50A6A8C28",
            "ns": "FILES",
            "aliases": ["0xF3FBE2D50A6A8C28"],
            "jhash": "0x1ECD23E7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9BDF59818B1E38C1": {
            "name": "SETUP_SHOP_PED_APPAREL_QUERY_TU",
            "params": [
                { "name": "character", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "int" },
                { "name": "componentId", "type": "int" }
            ],
            "results": "int",
            "description": "```\ncharacter is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.\ncomponentId is between 0 and 11 and corresponds to the usual component slots.\np1 could be the outfit number; unsure.\np2 is usually -1; unknown function.\np3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.\np4 is usually -1; unknown function.\ncomponentId is -1 when p3 is true in decompiled scripts.\n```",
            "examples": [],
            "hash": "0x9BDF59818B1E38C1",
            "ns": "FILES",
            "aliases": ["_GET_NUM_PROPS_FROM_OUTFIT"],
            "jhash": "0x594E862C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3C1978285B036B25": {
            "name": "_UNLOAD_CONTENT_CHANGE_SET_GROUP",
            "params": [{ "name": "hash", "type": "Hash" }],
            "results": "void",
            "description": "```\nFrom fm_deathmatch_creator and fm_race_creator:\n\nFILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat(\"GROUP_MAP_SP\"));\nFILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat(\"GROUP_MAP\"));\n\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x3C1978285B036B25",
            "ns": "FILES",
            "manualHash": true
        }
    },
    "FIRE": {
        "0x36DD3FE58B5E5212": {
            "name": "ADD_EXPLOSION_WITH_USER_VFX",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                {
                    "name": "explosionType",
                    "type": "int",
                    "description": "See [`ADD_EXPLOSION`](#\\_0xE3AD2BDBAEE269AC)."
                },
                { "name": "explosionFx", "type": "Hash" },
                { "name": "damageScale", "type": "float" },
                {
                    "name": "isAudible",
                    "type": "BOOL",
                    "description": "If explosion makes a sound."
                },
                {
                    "name": "isInvisible",
                    "type": "BOOL",
                    "description": "If the explosion is invisible or not."
                },
                { "name": "cameraShake", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x36DD3FE58B5E5212",
            "ns": "FIRE",
            "aliases": ["_ADD_SPECFX_EXPLOSION"],
            "jhash": "0xCF358946",
            "manualHash": true
        },
        "0x172AA1B624FA1013": {
            "name": "ADD_OWNED_EXPLOSION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                {
                    "name": "explosionType",
                    "type": "int",
                    "description": "See [`ADD_EXPLOSION`](#\\_0xE3AD2BDBAEE269AC)."
                },
                { "name": "damageScale", "type": "float" },
                {
                    "name": "isAudible",
                    "type": "BOOL",
                    "description": "If explosion makes a sound."
                },
                {
                    "name": "isInvisible",
                    "type": "BOOL",
                    "description": "If the explosion is invisible or not."
                },
                { "name": "cameraShake", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x172AA1B624FA1013",
            "ns": "FIRE",
            "jhash": "0x27EE0D67",
            "manualHash": true
        },
        "0xB3CD51E3DB86F176": {
            "name": "_GET_ENTITY_INSIDE_EXPLOSION_SPHERE",
            "params": [
                { "name": "explosionType", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "Entity",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xB3CD51E3DB86F176",
            "ns": "FIRE",
            "manualHash": true
        },
        "0xE3AD2BDBAEE269AC": {
            "name": "ADD_EXPLOSION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "explosionType", "type": "int" },
                { "name": "damageScale", "type": "float" },
                { "name": "isAudible", "type": "BOOL" },
                { "name": "isInvisible", "type": "BOOL" },
                { "name": "cameraShake", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 9: BOOL noDamage\n```\n\n```\nBOOL isAudible = If explosion makes a sound.  \nBOOL isInvisible = If the explosion is invisible or not.\nBOOL noDamage = false: damage || nodamage = true: no damage\n```\n\n```cpp\nenum class eExplosionTag : uint32_t\n{\n    DONTCARE = 0xFFFFFFFF,\n    GRENADE = 0,\n    GRENADELAUNCHER = 1,\n    STICKYBOMB = 2,\n    MOLOTOV = 3,\n    ROCKET = 4,\n    TANKSHELL = 5,\n    HI_OCTANE = 6,\n    CAR = 7,\n    PLANE = 8,\n    PETROL_PUMP = 9,\n    BIKE = 10,\n    DIR_STEAM = 11,\n    DIR_FLAME = 12,\n    DIR_WATER_HYDRANT = 13,\n    DIR_GAS_CANISTER = 14,\n    BOAT = 15,\n    SHIP_DESTROY = 16,\n    TRUCK = 17,\n    BULLET = 18,\n    SMOKEGRENADELAUNCHER = 19,\n    SMOKEGRENADE = 20,\n    BZGAS = 21,\n    FLARE = 22,\n    GAS_CANISTER = 23,\n    EXTINGUISHER = 24,\n    _0x988620B8 = 25,\n    EXP_TAG_TRAIN = 26,\n    EXP_TAG_BARREL = 27,\n    EXP_TAG_PROPANE = 28,\n    EXP_TAG_BLIMP = 29,\n    EXP_TAG_DIR_FLAME_EXPLODE = 30,\n    EXP_TAG_TANKER = 31,\n    PLANE_ROCKET = 32,\n    EXP_TAG_VEHICLE_BULLET = 33,\n    EXP_TAG_GAS_TANK = 34,\n    EXP_TAG_BIRD_CRAP = 35,\n    EXP_TAG_RAILGUN = 36,\n    EXP_TAG_BLIMP2 = 37,\n    EXP_TAG_FIREWORK = 38,\n    EXP_TAG_SNOWBALL = 39,\n    EXP_TAG_PROXMINE = 40,\n    EXP_TAG_VALKYRIE_CANNON = 41,\n    EXP_TAG_AIR_DEFENCE = 42,\n    EXP_TAG_PIPEBOMB = 43,\n    EXP_TAG_VEHICLEMINE = 44,\n    EXP_TAG_EXPLOSIVEAMMO = 45,\n    EXP_TAG_APCSHELL = 46,\n    EXP_TAG_BOMB_CLUSTER = 47,\n    EXP_TAG_BOMB_GAS = 48,\n    EXP_TAG_BOMB_INCENDIARY = 49,\n    EXP_TAG_BOMB_STANDARD = 50,\n    EXP_TAG_TORPEDO = 51,\n    EXP_TAG_TORPEDO_UNDERWATER = 52,\n    EXP_TAG_BOMBUSHKA_CANNON = 53,\n    EXP_TAG_BOMB_CLUSTER_SECONDARY = 54,\n    EXP_TAG_HUNTER_BARRAGE = 55,\n    EXP_TAG_HUNTER_CANNON = 56,\n    EXP_TAG_ROGUE_CANNON = 57,\n    EXP_TAG_MINE_UNDERWATER = 58,\n    EXP_TAG_ORBITAL_CANNON = 59,\n    EXP_TAG_BOMB_STANDARD_WIDE = 60,\n    EXP_TAG_EXPLOSIVEAMMO_SHOTGUN = 61,\n    EXP_TAG_OPPRESSOR2_CANNON = 62,\n    EXP_TAG_MORTAR_KINETIC = 63,\n    EXP_TAG_VEHICLEMINE_KINETIC = 64,\n    EXP_TAG_VEHICLEMINE_EMP = 65,\n    EXP_TAG_VEHICLEMINE_SPIKE = 66,\n    EXP_TAG_VEHICLEMINE_SLICK = 67,\n    EXP_TAG_VEHICLEMINE_TAR = 68,\n    EXP_TAG_SCRIPT_DRONE = 69,\n    EXP_TAG_RAYGUN = 70,\n    EXP_TAG_BURIEDMINE = 71,\n    EXP_TAG_SCRIPT_MISSILE = 72,\n    EXP_TAG_RCTANK_ROCKET = 73,\n    EXP_TAG_BOMB_WATER = 74,\n    EXP_TAG_BOMB_WATER_SECONDARY = 75,\n    _0xF728C4A9 = 76,\n    _0xBAEC056F = 77,\n    EXP_TAG_FLASHGRENADE = 78,\n    EXP_TAG_STUNGRENADE = 79,\n    _0x763D3B3B = 80,\n    EXP_TAG_SCRIPT_MISSILE_LARGE = 81,\n    EXP_TAG_SUBMARINE_BIG = 82,\n};\n```",
            "examples": [],
            "hash": "0xE3AD2BDBAEE269AC",
            "ns": "FIRE",
            "jhash": "0x10AF5258",
            "manualHash": true
        },
        "0x50CAD495A460B305": {
            "name": "GET_NUMBER_OF_FIRES_IN_RANGE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x50CAD495A460B305",
            "ns": "FIRE",
            "jhash": "0x654D93B7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x14BA4BA137AF6CEC": {
            "name": "_GET_ENTITY_INSIDE_EXPLOSION_AREA",
            "params": [
                {
                    "name": "explosionType",
                    "type": "int",
                    "description": "See [`ADD_EXPLOSION`](#\\_0xE3AD2BDBAEE269AC)."
                },
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "Entity",
            "description": "```\nReturns a handle to the first entity within the a circle spawned inside the 2 points from a radius.\n```",
            "examples": [],
            "hash": "0x14BA4BA137AF6CEC",
            "ns": "FIRE",
            "aliases": ["_GET_PED_INSIDE_EXPLOSION_AREA"],
            "jhash": "0xAEC0D176",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x352A9F6BCF90081F": {
            "name": "GET_CLOSEST_FIRE_POS",
            "params": [
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nReturns TRUE if it found something. FALSE if not.  \n```",
            "examples": [],
            "hash": "0x352A9F6BCF90081F",
            "ns": "FIRE",
            "jhash": "0xC4977B47",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6070104B699B2EF4": {
            "name": "IS_EXPLOSION_ACTIVE_IN_AREA",
            "params": [
                {
                    "name": "explosionType",
                    "type": "int",
                    "description": "See [`ADD_EXPLOSION`](#\\_0xE3AD2BDBAEE269AC)."
                },
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6070104B699B2EF4",
            "ns": "FIRE",
            "aliases": ["0x6070104B699B2EF4"],
            "jhash": "0x37C388DB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA079A6C51525DC4B": {
            "name": "IS_EXPLOSION_IN_ANGLED_AREA",
            "params": [
                {
                    "name": "explosionType",
                    "type": "int",
                    "description": "explosion enum, -1 for any explosion type. See [ADD_EXPLOSION](#\\_0xE3AD2BDBAEE269AC)."
                },
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                }
            ],
            "results": "BOOL",
            "description": "See [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.",
            "examples": [],
            "hash": "0xA079A6C51525DC4B",
            "ns": "FIRE",
            "jhash": "0x0128FED9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x28D3FED7190D3A0B": {
            "name": "IS_ENTITY_ON_FIRE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x28D3FED7190D3A0B",
            "ns": "FIRE",
            "jhash": "0x8C73E64F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7FF548385680673F": {
            "name": "REMOVE_SCRIPT_FIRE",
            "params": [{ "name": "fireHandle", "type": "FireId" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7FF548385680673F",
            "ns": "FIRE",
            "jhash": "0x6B21FE26",
            "manualHash": true
        },
        "0x2E2EBA0EE7CED0E0": {
            "name": "IS_EXPLOSION_IN_AREA",
            "params": [
                {
                    "name": "explosionType",
                    "type": "int",
                    "description": "See [`ADD_EXPLOSION`](#\\_0xE3AD2BDBAEE269AC)."
                },
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2E2EBA0EE7CED0E0",
            "ns": "FIRE",
            "jhash": "0xFB40075B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAB0F816885B0E483": {
            "name": "IS_EXPLOSION_IN_SPHERE",
            "params": [
                {
                    "name": "explosionType",
                    "type": "int",
                    "description": "See [`ADD_EXPLOSION`](#\\_0xE3AD2BDBAEE269AC)."
                },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAB0F816885B0E483",
            "ns": "FIRE",
            "jhash": "0xD455A7F3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8F390AC4155099BA": {
            "name": "_SET_FIRE_SPREAD_RATE",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "SET_FIRE_\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x8F390AC4155099BA",
            "ns": "FIRE",
            "manualHash": true
        },
        "0xF6A9D9708F6F23DF": {
            "name": "START_ENTITY_FIRE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "FireId",
            "description": "",
            "examples": [],
            "hash": "0xF6A9D9708F6F23DF",
            "ns": "FIRE",
            "jhash": "0x8928428E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7F0DD2EBBB651AFF": {
            "name": "STOP_ENTITY_FIRE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7F0DD2EBBB651AFF",
            "ns": "FIRE",
            "jhash": "0xCE8C9066",
            "manualHash": true
        },
        "0x6B83617E04503888": {
            "name": "START_SCRIPT_FIRE",
            "params": [
                { "name": "X", "type": "float" },
                { "name": "Y", "type": "float" },
                { "name": "Z", "type": "float" },
                { "name": "maxChildren", "type": "int" },
                { "name": "isGasFire", "type": "BOOL" }
            ],
            "results": "FireId",
            "description": "```\nStarts a fire:  \nxyz: Location of fire  \nmaxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.  \nisGasFire: Whether or not the fire is powered by gasoline.  \n```",
            "examples": [],
            "hash": "0x6B83617E04503888",
            "ns": "FIRE",
            "jhash": "0xE7529357",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x056A8A219B8E829F": {
            "name": "STOP_FIRE_IN_RANGE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x056A8A219B8E829F",
            "ns": "FIRE",
            "jhash": "0x725C7205",
            "manualHash": true
        }
    },
    "INTERIOR": {
        "0x3F6167F351168730": {
            "name": "ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME",
            "params": [
                { "name": "pickup", "type": "Pickup" },
                { "name": "roomName", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3F6167F351168730",
            "ns": "INTERIOR",
            "jhash": "0xA2A73564",
            "manualHash": true
        },
        "0xD9175F941610DB54": {
            "name": "CAP_INTERIOR",
            "params": [
                { "name": "interiorID", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nDoes something similar to INTERIOR::DISABLE_INTERIOR  \n```",
            "examples": [],
            "hash": "0xD9175F941610DB54",
            "ns": "INTERIOR",
            "jhash": "0x34E735A6",
            "manualHash": true
        },
        "0x55E86AF2712B36A1": {
            "name": "ACTIVATE_INTERIOR_ENTITY_SET",
            "params": [
                { "name": "interior", "type": "int" },
                { "name": "entitySetName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nMore info: http://gtaforums.com/topic/836367-adding-props-to-interiors/  \n```",
            "examples": [],
            "hash": "0x55E86AF2712B36A1",
            "ns": "INTERIOR",
            "aliases": ["0x55E86AF2712B36A1", "_ENABLE_INTERIOR_PROP"],
            "jhash": "0xC80A5DDF",
            "manualHash": true
        },
        "0xB365FC0C4E27FFA7": {
            "name": "CLEAR_ROOM_FOR_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB365FC0C4E27FFA7",
            "ns": "INTERIOR",
            "jhash": "0x7DDADB92",
            "manualHash": true
        },
        "0x85D5422B2039A70D": {
            "name": "_CLEAR_INTERIOR_FOR_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "Immediately removes entity from an interior. Like sets entity to `limbo` room.\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x85D5422B2039A70D",
            "ns": "INTERIOR",
            "manualHash": true
        },
        "0x23B59D8912F94246": {
            "name": "CLEAR_ROOM_FOR_GAME_VIEWPORT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x23B59D8912F94246",
            "ns": "INTERIOR",
            "aliases": ["0x23B59D8912F94246"],
            "jhash": "0x617DC75D",
            "manualHash": true
        },
        "0xA97F257D0151A6AB": {
            "name": "ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME",
            "params": [{ "name": "mapObjectHash", "type": "Hash" }],
            "results": "void",
            "description": "```\nThis is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.\n```",
            "examples": [],
            "hash": "0xA97F257D0151A6AB",
            "ns": "INTERIOR",
            "aliases": ["0xA97F257D0151A6AB", "_HIDE_MAP_OBJECT_THIS_FRAME"],
            "jhash": "0x1F375B4C",
            "manualHash": true
        },
        "0x6170941419D7D8EC": {
            "name": "DISABLE_INTERIOR",
            "params": [
                { "name": "interiorID", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nExample:   \nThis removes the interior from the strip club and when trying to walk inside the player just falls:  \nINTERIOR::DISABLE_INTERIOR(118018, true);  \n```",
            "examples": [],
            "hash": "0x6170941419D7D8EC",
            "ns": "INTERIOR",
            "jhash": "0x093ADEA5",
            "manualHash": true
        },
        "0x920D853F3E17F1DA": {
            "name": "FORCE_ROOM_FOR_GAME_VIEWPORT",
            "params": [
                { "name": "interiorID", "type": "int" },
                { "name": "roomHashKey", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x920D853F3E17F1DA",
            "ns": "INTERIOR",
            "aliases": ["0x920D853F3E17F1DA"],
            "jhash": "0xD79803B5",
            "manualHash": true
        },
        "0x05B7A89BD78797FC": {
            "name": "GET_INTERIOR_AT_COORDS_WITH_TYPE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "interiorType", "type": "char*" }
            ],
            "results": "int",
            "description": "```\nReturns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.  \nUse: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))  \nInterior types include: \"V_Michael\", \"V_Franklins\", \"V_Franklinshouse\", etc.. you can find them in the scripts.  \nNot a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.  \n```",
            "examples": [],
            "hash": "0x05B7A89BD78797FC",
            "ns": "INTERIOR",
            "aliases": ["0x05B7A89BD78797FC"],
            "jhash": "0x96525B06",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x52923C4710DD9907": {
            "name": "FORCE_ROOM_FOR_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "interior", "type": "int" },
                { "name": "roomHashKey", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nForces the particular room in an interior to load incase not teleporting into the portal.\n```",
            "examples": [],
            "hash": "0x52923C4710DD9907",
            "ns": "INTERIOR",
            "jhash": "0x10BD4435",
            "manualHash": true
        },
        "0x420BD37289EEE162": {
            "name": "DEACTIVATE_INTERIOR_ENTITY_SET",
            "params": [
                { "name": "interior", "type": "int" },
                { "name": "entitySetName", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x420BD37289EEE162",
            "ns": "INTERIOR",
            "aliases": ["0x420BD37289EEE162", "_DISABLE_INTERIOR_PROP"],
            "jhash": "0xDBA768A1",
            "manualHash": true
        },
        "0xEC4CF9FCB29A4424": {
            "name": "GET_INTERIOR_FROM_COLLISION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xEC4CF9FCB29A4424",
            "ns": "INTERIOR",
            "jhash": "0x7ED33DC1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x50C375537449F369": {
            "name": "_ENABLE_SCRIPT_CULL_MODEL_THIS_FRAME",
            "params": [
                {
                    "name": "mapObjectHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x50C375537449F369",
            "ns": "INTERIOR",
            "aliases": ["0x50C375537449F369"],
            "manualHash": true
        },
        "0x252BDC06B73FA6EA": {
            "name": "GET_INTERIOR_LOCATION_AND_NAMEHASH",
            "params": [
                { "name": "interior", "type": "int" },
                { "name": "position", "type": "Vector3*" },
                { "name": "nameHash", "type": "Hash*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x252BDC06B73FA6EA",
            "ns": "INTERIOR",
            "aliases": ["0x252BDC06B73FA6EA", "_GET_INTERIOR_INFO"],
            "jhash": "0x75885CB3",
            "manualHash": true
        },
        "0xE4A84ABF135EF91A": {
            "name": "GET_INTERIOR_GROUP_ID",
            "params": [{ "name": "interior", "type": "int" }],
            "results": "int",
            "description": "```\nReturns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.  \n```",
            "examples": [],
            "hash": "0xE4A84ABF135EF91A",
            "ns": "INTERIOR",
            "jhash": "0x09D6376F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2107BA504071A6BB": {
            "name": "GET_INTERIOR_FROM_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "int",
            "description": "```\nReturns the handle of the interior that the entity is in. Returns 0 if outside.  \n```",
            "examples": [],
            "hash": "0x2107BA504071A6BB",
            "ns": "INTERIOR",
            "jhash": "0x5C644614",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEEA5AC2EDA7C33E8": {
            "name": "IS_COLLISION_MARKED_OUTSIDE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "BOOL",
            "description": "Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)",
            "examples": [],
            "hash": "0xEEA5AC2EDA7C33E8",
            "ns": "INTERIOR",
            "aliases": [
                "0xEEA5AC2EDA7C33E8",
                "_ARE_COORDS_COLLIDING_WITH_EXTERIOR"
            ],
            "jhash": "0x7762249C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB0F7F8663821D9C3": {
            "name": "GET_INTERIOR_AT_COORDS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "int",
            "description": "```\nReturns interior ID from specified coordinates. If coordinates are outside, then it returns 0.  \nExample for VB.NET  \nDim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)  \n```",
            "examples": [],
            "hash": "0xB0F7F8663821D9C3",
            "ns": "INTERIOR",
            "jhash": "0xA17FBF37",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF49B58631D9E22D9": {
            "name": "GET_INTERIOR_HEADING",
            "params": [
                {
                    "name": "interior",
                    "type": "int",
                    "description": "ID of the interior"
                }
            ],
            "results": "float",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xF49B58631D9E22D9",
            "ns": "INTERIOR",
            "aliases": ["_GET_INTERIOR_HEADING"],
            "manualHash": true,
            "resultsDescription": "Returns interior heading in radians. Multiply the returned value with 57.29578 (or 180.0 / math.pi) to convert it to degrees."
        },
        "0xF0F77ADB9F67E79D": {
            "name": "GET_INTERIOR_AT_COORDS_WITH_TYPEHASH",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                {
                    "name": "typeHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "int" }
                }
            ],
            "results": "int",
            "description": "```\nHashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE\n```",
            "examples": [],
            "hash": "0xF0F77ADB9F67E79D",
            "ns": "INTERIOR",
            "aliases": ["0xF0F77ADB9F67E79D", "_UNK_GET_INTERIOR_AT_COORDS"],
            "jhash": "0x11718507",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x35F7DD45E8C0A16D": {
            "name": "IS_INTERIOR_ENTITY_SET_ACTIVE",
            "params": [
                { "name": "interior", "type": "int" },
                { "name": "entitySetName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x35F7DD45E8C0A16D",
            "ns": "INTERIOR",
            "aliases": ["0x35F7DD45E8C0A16D", "_IS_INTERIOR_PROP_ENABLED"],
            "jhash": "0x39A3CC6F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA6575914D2A0B450": {
            "name": "GET_ROOM_KEY_FOR_GAME_VIEWPORT",
            "params": [],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xA6575914D2A0B450",
            "ns": "INTERIOR",
            "aliases": [
                "0xA6575914D2A0B450",
                "_GET_ROOM_KEY_FROM_GAMEPLAY_CAM"
            ],
            "jhash": "0x4FF3D3F5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x399685DB942336BC": {
            "name": "GET_KEY_FOR_ENTITY_IN_ROOM",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Hash",
            "description": "```\nSeems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY  \n```",
            "examples": [],
            "hash": "0x399685DB942336BC",
            "ns": "INTERIOR",
            "jhash": "0x91EA80EF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE7D267EC6CA966C3": {
            "name": "GET_INTERIOR_FROM_PRIMARY_VIEW",
            "params": [],
            "results": "int",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xE7D267EC6CA966C3",
            "ns": "INTERIOR",
            "aliases": [
                "0xE7D267EC6CA966C3",
                "_GET_INTERIOR_FROM_GAMEPLAY_CAM"
            ],
            "jhash": "0xA83C3D15",
            "manualHash": true
        },
        "0x92BAC8ACF88CEC26": {
            "name": "IS_INTERIOR_CAPPED",
            "params": [{ "name": "interiorID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x92BAC8ACF88CEC26",
            "ns": "INTERIOR",
            "jhash": "0x18B17C80",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBC5115A5A939DD15": {
            "name": "IS_INTERIOR_DISABLED",
            "params": [{ "name": "interior", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBC5115A5A939DD15",
            "ns": "INTERIOR",
            "jhash": "0x81F34C71",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x26B0E73D7EAAF4D3": {
            "name": "IS_VALID_INTERIOR",
            "params": [{ "name": "interior", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x26B0E73D7EAAF4D3",
            "ns": "INTERIOR",
            "jhash": "0x39C0B635",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBC72B5D7A1CBD54D": {
            "name": "IS_INTERIOR_SCENE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBC72B5D7A1CBD54D",
            "ns": "INTERIOR",
            "jhash": "0x55226C13",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6726BDCCC1932F0E": {
            "name": "IS_INTERIOR_READY",
            "params": [{ "name": "interiorID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6726BDCCC1932F0E",
            "ns": "INTERIOR",
            "jhash": "0xE1EF6450",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9E3B3E6D66F6E22F": {
            "name": "GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS",
            "params": [
                { "name": "interior", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x9E3B3E6D66F6E22F",
            "ns": "INTERIOR",
            "jhash": "0x7D8F26A1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x483ACA1176CA93F1": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x483ACA1176CA93F1",
            "ns": "INTERIOR",
            "manualHash": true
        },
        "0x47C2A06D4F5F424B": {
            "name": "GET_ROOM_KEY_FROM_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Hash",
            "description": "```\nGets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.  \n```",
            "examples": [],
            "hash": "0x47C2A06D4F5F424B",
            "ns": "INTERIOR",
            "jhash": "0xE4ACF8C3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x405DC2AEF6AF95B9": {
            "params": [{ "name": "roomHashKey", "type": "Hash" }],
            "results": "void",
            "description": "```\nUsage: INTERIOR::_0x405DC2AEF6AF95B9(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));  \n```",
            "examples": [],
            "hash": "0x405DC2AEF6AF95B9",
            "ns": "INTERIOR",
            "jhash": "0x0E9529CC",
            "manualHash": true
        },
        "0x38C1CB1CB119A016": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x38C1CB1CB119A016",
            "ns": "INTERIOR",
            "manualHash": true
        },
        "0x82EBB79E258FA2B7": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "interiorID", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x82EBB79E258FA2B7",
            "ns": "INTERIOR",
            "jhash": "0xE645E162",
            "manualHash": true
        },
        "0x4C2330E61D3DEB56": {
            "params": [{ "name": "interior", "type": "int" }],
            "results": "Any",
            "description": "```\nOnly used once in the entire game scripts.\nDoes not actually return anything.\n```",
            "examples": [],
            "hash": "0x4C2330E61D3DEB56",
            "ns": "INTERIOR",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAF348AFCB575A441": {
            "params": [{ "name": "roomName", "type": "char*" }],
            "results": "void",
            "description": "```\nExemple of use(carmod_shop.c4)  \nINTERIOR::_AF348AFCB575A441(\"V_CarModRoom\");  \n```",
            "examples": [],
            "hash": "0xAF348AFCB575A441",
            "ns": "INTERIOR",
            "jhash": "0x1F6B4B13",
            "manualHash": true
        },
        "0x7ECDF98587E92DEC": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x7ECDF98587E92DEC",
            "ns": "INTERIOR",
            "manualHash": true
        },
        "0x7241CCB7D020DB69": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nJenkins hash _might_ be 0xFC227584.\n```",
            "examples": [],
            "hash": "0x7241CCB7D020DB69",
            "ns": "INTERIOR",
            "manualHash": true
        },
        "0x261CCE7EED010641": {
            "name": "UNPIN_INTERIOR",
            "params": [{ "name": "interior", "type": "int" }],
            "results": "void",
            "description": "```\nDoes something similar to INTERIOR::DISABLE_INTERIOR.  \nYou don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.  \n```",
            "examples": [],
            "hash": "0x261CCE7EED010641",
            "ns": "INTERIOR",
            "jhash": "0xFCFF792A",
            "manualHash": true
        },
        "0xC1F1920BAF281317": {
            "name": "_SET_INTERIOR_ENTITY_SET_COLOR",
            "params": [
                { "name": "interior", "type": "int" },
                { "name": "entitySetName", "type": "char*" },
                { "name": "color", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC1F1920BAF281317",
            "ns": "INTERIOR",
            "aliases": ["_SET_INTERIOR_PROP_COLOR"],
            "manualHash": true
        },
        "0x41F37C3427C75AE0": {
            "name": "REFRESH_INTERIOR",
            "params": [{ "name": "interiorID", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x41F37C3427C75AE0",
            "ns": "INTERIOR",
            "jhash": "0x9A29ACE6",
            "manualHash": true
        },
        "0x9E6542F0CE8E70A3": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nDISABLE_*\n```",
            "examples": [],
            "hash": "0x9E6542F0CE8E70A3",
            "ns": "INTERIOR",
            "jhash": "0x5EF9C5C2",
            "manualHash": true
        },
        "0x2CA429C029CCF247": {
            "name": "PIN_INTERIOR_IN_MEMORY",
            "params": [{ "name": "interior", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2CA429C029CCF247",
            "ns": "INTERIOR",
            "aliases": ["0x2CA429C029CCF247", "_LOAD_INTERIOR"],
            "jhash": "0x3ADA414E",
            "manualHash": true
        }
    },
    "ITEMSET": {
        "0xE3945201F14637DD": {
            "name": "ADD_TO_ITEMSET",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE3945201F14637DD",
            "ns": "ITEMSET",
            "jhash": "0x6B0FE61B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x41BC0D722FC04221": {
            "name": "CLEAN_ITEMSET",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x41BC0D722FC04221",
            "ns": "ITEMSET",
            "jhash": "0x919A4858",
            "manualHash": true
        },
        "0x35AD299F50D91B24": {
            "name": "CREATE_ITEMSET",
            "params": [
                {
                    "name": "distri",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Vehicle" }
                }
            ],
            "results": "Vehicle",
            "description": "",
            "examples": [],
            "hash": "0x35AD299F50D91B24",
            "ns": "ITEMSET",
            "jhash": "0x0A113B2C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2D0FC594D1E9C107": {
            "name": "IS_IN_ITEMSET",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2D0FC594D1E9C107",
            "ns": "ITEMSET",
            "jhash": "0x0D4B9730",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD9127E83ABF7C631": {
            "name": "GET_ITEMSET_SIZE",
            "params": [{ "name": "x", "type": "ScrHandle" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xD9127E83ABF7C631",
            "ns": "ITEMSET",
            "jhash": "0x2B31F41A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7A197E2521EE2BAB": {
            "name": "GET_INDEXED_ITEM_IN_ITEMSET",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x7A197E2521EE2BAB",
            "ns": "ITEMSET",
            "jhash": "0x3F712874",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDE18220B1C183EDA": {
            "name": "DESTROY_ITEMSET",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDE18220B1C183EDA",
            "ns": "ITEMSET",
            "jhash": "0x83CE1A4C",
            "manualHash": true
        },
        "0x25E68244B0177686": {
            "name": "REMOVE_FROM_ITEMSET",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x25E68244B0177686",
            "ns": "ITEMSET",
            "jhash": "0xA9565228",
            "manualHash": true
        },
        "0xB1B1EA596344DFAB": {
            "name": "IS_ITEMSET_VALID",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB1B1EA596344DFAB",
            "ns": "ITEMSET",
            "jhash": "0xD201FC29",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "LOADINGSCREEN": {
        "0xC6DC823253FBB366": {
            "name": "_LOADINGSCREEN_IS_LOADING_FREEMODE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC6DC823253FBB366",
            "ns": "LOADINGSCREEN",
            "aliases": ["0xC6DC823253FBB366", "_IS_UI_LOADING_MULTIPLAYER"],
            "jhash": "0x734CFEDA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB0C56BD3D808D863": {
            "name": "_LOADINGSCREEN_SET_LOAD_FREEMODE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB0C56BD3D808D863",
            "ns": "LOADINGSCREEN",
            "aliases": [
                "_GET_BROADCAST_FINSHED_LOS_SOUND",
                "0xB0C56BD3D808D863"
            ],
            "jhash": "0xC0B971EA",
            "manualHash": true
        },
        "0xFC309E94546FCDB5": {
            "name": "_LOADINGSCREEN_SET_LOAD_FREEMODE_WITH_EVENT_NAME",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nOnly occurrence was false, in maintransition.  \n```",
            "examples": [],
            "hash": "0xFC309E94546FCDB5",
            "ns": "LOADINGSCREEN",
            "aliases": ["0xFC309E94546FCDB5", "_IS_IN_LOADING_SCREEN"],
            "jhash": "0x7D90EEE5",
            "manualHash": true
        },
        "0x8AA464D4E0F6ACCD": {
            "name": "_LOADINGSCREEN_GET_LOAD_FREEMODE_WITH_EVENT_NAME",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8AA464D4E0F6ACCD",
            "ns": "LOADINGSCREEN",
            "aliases": ["0x8AA464D4E0F6ACCD"],
            "jhash": "0x94BCAC7C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF7D17BC6C85264C": {
            "name": "_LOADINGSCREEN_GET_LOAD_FREEMODE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEF7D17BC6C85264C",
            "ns": "LOADINGSCREEN",
            "aliases": ["0xEF7D17BC6C85264C"],
            "jhash": "0xD87F3A9E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF2CA003F167E21D2": {
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF2CA003F167E21D2",
            "ns": "LOADINGSCREEN",
            "aliases": ["_RETURN_ZERO"],
            "jhash": "0x106C8317",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0xC7E7181C09F33B69": {
            "name": "_LOADINGSCREEN_SET_IS_LOADING_FREEMODE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC7E7181C09F33B69",
            "ns": "LOADINGSCREEN",
            "aliases": ["0xC7E7181C09F33B69"],
            "jhash": "0x8C227332",
            "manualHash": true
        },
        "0xFA1E0E893D915215": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFA1E0E893D915215",
            "ns": "LOADINGSCREEN",
            "jhash": "0x5C350D78",
            "manualHash": true
        }
    },
    "GRAPHICS": {
        "0x9CD43EEE12BF4DD0": {
            "name": "ADD_ENTITY_ICON",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "icon", "type": "char*" }
            ],
            "results": "Any",
            "description": "```\nExample:  \nGRAPHICS::ADD_ENTITY_ICON(a_0, \"MP_Arrow\");  \nI tried this and nothing happened...  \n```",
            "examples": [],
            "hash": "0x9CD43EEE12BF4DD0",
            "ns": "GRAPHICS",
            "jhash": "0xF3027D21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB302244A1839BDAD": {
            "name": "ADD_DECAL",
            "params": [
                { "name": "decalType", "type": "int" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "width", "type": "float" },
                { "name": "height", "type": "float" },
                { "name": "rCoef", "type": "float" },
                { "name": "gCoef", "type": "float" },
                { "name": "bCoef", "type": "float" },
                { "name": "opacity", "type": "float" },
                { "name": "timeout", "type": "float" },
                { "name": "p17", "type": "BOOL" },
                { "name": "p18", "type": "BOOL" },
                { "name": "p19", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\ndecal types:  \npublic enum DecalTypes  \n{  \n    splatters_blood = 1010,  \n    splatters_blood_dir = 1015,  \n    splatters_blood_mist = 1017,  \n    splatters_mud = 1020,  \n    splatters_paint = 1030,  \n    splatters_water = 1040,  \n    splatters_water_hydrant = 1050,  \n    splatters_blood2 = 1110,  \n    weapImpact_metal = 4010,  \n    weapImpact_concrete = 4020,  \n    weapImpact_mattress = 4030,  \n    weapImpact_mud = 4032,  \n    weapImpact_wood = 4050,  \n    weapImpact_sand = 4053,  \n    weapImpact_cardboard = 4040,  \n    weapImpact_melee_glass = 4100,  \n    weapImpact_glass_blood = 4102,  \n    weapImpact_glass_blood2 = 4104,  \n    weapImpact_shotgun_paper = 4200,  \n    weapImpact_shotgun_mattress,  \n    weapImpact_shotgun_metal,  \n    weapImpact_shotgun_wood,  \n    weapImpact_shotgun_dirt,  \n    weapImpact_shotgun_tvscreen,  \n    weapImpact_shotgun_tvscreen2,  \n    weapImpact_shotgun_tvscreen3,  \n    weapImpact_melee_concrete = 4310,  \n    weapImpact_melee_wood = 4312,  \n    weapImpact_melee_metal = 4314,  \n    burn1 = 4421,  \n    burn2,  \n    burn3,  \n    burn4,  \n    burn5,  \n    bang_concrete_bang = 5000,  \n    bang_concrete_bang2,  \n    bang_bullet_bang,  \n    bang_bullet_bang2 = 5004,  \n    bang_glass = 5031,  \n    bang_glass2,  \n    solidPool_water = 9000,  \n    solidPool_blood,  \n    solidPool_oil,  \n    solidPool_petrol,  \n    solidPool_mud,  \n    porousPool_water,  \n    porousPool_blood,  \n    porousPool_oil,  \n    porousPool_petrol,  \n    porousPool_mud,  \n    porousPool_water_ped_drip,  \n    liquidTrail_water = 9050  \n}  \n```",
            "examples": [],
            "hash": "0xB302244A1839BDAD",
            "ns": "GRAPHICS",
            "jhash": "0xEAD0C412",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x126D7F89FE859A5E": {
            "name": "_ADD_OIL_DECAL",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "groundLvl", "type": "float" },
                { "name": "width", "type": "float" },
                { "name": "transparency", "type": "float" }
            ],
            "results": "int",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x126D7F89FE859A5E",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x4F5212C7AD880DF8": {
            "name": "ADD_PETROL_DECAL",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "groundLvl", "type": "float" },
                { "name": "width", "type": "float" },
                { "name": "transparency", "type": "float" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x4F5212C7AD880DF8",
            "ns": "GRAPHICS",
            "jhash": "0x1259DF42",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x36AD3E690DA5ACEB": {
            "name": "ANIMPOSTFX_IS_RUNNING",
            "params": [{ "name": "effectName", "type": "char*" }],
            "results": "BOOL",
            "description": "See [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724).",
            "examples": [],
            "hash": "0x36AD3E690DA5ACEB",
            "ns": "GRAPHICS",
            "aliases": ["_GET_SCREEN_EFFECT_IS_ACTIVE"],
            "jhash": "0x089D5921",
            "manualHash": true,
            "resultsDescription": "Whether the specified effect is active"
        },
        "0x967278682CB6967A": {
            "name": "ADD_PETROL_TRAIL_DECAL_INFO",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x967278682CB6967A",
            "ns": "GRAPHICS",
            "aliases": ["0x967278682CB6967A"],
            "jhash": "0xBAEC6ADD",
            "manualHash": true
        },
        "0x1A8E2C8B9CF4549C": {
            "name": "ADD_TCMODIFIER_OVERRIDE",
            "params": [
                { "name": "modifierName1", "type": "char*" },
                { "name": "modifierName2", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1A8E2C8B9CF4549C",
            "ns": "GRAPHICS",
            "aliases": ["0x1A8E2C8B9CF4549C"],
            "jhash": "0xE8F538B5",
            "manualHash": true
        },
        "0x068E835A1D0DC0E3": {
            "name": "ANIMPOSTFX_STOP",
            "params": [{ "name": "effectName", "type": "char*" }],
            "results": "void",
            "description": "See [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724).",
            "examples": [],
            "hash": "0x068E835A1D0DC0E3",
            "ns": "GRAPHICS",
            "aliases": ["_STOP_SCREEN_EFFECT"],
            "jhash": "0x06BB5CDA",
            "manualHash": true
        },
        "0xE35B38A27E8E7179": {
            "name": "_ANIMPOSTFX_GET_UNK",
            "params": [{ "name": "effectName", "type": "char*" }],
            "results": "float",
            "description": "See [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724)",
            "examples": [],
            "hash": "0xE35B38A27E8E7179",
            "ns": "GRAPHICS",
            "aliases": ["0xE35B38A27E8E7179"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x428BDCB9DA58DA53": {
            "name": "ADD_VEHICLE_CREW_EMBLEM",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "ped", "type": "Ped" },
                { "name": "boneIndex", "type": "int" },
                { "name": "x1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "x3", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "y3", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "z3", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "p13", "type": "Any" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nboneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.\n```",
            "examples": [],
            "hash": "0x428BDCB9DA58DA53",
            "ns": "GRAPHICS",
            "aliases": ["_ADD_CLAN_DECAL_TO_VEHICLE"],
            "jhash": "0x12077738",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2206BF9A37B7F724": {
            "name": "ANIMPOSTFX_PLAY",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "duration", "type": "int" },
                { "name": "looped", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nduration - is how long to play the effect for in milliseconds. If 0, it plays the default length\nif loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)\n```",
            "examples": [],
            "hash": "0x2206BF9A37B7F724",
            "ns": "GRAPHICS",
            "aliases": ["_START_SCREEN_EFFECT"],
            "jhash": "0x1D980479",
            "manualHash": true
        },
        "0x845BAD77CC770633": {
            "name": "ATTACH_TV_AUDIO_TO_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "```\nMight be more appropriate in AUDIO?  \n```",
            "examples": [],
            "hash": "0x845BAD77CC770633",
            "ns": "GRAPHICS",
            "jhash": "0x784944DB",
            "manualHash": true
        },
        "0xB4EDDC19532BFB85": {
            "name": "ANIMPOSTFX_STOP_ALL",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB4EDDC19532BFB85",
            "ns": "GRAPHICS",
            "aliases": ["_STOP_ALL_SCREEN_EFFECTS"],
            "jhash": "0x4E6D875B",
            "manualHash": true
        },
        "0xD2209BE128B5418C": {
            "name": "_ANIMPOSTFX_STOP_AND_DO_UNK",
            "params": [{ "name": "effectName", "type": "char*" }],
            "results": "void",
            "description": "Stops the effect and sets a value (bool) in its data (+0x199) to false; See [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724).",
            "examples": [],
            "hash": "0xD2209BE128B5418C",
            "ns": "GRAPHICS",
            "aliases": ["0xD2209BE128B5418C"],
            "manualHash": true
        },
        "0xAB58C27C2E6123C6": {
            "name": "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND",
            "params": [
                {
                    "name": "functionName",
                    "type": "char*",
                    "description": "The function name of the scaleform to call."
                }
            ],
            "results": "BOOL",
            "description": "Starts frontend (pause menu) scaleform movie methods.\nThis can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.\n\nUse [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER`](#\\_0xB9449845F73F5E9C) for header scaleform functions.",
            "examples": [],
            "hash": "0xAB58C27C2E6123C6",
            "ns": "GRAPHICS",
            "aliases": [
                "0xAB58C27C2E6123C6",
                "_PUSH_SCALEFORM_MOVIE_FUNCTION_N",
                "_BEGIN_SCALEFORM_MOVIE_METHOD_N"
            ],
            "jhash": "0xF6015178",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF6E48914C7A8694E": {
            "name": "BEGIN_SCALEFORM_MOVIE_METHOD",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "methodName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nPush a function from the Scaleform onto the stack  \n```",
            "examples": [],
            "hash": "0xF6E48914C7A8694E",
            "ns": "GRAPHICS",
            "aliases": ["_PUSH_SCALEFORM_MOVIE_FUNCTION"],
            "jhash": "0x215ABBE8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x98C494FD5BDFBFD5": {
            "name": "BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD",
            "params": [
                { "name": "hudComponent", "type": "int" },
                { "name": "methodName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nPushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.\nKnown components:\n19 - MP_RANK_BAR\n20 - HUD_DIRECTOR_MODE\nThis native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under \"scripts\\__Packages\\com\\rockstargames\\gtav\\hud\\hudComponents\" and \"scripts\\__Packages\\com\\rockstargames\\gtav\\Multiplayer\".\n```",
            "examples": [],
            "hash": "0x98C494FD5BDFBFD5",
            "ns": "GRAPHICS",
            "aliases": [
                "_PUSH_SCALEFORM_MOVIE_FUNCTION_FROM_HUD_COMPONENT",
                "_BEGIN_SCALEFORM_MOVIE_METHOD_HUD_COMPONENT"
            ],
            "jhash": "0x5D66CE1E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1DD2139A9A20DCE8": {
            "name": "BEGIN_TAKE_MISSION_CREATOR_PHOTO",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1DD2139A9A20DCE8",
            "ns": "GRAPHICS",
            "aliases": ["0x1DD2139A9A20DCE8"],
            "jhash": "0xBA9AD458",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB9449845F73F5E9C": {
            "name": "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER",
            "params": [
                {
                    "name": "functionName",
                    "type": "char*",
                    "description": "Scaleform function name."
                }
            ],
            "results": "BOOL",
            "description": "Starts frontend (pause menu) scaleform movie methods for header options.\n\nUse [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND`](#\\_0xAB58C27C2E6123C6) to customize the content inside the frontend menus.",
            "examples": [],
            "hash": "0xB9449845F73F5E9C",
            "ns": "GRAPHICS",
            "aliases": [
                "0xB9449845F73F5E9C",
                "_BEGIN_SCALEFORM_MOVIE_METHOD_V"
            ],
            "jhash": "0x5E219B67",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFBD96D87AC96D533": {
            "name": "CALL_SCALEFORM_MOVIE_METHOD",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "method", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nCalls the Scaleform function.  \n```",
            "examples": [],
            "hash": "0xFBD96D87AC96D533",
            "ns": "GRAPHICS",
            "aliases": ["_CALL_SCALEFORM_MOVIE_FUNCTION_VOID"],
            "jhash": "0x7AB77B57",
            "manualHash": true
        },
        "0xEF662D8D57E290B1": {
            "name": "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "methodName", "type": "char*" },
                { "name": "floatParam1", "type": "float" },
                { "name": "floatParam2", "type": "float" },
                { "name": "floatParam3", "type": "float" },
                { "name": "floatParam4", "type": "float" },
                { "name": "floatParam5", "type": "float" },
                { "name": "stringParam1", "type": "char*" },
                { "name": "stringParam2", "type": "char*" },
                { "name": "stringParam3", "type": "char*" },
                { "name": "stringParam4", "type": "char*" },
                { "name": "stringParam5", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nCalls the Scaleform function and passes both float and string parameters (in their respective order).  \nThe number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).  \nNOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.  \nExamples:  \n// function MY_FUNCTION(floatParam1, floatParam2, stringParam)  \nGRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, \"MY_FUNCTION\", 10.0, 20.0, -1.0, -1.0, -1.0, \"String param\", 0, 0, 0, 0);  \n// function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)  \nGRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, \"MY_FUNCTION_2\", 10.0, -1.0, -1.0, -1.0, -1.0, \"String param #1\", \"String param #2\", 0, 0, 0);  \n```",
            "examples": [],
            "hash": "0xEF662D8D57E290B1",
            "ns": "GRAPHICS",
            "aliases": ["_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS"],
            "jhash": "0x6EAF56DE",
            "manualHash": true
        },
        "0xA67C35C56EB1BD9D": {
            "name": "BEGIN_TAKE_HIGH_QUALITY_PHOTO",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA67C35C56EB1BD9D",
            "ns": "GRAPHICS",
            "aliases": ["0xA67C35C56EB1BD9D"],
            "jhash": "0x47B0C137",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x51BC1ED3CC44E8F7": {
            "name": "CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "methodName", "type": "char*" },
                { "name": "param1", "type": "char*" },
                { "name": "param2", "type": "char*" },
                { "name": "param3", "type": "char*" },
                { "name": "param4", "type": "char*" },
                { "name": "param5", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nCalls the Scaleform function and passes the parameters as strings.  \nThe number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).  \n```",
            "examples": [],
            "hash": "0x51BC1ED3CC44E8F7",
            "ns": "GRAPHICS",
            "aliases": ["_CALL_SCALEFORM_MOVIE_FUNCTION_STRING_PARAMS"],
            "jhash": "0x91A7FCEB",
            "manualHash": true
        },
        "0x80338406F3475E55": {
            "name": "BEGIN_TEXT_COMMAND_SCALEFORM_STRING",
            "params": [
                {
                    "name": "textLabel",
                    "type": "char*",
                    "description": "a GXT text label"
                }
            ],
            "results": "void",
            "description": "```\nCalled prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.\nExamples:\nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"NUMBER\");\nHUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));\nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();\nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRING\");\nHUD::_ADD_TEXT_COMPONENT_STRING(a_2);\nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();\nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRTNM2\");\nHUD::_0x17299B63C7683A2B(v_3);\nHUD::_0x17299B63C7683A2B(v_4);\nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();\nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRTNM1\");\nHUD::_0x17299B63C7683A2B(v_3);\nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();\n```",
            "examples": [],
            "hash": "0x80338406F3475E55",
            "ns": "GRAPHICS",
            "aliases": ["_BEGIN_TEXT_COMPONENT"],
            "jhash": "0x3AC9CB55",
            "manualHash": true
        },
        "0xD0837058AE2E4BEE": {
            "name": "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "methodName", "type": "char*" },
                { "name": "param1", "type": "float" },
                { "name": "param2", "type": "float" },
                { "name": "param3", "type": "float" },
                { "name": "param4", "type": "float" },
                { "name": "param5", "type": "float" }
            ],
            "results": "void",
            "description": "```\nCalls the Scaleform function and passes the parameters as floats.  \nThe number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.  \n```",
            "examples": [],
            "hash": "0xD0837058AE2E4BEE",
            "ns": "GRAPHICS",
            "aliases": ["_CALL_SCALEFORM_MOVIE_FUNCTION_FLOAT_PARAMS"],
            "jhash": "0x557EDA1D",
            "manualHash": true
        },
        "0xD2936CAB8B58FCBD": {
            "name": "CASCADE_SHADOWS_SET_CASCADE_BOUNDS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2936CAB8B58FCBD",
            "ns": "GRAPHICS",
            "aliases": ["0xD2936CAB8B58FCBD"],
            "jhash": "0x84F05943",
            "manualHash": true
        },
        "0x27CB772218215325": {
            "name": "_CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x27CB772218215325",
            "ns": "GRAPHICS",
            "aliases": ["0x27CB772218215325", "_CASCADESHADOWS_RESET_TYPE"],
            "manualHash": true
        },
        "0x03FC694AE06C5A20": {
            "name": "CASCADE_SHADOWS_INIT_SESSION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x03FC694AE06C5A20",
            "ns": "GRAPHICS",
            "aliases": ["0x03FC694AE06C5A20"],
            "jhash": "0x48F16186",
            "manualHash": true
        },
        "0x80ECBC0C856D3B0B": {
            "name": "CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nWhen this is set to ON, shadows only draw as you get nearer.\nWhen OFF, they draw from a further distance.\n```",
            "examples": [],
            "hash": "0x80ECBC0C856D3B0B",
            "ns": "GRAPHICS",
            "aliases": ["_SET_FAR_SHADOWS_SUPPRESSED"],
            "jhash": "0xFE903D0F",
            "manualHash": true
        },
        "0x6DDBF9DFFC4AC080": {
            "name": "CASCADE_SHADOWS_SET_AIRCRAFT_MODE",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6DDBF9DFFC4AC080",
            "ns": "GRAPHICS",
            "aliases": ["0x6DDBF9DFFC4AC080"],
            "jhash": "0x9F470BE3",
            "manualHash": true
        },
        "0x5E9DAF5A20F15908": {
            "name": "CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5E9DAF5A20F15908",
            "ns": "GRAPHICS",
            "aliases": ["0x5E9DAF5A20F15908"],
            "jhash": "0xD2157428",
            "manualHash": true
        },
        "0x92CCC17A7A2285DA": {
            "name": "_CLEAR_EXTRA_TIMECYCLE_MODIFIER",
            "params": [],
            "results": "void",
            "description": "Clears the secondary timecycle modifier usually set with [`SetExtraTimecycleModifier`](#\\_0x5096FD9CCB49056D)",
            "examples": [],
            "hash": "0x92CCC17A7A2285DA",
            "ns": "GRAPHICS",
            "aliases": ["0x92CCC17A7A2285DA"],
            "jhash": "0x6776720A",
            "manualHash": true
        },
        "0x5F0F3F56635809EF": {
            "name": "CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F0F3F56635809EF",
            "ns": "GRAPHICS",
            "aliases": ["0x5F0F3F56635809EF"],
            "jhash": "0x13D4ABC0",
            "manualHash": true
        },
        "0xFF0B610F6BE0D7AF": {
            "name": "CLEAR_DRAW_ORIGIN",
            "params": [],
            "results": "void",
            "description": "Resets the screen's draw-origin which was changed by the function [`SET_DRAW_ORIGIN`](#\\_0xAA0008F3BBB8F416) back to `x=0, y=0`. See [`SET_DRAW_ORIGIN`](#\\_0xAA0008F3BBB8F416) for further information.",
            "examples": [],
            "hash": "0xFF0B610F6BE0D7AF",
            "ns": "GRAPHICS",
            "jhash": "0xDD76B263",
            "manualHash": true
        },
        "0x0134F0835AB6BFCB": {
            "name": "CREATE_CHECKPOINT",
            "params": [
                { "name": "type", "type": "int" },
                { "name": "posX1", "type": "float" },
                { "name": "posY1", "type": "float" },
                { "name": "posZ1", "type": "float" },
                { "name": "posX2", "type": "float" },
                { "name": "posY2", "type": "float" },
                { "name": "posZ2", "type": "float" },
                { "name": "diameter", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" },
                { "name": "reserved", "type": "int" }
            ],
            "results": "int",
            "description": "```\nCreates a checkpoint. Returns the handle of the checkpoint.  \n20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.\nParameters:  \n* type - The type of checkpoint to create. See below for a list of checkpoint types.  \n* pos1 - The position of the checkpoint.  \n* pos2 - The position of the next checkpoint to point to.  \n* diameter - The diameter of the checkpoint.\n* color - The color of the checkpoint.  \n* reserved - Special parameter, see below for details. Usually set to 0 in the scripts.  \nCheckpoint types (prior to game build 2189):  \n0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker        \n20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker   \n25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker      \n30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker   \n35-38-------Ring: Airplane Up, Left, Right, UpsideDown  \n39----------?  \n40----------Ring: just a ring  \n41----------?  \n42-44-------Cylinder w/ number (uses 'reserved' parameter)  \n45-47-------Cylinder no arrow or number  \nIf using type 42-44, reserved sets number / number and shape to display  \n0-99------------Just numbers (0-99)  \n100-109-----------------Arrow (0-9)  \n110-119------------Two arrows (0-9)  \n120-129----------Three arrows (0-9)  \n130-139----------------Circle (0-9)  \n140-149------------CycleArrow (0-9)  \n150-159----------------Circle (0-9)  \n160-169----Circle  w/ pointer (0-9)  \n170-179-------Perforated ring (0-9)  \n180-189----------------Sphere (0-9)  \n```\n\n[Checkpoint Types](https://docs.fivem.net/docs/game-references/checkpoints/) as of game build 2189",
            "examples": [],
            "hash": "0x0134F0835AB6BFCB",
            "ns": "GRAPHICS",
            "jhash": "0xF541B690",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD39D13C9FEBF0511": {
            "name": "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD39D13C9FEBF0511",
            "ns": "GRAPHICS",
            "aliases": ["0xD39D13C9FEBF0511"],
            "jhash": "0x4A124267",
            "manualHash": true
        },
        "0xBEB3D46BB7F043C0": {
            "name": "CLEAR_TV_CHANNEL_PLAYLIST",
            "params": [{ "name": "tvChannel", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBEB3D46BB7F043C0",
            "ns": "GRAPHICS",
            "aliases": ["0xBEB3D46BB7F043C0"],
            "jhash": "0xCBE7068F",
            "manualHash": true
        },
        "0xB25DC90BAD56CA42": {
            "name": "DESTROY_TRACKED_POINT",
            "params": [{ "name": "point", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB25DC90BAD56CA42",
            "ns": "GRAPHICS",
            "jhash": "0x14AC675F",
            "manualHash": true
        },
        "0x02AC28F3A01FA04A": {
            "name": "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x02AC28F3A01FA04A",
            "ns": "GRAPHICS",
            "aliases": ["0x02AC28F3A01FA04A"],
            "jhash": "0xB19B2764",
            "manualHash": true
        },
        "0xB11D94BC55F41932": {
            "name": "CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE",
            "params": [{ "name": "type", "type": "char*" }],
            "results": "void",
            "description": "```\nPossible values:\n\"CSM_ST_POINT\"\n\"CSM_ST_LINEAR\"\n\"CSM_ST_TWOTAP\"\n\"CSM_ST_BOX3x3\"\n\"CSM_ST_BOX4x4\"\n\"CSM_ST_DITHER2_LINEAR\"\n\"CSM_ST_CUBIC\"\n\"CSM_ST_DITHER4\"\n\"CSM_ST_DITHER16\"\n\"CSM_ST_SOFT16\"\n\"CSM_ST_DITHER16_RPDB\"\n\"CSM_ST_POISSON16_RPDB_GNORM\"\n\"CSM_ST_HIGHRES_BOX4x4\"\n\"CSM_ST_CLOUDS_SIMPLE\"\n\"CSM_ST_CLOUDS_LINEAR\"\n\"CSM_ST_CLOUDS_TWOTAP\"\n\"CSM_ST_CLOUDS_BOX3x3\"\n\"CSM_ST_CLOUDS_BOX4x4\"\n\"CSM_ST_CLOUDS_DITHER2_LINEAR\"\n\"CSM_ST_CLOUDS_SOFT16\"\n\"CSM_ST_CLOUDS_DITHER16_RPDB\"\n\"CSM_ST_CLOUDS_POISSON16_RPDB_GNORM\"\n```",
            "examples": [],
            "hash": "0xB11D94BC55F41932",
            "ns": "GRAPHICS",
            "aliases": ["0xB11D94BC55F41932", "_CASCADESHADOWS_SET_TYPE"],
            "jhash": "0xDE10BA1F",
            "manualHash": true
        },
        "0x0F07E7745A236711": {
            "name": "CLEAR_TIMECYCLE_MODIFIER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0F07E7745A236711",
            "ns": "GRAPHICS",
            "jhash": "0x8D8DF8EE",
            "manualHash": true
        },
        "0xF5ED37F54CD4D52E": {
            "name": "DELETE_CHECKPOINT",
            "params": [{ "name": "checkpoint", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF5ED37F54CD4D52E",
            "ns": "GRAPHICS",
            "jhash": "0xB66CF3CA",
            "manualHash": true
        },
        "0xDE81239437E8C5A8": {
            "name": "DISABLE_SCREENBLUR_FADE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDE81239437E8C5A8",
            "ns": "GRAPHICS",
            "aliases": ["0xDE81239437E8C5A8", "PAUSED_SCREENBLUR_LOADED"],
            "jhash": "0xDB7AECDA",
            "manualHash": true
        },
        "0xE2C9439ED45DEA60": {
            "name": "CREATE_TRACKED_POINT",
            "params": [],
            "results": "int",
            "description": "Creates a tracked point: useful for checking the visibility of a 3D point on screen.\n\nTracked points must be manually managed and will not be destroyed on resource stop (they are not an instance of CScriptResource). See [`DESTROY_TRACKED_POINT`](#\\_0xB25DC90BAD56CA42) and [onResourceStop](https://docs.fivem.net/docs/scripting-reference/events/list/onResourceStop/).\n\nOnly 64 points may be tracked at a given time.",
            "examples": [],
            "hash": "0xE2C9439ED45DEA60",
            "ns": "GRAPHICS",
            "jhash": "0x3129C31A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEFD97FF47B745B8D": {
            "name": "_DISABLE_SCRIPT_AMBIENT_EFFECTS",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEFD97FF47B745B8D",
            "ns": "GRAPHICS",
            "aliases": ["0xEFD97FF47B745B8D"],
            "manualHash": true
        },
        "0x3669F1B198DCAA4F": {
            "name": "DISABLE_OCCLUSION_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3669F1B198DCAA4F",
            "ns": "GRAPHICS",
            "aliases": ["0x3669F1B198DCAA4F"],
            "jhash": "0x0DCC0B8B",
            "manualHash": true
        },
        "0x5E657EF1099EDD65": {
            "name": "DOES_LATEST_BRIEF_STRING_EXIST",
            "params": [
                {
                    "name": "briefValue",
                    "type": "int",
                    "description": "A value indicating brief text."
                }
            ],
            "results": "BOOL",
            "description": "Used in pi_menu.c. Checks if there is a brief entry for specified value.\nValues:\n0 - Dialogue brief\n1 - Help text brief\n2 - Mission Objective brief",
            "examples": [],
            "hash": "0x5E657EF1099EDD65",
            "ns": "GRAPHICS",
            "aliases": ["0x5E657EF1099EDD65"],
            "jhash": "0x91A081A1",
            "manualHash": true
        },
        "0x2BF72AD5B41AA739": {
            "name": "DISABLE_MOON_CYCLE_OVERRIDE",
            "params": [],
            "results": "void",
            "description": "Removes any custom moon cycle overrides that have been configured with [ENABLE_MOON_CYCLE_OVERRIDE](#\\_0x2C328AF17210F009)",
            "examples": [
                { "lang": "lua", "code": "DisableMoonCycleOverride()" }
            ],
            "hash": "0x2BF72AD5B41AA739",
            "ns": "GRAPHICS",
            "aliases": [
                "0x2BF72AD5B41AA739",
                "_RESET_EXTRA_TIMECYCLE_MODIFIER_STRENGTH"
            ],
            "manualHash": true
        },
        "0x060D935D3981A275": {
            "name": "DOES_VEHICLE_HAVE_CREW_EMBLEM",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x060D935D3981A275",
            "ns": "GRAPHICS",
            "aliases": ["_HAS_VEHICLE_GOT_DECAL", "_DOES_VEHICLE_HAVE_DECAL"],
            "jhash": "0x6D58F73B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC9F98AC1884E73A2": {
            "name": "DISABLE_VEHICLE_DISTANTLIGHTS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC9F98AC1884E73A2",
            "ns": "GRAPHICS",
            "jhash": "0x7CFAE36F",
            "manualHash": true
        },
        "0x22A249A53034450A": {
            "name": "DONT_RENDER_IN_GAME_UI",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x22A249A53034450A",
            "ns": "GRAPHICS",
            "aliases": ["0x22A249A53034450A"],
            "jhash": "0x932FDB81",
            "manualHash": true
        },
        "0x74AFEF0D2E1E409B": {
            "name": "DOES_PARTICLE_FX_LOOPED_EXIST",
            "params": [{ "name": "ptfxHandle", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x74AFEF0D2E1E409B",
            "ns": "GRAPHICS",
            "jhash": "0xCBF91D2A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD3A9971CADAC7252": {
            "name": "DRAW_BOX",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nx,y,z = start pos  \nx2,y2,z2 = end pos  \nDraw's a 3D Box between the two x,y,z coords.  \n--------------  \nKeep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.  \nI recommend using a predefined function to call this.  \n[VB.NET]  \nPublic Sub DrawBox(a As Vector3, b As Vector3, col As Color)  \n    [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)  \nEnd Sub  \n[C#]  \npublic void DrawBox(Vector3 a, Vector3 b, Color col)  \n{  \n    Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);  \n}  \n```",
            "examples": [],
            "hash": "0xD3A9971CADAC7252",
            "ns": "GRAPHICS",
            "jhash": "0xCD4D9DD5",
            "manualHash": true
        },
        "0x083A2CA4F2E573BD": {
            "name": "DRAW_DEBUG_BOX",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "a", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0x083A2CA4F2E573BD",
            "ns": "GRAPHICS",
            "jhash": "0x8524A848",
            "manualHash": true
        },
        "0x73B1189623049839": {
            "name": "DRAW_DEBUG_CROSS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "size", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0x73B1189623049839",
            "ns": "GRAPHICS",
            "jhash": "0xB6DF3709",
            "manualHash": true
        },
        "0x7118E83EEB9F7238": {
            "name": "_DRAW_BINK_MOVIE",
            "params": [
                {
                    "name": "binkMovie",
                    "type": "int",
                    "description": "The movie to be drawn (from [`_SET_BINK_MOVIE`](#\\_0x338D9F609FD632DB))."
                },
                {
                    "name": "posX",
                    "type": "float",
                    "description": "The centered x position of the movie (0.0 - 1.0)."
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "The centered y position of the movie (0.0 - 1.0)."
                },
                {
                    "name": "scaleX",
                    "type": "float",
                    "description": "The x scale of the movie (0.0 - 1.0)."
                },
                {
                    "name": "scaleY",
                    "type": "float",
                    "description": "The y scale of the movie (0.0 - 1.0)."
                },
                {
                    "name": "rotation",
                    "type": "float",
                    "description": "The rotation of the movie (0.0 - 360.0)."
                },
                {
                    "name": "r",
                    "type": "int",
                    "description": "The red value of the movie (0 - 255)."
                },
                {
                    "name": "g",
                    "type": "int",
                    "description": "The green value of the movie (0 - 255)."
                },
                {
                    "name": "b",
                    "type": "int",
                    "description": "The blue value of the movie (0 - 255)."
                },
                {
                    "name": "a",
                    "type": "int",
                    "description": "The alpha value of the movie (0 - 255)."
                }
            ],
            "results": "void",
            "description": "Must be called each frame, will play at specified position on screen when called with [`_PLAY_BINK_MOVIE`](#\\_0x70D2CC8A542A973C)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n    local binkint = SetBinkMovie(\"casino_trailer\") -- BINK movie, list can be found at https://gist.github.com/ItsJunction/8046f28c29ea8ff2821e9e4f933f595f\n    SetBinkMovieTime(binkint, 0.0) -- Seeks to 0%, just incase of errors.\n\n    while (GetBinkMovieTime(binkint) < 100.0) do\n        print(math.floor(GetBinkMovieTime(binkint) * 100)/100 .. \"%\") -- Prints current playtime (as percentage).\n        PlayBinkMovie(binkint)\n        DrawBinkMovie(binkint, 0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255) -- This example draws and plays in fullscreen in the center (no matter the resolution).\n        Citizen.Wait(0)\n    end\nend)"
                }
            ],
            "hash": "0x7118E83EEB9F7238",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xD8B9A8AC5608FF94": {
            "name": "DRAW_DEBUG_LINE_WITH_TWO_COLOURS",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "r1", "type": "int" },
                { "name": "g1", "type": "int" },
                { "name": "b1", "type": "int" },
                { "name": "r2", "type": "int" },
                { "name": "g2", "type": "int" },
                { "name": "b2", "type": "int" },
                { "name": "alpha1", "type": "int" },
                { "name": "alpha2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0xD8B9A8AC5608FF94",
            "ns": "GRAPHICS",
            "jhash": "0xE8BFF632",
            "manualHash": true
        },
        "0xAAD68E1AB39DA632": {
            "name": "DRAW_DEBUG_SPHERE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0xAAD68E1AB39DA632",
            "ns": "GRAPHICS",
            "jhash": "0x304D0EEF",
            "manualHash": true
        },
        "0x7FDFADE676AA3CB0": {
            "name": "DRAW_DEBUG_LINE",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "a", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0x7FDFADE676AA3CB0",
            "ns": "GRAPHICS",
            "jhash": "0xABF783AB",
            "manualHash": true
        },
        "0xF49E9A9716A04595": {
            "name": "_DRAW_LIGHT_WITH_RANGE_AND_SHADOW",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "range", "type": "float" },
                { "name": "intensity", "type": "float" },
                { "name": "shadow", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF49E9A9716A04595",
            "ns": "GRAPHICS",
            "aliases": ["_DRAW_LIGHT_WITH_RANGE_WITH_SHADOW"],
            "manualHash": true
        },
        "0xA3BB2E9555C05A8F": {
            "name": "DRAW_DEBUG_TEXT_2D",
            "params": [
                { "name": "text", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0xA3BB2E9555C05A8F",
            "ns": "GRAPHICS",
            "jhash": "0x528B973B",
            "manualHash": true
        },
        "0x3903E216620488E8": {
            "name": "DRAW_DEBUG_TEXT",
            "params": [
                { "name": "text", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0x3903E216620488E8",
            "ns": "GRAPHICS",
            "jhash": "0x269B006F",
            "manualHash": true
        },
        "0x1072F115DAB0717E": {
            "name": "DRAW_LOW_QUALITY_PHOTO_TO_PHONE",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1072F115DAB0717E",
            "ns": "GRAPHICS",
            "aliases": ["0x1072F115DAB0717E"],
            "jhash": "0xE9F2B68F",
            "manualHash": true
        },
        "0xF2A1B2771A01DBD4": {
            "name": "DRAW_LIGHT_WITH_RANGE",
            "params": [
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "colorR", "type": "int" },
                { "name": "colorG", "type": "int" },
                { "name": "colorB", "type": "int" },
                { "name": "range", "type": "float" },
                { "name": "intensity", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF2A1B2771A01DBD4",
            "ns": "GRAPHICS",
            "jhash": "0x6A396E9A",
            "manualHash": true
        },
        "0x3A618A217E5154F0": {
            "name": "DRAW_RECT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "width", "type": "float" },
                { "name": "height", "type": "float" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "a", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDraws a rectangle on the screen.  \n-x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)  \n-y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)  \n-width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)  \n-height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)  \n-R: Red part of the color. (0-255)  \n-G: Green part of the color. (0-255)  \n-B: Blue part of the color. (0-255)  \n-A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)  \nThe total number of rectangles to be drawn in one frame is apparently limited to 399.  \n```\n\n```\nNativeDB Added Parameter 9: BOOL p8\n```",
            "examples": [],
            "hash": "0x3A618A217E5154F0",
            "ns": "GRAPHICS",
            "jhash": "0xDD2BFC77",
            "manualHash": true
        },
        "0x2BC54A8188768488": {
            "name": "_DRAW_INTERACTIVE_SPRITE",
            "params": [
                {
                    "name": "textureDict",
                    "type": "char*",
                    "description": "Name of texture dictionary to load texture from"
                },
                {
                    "name": "textureName",
                    "type": "char*",
                    "description": "Name of texture to load from texture dictionary"
                },
                {
                    "name": "screenX",
                    "type": "float",
                    "description": "Screen X"
                },
                {
                    "name": "screenY",
                    "type": "float",
                    "description": "Screen Y"
                },
                { "name": "width", "type": "float", "description": "Scale X" },
                { "name": "height", "type": "float", "description": "Scale Y" },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees"
                },
                { "name": "red", "type": "int", "description": "Color" },
                { "name": "green", "type": "int", "description": "Color" },
                { "name": "blue", "type": "int", "description": "Color" },
                {
                    "name": "alpha",
                    "type": "int",
                    "description": "Opacity level"
                }
            ],
            "results": "void",
            "description": "Similar to [\\_DRAW_SPRITE](#\\_0xE7FFAE5EBF23D890), but seems to be some kind of \"interactive\" sprite, at least used by render targets.\nThese seem to be the only dicts ever requested by this native:\n\n```\nprop_screen_biker_laptop\nProp_Screen_GR_Disruption\nProp_Screen_TaleOfUs\nprop_screen_nightclub\nProp_Screen_IE_Adhawk\nprop_screen_sm_free_trade_shipping\nprop_screen_hacker_truck\nMPDesktop\nProp_Screen_Nightclub\nAnd a few others\n```",
            "examples": [],
            "hash": "0x2BC54A8188768488",
            "ns": "GRAPHICS",
            "aliases": ["0x2BC54A8188768488"],
            "manualHash": true
        },
        "0xE82728F0DE75D13A": {
            "name": "_DRAW_MARKER_2",
            "params": [
                { "name": "type", "type": "int" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "dirX", "type": "float" },
                { "name": "dirY", "type": "float" },
                { "name": "dirZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "scaleX", "type": "float" },
                { "name": "scaleY", "type": "float" },
                { "name": "scaleZ", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" },
                { "name": "bobUpAndDown", "type": "BOOL" },
                { "name": "faceCamera", "type": "BOOL" },
                { "name": "p19", "type": "int" },
                { "name": "rotate", "type": "BOOL" },
                { "name": "textureDict", "type": "char*" },
                { "name": "textureName", "type": "char*" },
                { "name": "drawOnEnts", "type": "BOOL" },
                { "name": "p24", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 26: BOOL p25\n```",
            "examples": [],
            "hash": "0xE82728F0DE75D13A",
            "ns": "GRAPHICS",
            "aliases": ["0xE82728F0DE75D13A"],
            "manualHash": true
        },
        "0xCF537FDE4FBD4CE5": {
            "name": "DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED",
            "params": [
                { "name": "scaleform1", "type": "int" },
                { "name": "scaleform2", "type": "int" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCF537FDE4FBD4CE5",
            "ns": "GRAPHICS",
            "jhash": "0x9C59FC06",
            "manualHash": true
        },
        "0x6B7256074AE34680": {
            "name": "DRAW_LINE",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDraws a depth-tested line from one point to another.\n----------------\nx1, y1, z1 : Coordinates for the first point\nx2, y2, z2 : Coordinates for the second point\nr, g, b, alpha : Color with RGBA-Values\nI recommend using a predefined function to call this.\n[VB.NET]\nPublic Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)\n    [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)\nEnd Sub\n[C#]\npublic void DrawLine(Vector3 from, Vector3 to, Color col)\n{\n    Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);\n}\n```",
            "examples": [],
            "hash": "0x6B7256074AE34680",
            "ns": "GRAPHICS",
            "jhash": "0xB3426BCC",
            "manualHash": true
        },
        "0x54972ADAF0294A93": {
            "name": "DRAW_SCALEFORM_MOVIE",
            "params": [
                { "name": "scaleformHandle", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "width", "type": "float" },
                { "name": "height", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" },
                { "name": "unk", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x54972ADAF0294A93",
            "ns": "GRAPHICS",
            "jhash": "0x48DA6A58",
            "manualHash": true
        },
        "0x5BCA583A583194DB": {
            "name": "_DRAW_SPOT_LIGHT_WITH_SHADOW",
            "params": [
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "dirX", "type": "float" },
                { "name": "dirY", "type": "float" },
                { "name": "dirZ", "type": "float" },
                { "name": "colorR", "type": "int" },
                { "name": "colorG", "type": "int" },
                { "name": "colorB", "type": "int" },
                { "name": "distance", "type": "float" },
                { "name": "brightness", "type": "float" },
                { "name": "roundness", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "falloff", "type": "float" },
                { "name": "shadowId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5BCA583A583194DB",
            "ns": "GRAPHICS",
            "jhash": "0x32BF9598",
            "manualHash": true
        },
        "0x0DF606929C105BE1": {
            "name": "DRAW_SCALEFORM_MOVIE_FULLSCREEN",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" },
                { "name": "unk", "type": "int" }
            ],
            "results": "void",
            "description": "```\nunk is not used so no need  \n```",
            "examples": [],
            "hash": "0x0DF606929C105BE1",
            "ns": "GRAPHICS",
            "jhash": "0x7B48E696",
            "manualHash": true
        },
        "0x28477EC23D892089": {
            "name": "DRAW_MARKER",
            "params": [
                {
                    "name": "type",
                    "type": "int",
                    "description": "The marker type to draw."
                },
                {
                    "name": "posX",
                    "type": "float",
                    "description": "The X coordinate to draw the marker at."
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "The Y coordinate to draw the marker at."
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "The Z coordinate to draw the marker at."
                },
                {
                    "name": "dirX",
                    "type": "float",
                    "description": "The X component of the direction vector for the marker, or 0.0 to use rotX/Y/Z."
                },
                {
                    "name": "dirY",
                    "type": "float",
                    "description": "The Y component of the direction vector for the marker, or 0.0 to use rotX/Y/Z."
                },
                {
                    "name": "dirZ",
                    "type": "float",
                    "description": "The Z component of the direction vector for the marker, or 0.0 to use rotX/Y/Z."
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "The X rotation for the marker. Only used if the direction vector is 0.0."
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "The Y rotation for the marker. Only used if the direction vector is 0.0."
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "The Z rotation for the marker. Only used if the direction vector is 0.0."
                },
                {
                    "name": "scaleX",
                    "type": "float",
                    "description": "The scale for the marker on the X axis."
                },
                {
                    "name": "scaleY",
                    "type": "float",
                    "description": "The scale for the marker on the Y axis."
                },
                {
                    "name": "scaleZ",
                    "type": "float",
                    "description": "The scale for the marker on the Z axis."
                },
                {
                    "name": "red",
                    "type": "int",
                    "description": "The red component of the marker color, on a scale from 0-255."
                },
                {
                    "name": "green",
                    "type": "int",
                    "description": "The green component of the marker color, on a scale from 0-255."
                },
                {
                    "name": "blue",
                    "type": "int",
                    "description": "The blue component of the marker color, on a scale from 0-255."
                },
                {
                    "name": "alpha",
                    "type": "int",
                    "description": "The alpha component of the marker color, on a scale from 0-255."
                },
                {
                    "name": "bobUpAndDown",
                    "type": "BOOL",
                    "description": "Whether or not the marker should slowly animate up/down."
                },
                {
                    "name": "faceCamera",
                    "type": "BOOL",
                    "description": "Whether the marker should be a 'billboard', as in, should constantly face the camera."
                },
                {
                    "name": "p19",
                    "type": "int",
                    "description": "Typically set to `2`. Does not seem to matter directly."
                },
                {
                    "name": "rotate",
                    "type": "BOOL",
                    "description": "Rotations only apply to the heading."
                },
                {
                    "name": "textureDict",
                    "type": "char*",
                    "description": "A texture dictionary to draw the marker with, or NULL. Example: 'GolfPutting'"
                },
                {
                    "name": "textureName",
                    "type": "char*",
                    "description": "A texture name in `textureDict` to draw the marker with, or NULL. Example: 'PuttingMarker'"
                },
                {
                    "name": "drawOnEnts",
                    "type": "BOOL",
                    "description": "Whether or not the marker should draw on intersecting entities."
                }
            ],
            "results": "void",
            "description": "Draws a marker with the specified appearance at the target location. This has to be called every frame, e.g. in a `Wait(0)` loop.\n\nThere's a [list of markers](https://docs.fivem.net/game-references/markers/) on the FiveM documentation site.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\n\twhile true do\n\t\t-- draw every frame\n\t\tWait(0)\n\n\t\tlocal pedCoords = GetEntityCoords(PlayerPedId())\n\t\tDrawMarker(2, pedCoords.x, pedCoords.y, pedCoords.z + 2, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 2.0, 2.0, 2.0, 255, 128, 0, 50, false, true, 2, nil, nil, false)\n\tend\nend)"
                }
            ],
            "hash": "0x28477EC23D892089",
            "ns": "GRAPHICS",
            "jhash": "0x48D84A02",
            "manualHash": true
        },
        "0x29280002282F1928": {
            "name": "_DRAW_SPRITE_POLY",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "x3", "type": "float" },
                { "name": "y3", "type": "float" },
                { "name": "z3", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" },
                { "name": "textureDict", "type": "char*" },
                { "name": "textureName", "type": "char*" },
                { "name": "u1", "type": "float" },
                { "name": "v1", "type": "float" },
                { "name": "w1", "type": "float" },
                { "name": "u2", "type": "float" },
                { "name": "v2", "type": "float" },
                { "name": "w2", "type": "float" },
                { "name": "u3", "type": "float" },
                { "name": "v3", "type": "float" },
                { "name": "w3", "type": "float" }
            ],
            "results": "void",
            "description": "Used for drawling Deadline trailing lights, see deadline.ytd\n\nFor UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.",
            "examples": [],
            "hash": "0x29280002282F1928",
            "ns": "GRAPHICS",
            "aliases": ["0x29280002282F1928"],
            "manualHash": true
        },
        "0x87D51D72255D4E78": {
            "name": "DRAW_SCALEFORM_MOVIE_3D",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "sharpness", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "scaleX", "type": "float" },
                { "name": "scaleY", "type": "float" },
                { "name": "scaleZ", "type": "float" },
                { "name": "p13", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x87D51D72255D4E78",
            "ns": "GRAPHICS",
            "aliases": ["0x87D51D72255D4E78"],
            "jhash": "0xC4F63A89",
            "manualHash": true
        },
        "0xAC26716048436851": {
            "name": "DRAW_POLY",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "x3", "type": "float" },
                { "name": "y3", "type": "float" },
                { "name": "z3", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nx/y/z - Location of a vertex (in world coords), presumably.  \n----------------  \nx1, y1, z1     : Coordinates for the first point  \nx2, y2, z2     : Coordinates for the second point  \nx3, y3, z3     : Coordinates for the third point  \nr, g, b, alpha : Color with RGBA-Values  \nKeep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).  \nBut be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.  \nI recommend using a predefined function to call this.  \n[VB.NET]  \nPublic Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)  \n    [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)  \nEnd Sub  \n[C#]  \npublic void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)  \n{  \n    Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);  \n}  \nBTW: Intersecting triangles are not supported: They overlap in the order they were called.  \n```",
            "examples": [],
            "hash": "0xAC26716048436851",
            "ns": "GRAPHICS",
            "jhash": "0xABD19253",
            "manualHash": true
        },
        "0x799017F9E3B10112": {
            "name": "_DRAW_SPHERE",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "X coordinate of the sphere"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Y coordinate of the sphere"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Z coordinate of the sphere"
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "Size of the sphere, `1.0` = 1 meter"
                },
                {
                    "name": "r",
                    "type": "int",
                    "description": "Color red `0`-`255`"
                },
                {
                    "name": "g",
                    "type": "int",
                    "description": "Color green `0`-`255`"
                },
                {
                    "name": "b",
                    "type": "int",
                    "description": "Color blue `0`-`255`"
                },
                {
                    "name": "opacity",
                    "type": "float",
                    "description": "Opacity from `0.0`-`1.0`"
                }
            ],
            "results": "void",
            "description": "Draws a 3D sphere, typically seen in the GTA:O freemode event \"Penned In\".\n\nExample [image](https://imgur.com/nCbtS4H):\n\n```lua\nDrawSphere(35.45, 172.66, 126.22, 1.0, 0, 0, 255, 0.2)\n```",
            "examples": [],
            "hash": "0x799017F9E3B10112",
            "ns": "GRAPHICS",
            "aliases": ["0x799017F9E3B10112"],
            "manualHash": true
        },
        "0x98C4FE6EC34154CA": {
            "name": "_DRAW_SHOWROOM",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "ped", "type": "Ped" },
                { "name": "p2", "type": "int" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nIt's called after 0xD3A10FC7FD8D98CD and 0xF1CEA8A4198D8E9A  \np0 was always \"CELEBRATION_WINNER\"  \n```",
            "examples": [],
            "hash": "0x98C4FE6EC34154CA",
            "ns": "GRAPHICS",
            "aliases": ["0x98C4FE6EC34154CA"],
            "jhash": "0x9A0E3BFE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1CE592FDC749D6F5": {
            "name": "DRAW_SCALEFORM_MOVIE_3D_SOLID",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "scaleX", "type": "float" },
                { "name": "scaleY", "type": "float" },
                { "name": "scaleZ", "type": "float" },
                { "name": "p13", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1CE592FDC749D6F5",
            "ns": "GRAPHICS",
            "aliases": [
                "0x1CE592FDC749D6F5",
                "_DRAW_SCALEFORM_MOVIE_3D_NON_ADDITIVE"
            ],
            "jhash": "0x899933C8",
            "manualHash": true
        },
        "0x736D7AA1B750856B": {
            "name": "_DRAW_SPRITE_POLY_2",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "x3", "type": "float" },
                { "name": "y3", "type": "float" },
                { "name": "z3", "type": "float" },
                { "name": "red1", "type": "float" },
                { "name": "green1", "type": "float" },
                { "name": "blue1", "type": "float" },
                { "name": "alpha1", "type": "int" },
                { "name": "red2", "type": "float" },
                { "name": "green2", "type": "float" },
                { "name": "blue2", "type": "float" },
                { "name": "alpha2", "type": "int" },
                { "name": "red3", "type": "float" },
                { "name": "green3", "type": "float" },
                { "name": "blue3", "type": "float" },
                { "name": "alpha3", "type": "int" },
                { "name": "textureDict", "type": "char*" },
                { "name": "textureName", "type": "char*" },
                { "name": "u1", "type": "float" },
                { "name": "v1", "type": "float" },
                { "name": "w1", "type": "float" },
                { "name": "u2", "type": "float" },
                { "name": "v2", "type": "float" },
                { "name": "w2", "type": "float" },
                { "name": "u3", "type": "float" },
                { "name": "v3", "type": "float" },
                { "name": "w3", "type": "float" }
            ],
            "results": "void",
            "description": "Used for drawling Deadline trailing lights, see deadline.ytd\n\nEach vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.\n\nFor UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.",
            "examples": [],
            "hash": "0x736D7AA1B750856B",
            "ns": "GRAPHICS",
            "aliases": ["0x736D7AA1B750856B"],
            "manualHash": true
        },
        "0x95812F9B26074726": {
            "name": "_DRAW_SPRITE_UV",
            "params": [
                { "name": "textureDict", "type": "char*" },
                { "name": "textureName", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "width", "type": "float" },
                { "name": "height", "type": "float" },
                { "name": "u1", "type": "float" },
                { "name": "v1", "type": "float" },
                { "name": "u2", "type": "float" },
                { "name": "v2", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.\nu1, v1 - texture coordinates for the top-left corner\nu2, v2 - texture coordinates for the bottom-right corner\n\n```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x95812F9B26074726",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x2C328AF17210F009": {
            "name": "ENABLE_MOON_CYCLE_OVERRIDE",
            "params": [
                {
                    "name": "phase",
                    "type": "float",
                    "description": "A value indicating the moon cycle."
                }
            ],
            "results": "void",
            "description": "Enable a custom moon cycle, allowing control of which lunar phase the moon is in.\n\nValid values are from `0.0` to `1.0`, with `0.5` representing a full moon.\n\n| Value |   Lunar Phase   |\n| :---: | :-------------: |\n| `0.1` | Waxing Crescent |\n| `0.2` |  First Quarter  |\n| `0.3` | Waxing Gibbous  |\n| `0.5` |    Full Moon    |\n| `0.7` | Waning Gibbous  |\n| `0.8` |  Third Quarter  |\n| `0.9` | Waning Crescent |\n\nThe moon phase can be disabled with [DISABLE_MOON_CYCLE_OVERRIDE](#\\_0x2BF72AD5B41AA739)",
            "examples": [
                { "lang": "lua", "code": "EnableMoonCycleOverride(0.5)" }
            ],
            "hash": "0x2C328AF17210F009",
            "ns": "GRAPHICS",
            "aliases": [
                "0x2C328AF17210F009",
                "_SET_EXTRA_TIMECYCLE_MODIFIER_STRENGTH"
            ],
            "manualHash": true
        },
        "0xE7FFAE5EBF23D890": {
            "name": "DRAW_SPRITE",
            "params": [
                { "name": "textureDict", "type": "char*" },
                { "name": "textureName", "type": "char*" },
                { "name": "screenX", "type": "float" },
                { "name": "screenY", "type": "float" },
                { "name": "width", "type": "float" },
                { "name": "height", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDraws a 2D sprite on the screen.  \nParameters:  \ntextureDict - Name of texture dictionary to load texture from (e.g. \"CommonMenu\", \"MPWeaponsCommon\", etc.)  \ntextureName - Name of texture to load from texture dictionary (e.g. \"last_team_standing_icon\", \"tennis_icon\", etc.)  \nscreenX/Y - Screen offset (0.5 = center)  \nscaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)  \nheading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees  \nred,green,blue - Sprite color (default = 255/255/255)  \nalpha - opacity level  \n```\n\n```\nNativeDB Added Parameter 12: BOOL p11\n```",
            "examples": [],
            "hash": "0xE7FFAE5EBF23D890",
            "ns": "GRAPHICS",
            "jhash": "0x1FEC16B0",
            "manualHash": true
        },
        "0xD821490579791273": {
            "name": "ENABLE_CLOWN_BLOOD_VFX",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Whether to toggle the clown VFX on or off."
                }
            ],
            "results": "void",
            "description": "If true, this native will create purple explosions upon projectile impact, add comic-like PTFX when firing a weapon, create a sound on bullet impact and have its own \"blood effect\".\n\nIf the PTFX asset \"scr_rcbarry2\" is not requested using ([`RequestNamedPtfxAsset`](#\\_0xD821490579791273)) then this native **will not work as intended**.\n\nExcerpt from fm_content_drug_lab_work.c:\n\n```\nSTREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_rcbarry2\");\nif (STREAMING::HAS_NAMED_PTFX_ASSET_LOADED(\"scr_rcbarry2\"))\n{\n  GRAPHICS::ENABLE_CLOWN_BLOOD_VFX(true);\n  AUDIO::START_AUDIO_SCENE(\"DLC_CM2022_DRUG_TRIP_SPRINKLERS_SCENE\");\n  func_720(26);\n}\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RequestNamedPtfxAsset(\"scr_rcbarry2\") -- Request the PTFX\nwhile not HasNamedPtfxAssetLoaded(\"scr_rcbarry2\") do\n  Citizen.Wait(0)\nend\nEnableClownBloodVfx(true) -- Enable the clown PTFX"
                }
            ],
            "hash": "0xD821490579791273",
            "ns": "GRAPHICS",
            "aliases": ["SET_CAMERA_ENDTIME"],
            "jhash": "0xC61C75E9",
            "manualHash": true
        },
        "0xD0F64B265C8C8B33": {
            "name": "DRAW_SPOT_LIGHT",
            "params": [
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "dirX", "type": "float" },
                { "name": "dirY", "type": "float" },
                { "name": "dirZ", "type": "float" },
                { "name": "colorR", "type": "int" },
                { "name": "colorG", "type": "int" },
                { "name": "colorB", "type": "int" },
                { "name": "distance", "type": "float" },
                { "name": "brightness", "type": "float" },
                { "name": "hardness", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "falloff", "type": "float" }
            ],
            "results": "void",
            "description": "```\nParameters:  \n* pos - coordinate where the spotlight is located  \n* dir - the direction vector the spotlight should aim at from its current position  \n* r,g,b - color of the spotlight  \n* distance - the maximum distance the light can reach  \n* brightness - the brightness of the light  \n* roundness - \"smoothness\" of the circle edge  \n* radius - the radius size of the spotlight  \n* falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)  \nExample in C# (spotlight aims at the closest vehicle):  \nVector3 myPos = Game.Player.Character.Position;  \nVehicle nearest = World.GetClosestVehicle(myPos , 1000f);  \nVector3 destinationCoords = nearest.Position;  \nVector3 dirVector = destinationCoords - myPos;  \ndirVector.Normalize();  \nFunction.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);  \n```",
            "examples": [],
            "hash": "0xD0F64B265C8C8B33",
            "ns": "GRAPHICS",
            "jhash": "0xBDBC410C",
            "manualHash": true
        },
        "0x0A123435A26C36CD": {
            "name": "END_PETROL_TRAIL_DECALS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A123435A26C36CD",
            "ns": "GRAPHICS",
            "aliases": ["0x0A123435A26C36CD"],
            "jhash": "0xCCCA6855",
            "manualHash": true
        },
        "0xFDDC2B4ED3C69DF0": {
            "name": "DRAW_TV_CHANNEL",
            "params": [
                { "name": "xPos", "type": "float" },
                { "name": "yPos", "type": "float" },
                { "name": "xScale", "type": "float" },
                { "name": "yScale", "type": "float" },
                { "name": "rotation", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nAll calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively.\n\"act_cinema.ysc\", line 1483:\nHUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);\nHUD::SET_TEXT_RENDER_ID(l_AE);\nGRAPHICS::_0x61BB1D9B3A95D802(4);\nGRAPHICS::_0xC6372ECD45D73BCD(1);\nif (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) {\n    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);\n} else {\n    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);\n}\n\"am_mp_property_int.ysc\", line 102545:\nif (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {\n    if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {\n        HUD::SET_TEXT_RENDER_ID(a_2._f1);\n        GRAPHICS::_0x61BB1D9B3A95D802(4);\n        GRAPHICS::_0xC6372ECD45D73BCD(1);\n        GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);\n        if (GRAPHICS::GET_TV_CHANNEL() == -1) {\n            sub_a8fa5(a_2, 1);\n        } else {\n            sub_a8fa5(a_2, 1);\n            GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);\n        }\n        HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());\n    }\n}\n```",
            "examples": [],
            "hash": "0xFDDC2B4ED3C69DF0",
            "ns": "GRAPHICS",
            "jhash": "0x8129EF89",
            "manualHash": true
        },
        "0x9DCE1F0F78260875": {
            "name": "ENABLE_ALIEN_BLOOD_VFX",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "Creates a motion-blur sort of effect, this native does not seem to work, however by using the [`ANIMPOSTFX_PLAY`](#\\_0x2206BF9A37B7F724) native with `\"DrugsMichaelAliensFight\"` as the effect parameter, you should be able to get the effect.\n\nThis native does not seem to work, however by using the [ANIMPOSTFX_PLAY](#\\_0x2206BF9A37B7F724) native with \"DrugsMichaelAliensFight\" as the effect parameter, you should be able to get the effect.",
            "examples": [],
            "hash": "0x9DCE1F0F78260875",
            "ns": "GRAPHICS",
            "aliases": ["0x9DCE1F0F78260875"],
            "jhash": "0xCE8B8748",
            "manualHash": true
        },
        "0x362E2D3FE93A9959": {
            "name": "END_TEXT_COMMAND_SCALEFORM_STRING",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x362E2D3FE93A9959",
            "ns": "GRAPHICS",
            "aliases": ["_END_TEXT_COMPONENT"],
            "jhash": "0x386CE0B8",
            "manualHash": true
        },
        "0x74C180030FDE4B69": {
            "name": "ENABLE_MOVIE_KEYFRAME_WAIT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x74C180030FDE4B69",
            "ns": "GRAPHICS",
            "aliases": ["0x74C180030FDE4B69"],
            "jhash": "0x796DE696",
            "manualHash": true
        },
        "0x873FA65C778AD970": {
            "name": "ENABLE_MOVIE_SUBTITLES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x873FA65C778AD970",
            "ns": "GRAPHICS",
            "jhash": "0xC2DEBA3D",
            "manualHash": true
        },
        "0xC50AA39A577AF886": {
            "name": "END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC50AA39A577AF886",
            "ns": "GRAPHICS",
            "aliases": [
                "_POP_SCALEFORM_MOVIE_FUNCTION",
                "_END_SCALEFORM_MOVIE_METHOD_RETURN"
            ],
            "jhash": "0x2F38B526",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD77EDADB0420E6E0": {
            "name": "FADE_DECALS_IN_RANGE",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "y",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "z",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "radius",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "duration",
                    "type": "float",
                    "annotations": { "cs_type": "Any" },
                    "description": "A duration in seconds."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD77EDADB0420E6E0",
            "ns": "GRAPHICS",
            "jhash": "0xF81E884A",
            "manualHash": true
        },
        "0xC6796A8FFA375E53": {
            "name": "END_SCALEFORM_MOVIE_METHOD",
            "params": [],
            "results": "void",
            "description": "```\nPops and calls the Scaleform function on the stack  \n```",
            "examples": [],
            "hash": "0xC6796A8FFA375E53",
            "ns": "GRAPHICS",
            "aliases": ["_POP_SCALEFORM_MOVIE_FUNCTION_VOID"],
            "jhash": "0x02DBF2D7",
            "manualHash": true
        },
        "0x6A12D88881435DCA": {
            "name": "FREE_MEMORY_FOR_LOW_QUALITY_PHOTO",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6A12D88881435DCA",
            "ns": "GRAPHICS",
            "aliases": ["0x6A12D88881435DCA"],
            "jhash": "0x108F36CC",
            "manualHash": true
        },
        "0xC9B18B4619F48F7B": {
            "name": "FADE_UP_PED_LIGHT",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC9B18B4619F48F7B",
            "ns": "GRAPHICS",
            "aliases": ["0xC9B18B4619F48F7B"],
            "jhash": "0x93628786",
            "manualHash": true
        },
        "0xD801CC02177FA3F1": {
            "name": "FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD801CC02177FA3F1",
            "ns": "GRAPHICS",
            "aliases": ["0xD801CC02177FA3F1"],
            "jhash": "0x9CBA682A",
            "manualHash": true
        },
        "0xAE4E8157D9ECF087": {
            "name": "_END_TEXT_COMMAND_SCALEFORM_STRING_2",
            "params": [],
            "results": "void",
            "description": "```\nSame as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.\n```",
            "examples": [],
            "hash": "0xAE4E8157D9ECF087",
            "ns": "GRAPHICS",
            "aliases": ["0xAE4E8157D9ECF087"],
            "jhash": "0x2E80DB52",
            "manualHash": true
        },
        "0xDC459CFA0CCE245B": {
            "name": "FORCE_RENDER_IN_GAME_UI",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC459CFA0CCE245B",
            "ns": "GRAPHICS",
            "aliases": ["0xDC459CFA0CCE245B"],
            "jhash": "0x7E946E87",
            "manualHash": true
        },
        "0xF1307EF624A80D87": {
            "name": "_GET_ASPECT_RATIO",
            "params": [{ "name": "b", "type": "BOOL" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xF1307EF624A80D87",
            "ns": "GRAPHICS",
            "aliases": ["_GET_SCREEN_ASPECT_RATIO"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0A46AF8A78DC5E0A": {
            "name": "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A46AF8A78DC5E0A",
            "ns": "GRAPHICS",
            "aliases": ["0x0A46AF8A78DC5E0A"],
            "jhash": "0x9E553002",
            "manualHash": true
        },
        "0x473151EBC762C6DA": {
            "name": "GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x473151EBC762C6DA",
            "ns": "GRAPHICS",
            "aliases": [
                "0x473151EBC762C6DA",
                "_GET_NUMBER_OF_PHOTOS",
                "_GET_CURRENT_NUMBER_OF_PHOTOS"
            ],
            "jhash": "0x21DBF0C9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x873C9F3104101DD3": {
            "name": "_GET_ACTIVE_SCREEN_RESOLUTION",
            "params": [
                { "name": "x", "type": "int*" },
                { "name": "y", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nReturns current screen resolution.  \n```",
            "examples": [],
            "hash": "0x873C9F3104101DD3",
            "ns": "GRAPHICS",
            "aliases": ["_GET_SCREEN_ACTIVE_RESOLUTION"],
            "manualHash": true
        },
        "0x323F647679A09103": {
            "name": "GET_DECAL_WASH_LEVEL",
            "params": [{ "name": "decal", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x323F647679A09103",
            "ns": "GRAPHICS",
            "jhash": "0x054448EF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8E17DDD6B9D5BF29": {
            "name": "_GET_BINK_MOVIE_TIME",
            "params": [{ "name": "binkMovie", "type": "int" }],
            "results": "float",
            "description": "In percentage: 0.0 - 100.0\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x8E17DDD6B9D5BF29",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xBB0527EC6341496D": {
            "name": "_GET_EXTRA_TIMECYCLE_MODIFIER_INDEX",
            "params": [],
            "results": "int",
            "description": "See [`GET_TIMECYCLE_MODIFIER_INDEX`](#\\_0xFDF3D97C674AFB66) for use, works the same just for the secondary timecycle modifier.",
            "examples": [],
            "hash": "0xBB0527EC6341496D",
            "ns": "GRAPHICS",
            "aliases": ["0xBB0527EC6341496D"],
            "manualHash": true,
            "resultsDescription": "An integer representing the Timecycle modifier"
        },
        "0x84ED31191CC5D2C9": {
            "name": "GET_IS_HIDEF",
            "params": [],
            "results": "BOOL",
            "description": "```\nfalse = Any resolution < 1280x720  \ntrue = Any resolution >= 1280x720  \n```",
            "examples": [],
            "hash": "0x84ED31191CC5D2C9",
            "ns": "GRAPHICS",
            "jhash": "0x1C340359",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x35FB78DC42B7BD21": {
            "name": "GET_REQUESTINGNIGHTVISION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x35FB78DC42B7BD21",
            "ns": "GRAPHICS",
            "aliases": ["0x35FB78DC42B7BD21"],
            "jhash": "0xF3A6309E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x30CF4BDA4FCB1905": {
            "name": "GET_IS_WIDESCREEN",
            "params": [],
            "results": "BOOL",
            "description": "```\nSetting Aspect Ratio Manually in game will return:  \nfalse - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )  \ntrue - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )  \nSetting Aspect Ratio to \"Auto\" in game will return \"false\" or \"true\" based on the actual set Resolution Ratio.  \n```",
            "examples": [],
            "hash": "0x30CF4BDA4FCB1905",
            "ns": "GRAPHICS",
            "jhash": "0xEC717AEF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2F09F7976C512404": {
            "name": "GET_IS_PETROL_DECAL_IN_RANGE",
            "params": [
                { "name": "xCoord", "type": "float" },
                { "name": "yCoord", "type": "float" },
                { "name": "zCoord", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2F09F7976C512404",
            "ns": "GRAPHICS",
            "aliases": ["0x2F09F7976C512404"],
            "jhash": "0x242C6A04",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBAF107B6BB2C97F0": {
            "name": "GET_SAFE_ZONE_SIZE",
            "params": [],
            "results": "float",
            "description": "```\nGets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.  \n```",
            "examples": [],
            "hash": "0xBAF107B6BB2C97F0",
            "ns": "GRAPHICS",
            "jhash": "0x3F0D1A6F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE1E258829A885245": {
            "name": "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING",
            "params": [
                {
                    "name": "method_return",
                    "type": "int",
                    "description": "The return value of this native: `EndScaleformMovieMethodReturn`"
                }
            ],
            "results": "char*",
            "description": "Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local a = RequestScaleformMovie(\"translate\") --scaleform gfx\nwhile not HasScaleformMovieLoaded(a) do\n    Citizen.Wait(0)\nend\nBeginScaleformMovieMethod(a,\"EnglishToChinese\") --call function\nScaleformMovieMethodAddParamPlayerNameString(\"Good\") --input\nlocal b = EndScaleformMovieMethodReturnValue()\nwhile true do\n    if IsScaleformMovieMethodReturnValueReady(b) then\n       local c = GetScaleformMovieMethodReturnValueString(b) --output\n       print(c)\n       break\n    end\n    Citizen.Wait(0)\nend"
                }
            ],
            "hash": "0xE1E258829A885245",
            "ns": "GRAPHICS",
            "aliases": [
                "SITTING_TV",
                "_GET_SCALEFORM_MOVIE_FUNCTION_RETURN_STRING"
            ],
            "jhash": "0x516862EB",
            "manualHash": true,
            "resultsDescription": "Returns a string in the same way `GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT` returns an int."
        },
        "0x5CCABFFCA31DDE33": {
            "name": "GET_SCREENBLUR_FADE_CURRENT_TIME",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x5CCABFFCA31DDE33",
            "ns": "GRAPHICS",
            "aliases": ["IS_PARTICLE_FX_DELAYED_BLINK"],
            "jhash": "0xEA432A94",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x34D23450F028B0BF": {
            "name": "GET_MAXIMUM_NUMBER_OF_PHOTOS",
            "params": [],
            "results": "int",
            "description": "```\nThis function is hard-coded to always return 0.\n```",
            "examples": [],
            "hash": "0x34D23450F028B0BF",
            "ns": "GRAPHICS",
            "jhash": "0x727AA63F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC54A7AF8B3A14EF": {
            "name": "GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS",
            "params": [],
            "results": "int",
            "description": "```\nThis function is hard-coded to always return 96.\n```",
            "examples": [],
            "hash": "0xDC54A7AF8B3A14EF",
            "ns": "GRAPHICS",
            "aliases": [
                "0xDC54A7AF8B3A14EF",
                "_GET_MAXIMUM_NUMBER_OF_PHOTOS_2"
            ],
            "jhash": "0x239272BD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2DE7EFA66B906036": {
            "name": "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT",
            "params": [
                {
                    "name": "method_return",
                    "type": "int",
                    "description": "The return value of this native: `EndScaleformMovieMethodReturn`"
                }
            ],
            "results": "int",
            "description": "Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.",
            "examples": [],
            "hash": "0x2DE7EFA66B906036",
            "ns": "GRAPHICS",
            "aliases": [
                "0x2DE7EFA66B906036",
                "_GET_SCALEFORM_MOVIE_FUNCTION_RETURN_INT"
            ],
            "jhash": "0x2CFB0E6D",
            "manualHash": true,
            "resultsDescription": "Returns an int in the same way `GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING` returns a string."
        },
        "0x90A78ECAA4E78453": {
            "name": "GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x90A78ECAA4E78453",
            "ns": "GRAPHICS",
            "aliases": ["0x90A78ECAA4E78453"],
            "jhash": "0xADBBA287",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD80A80346A45D761": {
            "name": "_GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL",
            "params": [{ "name": "methodReturn", "type": "int" }],
            "results": "BOOL",
            "description": "```\nmethodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE\n```",
            "examples": [],
            "hash": "0xD80A80346A45D761",
            "ns": "GRAPHICS",
            "aliases": ["0xD80A80346A45D761"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6DD8F5AA635EB4B2": {
            "name": "_GET_SCRIPT_GFX_POSITION",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The input X coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The input Y coordinate."
                },
                {
                    "name": "calculatedX",
                    "type": "float*",
                    "description": "A pointer to the calculated X value."
                },
                {
                    "name": "calculatedY",
                    "type": "float*",
                    "description": "A pointer to the calculated Y value."
                }
            ],
            "results": "void",
            "description": "Calculates the effective X/Y fractions when applying the values set by `SET_SCRIPT_GFX_ALIGN` and\n`SET_SCRIPT_GFX_ALIGN_PARAMS`.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local calcX, calcX = GetScriptGfxPosition(0.2, 0.2)"
                }
            ],
            "hash": "0x6DD8F5AA635EB4B2",
            "ns": "GRAPHICS",
            "aliases": ["0x6DD8F5AA635EB4B2"],
            "manualHash": true
        },
        "0x459FD2C8D0AB78BC": {
            "name": "GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x459FD2C8D0AB78BC",
            "ns": "GRAPHICS",
            "aliases": ["0x459FD2C8D0AB78BC"],
            "jhash": "0x03C44E4B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x888D57E407E63624": {
            "name": "GET_SCREEN_RESOLUTION",
            "params": [
                { "name": "x", "type": "int*" },
                { "name": "y", "type": "int*" }
            ],
            "results": "void",
            "description": "Hardcoded to always return 1280x720. Use [`_GET_ACTIVE_SCREEN_RESOLUTION`](?\\_0x873C9F3104101DD3) to retrieve the correct screen resolution.",
            "examples": [],
            "hash": "0x888D57E407E63624",
            "ns": "GRAPHICS",
            "jhash": "0x29F3572F",
            "manualHash": true
        },
        "0x0C0C4E81E1AC60A0": {
            "name": "GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0C0C4E81E1AC60A0",
            "ns": "GRAPHICS",
            "aliases": ["0x0C0C4E81E1AC60A0"],
            "jhash": "0xEC5D0317",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x34E82F05DF2974F5": {
            "name": "GET_SCREEN_COORD_FROM_WORLD_COORD",
            "params": [
                { "name": "worldX", "type": "float" },
                { "name": "worldY", "type": "float" },
                { "name": "worldZ", "type": "float" },
                { "name": "screenX", "type": "float*" },
                { "name": "screenY", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "```\nConvert a world coordinate into its relative screen coordinate.  (WorldToScreen)\nReturns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.\nFor .NET users...\nVB:\nPublic Shared Function World3DToScreen2d(pos as vector3) As Vector2\n        Dim x2dp, y2dp As New Native.OutputArgument\n        Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)\n        Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))\n\n    End Function\nC#:\nVector2 World3DToScreen2d(Vector3 pos)\n    {\n        var x2dp = new OutputArgument();\n        var y2dp = new OutputArgument();\n        Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);\n        return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());\n    }\n//USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.\nUsed to be called _WORLD3D_TO_SCREEN2D\nI thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.\n```",
            "examples": [],
            "hash": "0x34E82F05DF2974F5",
            "ns": "GRAPHICS",
            "aliases": ["_WORLD3D_TO_SCREEN2D"],
            "jhash": "0x1F950E4B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF5BED327CEA362B1": {
            "name": "GET_STATUS_OF_SORTED_LIST_OPERATION",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "```\n3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.\nappcamera, appmedia, and cellphone_controller.\n```",
            "examples": [],
            "hash": "0xF5BED327CEA362B1",
            "ns": "GRAPHICS",
            "aliases": ["0xF5BED327CEA362B1"],
            "jhash": "0x596B900D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x35736EE65BD00C11": {
            "name": "GET_TEXTURE_RESOLUTION",
            "params": [
                { "name": "textureDict", "type": "char*" },
                { "name": "textureName", "type": "char*" }
            ],
            "results": "Vector3",
            "description": "```\nReturns the texture resolution of the passed texture dict+name.  \nNote: Most texture resolutions are doubled compared to the console version of the game.  \n```",
            "examples": [],
            "hash": "0x35736EE65BD00C11",
            "ns": "GRAPHICS",
            "jhash": "0x096DAA4D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1670F8D05056F257": {
            "name": "GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO",
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x1670F8D05056F257",
            "ns": "GRAPHICS",
            "aliases": ["0x1670F8D05056F257"],
            "jhash": "0x226B08EA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2170813D3DD8661B": {
            "name": "GET_TV_VOLUME",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x2170813D3DD8661B",
            "ns": "GRAPHICS",
            "jhash": "0x39555CF0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFDF3D97C674AFB66": {
            "name": "GET_TIMECYCLE_MODIFIER_INDEX",
            "params": [],
            "results": "int",
            "description": "```\nOnly use for this in the PC scripts is:\nif (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)\nFor a full list, see here: pastebin.com/cnk7FTF2\n```",
            "examples": [],
            "hash": "0xFDF3D97C674AFB66",
            "ns": "GRAPHICS",
            "jhash": "0x594FEEC4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFE26117A5841B2FF": {
            "name": "GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xFE26117A5841B2FF",
            "ns": "GRAPHICS",
            "aliases": ["0xFE26117A5841B2FF"],
            "jhash": "0x4F4D76E8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0D6CA79EEEBD8CA3": {
            "name": "GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0D6CA79EEEBD8CA3",
            "ns": "GRAPHICS",
            "aliases": ["0x0D6CA79EEEBD8CA3"],
            "jhash": "0x65376C9B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFC1E275A90D39995": {
            "name": "GET_TV_CHANNEL",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xFC1E275A90D39995",
            "ns": "GRAPHICS",
            "jhash": "0x6B96145A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA51C4B86B71652AE": {
            "name": "GOLF_TRAIL_SET_ENABLED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA51C4B86B71652AE",
            "ns": "GRAPHICS",
            "aliases": ["0xA51C4B86B71652AE"],
            "jhash": "0x5D3BFFC9",
            "manualHash": true
        },
        "0x2202A3F42C8E5F79": {
            "name": "GET_USINGNIGHTVISION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2202A3F42C8E5F79",
            "ns": "GRAPHICS",
            "aliases": ["_IS_NIGHTVISION_INACTIVE", "_IS_NIGHTVISION_ACTIVE"],
            "jhash": "0x62619061",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA4819F5E23E2FFAD": {
            "name": "GOLF_TRAIL_GET_MAX_HEIGHT",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xA4819F5E23E2FFAD",
            "ns": "GRAPHICS",
            "aliases": ["0xA4819F5E23E2FFAD"],
            "jhash": "0xA08B46AD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEB3DAC2C86001E5E": {
            "name": "GET_TOGGLE_PAUSED_RENDERPHASES_STATUS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEB3DAC2C86001E5E",
            "ns": "GRAPHICS",
            "aliases": ["0xEB3DAC2C86001E5E"],
            "jhash": "0xD4F5D07D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA4664972A9B8F8BA": {
            "name": "GOLF_TRAIL_GET_VISUAL_CONTROL_POINT",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xA4664972A9B8F8BA",
            "ns": "GRAPHICS",
            "aliases": ["0xA4664972A9B8F8BA"],
            "jhash": "0xECD470F0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x06F761EA47C1D3ED": {
            "name": "GOLF_TRAIL_SET_FACING",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x06F761EA47C1D3ED",
            "ns": "GRAPHICS",
            "aliases": ["0x06F761EA47C1D3ED"],
            "jhash": "0x0D830DC7",
            "manualHash": true
        },
        "0x44B80ABAB9D80BD3": {
            "name": "GET_USINGSEETHROUGH",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x44B80ABAB9D80BD3",
            "ns": "GRAPHICS",
            "aliases": ["_IS_SEETHROUGH_ACTIVE"],
            "jhash": "0x1FE547F2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB1BB03742917A5D6": {
            "name": "GOLF_TRAIL_SET_FIXED_CONTROL_POINT",
            "params": [
                { "name": "type", "type": "int" },
                { "name": "xPos", "type": "float" },
                { "name": "yPos", "type": "float" },
                { "name": "zPos", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\n12 matches across 4 scripts. All 4 scripts were job creators.\ntype ranged from 0 - 2.\np4 was always 0.2f. Likely scale.\nassuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).\nTested but noticed nothing.\n```",
            "examples": [],
            "hash": "0xB1BB03742917A5D6",
            "ns": "GRAPHICS",
            "aliases": ["0xB1BB03742917A5D6"],
            "jhash": "0x3BB12B75",
            "manualHash": true
        },
        "0x9CFDD90B2B844BF7": {
            "name": "GOLF_TRAIL_SET_SHADER_PARAMS",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "void",
            "description": "```\nOnly appeared in Golf & Golf_mp. Parameters were all ptrs  \n```",
            "examples": [],
            "hash": "0x9CFDD90B2B844BF7",
            "ns": "GRAPHICS",
            "aliases": ["0x9CFDD90B2B844BF7"],
            "jhash": "0x4EA70FB4",
            "manualHash": true
        },
        "0x312342E1A4874F3F": {
            "name": "GOLF_TRAIL_SET_PATH",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np8 seems to always be false.  \n```",
            "examples": [],
            "hash": "0x312342E1A4874F3F",
            "ns": "GRAPHICS",
            "aliases": ["0x312342E1A4874F3F"],
            "jhash": "0xD9653728",
            "manualHash": true
        },
        "0x12995F2E53FFA601": {
            "name": "GOLF_TRAIL_SET_COLOUR",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" },
                { "name": "p4", "type": "int" },
                { "name": "p5", "type": "int" },
                { "name": "p6", "type": "int" },
                { "name": "p7", "type": "int" },
                { "name": "p8", "type": "int" },
                { "name": "p9", "type": "int" },
                { "name": "p10", "type": "int" },
                { "name": "p11", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x12995F2E53FFA601",
            "ns": "GRAPHICS",
            "aliases": ["0x12995F2E53FFA601"],
            "jhash": "0x804F444C",
            "manualHash": true
        },
        "0x6D955F6A9E0295B1": {
            "name": "_GRASS_LOD_SHRINK_SCRIPT_AREAS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" }
            ],
            "results": "void",
            "description": "```\nWraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?\n```",
            "examples": [],
            "hash": "0x6D955F6A9E0295B1",
            "ns": "GRAPHICS",
            "aliases": ["0x6D955F6A9E0295B1"],
            "manualHash": true
        },
        "0x302C91AB2D477F7E": {
            "name": "_GRASS_LOD_RESET_SCRIPT_AREAS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x302C91AB2D477F7E",
            "ns": "GRAPHICS",
            "aliases": ["0x302C91AB2D477F7E"],
            "manualHash": true
        },
        "0xDBAA5EC848BA2D46": {
            "name": "GOLF_TRAIL_SET_TESSELLATION",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDBAA5EC848BA2D46",
            "ns": "GRAPHICS",
            "aliases": ["0xDBAA5EC848BA2D46"],
            "jhash": "0xBB1A1294",
            "manualHash": true
        },
        "0x2485D34E50A22E84": {
            "name": "GOLF_TRAIL_SET_RADIUS",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2485D34E50A22E84",
            "ns": "GRAPHICS",
            "aliases": ["0x2485D34E50A22E84"],
            "jhash": "0x72BA8A14",
            "manualHash": true
        },
        "0xDF6E5987D2B4D140": {
            "name": "HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED",
            "params": [{ "name": "hudComponent", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDF6E5987D2B4D140",
            "ns": "GRAPHICS",
            "aliases": ["_HAS_HUD_SCALEFORM_LOADED"],
            "jhash": "0x79B43255",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x85F01B8D5B90570E": {
            "name": "HAS_SCALEFORM_MOVIE_LOADED",
            "params": [{ "name": "scaleformHandle", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x85F01B8D5B90570E",
            "ns": "GRAPHICS",
            "jhash": "0xDDFB6448",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x768FF8961BA904D6": {
            "name": "IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY",
            "params": [
                {
                    "name": "method_return",
                    "type": "int",
                    "description": "The return value of this native: `EndScaleformMovieMethodReturn`"
                }
            ],
            "results": "BOOL",
            "description": "methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE\nReturns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).",
            "examples": [],
            "hash": "0x768FF8961BA904D6",
            "ns": "GRAPHICS",
            "aliases": [
                "0x768FF8961BA904D6",
                "_GET_SCALEFORM_MOVIE_FUNCTION_RETURN_BOOL"
            ],
            "jhash": "0x5CD7C3C0",
            "manualHash": true,
            "resultsDescription": "Returns true if the return value of a scaleform function is ready to be collected"
        },
        "0x0C1C5D756FB5F337": {
            "name": "HAS_SCALEFORM_MOVIE_FILENAME_LOADED",
            "params": [{ "name": "scaleformName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nOnly values used in the scripts are:\n\"heist_mp\"\n\"heistmap_mp\"\n\"instructional_buttons\"\n\"heist_pre\"\n```",
            "examples": [],
            "hash": "0x0C1C5D756FB5F337",
            "ns": "GRAPHICS",
            "aliases": [
                "0x0C1C5D756FB5F337",
                "_HAS_NAMED_SCALEFORM_MOVIE_LOADED"
            ],
            "jhash": "0x494A9E50",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0145F696AAAAD2E4": {
            "name": "HAS_STREAMED_TEXTURE_DICT_LOADED",
            "params": [{ "name": "textureDict", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0145F696AAAAD2E4",
            "ns": "GRAPHICS",
            "jhash": "0x3F436EEF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4862437A486F91B0": {
            "name": "LOAD_MISSION_CREATOR_PHOTO",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4862437A486F91B0",
            "ns": "GRAPHICS",
            "aliases": ["0x4862437A486F91B0"],
            "jhash": "0x56C1E488",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8217150E1217EBFD": {
            "name": "HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT",
            "params": [{ "name": "scaleformHandle", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8217150E1217EBFD",
            "ns": "GRAPHICS",
            "jhash": "0x1DFE8D8A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC694D74949CAFD0C": {
            "name": "IS_DECAL_ALIVE",
            "params": [{ "name": "decal", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC694D74949CAFD0C",
            "ns": "GRAPHICS",
            "jhash": "0xCDD4A61A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1F710BFF7DAE6261": {
            "name": "_IS_PLAYLIST_UNK",
            "params": [
                { "name": "tvChannel", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x1F710BFF7DAE6261",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xB66064452270E8F1": {
            "name": "LOAD_MOVIE_MESH_SET",
            "params": [{ "name": "movieMeshSetName", "type": "char*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xB66064452270E8F1",
            "ns": "GRAPHICS",
            "jhash": "0x9627905C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0AD973CA1E077B60": {
            "name": "_IS_TV_PLAYLIST_ITEM_PLAYING",
            "params": [{ "name": "videoCliphash", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0x0AD973CA1E077B60",
            "ns": "GRAPHICS",
            "aliases": ["0x0AD973CA1E077B60", "_LOAD_TV_CHANNEL"],
            "jhash": "0x4D1EB0FB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x02369D5C8A51FDCF": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nDISABLE_S*\n```",
            "examples": [],
            "hash": "0x02369D5C8A51FDCF",
            "ns": "GRAPHICS",
            "jhash": "0xFDF6D8DA",
            "manualHash": true
        },
        "0x0218BA067D249DEA": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0218BA067D249DEA",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x7B226C785A52A0A9": {
            "name": "IS_SCREENBLUR_FADE_RUNNING",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns whether screen transition to blur/from blur is running.\n```",
            "examples": [],
            "hash": "0x7B226C785A52A0A9",
            "ns": "GRAPHICS",
            "aliases": ["0x7B226C785A52A0A9"],
            "jhash": "0x926B8734",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x84C8D7C2D30D3280": {
            "name": "MOVE_VEHICLE_DECALS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x84C8D7C2D30D3280",
            "ns": "GRAPHICS",
            "jhash": "0xCE9E6CF2",
            "manualHash": true
        },
        "0x0AE73D8DF3A762B2": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0AE73D8DF3A762B2",
            "ns": "GRAPHICS",
            "jhash": "0x342FA2B4",
            "manualHash": true
        },
        "0xC45CCDAAC9221CA8": {
            "name": "IS_TRACKED_POINT_VISIBLE",
            "params": [{ "name": "point", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC45CCDAAC9221CA8",
            "ns": "GRAPHICS",
            "jhash": "0x0BFC4F64",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0E4299C549F0D1F1": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0E4299C549F0D1F1",
            "ns": "GRAPHICS",
            "jhash": "0x9BABCBA4",
            "manualHash": true
        },
        "0x1612C45F9E3E0D44": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1612C45F9E3E0D44",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x03300B57FCAC6DDB": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x03300B57FCAC6DDB",
            "ns": "GRAPHICS",
            "jhash": "0x60F72371",
            "manualHash": true
        },
        "0x14FC5833464340A8": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x14FC5833464340A8",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x259BA6D4E6F808F1": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x259BA6D4E6F808F1",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x1BBC135A4D25EDDE": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1BBC135A4D25EDDE",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x108BE26959A9D9BB": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nUI3DSCENE_*\n```",
            "examples": [],
            "hash": "0x108BE26959A9D9BB",
            "ns": "GRAPHICS",
            "jhash": "0x24A7A7F6",
            "manualHash": true
        },
        "0x27CFB1B1E078CB2D": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x27CFB1B1E078CB2D",
            "ns": "GRAPHICS",
            "jhash": "0xC2703B88",
            "manualHash": true
        },
        "0x25FC3E33A31AD0C9": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x25FC3E33A31AD0C9",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x1CBA05AE7BD7EE05": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "```\nSET_TRA*\n```",
            "examples": [],
            "hash": "0x1CBA05AE7BD7EE05",
            "ns": "GRAPHICS",
            "jhash": "0x56345F6B",
            "manualHash": true
        },
        "0x27FEB5254759CDE3": {
            "params": [
                { "name": "textureDict", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x27FEB5254759CDE3",
            "ns": "GRAPHICS",
            "jhash": "0xD63FCB3E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2A251AA48B2B46DB": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x2A251AA48B2B46DB",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x2A893980E96B659A": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2A893980E96B659A",
            "ns": "GRAPHICS",
            "jhash": "0x199FABF0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B40A97646381508": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B40A97646381508",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x2C42340F916C5930": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x2C42340F916C5930",
            "ns": "GRAPHICS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2FCB133CA50A49EB": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x2FCB133CA50A49EB",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x2D3B147AFAD49DE0": {
            "params": [
                {
                    "name": "textureDict",
                    "type": "char*",
                    "description": "inside script_txds.rpf, browse it with OpenIV"
                },
                {
                    "name": "textureName",
                    "type": "char*",
                    "description": "textureName"
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "width 0.0 - 1.0 is the reasonable amount generally"
                },
                {
                    "name": "height",
                    "type": "float",
                    "description": "height 0.0 - 1.0 is the reasonable amount generally"
                },
                {
                    "name": "p6",
                    "type": "float",
                    "description": "almost always 0.0"
                },
                { "name": "red", "type": "int", "description": "red color" },
                {
                    "name": "green",
                    "type": "int",
                    "description": "green color"
                },
                { "name": "blue", "type": "int", "description": "blue color" },
                { "name": "alpha", "type": "int", "description": "alpha" },
                { "name": "p11", "type": "int" }
            ],
            "results": "void",
            "description": "```\nUsed in arcade games and Beam hack minigame in Doomsday Heist. For example, [Penetrator Arcade Game](https://streamable.com/8igrzw)\n\nNativeDB Introduced: v1290\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- drawing the game area for penetrator arcade game\nCitizen.CreateThread(function()\n    RequestStreamedTextureDict(\"MPArcadeDegenatron\", false)\n    while not HasStreamedTextureDictLoaded(\"MPArcadeDegenatron\") do Citizen.Wait(1) end\n    while true do\n        N_0x2d3b147afad49de0(\"MPArcadeDegenatron\", \"penetrator_scene_frame\", 0.5, 0.5, 0.4, 0.6, 0.0, 255, 0, 0, 255, 0)\n        Citizen.Wait(1)\n    end\nend)"
                }
            ],
            "hash": "0x2D3B147AFAD49DE0",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x32F34FF7F617643B": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x32F34FF7F617643B",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x36F6626459D91457": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x36F6626459D91457",
            "ns": "GRAPHICS",
            "jhash": "0xC07C64C9",
            "manualHash": true
        },
        "0x30432A0118736E00": {
            "params": [],
            "results": "Hash",
            "description": "```\nGET_CURRENT_*\n\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x30432A0118736E00",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x3C788E7F6438754D": {
            "params": [
                {
                    "name": "checkpointHandle",
                    "type": "int",
                    "description": "the handle of a created checkpoint"
                },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```\n\nSets the given checkpoint target to the new coords",
            "examples": [],
            "hash": "0x3C788E7F6438754D",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x346EF3ECAAAB149E": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x346EF3ECAAAB149E",
            "ns": "GRAPHICS",
            "jhash": "0x88EAF398",
            "manualHash": true
        },
        "0x5B0316762AFD4A64": {
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5B0316762AFD4A64",
            "ns": "GRAPHICS",
            "jhash": "0xA9DC8558",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x393BD2275CEB7793": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x393BD2275CEB7793",
            "ns": "GRAPHICS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x615D3925E87A3B26": {
            "params": [{ "name": "checkpoint", "type": "int" }],
            "results": "void",
            "description": "```\nUnknown. Called after creating a checkpoint (type: 51) in the creators.  \n```",
            "examples": [],
            "hash": "0x615D3925E87A3B26",
            "ns": "GRAPHICS",
            "jhash": "0x1E3A3126",
            "manualHash": true
        },
        "0x46D1A61A21F566FC": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x46D1A61A21F566FC",
            "ns": "GRAPHICS",
            "jhash": "0x2056A015",
            "manualHash": true
        },
        "0x43FA7CBE20DAB219": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x43FA7CBE20DAB219",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x54E22EA2C1956A8D": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x54E22EA2C1956A8D",
            "ns": "GRAPHICS",
            "jhash": "0x8BE3D47F",
            "manualHash": true
        },
        "0x5DEBD9C4DC995692": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5DEBD9C4DC995692",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x649C97D52332341A": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x649C97D52332341A",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x5F6DF3D92271E8A1": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nDISABLE_*\n```",
            "examples": [],
            "hash": "0x5F6DF3D92271E8A1",
            "ns": "GRAPHICS",
            "aliases": ["SET_PARTICLE_FX_BLOOD_SCALE"],
            "jhash": "0x18136DE0",
            "manualHash": true
        },
        "0x7AC24EAB6D74118D": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7AC24EAB6D74118D",
            "ns": "GRAPHICS",
            "jhash": "0xB2410EAB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x759650634F07B6B4": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x759650634F07B6B4",
            "ns": "GRAPHICS",
            "jhash": "0x25D569EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4AF92ACD3141D96C": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4AF92ACD3141D96C",
            "ns": "GRAPHICS",
            "jhash": "0xC9EF81ED",
            "manualHash": true
        },
        "0x814AF7DCAACC597B": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x814AF7DCAACC597B",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x5DBF05DB5926D089": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5DBF05DB5926D089",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x7A42B2E236E71415": {
            "params": [],
            "results": "void",
            "description": "```\nUI3DSCENE_*\n```",
            "examples": [],
            "hash": "0x7A42B2E236E71415",
            "ns": "GRAPHICS",
            "jhash": "0x431AA036",
            "manualHash": true
        },
        "0x61F95E5BB3E0A8C6": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x61F95E5BB3E0A8C6",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x86255B1FC929E33E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x86255B1FC929E33E",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x8CDE909A0370BB3A": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nUsed only once in the scripts (taxi_clowncar)\n\nSET_PARTICLE_FX_*\n```",
            "examples": [],
            "hash": "0x8CDE909A0370BB3A",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x7FA5D82B8F58EC06": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7FA5D82B8F58EC06",
            "ns": "GRAPHICS",
            "jhash": "0x1F3CADB0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6A51F78772175A51": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSET_F*\n```",
            "examples": [],
            "hash": "0x6A51F78772175A51",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x949F397A288B28B3": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x949F397A288B28B3",
            "ns": "GRAPHICS",
            "jhash": "0xE3880F5A",
            "manualHash": true
        },
        "0x82ACC484FFA3B05F": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x82ACC484FFA3B05F",
            "ns": "GRAPHICS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x851CD923176EBA7C": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x851CD923176EBA7C",
            "ns": "GRAPHICS",
            "jhash": "0xDCBA251B",
            "manualHash": true
        },
        "0x98EDF76A7271E4F2": {
            "params": [],
            "results": "void",
            "description": "```\nREQUEST_*\n```",
            "examples": [],
            "hash": "0x98EDF76A7271E4F2",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x908311265D42A820": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x908311265D42A820",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x9641588DAB93B4B5": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9641588DAB93B4B5",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xAE51BC858F32BA66": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAE51BC858F32BA66",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x98D18905BF723B99": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x98D18905BF723B99",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x9B079E5221D984D3": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nFORCE_*\n```",
            "examples": [],
            "hash": "0x9B079E5221D984D3",
            "ns": "GRAPHICS",
            "jhash": "0x447A9EB9",
            "manualHash": true
        },
        "0xB3C641F3630BF6DA": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "```\nSetter for 0xE59343E9E96529E7\n\nSET_M*\n```",
            "examples": [],
            "hash": "0xB3C641F3630BF6DA",
            "ns": "GRAPHICS",
            "jhash": "0xF6B837F0",
            "manualHash": true
        },
        "0xA46B73FAA3460AE1": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA46B73FAA3460AE1",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xADD6627C4D325458": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xADD6627C4D325458",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xBA3D194057C79A7B": {
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "```\nSET_PARTICLE_FX_*\n```",
            "examples": [],
            "hash": "0xBA3D194057C79A7B",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xAAE9BE70EC7C69AB": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xAAE9BE70EC7C69AB",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xB569F41F3E7E83A4": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB569F41F3E7E83A4",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xB2EBE8CBC58B90E9": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xB2EBE8CBC58B90E9",
            "ns": "GRAPHICS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBB90E12CAC1DAB25": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBB90E12CAC1DAB25",
            "ns": "GRAPHICS",
            "jhash": "0x3968E915",
            "manualHash": true
        },
        "0xBA0127DA25FD54C9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA0127DA25FD54C9",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xC35A6D07C93802B2": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC35A6D07C93802B2",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xBE197EAA669238F4": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nThis function is hard-coded to always return 0.  \n```",
            "examples": [],
            "hash": "0xBE197EAA669238F4",
            "ns": "GRAPHICS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0416B061F2B7E5E": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nGOLF_TRAIL_SET_*\n```",
            "examples": [],
            "hash": "0xC0416B061F2B7E5E",
            "ns": "GRAPHICS",
            "jhash": "0x1A1A72EF",
            "manualHash": true
        },
        "0xCA4AE345A153D573": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCA4AE345A153D573",
            "ns": "GRAPHICS",
            "jhash": "0x64BA4648",
            "manualHash": true
        },
        "0xBCEDB009461DA156": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xBCEDB009461DA156",
            "ns": "GRAPHICS",
            "jhash": "0x5AB94128",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE3E2C1B4C59DBC77": {
            "params": [{ "name": "unk", "type": "int" }],
            "results": "void",
            "description": "```\nSets an unknown value related to timecycles.  \n```",
            "examples": [],
            "hash": "0xE3E2C1B4C59DBC77",
            "ns": "GRAPHICS",
            "jhash": "0xD8CC7221",
            "manualHash": true
        },
        "0xCA465D9CC0D231BA": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCA465D9CC0D231BA",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xC5C8F970D4EDFF71": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC5C8F970D4EDFF71",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xE63D7C6EECECB66B": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nTOGGLE_*\n```",
            "examples": [],
            "hash": "0xE63D7C6EECECB66B",
            "ns": "GRAPHICS",
            "jhash": "0xD34A6CBA",
            "manualHash": true
        },
        "0xD1C55B110E4DF534": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nSET_TV_???  \n```",
            "examples": [],
            "hash": "0xD1C55B110E4DF534",
            "ns": "GRAPHICS",
            "jhash": "0xD99EC000",
            "manualHash": true
        },
        "0xCB82A0BF0E3E3265": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xCB82A0BF0E3E3265",
            "ns": "GRAPHICS",
            "jhash": "0xCFCDC518",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDB1EA9411C8911EC": {
            "params": [
                {
                    "name": "checkpointHandle",
                    "type": "int",
                    "description": "the handle of a created checkpoint"
                }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```\n\nThis native is used for the \"larger\" circular checkpoints, and sets the circle/ring around the checkpoint to point in the same direction as the inner arrow",
            "examples": [],
            "hash": "0xDB1EA9411C8911EC",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xD9454B5752C857DC": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD9454B5752C857DC",
            "ns": "GRAPHICS",
            "jhash": "0xEAB6417C",
            "manualHash": true
        },
        "0xEC72C258667BE5EA": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nThis function is hard-coded to always return 0.  \n```",
            "examples": [],
            "hash": "0xEC72C258667BE5EA",
            "ns": "GRAPHICS",
            "jhash": "0x9C106AD9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCFD16F0DB5A3535C": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xCFD16F0DB5A3535C",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xF3F776ADA161E47D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xF3F776ADA161E47D",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xE791DF1F73ED2C8B": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nThis function is hard-coded to always return 0.  \n```",
            "examples": [],
            "hash": "0xE791DF1F73ED2C8B",
            "ns": "GRAPHICS",
            "jhash": "0x9D84554C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEFABC7722293DA7C": {
            "params": [],
            "results": "void",
            "description": "```\nAD*\n```",
            "examples": [],
            "hash": "0xEFABC7722293DA7C",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xF51D36185993515D": {
            "params": [
                { "name": "checkpoint", "type": "int" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "unkX", "type": "float" },
                { "name": "unkY", "type": "float" },
                { "name": "unkZ", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF51D36185993515D",
            "ns": "GRAPHICS",
            "jhash": "0x20EABD0F",
            "manualHash": true
        },
        "0xF78B803082D4386F": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF78B803082D4386F",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xFCF6788FC4860CD4": {
            "params": [{ "name": "checkpoint", "type": "int" }],
            "results": "void",
            "description": "SET_CHECKPOINT_\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xFCF6788FC4860CD4",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xE2892E7E55D7073A": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE2892E7E55D7073A",
            "ns": "GRAPHICS",
            "jhash": "0x455F1084",
            "manualHash": true
        },
        "0xEFB55E7C25D3B3BE": {
            "name": "OVERRIDE_INTERIOR_SMOKE_END",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEFB55E7C25D3B3BE",
            "ns": "GRAPHICS",
            "aliases": ["0xEFB55E7C25D3B3BE"],
            "jhash": "0xE29EE145",
            "manualHash": true
        },
        "0x1600FD8CF72EBC12": {
            "name": "OVERRIDE_INTERIOR_SMOKE_LEVEL",
            "params": [{ "name": "level", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1600FD8CF72EBC12",
            "ns": "GRAPHICS",
            "aliases": ["0x1600FD8CF72EBC12"],
            "jhash": "0xD87CC710",
            "manualHash": true
        },
        "0xE59343E9E96529E7": {
            "params": [],
            "results": "float",
            "description": "```\nGetter for 0xB3C641F3630BF6DA\n\nGET_M*\n```",
            "examples": [],
            "hash": "0xE59343E9E96529E7",
            "ns": "GRAPHICS",
            "jhash": "0xD906A3A9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF398BEEE4EF45F9": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEF398BEEE4EF45F9",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x2A2A52824DB96700": {
            "name": "OVERRIDE_INTERIOR_SMOKE_NAME",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A2A52824DB96700",
            "ns": "GRAPHICS",
            "aliases": ["0x2A2A52824DB96700"],
            "jhash": "0x0F486429",
            "manualHash": true
        },
        "0xD1C7CB175E012964": {
            "name": "PASS_KEYBOARD_INPUT_TO_SCALEFORM",
            "params": [
                {
                    "name": "scaleformHandle",
                    "type": "int",
                    "description": "Scaleform movie handle returned by [REQUEST_SCALEFORM_MOVIE](#\\_0x11FE353CF9733E6F)"
                }
            ],
            "results": "BOOL",
            "description": "Passes keyboard input to scaleform. You must call this native every frame. Once an input occurs, this native will return true and call `SET_PC_KEY` scaleform movie method with the key that has been inputted.\n\nThe key parameter which is passed to the scaleform can also be: \"BACKSPACE\", \"ENTER\" or \"\\x1b\" (Which is ESC).\nThis native is only used in `web_browser.c` as of game build 2944.",
            "examples": [],
            "hash": "0xD1C7CB175E012964",
            "ns": "GRAPHICS",
            "aliases": ["0xD1C7CB175E012964"],
            "jhash": "0xE9183D3A",
            "manualHash": true,
            "resultsDescription": "Bool indicating if an input occurred this frame and was passed to the scaleform."
        },
        "0x3C8938D7D872211E": {
            "name": "POP_TIMECYCLE_MODIFIER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3C8938D7D872211E",
            "ns": "GRAPHICS",
            "jhash": "0x79D7D235",
            "manualHash": true
        },
        "0x8A35C742130C6080": {
            "name": "PATCH_DECAL_DIFFUSE_MAP",
            "params": [
                { "name": "decalType", "type": "int" },
                { "name": "textureDict", "type": "char*" },
                { "name": "textureName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nREQUEST_STREAMED_TEXTURE_DICT(\"MPOnMissMarkers\", false);  \n*uParam0.f_809 = add_decal(9120, vParam1, vVar4, vVar7, 2f, 2f, to_float(iVar0) / 255f, to_float(iVar1) / 255f, to_float(iVar2) / 255f, 1f, -1f, 1, 0, 0);  \nPATCH_DECAL_DIFFUSE_MAP(9120, \"MPOnMissMarkers\", \"Capture_The_Flag_Base_Icon\");  \n```",
            "examples": [],
            "hash": "0x8A35C742130C6080",
            "ns": "GRAPHICS",
            "aliases": [
                "0x8A35C742130C6080",
                "_ADD_DECAL_TO_MARKER",
                "_OVERRIDE_DECAL_TEXTURE"
            ],
            "jhash": "0x335695CF",
            "manualHash": true
        },
        "0xD7021272EB0A451E": {
            "name": "PRESET_INTERIOR_AMBIENT_CACHE",
            "params": [{ "name": "timecycleModifierName", "type": "char*" }],
            "results": "void",
            "description": "```\nOnly one match in the scripts:\nGRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE(\"int_carrier_hanger\");\n```",
            "examples": [],
            "hash": "0xD7021272EB0A451E",
            "ns": "GRAPHICS",
            "aliases": ["0xD7021272EB0A451E", "_PRESET_INTERIOR_AMBIENT_CACHE"],
            "jhash": "0x137E3E24",
            "manualHash": true
        },
        "0x95EB5E34F821BABE": {
            "name": "_OVERRIDE_PED_BADGE_TEXTURE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "txd", "type": "char*" },
                { "name": "txn", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nOverriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.\n```",
            "examples": [],
            "hash": "0x95EB5E34F821BABE",
            "ns": "GRAPHICS",
            "aliases": ["0x95EB5E34F821BABE"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x04D950EEFA4EED8C": {
            "name": "_RELEASE_BINK_MOVIE",
            "params": [{ "name": "binkMovie", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x04D950EEFA4EED8C",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x70D2CC8A542A973C": {
            "name": "_PLAY_BINK_MOVIE",
            "params": [{ "name": "binkMovie", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x70D2CC8A542A973C",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x58F735290861E6B4": {
            "name": "PUSH_TIMECYCLE_MODIFIER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x58F735290861E6B4",
            "ns": "GRAPHICS",
            "jhash": "0x7E082045",
            "manualHash": true
        },
        "0x9B6E70C5CEEF4EEB": {
            "name": "QUERY_MOVIE_MESH_SET_STATE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x9B6E70C5CEEF4EEB",
            "ns": "GRAPHICS",
            "aliases": ["0x9B6E70C5CEEF4EEB"],
            "jhash": "0x9D5D9B38",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xED3F346429CCD659": {
            "name": "REMOVE_DECAL",
            "params": [{ "name": "decal", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED3F346429CCD659",
            "ns": "GRAPHICS",
            "jhash": "0xA4363188",
            "manualHash": true
        },
        "0xA44FF770DFBC5DAE": {
            "name": "_REGISTER_NOIR_SCREEN_EFFECT_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "Used with 'NG_filmnoir_BW{01,02}' timecycles and the \"NOIR_FILTER_SOUNDS\" audioref.",
            "examples": [],
            "hash": "0xA44FF770DFBC5DAE",
            "ns": "GRAPHICS",
            "aliases": ["0xA44FF770DFBC5DAE"],
            "manualHash": true
        },
        "0xA6F6F70FDC6D144C": {
            "name": "REMOVE_DECALS_FROM_OBJECT_FACING",
            "params": [
                { "name": "obj", "type": "Object" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA6F6F70FDC6D144C",
            "ns": "GRAPHICS",
            "jhash": "0xF4999A55",
            "manualHash": true
        },
        "0xEB119AA014E89183": {
            "name": "RELEASE_MOVIE_MESH_SET",
            "params": [{ "name": "movieMeshSet", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEB119AA014E89183",
            "ns": "GRAPHICS",
            "jhash": "0x4FA5501D",
            "manualHash": true
        },
        "0xE91F1B65F2B48D57": {
            "name": "REMOVE_DECALS_FROM_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE91F1B65F2B48D57",
            "ns": "GRAPHICS",
            "jhash": "0x831D06CA",
            "manualHash": true
        },
        "0x5D6B2D4830A67C62": {
            "name": "REMOVE_DECALS_IN_RANGE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "range", "type": "float" }
            ],
            "results": "void",
            "description": "```\nRemoves all decals in range from a position, it includes the bullet holes, blood pools, petrol...  \n```",
            "examples": [],
            "hash": "0x5D6B2D4830A67C62",
            "ns": "GRAPHICS",
            "jhash": "0x06A619A0",
            "manualHash": true
        },
        "0xCCF71CBDDF5B6CB9": {
            "name": "REMOVE_DECALS_FROM_OBJECT",
            "params": [{ "name": "obj", "type": "Object" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCCF71CBDDF5B6CB9",
            "ns": "GRAPHICS",
            "jhash": "0x8B67DCA7",
            "manualHash": true
        },
        "0x15E33297C3E8DC60": {
            "name": "REMOVE_TCMODIFIER_OVERRIDE",
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x15E33297C3E8DC60",
            "ns": "GRAPHICS",
            "aliases": ["0x15E33297C3E8DC60"],
            "jhash": "0x805BAB08",
            "manualHash": true
        },
        "0xF44A5456AC3F4F97": {
            "name": "REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE",
            "params": [{ "name": "hudComponent", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF44A5456AC3F4F97",
            "ns": "GRAPHICS",
            "aliases": ["0xF44A5456AC3F4F97"],
            "jhash": "0x03D87600",
            "manualHash": true
        },
        "0x11FE353CF9733E6F": {
            "name": "REQUEST_SCALEFORM_MOVIE",
            "params": [{ "name": "scaleformName", "type": "char*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x11FE353CF9733E6F",
            "ns": "GRAPHICS",
            "jhash": "0xC67E3DCB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC514489CFB8AF806": {
            "name": "REQUEST_SCALEFORM_MOVIE_INSTANCE",
            "params": [{ "name": "scaleformName", "type": "char*" }],
            "results": "int",
            "description": "Same as [REQUEST_SCALEFORM_MOVIE](#\\_0x11FE353CF9733E6F), except it seems to fix stretched scaleforms on ultrawide.",
            "examples": [],
            "hash": "0xC514489CFB8AF806",
            "ns": "GRAPHICS",
            "jhash": "0x7CC8057D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB8FEAEEBCC127425": {
            "name": "REMOVE_PARTICLE_FX_FROM_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB8FEAEEBCC127425",
            "ns": "GRAPHICS",
            "jhash": "0xCEDE52E9",
            "manualHash": true
        },
        "0xBD06C611BB9048C2": {
            "name": "_REQUEST_SCALEFORM_MOVIE_INTERACTIVE",
            "params": [{ "name": "scaleformName", "type": "char*" }],
            "results": "int",
            "description": "```\nSimilar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of \"interactive\" scaleform movie?  \nThese seem to be the only scaleforms ever requested by this native:  \n\"breaking_news\"  \n\"desktop_pc\"  \n\"ECG_MONITOR\"  \n\"Hacking_PC\"  \n\"TEETH_PULLING\"  \nNote: Unless this hash is out-of-order, this native is next-gen only.  \n```",
            "examples": [],
            "hash": "0xBD06C611BB9048C2",
            "ns": "GRAPHICS",
            "aliases": ["_REQUEST_SCALEFORM_MOVIE3"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x65E7E78842E74CDB": {
            "name": "_REQUEST_SCALEFORM_MOVIE_2",
            "params": [{ "name": "scaleformName", "type": "char*" }],
            "results": "int",
            "description": "Another [REQUEST_SCALEFORM_MOVIE](#\\_0x11FE353CF9733E6F) equivalent.",
            "examples": [],
            "hash": "0x65E7E78842E74CDB",
            "ns": "GRAPHICS",
            "aliases": ["0x65E7E78842E74CDB"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC401503DFE8D53CF": {
            "name": "REMOVE_PARTICLE_FX",
            "params": [
                { "name": "ptfxHandle", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC401503DFE8D53CF",
            "ns": "GRAPHICS",
            "jhash": "0x6BA48C7E",
            "manualHash": true
        },
        "0xDD19FA1C6D657305": {
            "name": "REMOVE_PARTICLE_FX_IN_RANGE",
            "params": [
                { "name": "X", "type": "float" },
                { "name": "Y", "type": "float" },
                { "name": "Z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDD19FA1C6D657305",
            "ns": "GRAPHICS",
            "jhash": "0x7EB8F275",
            "manualHash": true
        },
        "0xE1C8709406F2C41C": {
            "name": "RESET_PAUSED_RENDERPHASES",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE1C8709406F2C41C",
            "ns": "GRAPHICS",
            "aliases": ["0xE1C8709406F2C41C"],
            "jhash": "0x0113EAE4",
            "manualHash": true
        },
        "0xE3A3DB414A373DAB": {
            "name": "RESET_SCRIPT_GFX_ALIGN",
            "params": [],
            "results": "void",
            "description": "This function resets the alignment set using `SET_SCRIPT_GFX_ALIGN` and `SET_SCRIPT_GFX_ALIGN_PARAMS` to the default\nvalues ('I', 'I'; 0, 0, 0, 0). This should be used after having used the aforementioned functions in order to not affect\nany other scripts attempting to draw.",
            "examples": [],
            "hash": "0xE3A3DB414A373DAB",
            "ns": "GRAPHICS",
            "aliases": ["0xE3A3DB414A373DAB", "_SCREEN_DRAW_POSITION_END"],
            "jhash": "0x3FE33BD6",
            "manualHash": true
        },
        "0xD2300034310557E4": {
            "name": "REMOVE_VEHICLE_CREW_EMBLEM",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2300034310557E4",
            "ns": "GRAPHICS",
            "aliases": ["0xD2300034310557E4"],
            "jhash": "0x667046A8",
            "manualHash": true
        },
        "0xDFA2EF8E04127DD5": {
            "name": "REQUEST_STREAMED_TEXTURE_DICT",
            "params": [
                { "name": "textureDict", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis function can requests texture dictonaries from following RPFs:\nscaleform_generic.rpf\nscaleform_minigames.rpf\nscaleform_minimap.rpf\nscaleform_web.rpf\nlast param isnt a toggle\n```",
            "examples": [],
            "hash": "0xDFA2EF8E04127DD5",
            "ns": "GRAPHICS",
            "jhash": "0x4C9B035F",
            "manualHash": true
        },
        "0x40AFB081F8ADD4EE": {
            "name": "_RETURN_TWO",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x40AFB081F8ADD4EE",
            "ns": "GRAPHICS",
            "aliases": ["0x40AFB081F8ADD4EE"],
            "jhash": "0x762E5C5F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9304881D6F6537EA": {
            "name": "REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE",
            "params": [{ "name": "hudComponent", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9304881D6F6537EA",
            "ns": "GRAPHICS",
            "aliases": ["0x9304881D6F6537EA", "_REQUEST_HUD_SCALEFORM"],
            "jhash": "0x7AF85862",
            "manualHash": true
        },
        "0x3DEC726C25A11BAC": {
            "name": "SAVE_HIGH_QUALITY_PHOTO",
            "params": [{ "name": "unused", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3DEC726C25A11BAC",
            "ns": "GRAPHICS",
            "aliases": ["0x3DEC726C25A11BAC"],
            "jhash": "0x3B15D33C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD69736AAE04DB51A": {
            "name": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT",
            "params": [{ "name": "value", "type": "float" }],
            "results": "void",
            "description": "```\nPushes a float for the Scaleform function onto the stack.  \n```",
            "examples": [],
            "hash": "0xD69736AAE04DB51A",
            "ns": "GRAPHICS",
            "aliases": [
                "_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT",
                "_PUSH_SCALEFORM_MOVIE_METHOD_PARAMETER_FLOAT"
            ],
            "jhash": "0x9A01FFDA",
            "manualHash": true
        },
        "0xE83A3E3557A56640": {
            "name": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "void",
            "description": "```\nThis method is the equivalent to PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING when using it to add a new button (like \"INSTRUCTIONAL_BUTTONS\").  \nWhen switching with a controller, the icons update and become the controller's icons.  \n```",
            "examples": [],
            "hash": "0xE83A3E3557A56640",
            "ns": "GRAPHICS",
            "aliases": [
                "0xE83A3E3557A56640",
                "_PUSH_SCALEFORM_MOVIE_METHOD_PARAMETER_BUTTON_NAME"
            ],
            "jhash": "0xCCBF0334",
            "manualHash": true
        },
        "0xC3D0841A0CC546A6": {
            "name": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT",
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "```\nPushes an integer for the Scaleform function onto the stack.  \n```",
            "examples": [],
            "hash": "0xC3D0841A0CC546A6",
            "ns": "GRAPHICS",
            "aliases": [
                "_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT",
                "_PUSH_SCALEFORM_MOVIE_METHOD_PARAMETER_INT"
            ],
            "jhash": "0x716777CB",
            "manualHash": true
        },
        "0x89C8553DD3274AAE": {
            "name": "RESET_PARTICLE_FX_OVERRIDE",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "```\nResets the effect of SET_PARTICLE_FX_OVERRIDE\n```",
            "examples": [],
            "hash": "0x89C8553DD3274AAE",
            "ns": "GRAPHICS",
            "aliases": [
                "0x89C8553DD3274AAE",
                "_RESET_PARTICLE_FX_ASSET_OLD_TO_NEW"
            ],
            "jhash": "0x9E8D8B72",
            "manualHash": true
        },
        "0xEC52C631A1831C03": {
            "name": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING",
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "Values:\n0 - Dialogue Brief\n1 - Help Text Brief\n2 - Mission Objective Brief",
            "examples": [],
            "hash": "0xEC52C631A1831C03",
            "ns": "GRAPHICS",
            "aliases": [
                "0xEC52C631A1831C03",
                "_SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT_STRING"
            ],
            "jhash": "0x83A9811D",
            "manualHash": true
        },
        "0xBA7148484BD90365": {
            "name": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA7148484BD90365",
            "ns": "GRAPHICS",
            "aliases": [
                "_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING",
                "_PUSH_SCALEFORM_MOVIE_METHOD_PARAMETER_STRING"
            ],
            "jhash": "0x4DAAD55B",
            "manualHash": true
        },
        "0x77FE3402004CD1B0": {
            "name": "_SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "void",
            "description": "GRAPHICS::\\_0x77FE3402004CD1B0(HUD::\\_GET_LABEL_TEXT(\"YACHT_GSY\"));\nGRAPHICS::\\_0x77FE3402004CD1B0(PLAYER::GET_PLAYER_NAME(PLAYER::PLAYER_ID()));\n\nBoth \\_0xBA7148484BD90365 / \\_0x77FE3402004CD1B0 works, but \\_0x77FE3402004CD1B0 is usually used for \"name\" (organisation, players..).",
            "examples": [],
            "hash": "0x77FE3402004CD1B0",
            "ns": "GRAPHICS",
            "aliases": [
                "0x77FE3402004CD1B0",
                "_PUSH_SCALEFORM_MOVIE_METHOD_PARAMETER_STRING_2"
            ],
            "manualHash": true
        },
        "0xC58424BA936EB458": {
            "name": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL",
            "params": [{ "name": "value", "type": "BOOL" }],
            "results": "void",
            "description": "```\nPushes a boolean for the Scaleform function onto the stack.  \n```",
            "examples": [],
            "hash": "0xC58424BA936EB458",
            "ns": "GRAPHICS",
            "aliases": [
                "_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL",
                "_PUSH_SCALEFORM_MOVIE_METHOD_PARAMETER_BOOL"
            ],
            "jhash": "0x0D4AE8CB",
            "manualHash": true
        },
        "0x43DBAE39626CE83F": {
            "name": "_SEETHROUGH_GET_MAX_THICKNESS",
            "params": [],
            "results": "float",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x43DBAE39626CE83F",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x1086127B3A63505E": {
            "name": "SEETHROUGH_SET_COLOR_NEAR",
            "params": [
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1086127B3A63505E",
            "ns": "GRAPHICS",
            "aliases": ["0x1086127B3A63505E"],
            "jhash": "0x5B2A67A8",
            "manualHash": true
        },
        "0x70A64C0234EF522C": {
            "name": "SEETHROUGH_RESET",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x70A64C0234EF522C",
            "ns": "GRAPHICS",
            "jhash": "0x310E9B67",
            "manualHash": true
        },
        "0x1636D7FC127B10D2": {
            "name": "_SEETHROUGH_SET_HI_LIGHT_NOISE",
            "params": [{ "name": "noise", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1636D7FC127B10D2",
            "ns": "GRAPHICS",
            "aliases": ["0x1636D7FC127B10D2"],
            "manualHash": true
        },
        "0x0C8FAC83902A62DF": {
            "name": "_SEETHROUGH_SET_MAX_THICKNESS",
            "params": [
                {
                    "name": "thickness",
                    "type": "float",
                    "description": "min: 1.0 max: 10000.0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0C8FAC83902A62DF",
            "ns": "GRAPHICS",
            "aliases": ["0x0C8FAC83902A62DF"],
            "manualHash": true
        },
        "0xA78DE25577300BA1": {
            "name": "_SEETHROUGH_SET_FADE_START_DISTANCE",
            "params": [{ "name": "distance", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA78DE25577300BA1",
            "ns": "GRAPHICS",
            "aliases": ["0xA78DE25577300BA1"],
            "manualHash": true
        },
        "0x9D75795B9DC6EBBF": {
            "name": "_SEETHROUGH_SET_FADE_END_DISTANCE",
            "params": [{ "name": "distance", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9D75795B9DC6EBBF",
            "ns": "GRAPHICS",
            "aliases": ["0x9D75795B9DC6EBBF"],
            "manualHash": true
        },
        "0x19E50EB6E33E1D28": {
            "name": "_SEETHROUGH_SET_HI_LIGHT_INTENSITY",
            "params": [{ "name": "intensity", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x19E50EB6E33E1D28",
            "ns": "GRAPHICS",
            "aliases": ["0x19E50EB6E33E1D28"],
            "manualHash": true
        },
        "0x23BA6B0C2AD7B0D3": {
            "name": "SET_BACKFACECULLING",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x23BA6B0C2AD7B0D3",
            "ns": "GRAPHICS",
            "aliases": ["0x23BA6B0C2AD7B0D3"],
            "jhash": "0xC44C2F44",
            "manualHash": true
        },
        "0xFF5992E1C9E65D05": {
            "name": "_SEETHROUGH_SET_NOISE_AMOUNT_MIN",
            "params": [{ "name": "amount", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFF5992E1C9E65D05",
            "ns": "GRAPHICS",
            "aliases": ["0xFF5992E1C9E65D05"],
            "manualHash": true
        },
        "0xD7D0B00177485411": {
            "name": "SEETHROUGH_SET_HEATSCALE",
            "params": [
                { "name": "index", "type": "int" },
                {
                    "name": "heatScale",
                    "type": "float",
                    "description": "min: 0.0 max: 0.75"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD7D0B00177485411",
            "ns": "GRAPHICS",
            "aliases": ["0xD7D0B00177485411"],
            "jhash": "0x654F0287",
            "manualHash": true
        },
        "0x338D9F609FD632DB": {
            "name": "_SET_BINK_MOVIE",
            "params": [
                {
                    "name": "name",
                    "type": "char*",
                    "description": "The BINK movie to play (with or without file extension)."
                }
            ],
            "results": "int",
            "description": "Creates an integer (usually 1) for a BINK movie to be called with other natives.\n[List of all BINK movies (alphabetically ordered) as of b2802](https://gist.github.com/ItsJunction/8046f28c29ea8ff2821e9e4f933f595f)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n    local binkint = SetBinkMovie(\"casino_trailer\")\n    SetBinkMovieTime(binkint, 0.0) -- Seeks to 0%\n\n    while (GetBinkMovieTime(binkint) < 100.0) do -- Very Basic Idea That Works?\n        print(math.floor(GetBinkMovieTime(binkint) * 100)/100 .. \"%\") -- Prints current playtime (as percentage).\n        PlayBinkMovie(binkint)\n        DrawBinkMovie(binkint, 0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255) -- This example draws and plays in Fullscreen and in the center of screen (no matter the resolution).\n        Citizen.Wait(0)\n    end\nend)"
                }
            ],
            "hash": "0x338D9F609FD632DB",
            "ns": "GRAPHICS",
            "aliases": ["_SET_BINK_MOVIE_REQUESTED"],
            "manualHash": true
        },
        "0xFEBFBFDFB66039DE": {
            "name": "_SEETHROUGH_SET_NOISE_AMOUNT_MAX",
            "params": [{ "name": "amount", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFEBFBFDFB66039DE",
            "ns": "GRAPHICS",
            "aliases": ["0xFEBFBFDFB66039DE"],
            "manualHash": true
        },
        "0xE2B187C0939B3D32": {
            "name": "_SET_ARTIFICIAL_LIGHTS_STATE_AFFECTS_VEHICLES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "If \"blackout\" is enabled, this native allows you to ignore \"blackout\" for vehicles.\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xE2B187C0939B3D32",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xAFF33B1178172223": {
            "name": "_SET_BINK_MOVIE_VOLUME",
            "params": [
                { "name": "binkMovie", "type": "int" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nbinkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)\n```\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xAFF33B1178172223",
            "ns": "GRAPHICS",
            "aliases": ["_SET_BINK_MOVIE_UNK"],
            "manualHash": true
        },
        "0x0CB6B3446855B57A": {
            "name": "_SET_BINK_MOVIE_TIME",
            "params": [
                {
                    "name": "binkMovie",
                    "type": "int",
                    "description": "The movie that is being played."
                },
                {
                    "name": "progress",
                    "type": "float",
                    "description": "As a percentage (0.0 - 100.0)."
                }
            ],
            "results": "void",
            "description": "Seeks a BINK movie to a specified position.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Movie drawn prior\nSetBinkMovieTime(1, 50.0) -- Seeks to 50% in."
                }
            ],
            "hash": "0x0CB6B3446855B57A",
            "ns": "GRAPHICS",
            "aliases": ["_SET_BINK_MOVIE_PROGRESS"],
            "manualHash": true
        },
        "0xF816F2933752322D": {
            "name": "_SET_BINK_MOVIE_UNK_2",
            "params": [
                { "name": "binkMovie", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xF816F2933752322D",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0x1268615ACE24D504": {
            "name": "SET_ARTIFICIAL_LIGHTS_STATE",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on."
                }
            ],
            "results": "void",
            "description": "Does not affect weapons, particles, fire/explosions, flashlights or the sun.\n\nWhen set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.\n\nUsed in Humane Labs Heist for EMP.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Disable all lights in the map.\nSetArtificialLightsState(true)\n\n-- Enable all lights in the map.\nSetArtificialLightsState(false)"
                },
                {
                    "lang": "cs",
                    "code": "// Disable all lights in the map.\nSetArtificialLightsState(true);\n\n// Enable all lights in the map.\nSetArtificialLightsState(false);"
                }
            ],
            "hash": "0x1268615ACE24D504",
            "ns": "GRAPHICS",
            "aliases": ["_SET_BLACKOUT"],
            "jhash": "0xAA2A0EAF",
            "manualHash": true
        },
        "0x2707AAE9D9297D89": {
            "name": "SET_CHECKPOINT_CYLINDER_HEIGHT",
            "params": [
                { "name": "checkpoint", "type": "int" },
                { "name": "nearHeight", "type": "float" },
                { "name": "farHeight", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets the cylinder height of the checkpoint.  \nParameters:  \n* nearHeight - The height of the checkpoint when inside of the radius.  \n* farHeight - The height of the checkpoint when outside of the radius.  \n* radius - The radius of the checkpoint.  \n```",
            "examples": [],
            "hash": "0x2707AAE9D9297D89",
            "ns": "GRAPHICS",
            "jhash": "0xFF0F9B22",
            "manualHash": true
        },
        "0x6805D58CAA427B72": {
            "name": "_SET_BINK_SHOULD_SKIP",
            "params": [
                { "name": "binkMovie", "type": "int" },
                { "name": "shouldSkip", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x6805D58CAA427B72",
            "ns": "GRAPHICS",
            "aliases": ["_0x6805D58CAA427B72"],
            "manualHash": true
        },
        "0x4B5B4DA5D79F1943": {
            "name": "_SET_CHECKPOINT_ICON_HEIGHT",
            "params": [
                {
                    "name": "checkpoint",
                    "type": "int",
                    "description": "The checkpoint the multiplier should be applied to."
                },
                {
                    "name": "height_multiplier",
                    "type": "float",
                    "description": "The multiplier for the icon height above the checkpoint's coordinates. Default is 1.0"
                }
            ],
            "results": "void",
            "description": "This multiplies the height of the icon inside a checkpoint with the default height of about 2 units above the checkpoint's coordinates.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local checkpoint = CreateCheckpoint(...)\nSetCheckpointIconHeight(checkpoint, 2.0) -- places the icon two times as high as the default."
                }
            ],
            "hash": "0x4B5B4DA5D79F1943",
            "ns": "GRAPHICS",
            "aliases": ["0x4B5B4DA5D79F1943", "_SET_CHECKPOINT_SCALE"],
            "jhash": "0x80151CCF",
            "manualHash": true
        },
        "0x7167371E8AD747F7": {
            "name": "SET_CHECKPOINT_RGBA",
            "params": [
                { "name": "checkpoint", "type": "int" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets the checkpoint color.  \n```",
            "examples": [],
            "hash": "0x7167371E8AD747F7",
            "ns": "GRAPHICS",
            "jhash": "0xEF9C8CB3",
            "manualHash": true
        },
        "0xB9EA40907C680580": {
            "name": "SET_CHECKPOINT_RGBA2",
            "params": [
                { "name": "checkpoint", "type": "int" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets the checkpoint icon color.\n```",
            "examples": [],
            "hash": "0xB9EA40907C680580",
            "ns": "GRAPHICS",
            "aliases": ["_SET_CHECKPOINT_ICON_RGBA"],
            "jhash": "0xA5456DBB",
            "manualHash": true
        },
        "0x44621483FF966526": {
            "name": "_SET_CHECKPOINT_ICON_SCALE",
            "params": [
                { "name": "checkpoint", "type": "int" },
                { "name": "scale", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x44621483FF966526",
            "ns": "GRAPHICS",
            "aliases": ["0x44621483FF966526"],
            "manualHash": true
        },
        "0x175B6BFC15CDD0C5": {
            "name": "SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE",
            "params": [{ "name": "enabled", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0x175B6BFC15CDD0C5",
            "ns": "GRAPHICS",
            "jhash": "0x1418CA37",
            "manualHash": true
        },
        "0xBBF327DED94E4DEB": {
            "name": "SET_CURRENT_PLAYER_TCMODIFIER",
            "params": [{ "name": "modifierName", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBBF327DED94E4DEB",
            "ns": "GRAPHICS",
            "aliases": ["0xBBF327DED94E4DEB"],
            "jhash": "0x85BA15A4",
            "manualHash": true
        },
        "0xE0E8BEECCA96BA31": {
            "name": "SET_ENTITY_ICON_VISIBILITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE0E8BEECCA96BA31",
            "ns": "GRAPHICS",
            "jhash": "0xD1D2FD52",
            "manualHash": true
        },
        "0x4B5CFC83122DF602": {
            "name": "SET_DISABLE_DECAL_RENDERING_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4B5CFC83122DF602",
            "ns": "GRAPHICS",
            "aliases": ["0x4B5CFC83122DF602"],
            "jhash": "0xA706E84D",
            "manualHash": true
        },
        "0x4CC7F0FEA5283FE0": {
            "name": "_SET_FORCE_VEHICLE_TRAILS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nForces vehicle trails on all surfaces.\nUSE_/USING_*\n```",
            "examples": [],
            "hash": "0x4CC7F0FEA5283FE0",
            "ns": "GRAPHICS",
            "jhash": "0x7158B1EA",
            "manualHash": true
        },
        "0x0AB84296FED9CFC6": {
            "name": "SET_FLASH",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "fadeIn", "type": "float" },
                { "name": "duration", "type": "float" },
                { "name": "fadeOut", "type": "float" }
            ],
            "results": "void",
            "description": "```\nPurpose of p0 and p1 unknown.  \n```",
            "examples": [],
            "hash": "0x0AB84296FED9CFC6",
            "ns": "GRAPHICS",
            "jhash": "0x7E55A1EE",
            "manualHash": true
        },
        "0xAA0008F3BBB8F416": {
            "name": "SET_DRAW_ORIGIN",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "Sets the on-screen drawing origin for draw-functions in world coordinates.\n\nThe effect can be reset by calling [`CLEAR_DRAW_ORIGIN`](#\\_0xFF0B610F6BE0D7AF) and is limited to 32 different origins each frame.",
            "examples": [
                {
                    "lang": "cs",
                    "code": "// From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.  \nVector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);  \nFunction.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);  \nFunction.Call(Hash.DRAW_SPRITE, \"helicopterhud\", \"hud_corner\", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);  \nFunction.Call(Hash.DRAW_SPRITE, \"helicopterhud\", \"hud_corner\", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);  \nFunction.Call(Hash.DRAW_SPRITE, \"helicopterhud\", \"hud_corner\", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);  \nFunction.Call(Hash.DRAW_SPRITE, \"helicopterhud\", \"hud_corner\", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);  \nFunction.Call(Hash.CLEAR_DRAW_ORIGIN);  "
                }
            ],
            "hash": "0xAA0008F3BBB8F416",
            "ns": "GRAPHICS",
            "jhash": "0xE10198D5",
            "manualHash": true
        },
        "0x1D5F595CCAE2E238": {
            "name": "SET_ENTITY_ICON_COLOR",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1D5F595CCAE2E238",
            "ns": "GRAPHICS",
            "jhash": "0x6EE1E946",
            "manualHash": true
        },
        "0x5096FD9CCB49056D": {
            "name": "_SET_EXTRA_TIMECYCLE_MODIFIER",
            "params": [{ "name": "modifierName", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5096FD9CCB49056D",
            "ns": "GRAPHICS",
            "jhash": "0x908A335E",
            "manualHash": true
        },
        "0xCB6A7C3BB17A0C67": {
            "name": "SET_NOISINESSOVERIDE",
            "params": [{ "name": "value", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCB6A7C3BB17A0C67",
            "ns": "GRAPHICS",
            "jhash": "0x046B62D9",
            "manualHash": true
        },
        "0x18F621F7A5B1F85D": {
            "name": "SET_NIGHTVISION",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nEnables Night Vision.  \nExample:  \nC#: Function.Call(Hash.SET_NIGHTVISION, true);  \nC++: GRAPHICS::SET_NIGHTVISION(true);  \nBOOL toggle:  \ntrue = turns night vision on for your player.  \nfalse = turns night vision off for your player.  \n```",
            "examples": [],
            "hash": "0x18F621F7A5B1F85D",
            "ns": "GRAPHICS",
            "jhash": "0xD1E5565F",
            "manualHash": true
        },
        "0xBF59707B3E5ED531": {
            "name": "SET_NEXT_PLAYER_TCMODIFIER",
            "params": [{ "name": "modifierName", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF59707B3E5ED531",
            "ns": "GRAPHICS",
            "aliases": ["0xBF59707B3E5ED531"],
            "jhash": "0x554BA16E",
            "manualHash": true
        },
        "0xEEC4047028426510": {
            "name": "SET_PARTICLE_FX_CAM_INSIDE_VEHICLE",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEEC4047028426510",
            "ns": "GRAPHICS",
            "jhash": "0x19EC0001",
            "manualHash": true
        },
        "0xAEEDAD1420C65CC0": {
            "name": "_SET_FORCE_PED_FOOTSTEPS_TRACKS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nForces footstep tracks on all surfaces.\nUSE_/USING_*\n```",
            "examples": [],
            "hash": "0xAEEDAD1420C65CC0",
            "ns": "GRAPHICS",
            "jhash": "0xC53576CA",
            "manualHash": true
        },
        "0xACEE6F360FC1F6B6": {
            "name": "SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xACEE6F360FC1F6B6",
            "ns": "GRAPHICS",
            "jhash": "0x6B125A02",
            "manualHash": true
        },
        "0x7F8F65877F88783B": {
            "name": "SET_PARTICLE_FX_LOOPED_COLOUR",
            "params": [
                { "name": "ptfxHandle", "type": "int" },
                { "name": "r", "type": "float" },
                { "name": "g", "type": "float" },
                { "name": "b", "type": "float" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nonly works on some fx's  \np4 = 0  \n```",
            "examples": [],
            "hash": "0x7F8F65877F88783B",
            "ns": "GRAPHICS",
            "jhash": "0x5219D530",
            "manualHash": true
        },
        "0x27E32866E9A5C416": {
            "name": "SET_PARTICLE_FX_BULLET_IMPACT_SCALE",
            "params": [{ "name": "scale", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x27E32866E9A5C416",
            "ns": "GRAPHICS",
            "aliases": ["0x27E32866E9A5C416"],
            "jhash": "0xC1AD5DDF",
            "manualHash": true
        },
        "0xBA3D65906822BED5": {
            "name": "SET_HIDOF_OVERRIDE",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" },
                { "name": "nearplaneOut", "type": "float" },
                { "name": "nearplaneIn", "type": "float" },
                { "name": "farplaneOut", "type": "float" },
                { "name": "farplaneIn", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA3D65906822BED5",
            "ns": "GRAPHICS",
            "aliases": ["0xBA3D65906822BED5", "_SET_HIDOF_ENV_BLUR_PARAMS"],
            "jhash": "0x513D444B",
            "manualHash": true
        },
        "0x726845132380142E": {
            "name": "SET_PARTICLE_FX_LOOPED_ALPHA",
            "params": [
                { "name": "ptfxHandle", "type": "int" },
                { "name": "alpha", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x726845132380142E",
            "ns": "GRAPHICS",
            "jhash": "0x5ED49BE1",
            "manualHash": true
        },
        "0xE787BF1C5CF823C9": {
            "name": "SET_NOISEOVERIDE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE787BF1C5CF823C9",
            "ns": "GRAPHICS",
            "jhash": "0xD576F5DD",
            "manualHash": true
        },
        "0x5F0C4B5B1C393BE2": {
            "name": "SET_PARTICLE_FX_LOOPED_EVOLUTION",
            "params": [
                { "name": "ptfxHandle", "type": "int" },
                { "name": "propertyName", "type": "char*" },
                { "name": "amount", "type": "float" },
                { "name": "noNetwork", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F0C4B5B1C393BE2",
            "ns": "GRAPHICS",
            "jhash": "0x1CBC1373",
            "manualHash": true
        },
        "0x77168D722C58B2FC": {
            "name": "SET_PARTICLE_FX_NON_LOOPED_ALPHA",
            "params": [{ "name": "alpha", "type": "float" }],
            "results": "void",
            "description": "```\nUsage example for C#:  \nFunction.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });  \n\t\tNote: the argument alpha ranges from 0.0f-1.0f !  \n```",
            "examples": [],
            "hash": "0x77168D722C58B2FC",
            "ns": "GRAPHICS",
            "jhash": "0x497EAFF2",
            "manualHash": true
        },
        "0xF7DDEBEC43483C43": {
            "name": "SET_PARTICLE_FX_LOOPED_OFFSETS",
            "params": [
                { "name": "ptfxHandle", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF7DDEBEC43483C43",
            "ns": "GRAPHICS",
            "jhash": "0x641F7790",
            "manualHash": true
        },
        "0xDCB194B85EF7B541": {
            "name": "SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST",
            "params": [
                { "name": "ptfxHandle", "type": "int" },
                { "name": "range", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDCB194B85EF7B541",
            "ns": "GRAPHICS",
            "aliases": ["_SET_PARTICLE_FX_LOOPED_RANGE"],
            "jhash": "0x233DE879",
            "manualHash": true
        },
        "0xE6A9F00D4240B519": {
            "name": "_SET_SCALEFORM_FIT_RENDERTARGET",
            "params": [
                { "name": "scaleformHandle", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "This native is used in some casino scripts to fit the scaleform in the rendertarget.",
            "examples": [],
            "hash": "0xE6A9F00D4240B519",
            "ns": "GRAPHICS",
            "aliases": ["0xE6A9F00D4240B519"],
            "manualHash": true
        },
        "0xB44250AAA456492D": {
            "name": "SET_PARTICLE_FX_LOOPED_SCALE",
            "params": [
                { "name": "ptfxHandle", "type": "int" },
                { "name": "scale", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB44250AAA456492D",
            "ns": "GRAPHICS",
            "jhash": "0x099B8B49",
            "manualHash": true
        },
        "0x1E2E01C00837D26E": {
            "name": "_SET_PARTICLE_FX_NON_LOOPED_EMITTER_SCALE",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "scale", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x1E2E01C00837D26E",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xF5A2C681787E579D": {
            "name": "SET_SCRIPT_GFX_ALIGN_PARAMS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X offset for the item to be drawn."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y offset for the item to be drawn."
                },
                {
                    "name": "w",
                    "type": "float",
                    "description": "The width of the item to be drawn."
                },
                {
                    "name": "h",
                    "type": "float",
                    "description": "The height of the item to be drawn."
                }
            ],
            "results": "void",
            "description": "Sets the draw offset/calculated size for `SET_SCRIPT_GFX_ALIGN`. If using any alignment other than left/top, the game\nexpects the width/height to be configured using this native in order to get a proper starting position for the draw\ncommand.",
            "examples": [],
            "hash": "0xF5A2C681787E579D",
            "ns": "GRAPHICS",
            "aliases": ["0xF5A2C681787E579D", "_SCREEN_DRAW_POSITION_RATIO"],
            "jhash": "0x76C641E4",
            "manualHash": true
        },
        "0x96EF97DAEB89BEF5": {
            "name": "SET_PARTICLE_FX_SHOOTOUT_BOAT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x96EF97DAEB89BEF5",
            "ns": "GRAPHICS",
            "jhash": "0xD938DEE0",
            "manualHash": true
        },
        "0xEA1E2D93F6F75ED9": {
            "name": "SET_PARTICLE_FX_OVERRIDE",
            "params": [
                { "name": "oldAsset", "type": "char*" },
                { "name": "newAsset", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEA1E2D93F6F75ED9",
            "ns": "GRAPHICS",
            "aliases": [
                "_SET_PTFX_ASSET_OLD_2_NEW",
                "_SET_PARTICLE_FX_ASSET_OLD_TO_NEW"
            ],
            "jhash": "0xC92719A7",
            "manualHash": true
        },
        "0x26143A59EF48B262": {
            "name": "SET_PARTICLE_FX_NON_LOOPED_COLOUR",
            "params": [
                {
                    "name": "r",
                    "type": "float",
                    "description": "Red (0.0 - 1.0)"
                },
                {
                    "name": "g",
                    "type": "float",
                    "description": "Green (0.0 - 1.0)"
                },
                {
                    "name": "b",
                    "type": "float",
                    "description": "Blue (0.0 - 1.0)"
                }
            ],
            "results": "void",
            "description": "Only works on some fx's, while on others it might SEEM to work \"properly\", but the colors can be \"strange\" or even completly different from what you've expected. Reason for this is that those fx's might already have colors \"baked into them\" which then start to act as a \"mixing palette\", resulting in a different color than expected. A hypothetical example of this would be if the fx itself is already full (bright) red (RGB: 1.0, 0.0, 0.0) and you then set the color to (bright) green (RGB: 0.0, 1.0, 0.0), that it MIGHT result in Yellow (RGB: 1.0, 1.0, 0.0).\n\nThis doc previously stated that the set color is **NOT** networked, however it does actually turns out to be networked. Tested with all fireworks effects and several other FX effects resulted in colored fx effects on all clients when used in combination with [START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD](#\\_0xF56B8137DF10135D).\nThis might however not be the case for all types of particle fx's, so it's recommended to test this thoroughly with multiple clients before releasing your script for example.",
            "examples": [],
            "hash": "0x26143A59EF48B262",
            "ns": "GRAPHICS",
            "jhash": "0x7B689E20",
            "manualHash": true
        },
        "0x6D8EB211944DCE08": {
            "name": "SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME",
            "params": [
                { "name": "scaleform", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6D8EB211944DCE08",
            "ns": "GRAPHICS",
            "jhash": "0x18C9DE8D",
            "manualHash": true
        },
        "0xBDEB86F4D5809204": {
            "name": "SET_PLAYER_TCMODIFIER_TRANSITION",
            "params": [{ "name": "value", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBDEB86F4D5809204",
            "ns": "GRAPHICS",
            "aliases": ["0xBDEB86F4D5809204"],
            "jhash": "0x9559BB38",
            "manualHash": true
        },
        "0x1D132D614DD86811": {
            "name": "SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED",
            "params": [{ "name": "scaleformHandle", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1D132D614DD86811",
            "ns": "GRAPHICS",
            "jhash": "0x5FED3BA1",
            "manualHash": true
        },
        "0xC6372ECD45D73BCD": {
            "name": "SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU",
            "params": [
                {
                    "name": "flag",
                    "type": "BOOL",
                    "description": "A boolean value."
                }
            ],
            "results": "void",
            "description": "Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.",
            "examples": [],
            "hash": "0xC6372ECD45D73BCD",
            "ns": "GRAPHICS",
            "aliases": ["0xC6372ECD45D73BCD"],
            "jhash": "0xF8FBCC25",
            "manualHash": true
        },
        "0x7E08924259E08CE0": {
            "name": "SET_SEETHROUGH",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nToggles Heatvision on/off.  \n```",
            "examples": [],
            "hash": "0x7E08924259E08CE0",
            "ns": "GRAPHICS",
            "jhash": "0x74D4995C",
            "manualHash": true
        },
        "0xB8A850F20A067EB6": {
            "name": "SET_SCRIPT_GFX_ALIGN",
            "params": [
                {
                    "name": "horizontalAlign",
                    "type": "int",
                    "description": "The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R')."
                },
                {
                    "name": "verticalAlign",
                    "type": "int",
                    "description": "The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T')."
                }
            ],
            "results": "void",
            "description": "This function anchors script draws to a side of the safe zone. This needs to be called to make the interface\nindependent of the player's safe zone configuration.\n\nThese values are equivalent to `alignX` and `alignY` in `common:/data/ui/frontend.xml`, which can be used as a baseline\nfor default alignment.\n\nValid values for `horizontalAlign`, from original documentation:\n\n*   **C (67)** - Center: DRAW_TEXT starts in the middle of the screen, while DRAW_RECT starts on the right; both move with\n    the right side of the screen.\n*   **L (76)** - Left: Anchors to the left side, DRAW_RECT starts on the left side of the screen, same as DRAW_TEXT when\n    centered.\n*   **R (82)** - Right: DRAW_TEXT starts on the left side (normal 0,0), while DRAW_RECT starts some short distance away\n    from the right side of the screen, both move with the right side of the screen.\n\nValid values for `verticalAlign`, from original documentation:\n\n*   **B (66)** - Bottom: DRAW_RECT starts about as far as the middle of the map from the bottom, while DRAW_TEXT is about\n    rather centered.\n*   **C (67)** - Center: It starts at a certain distance from the bottom, but the distance is fixed, the distance is\n    different from 66.\n*   **T (84)** - Top: Anchors to the top, DRAW_RECT starts on the top of the screen, DRAW_TEXT just below it.\n\nUsing any other value (including 0) will result in the safe zone not being taken into account for this draw. The\ncanonical value for this is 'I' (73).\n\nFor example, you can use `SET_SCRIPT_GFX_ALIGN(0, 84)` to only scale on the Y axis (to the top), but not change the X\naxis.\n\nTo reset the value, use `RESET_SCRIPT_GFX_ALIGN`.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- align the next draw to the top left\nSetScriptGfxAlign(string.byte('L'), string.byte('T'))\n\n-- prints \"THIS LABEL NEEDS TO BE HERE !!!\"\nBeginTextCommandDisplayText('DUMMY1')\nEndTextCommandDisplayText(0.0, 0.0)\n\n-- reset the script draw alignment\nResetScriptGfxAlign()"
                }
            ],
            "hash": "0xB8A850F20A067EB6",
            "ns": "GRAPHICS",
            "aliases": [
                "_SET_SCREEN_DRAW_POSITION",
                "_SCREEN_DRAW_POSITION_BEGIN"
            ],
            "jhash": "0x228A2598",
            "manualHash": true
        },
        "0x2C933ABF17A1DF41": {
            "name": "SET_TIMECYCLE_MODIFIER",
            "params": [{ "name": "modifierName", "type": "char*" }],
            "results": "void",
            "description": "```\nLoads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. \"timecycle_mods_1.xml\")\nParameters:\nmodifierName - The modifier to load (e.g. \"V_FIB_IT3\", \"scanline_cam\", etc.)\n```",
            "examples": [],
            "hash": "0x2C933ABF17A1DF41",
            "ns": "GRAPHICS",
            "jhash": "0xA81F3638",
            "manualHash": true
        },
        "0x61BB1D9B3A95D802": {
            "name": "SET_SCRIPT_GFX_DRAW_ORDER",
            "params": [
                {
                    "name": "order",
                    "type": "int",
                    "description": "The intended draw order/layer."
                }
            ],
            "results": "void",
            "description": "Sets the draw order for script draw commands.\nExamples from decompiled scripts:\nGRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);\nGRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v\\_4, v\\_5, v\\_6, a\\_0.\\_f172, 0);\nGRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);\nGRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);",
            "examples": [],
            "hash": "0x61BB1D9B3A95D802",
            "ns": "GRAPHICS",
            "aliases": ["0x61BB1D9B3A95D802", "_SET_2D_LAYER", "_SET_UI_LAYER"],
            "jhash": "0xADF81D24",
            "manualHash": true
        },
        "0x82E7FFCD5B2326B3": {
            "name": "SET_TIMECYCLE_MODIFIER_STRENGTH",
            "params": [{ "name": "strength", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x82E7FFCD5B2326B3",
            "ns": "GRAPHICS",
            "jhash": "0x458F4F45",
            "manualHash": true
        },
        "0xBE2CACCF5A8AA805": {
            "name": "SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED",
            "params": [{ "name": "textureDict", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBE2CACCF5A8AA805",
            "ns": "GRAPHICS",
            "jhash": "0xF07DDA38",
            "manualHash": true
        },
        "0x3BCF567485E1971C": {
            "name": "SET_TRANSITION_TIMECYCLE_MODIFIER",
            "params": [
                {
                    "name": "modifierName",
                    "type": "char*",
                    "description": "The name of a timecycle"
                },
                {
                    "name": "transition",
                    "type": "float",
                    "description": "The speed to transition to `modifierName`. Appears to be half-seconds (?)"
                }
            ],
            "results": "void",
            "description": "This native doesn't work like [`SetWeatherTypeTransition`](#\\_0x578C752848ECFA0C).",
            "examples": [],
            "hash": "0x3BCF567485E1971C",
            "ns": "GRAPHICS",
            "jhash": "0xBB2BA72A",
            "manualHash": true
        },
        "0x164ECBB3CF750CB0": {
            "name": "SET_TRACKED_POINT_INFO",
            "params": [
                { "name": "point", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x164ECBB3CF750CB0",
            "ns": "GRAPHICS",
            "jhash": "0x28689AA4",
            "manualHash": true
        },
        "0x113D2C5DC57E1774": {
            "name": "SET_TV_AUDIO_FRONTEND",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nProbably changes tvs from being a 3d audio to being \"global\" audio\n```",
            "examples": [],
            "hash": "0x113D2C5DC57E1774",
            "ns": "GRAPHICS",
            "jhash": "0x2E0DFA35",
            "manualHash": true
        },
        "0x2201C576FACAEBE8": {
            "name": "SET_TV_CHANNEL_PLAYLIST_AT_HOUR",
            "params": [
                { "name": "tvChannel", "type": "int" },
                { "name": "playlistName", "type": "char*" },
                { "name": "hour", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2201C576FACAEBE8",
            "ns": "GRAPHICS",
            "aliases": ["0x2201C576FACAEBE8"],
            "jhash": "0x78C4DCBE",
            "manualHash": true
        },
        "0xBAABBB23EB6E484E": {
            "name": "SET_TV_CHANNEL",
            "params": [{ "name": "channel", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBAABBB23EB6E484E",
            "ns": "GRAPHICS",
            "jhash": "0x41A8A627",
            "manualHash": true
        },
        "0x2982BF73F66E9DDC": {
            "name": "SET_TV_VOLUME",
            "params": [{ "name": "volume", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2982BF73F66E9DDC",
            "ns": "GRAPHICS",
            "jhash": "0xF3504F4D",
            "manualHash": true
        },
        "0x6F60E89A7B64EE1D": {
            "name": "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "entity", "type": "Entity" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "xAxis", "type": "BOOL" },
                { "name": "yAxis", "type": "BOOL" },
                { "name": "zAxis", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\nnetwork fx  \n```\n\n```\nNativeDB Added Parameter 13: Any p12\nNativeDB Added Parameter 14: Any p13\nNativeDB Added Parameter 15: Any p14\nNativeDB Added Parameter 16: Any p15\n```",
            "examples": [],
            "hash": "0x6F60E89A7B64EE1D",
            "ns": "GRAPHICS",
            "aliases": [
                "0x6F60E89A7B64EE1D",
                "_START_PARTICLE_FX_LOOPED_ON_ENTITY_2"
            ],
            "jhash": "0x110752B2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDDE23F30CC5A0F03": {
            "name": "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "entity", "type": "Entity" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "boneIndex", "type": "int" },
                { "name": "scale", "type": "float" },
                { "name": "xAxis", "type": "BOOL" },
                { "name": "yAxis", "type": "BOOL" },
                { "name": "zAxis", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\nnetwork fx  \n```\n\n```\nNativeDB Added Parameter 14: Any p13\nNativeDB Added Parameter 15: Any p14\nNativeDB Added Parameter 16: Any p15\nNativeDB Added Parameter 17: Any p16\n```",
            "examples": [],
            "hash": "0xDDE23F30CC5A0F03",
            "ns": "GRAPHICS",
            "aliases": [
                "0xDDE23F30CC5A0F03",
                "_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE_2"
            ],
            "jhash": "0xF478EFCF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF7B38B8305F1FE8B": {
            "name": "SET_TV_CHANNEL_PLAYLIST",
            "params": [
                { "name": "tvChannel", "type": "int" },
                { "name": "playlistName", "type": "char*" },
                { "name": "restart", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Loads specified video sequence into the TV Channel\nTV_Channel ranges from 0-2\nVideoSequence can be any of the following:\n\"PL_STD_CNT\" CNT Standard Channel\n\"PL_STD_WZL\" Weazel Standard Channel\n\"PL_LO_CNT\"\n\"PL_LO_WZL\"\n\"PL_SP_WORKOUT\"\n\"PL_SP_INV\" - Jay Norris Assassination Mission Fail\n\"PL_SP_INV_EXP\" - Jay Norris Assassination Mission Success\n\"PL_LO_RS\" - Righteous Slaughter Ad\n\"PL_LO_RS_CUTSCENE\" - Righteous Slaughter Cut-scene\n\"PL_SP_PLSH1\\_INTRO\"\n\"PL_LES1\\_FAME_OR_SHAME\"\n\"PL_STD_WZL_FOS_EP2\"\n\"PL_MP_WEAZEL\" - Weazel Logo on loop\n\"PL_MP_CCTV\" - Generic CCTV loop\nRestart:\n0=video sequence continues as normal\n1=sequence restarts from beginning every time that channel is selected\nThe above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).\nhttps://pastebin.com/zUzGB6h7",
            "examples": [],
            "hash": "0xF7B38B8305F1FE8B",
            "ns": "GRAPHICS",
            "aliases": ["0xF7B38B8305F1FE8B", "_LOAD_TV_CHANNEL_SEQUENCE"],
            "jhash": "0xB262DE67",
            "manualHash": true
        },
        "0xA41B6A43642AC2CF": {
            "name": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "ped", "type": "Ped" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "boneIndex", "type": "int" },
                { "name": "scale", "type": "float" },
                { "name": "axisX", "type": "BOOL" },
                { "name": "axisY", "type": "BOOL" },
                { "name": "axisZ", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA41B6A43642AC2CF",
            "ns": "GRAPHICS",
            "aliases": ["_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2"],
            "jhash": "0x161780C1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x02B1F2A72E0F5325": {
            "name": "_START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "entity", "type": "Entity" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "boneIndex", "type": "int" },
                { "name": "scale", "type": "float" },
                { "name": "axisX", "type": "BOOL" },
                { "name": "axisY", "type": "BOOL" },
                { "name": "axisZ", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x02B1F2A72E0F5325",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xF56B8137DF10135D": {
            "name": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "xPos", "type": "float" },
                { "name": "yPos", "type": "float" },
                { "name": "zPos", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "xAxis", "type": "BOOL" },
                { "name": "yAxis", "type": "BOOL" },
                { "name": "zAxis", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "NOTE: the [USE_PARTICLE_FX_ASSET](#\\_0x6C38AF3693A69A91) needs to be called before EVERY StartNetworkedParticleFxNonLoopedAtCoord(....) call!\n\nList with lots of particle effects: https://vespura.com/fivem/particle-list/\n\nNote: Not all particles on this list are for non looped and vice versa, neither are all of them suited/meant to have SetParticleFxNonLoopedColour(....) called on them.\n\n```\nNativeDB Added Parameter 12: BOOL p11\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- If the PtfxAsset hasn't been loaded yet, you'll need to load it first\nif not HasNamedPtfxAssetLoaded(\"scr_indep_fireworks\") then\n\tRequestNamedPtfxAsset(\"scr_indep_fireworks\")\n\twhile not HasNamedPtfxAssetLoaded(\"scr_indep_fireworks\") do\n\t\tWait(10)\n\tend\nend\n\nlocal CurrentPlayerCoords = GetEntityCoords(GetPlayerPed(-1))\n\nUseParticleFxAssetNextCall(\"scr_indep_fireworks\") -- Prepare the Particle FX for the next upcomming Particle FX call\nSetParticleFxNonLoopedColour(1.0, 0.0, 0.0) -- Setting the color to Red (R, G, B)\nStartNetworkedParticleFxNonLoopedAtCoord(\"scr_indep_firework_burst_spawn\", CurrentPlayerCoords, 0.0, 0.0, 0.0, 1.0, false, false, false, false) -- Start the animation itself\n\nRemoveNamedPtfxAsset(\"scr_indep_fireworks\") -- Clean up"
                }
            ],
            "hash": "0xF56B8137DF10135D",
            "ns": "GRAPHICS",
            "aliases": ["_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2"],
            "jhash": "0x633F8C48",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC95EB1DB6E92113D": {
            "name": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "entity", "type": "Entity" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "axisX", "type": "BOOL" },
                { "name": "axisY", "type": "BOOL" },
                { "name": "axisZ", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC95EB1DB6E92113D",
            "ns": "GRAPHICS",
            "aliases": ["_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_2"],
            "jhash": "0x469A2B4A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF28DA9F38CD1787C": {
            "name": "START_PARTICLE_FX_LOOPED_ON_PED_BONE",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "ped", "type": "Ped" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "boneIndex", "type": "int" },
                { "name": "scale", "type": "float" },
                { "name": "xAxis", "type": "BOOL" },
                { "name": "yAxis", "type": "BOOL" },
                { "name": "zAxis", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF28DA9F38CD1787C",
            "ns": "GRAPHICS",
            "jhash": "0xF8FC196F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1AE42C1660FD6517": {
            "name": "START_PARTICLE_FX_LOOPED_ON_ENTITY",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "entity", "type": "Entity" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "xAxis", "type": "BOOL" },
                { "name": "yAxis", "type": "BOOL" },
                { "name": "zAxis", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x1AE42C1660FD6517",
            "ns": "GRAPHICS",
            "jhash": "0x0D06FF62",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC6EB449E33977F0B": {
            "name": "START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "entity", "type": "Entity" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "boneIndex", "type": "int" },
                { "name": "scale", "type": "float" },
                { "name": "xAxis", "type": "BOOL" },
                { "name": "yAxis", "type": "BOOL" },
                { "name": "zAxis", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC6EB449E33977F0B",
            "ns": "GRAPHICS",
            "jhash": "0x23BF0F9B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE184F4F0DC5910E7": {
            "name": "START_PARTICLE_FX_LOOPED_AT_COORD",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "xAxis", "type": "BOOL" },
                { "name": "yAxis", "type": "BOOL" },
                { "name": "zAxis", "type": "BOOL" },
                { "name": "p11", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\nGRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD(\"scr_fbi_falling_debris\", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)  \np11 seems to be always 0  \n```",
            "examples": [],
            "hash": "0xE184F4F0DC5910E7",
            "ns": "GRAPHICS",
            "jhash": "0xD348E3E6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x25129531F77B9ED3": {
            "name": "START_PARTICLE_FX_NON_LOOPED_AT_COORD",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "xPos", "type": "float" },
                { "name": "yPos", "type": "float" },
                { "name": "zPos", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "xAxis", "type": "BOOL" },
                { "name": "yAxis", "type": "BOOL" },
                { "name": "zAxis", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\nGRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD(\"scr_paleto_roof_impact\", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);  \nAxis - Invert Axis Flags  \nlist: pastebin.com/N9unUFWY  \n-------------------------------------------------------------------  \nC#  \nFunction.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.  \nchar *effectname = This is an in-game effect name, for e.g. \"scr_fbi4_trucks_crash\" is used to give the effects when truck crashes etc  \nfloat x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates  \nfloat xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.  \nfloat scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f  \nbool xaxis, yaxis, zaxis = To bool the axis values.  \nexample:  \nFunction.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, \"scr_fbi4_trucks_crash\", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);  \n```",
            "examples": [],
            "hash": "0x25129531F77B9ED3",
            "ns": "GRAPHICS",
            "jhash": "0xDD79D679",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0D53A3B8DA0809D2": {
            "name": "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "entity", "type": "Entity" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "axisX", "type": "BOOL" },
                { "name": "axisY", "type": "BOOL" },
                { "name": "axisZ", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nStarts a particle effect on an entity for example your player.  \nList: pastebin.com/N9unUFWY  \nExample:  \nC#:  \nFunction.Call(Hash.REQUEST_NAMED_PTFX_ASSET, \"scr_rcbarry2\");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, \"scr_rcbarry2\");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, \"scr_clown_appears\", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);  \nInternally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE  \nhowever it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native  \n```",
            "examples": [],
            "hash": "0x0D53A3B8DA0809D2",
            "ns": "GRAPHICS",
            "jhash": "0x9604DAD4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0E7E72961BA18619": {
            "name": "START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE",
            "params": [
                { "name": "effectName", "type": "char*" },
                { "name": "ped", "type": "Ped" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "boneIndex", "type": "int" },
                { "name": "scale", "type": "float" },
                { "name": "axisX", "type": "BOOL" },
                { "name": "axisY", "type": "BOOL" },
                { "name": "axisZ", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nGRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(\"scr_sh_bong_smoke\", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);  \nAxis - Invert Axis Flags  \nlist: pastebin.com/N9unUFWY  \n```",
            "examples": [],
            "hash": "0x0E7E72961BA18619",
            "ns": "GRAPHICS",
            "jhash": "0x53DAEF4E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8F75998877616996": {
            "name": "STOP_PARTICLE_FX_LOOPED",
            "params": [
                { "name": "ptfxHandle", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 is always 0 in the native scripts  \n```",
            "examples": [],
            "hash": "0x8F75998877616996",
            "ns": "GRAPHICS",
            "jhash": "0xD245455B",
            "manualHash": true
        },
        "0x99AC7F0D8B9C893D": {
            "name": "START_PETROL_TRAIL_DECALS",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x99AC7F0D8B9C893D",
            "ns": "GRAPHICS",
            "aliases": ["0x99AC7F0D8B9C893D"],
            "jhash": "0xE3938B0B",
            "manualHash": true
        },
        "0x63606A61DE68898A": {
            "name": "_STOP_BINK_MOVIE",
            "params": [{ "name": "binkMovie", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x63606A61DE68898A",
            "ns": "GRAPHICS",
            "manualHash": true
        },
        "0xA356990E161C9E65": {
            "name": "TERRAINGRID_ACTIVATE",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Enables or disables the golf putting grid display."
                }
            ],
            "results": "void",
            "description": "This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).\nThis requires these two natives to be called as well to configure the grid: [`TERRAINGRID_SET_PARAMS`](#\\_0x1C4FC5752BCD8E48) and [`TERRAINGRID_SET_COLOURS`](#\\_0x5CE62918F8D703C7).",
            "examples": [],
            "hash": "0xA356990E161C9E65",
            "ns": "GRAPHICS",
            "aliases": ["0xA356990E161C9E65"],
            "jhash": "0xA1CB6C94",
            "manualHash": true
        },
        "0xDFC252D8A3E15AB7": {
            "name": "TOGGLE_PAUSED_RENDERPHASES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDFC252D8A3E15AB7",
            "ns": "GRAPHICS",
            "aliases": [
                "_ENABLE_GAMEPLAY_CAM",
                "_SET_FROZEN_RENDERING_DISABLED"
            ],
            "jhash": "0x30ADE541",
            "manualHash": true
        },
        "0x1C4FC5752BCD8E48": {
            "name": "TERRAINGRID_SET_PARAMS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "Grid center x coord."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Grid center y coord."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Grid center z coord."
                },
                {
                    "name": "p3",
                    "type": "float",
                    "description": "Not sure, but seems to be the amount of lines top/bottom there are in the grid. -1.0 works best."
                },
                {
                    "name": "rotation",
                    "type": "float",
                    "description": "Grid rotation (keep between 0.0 and 1.0)."
                },
                {
                    "name": "p5",
                    "type": "float",
                    "description": "Offset top/bottom (? not sure about this one, seems weird)."
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Grid width (usually 15.0)."
                },
                {
                    "name": "height",
                    "type": "float",
                    "description": "Grid height (usually 15.0)."
                },
                {
                    "name": "p8",
                    "type": "float",
                    "description": "Not sure, but seems to be the amount of lines left/right there are in the grid. -1.0 works best."
                },
                {
                    "name": "scale",
                    "type": "float",
                    "description": "Zoom / scale (higher values = smaller (more) squares) (lower values = bigger (less) squares)."
                },
                {
                    "name": "glowIntensity",
                    "type": "float",
                    "description": "glow intensity / opacity (40.0 is fine for daylight, 15.0 is fine for night time)."
                },
                {
                    "name": "normalHeight",
                    "type": "float",
                    "description": "The z coord for 'normal' height (white grid lines level)."
                },
                {
                    "name": "heightDiff",
                    "type": "float",
                    "description": "This is the height difference/margin used for line color changes. 0.2 works fine (normalHeight + 0.2 = yellow, normalHeight - 0.2 = red)."
                }
            ],
            "results": "void",
            "description": "This native is used along with these two natives: [`TERRAINGRID_ACTIVATE`](#\\_0xA356990E161C9E65) and [`TERRAINGRID_SET_COLOURS`](#\\_0x5CE62918F8D703C7).\n\nThis native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.\n\nAll those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png",
            "examples": [
                {
                    "lang": "cs",
                    "code": "N_0xa356990e161c9e65(true); // toggle on/off\n\n// this native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.\nN_0x1c4fc5752bcd8e48(-1114.121f, 220.789f, 63.78f, -1f, 0.85f, 0f, 15f, 15f, -1f, 20f, 40f, 63.78f, 0.2f);\n\n// This native defines the colors (and alpha/opacity levels) for min, normal and max heights.\n// (in this case: red for lower, white for normal, yellow for higher)\nN_0x5ce62918f8d703c7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);"
                }
            ],
            "hash": "0x1C4FC5752BCD8E48",
            "ns": "GRAPHICS",
            "aliases": ["0x1C4FC5752BCD8E48"],
            "jhash": "0x3B637AA7",
            "manualHash": true
        },
        "0x5CE62918F8D703C7": {
            "name": "TERRAINGRID_SET_COLOURS",
            "params": [
                {
                    "name": "lowR",
                    "type": "int",
                    "description": "red value for the lower level"
                },
                {
                    "name": "lowG",
                    "type": "int",
                    "description": "green value for the lower level"
                },
                {
                    "name": "lowB",
                    "type": "int",
                    "description": "blue value for the lower level"
                },
                {
                    "name": "lowAlpha",
                    "type": "int",
                    "description": "alpha value for the lower level"
                },
                {
                    "name": "R",
                    "type": "int",
                    "description": "red value for the normal level"
                },
                {
                    "name": "G",
                    "type": "int",
                    "description": "green value for the normal level"
                },
                {
                    "name": "B",
                    "type": "int",
                    "description": "blue value for the normal level"
                },
                {
                    "name": "Alpha",
                    "type": "int",
                    "description": "alpha value for the normal level"
                },
                {
                    "name": "highR",
                    "type": "int",
                    "description": "red value for the upper level"
                },
                {
                    "name": "highG",
                    "type": "int",
                    "description": "green value for the upper level"
                },
                {
                    "name": "highB",
                    "type": "int",
                    "description": "blue value for the upper level"
                },
                {
                    "name": "highAlpha",
                    "type": "int",
                    "description": "alpha value for the upper level"
                }
            ],
            "results": "void",
            "description": "This native is used along with these two natives: [`TERRAINGRID_ACTIVATE`](#\\_0xA356990E161C9E65) and [`TERRAINGRID_SET_PARAMS`](#\\_0x1C4FC5752BCD8E48).\nThis native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.\nAll those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png\n\nOld description:\nOnly called in golf and golf_mp\\\nparameters used are\\\nGRAPHICS::\\_0x5CE62918F8D703C7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);",
            "examples": [
                {
                    "lang": "cs",
                    "code": "N_0xa356990e161c9e65(true); // toggle on/off\n\n// this native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.\nN_0x1c4fc5752bcd8e48(-1114.121f, 220.789f, 63.78f, -1f, 0.85f, 0f, 15f, 15f, -1f, 20f, 40f, 63.78f, 0.2f);\n\n// This native defines the colors (and alpha/opacity levels) for min, normal and max heights.\n// (in this case: red for lower, white for normal, yellow for higher)\nN_0x5ce62918f8d703c7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);"
                }
            ],
            "hash": "0x5CE62918F8D703C7",
            "ns": "GRAPHICS",
            "aliases": ["0x5CE62918F8D703C7"],
            "jhash": "0xDF552973",
            "manualHash": true
        },
        "0xEFACC8AEF94430D5": {
            "name": "TRIGGER_SCREENBLUR_FADE_OUT",
            "params": [{ "name": "transitionTime", "type": "float" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEFACC8AEF94430D5",
            "ns": "GRAPHICS",
            "aliases": ["_TRANSITION_FROM_BLURRED"],
            "jhash": "0x46617502",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD3A10FC7FD8D98CD": {
            "name": "UI3DSCENE_IS_AVAILABLE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD3A10FC7FD8D98CD",
            "ns": "GRAPHICS",
            "aliases": ["0xD3A10FC7FD8D98CD"],
            "jhash": "0xE40A0F1A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF1CEA8A4198D8E9A": {
            "name": "UI3DSCENE_PUSH_PRESET",
            "params": [{ "name": "presetName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nAll presets can be found in common\\data\\ui\\uiscenes.meta\n```",
            "examples": [],
            "hash": "0xF1CEA8A4198D8E9A",
            "ns": "GRAPHICS",
            "aliases": ["0xF1CEA8A4198D8E9A"],
            "jhash": "0x2E7D9B98",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA328A24AAA6B7FDC": {
            "name": "TRIGGER_SCREENBLUR_FADE_IN",
            "params": [
                {
                    "name": "transitionTime",
                    "type": "float",
                    "description": "Time in milliseconds to transition into a fully blurred screen"
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA328A24AAA6B7FDC",
            "ns": "GRAPHICS",
            "aliases": ["_TRANSITION_TO_BLURRED"],
            "jhash": "0x5604B890",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B712761429DBC14": {
            "name": "WASH_DECALS_FROM_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5B712761429DBC14",
            "ns": "GRAPHICS",
            "jhash": "0x2929F11A",
            "manualHash": true
        },
        "0xB7ED70C49521A61D": {
            "name": "UNPATCH_DECAL_DIFFUSE_MAP",
            "params": [{ "name": "decalType", "type": "int" }],
            "results": "void",
            "description": "```\nGRAPHICS::UNPATCH_DECAL_DIFFUSE_MAP(9123);  \nGRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(\"MPMissMarkers256\");  \n```",
            "examples": [],
            "hash": "0xB7ED70C49521A61D",
            "ns": "GRAPHICS",
            "aliases": ["0xB7ED70C49521A61D", "_UNDO_DECAL_TEXTURE_OVERRIDE"],
            "jhash": "0x7B786555",
            "manualHash": true
        },
        "0x9C30613D50A6ADEF": {
            "name": "WASH_DECALS_IN_RANGE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9C30613D50A6ADEF",
            "ns": "GRAPHICS",
            "jhash": "0xDEECBC57",
            "manualHash": true
        },
        "0xDEADC0DEDEADC0DE": {
            "name": "UPDATE_LIGHTS_ON_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDEADC0DEDEADC0DE",
            "ns": "GRAPHICS",
            "aliases": ["0xDEADC0DEDEADC0DE", "_ENTITY_DESCRIPTION_TEXT"],
            "jhash": "0xC12AC47A",
            "manualHash": true
        },
        "0x6C38AF3693A69A91": {
            "name": "USE_PARTICLE_FX_ASSET",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "```\nFrom the b678d decompiled scripts:\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"FM_Mission_Controler\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_apartment_mp\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_indep_fireworks\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_mp_cig_plane\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_mp_creator\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_ornate_heist\");\n GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_prison_break_heist_station\");\n```",
            "examples": [],
            "hash": "0x6C38AF3693A69A91",
            "ns": "GRAPHICS",
            "aliases": [
                "_SET_PTFX_ASSET_NEXT_CALL",
                "_USE_PARTICLE_FX_ASSET_NEXT_CALL"
            ],
            "jhash": "0x9C720B61",
            "manualHash": true
        }
    },
    "LOCALIZATION": {
        "0x497420E022796B3F": {
            "name": "_LOCALIZATION_GET_SYSTEM_LANGUAGE",
            "params": [],
            "results": "int",
            "description": "```\nSame return values as GET_CURRENT_LANGUAGE\n```",
            "examples": [],
            "hash": "0x497420E022796B3F",
            "ns": "LOCALIZATION",
            "aliases": ["0x497420E022796B3F"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA8AE43AEC1A61314": {
            "name": "_LOCALIZATION_GET_SYSTEM_DATE_FORMAT",
            "params": [],
            "results": "int",
            "description": "```\nPossible return values: 0, 1, 2\n```",
            "examples": [],
            "hash": "0xA8AE43AEC1A61314",
            "ns": "LOCALIZATION",
            "aliases": ["_GET_USER_LANGUAGE_ID"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2BDD44CC428A7EAE": {
            "name": "GET_CURRENT_LANGUAGE",
            "params": [],
            "results": "int",
            "description": "```\n0 = american (en-US)\n1 = french (fr-FR)\n2 = german (de-DE)\n3 = italian (it-IT)\n4 = spanish (es-ES)\n5 = brazilian (pt-BR)\n6 = polish (pl-PL)\n7 = russian (ru-RU)\n8 = korean (ko-KR)\n9 = chinesetrad (zh-TW)\n10 = japanese (ja-JP)\n11 = mexican (es-MX)\n12 = chinesesimp (zh-CN)\n```",
            "examples": [],
            "hash": "0x2BDD44CC428A7EAE",
            "ns": "LOCALIZATION",
            "aliases": ["_GET_UI_LANGUAGE_ID", "_GET_CURRENT_LANGUAGE_ID"],
            "jhash": "0x761BE00B",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "HUD": {
        "0xEF01D36B9C9D0C7B": {
            "name": "ACTIVATE_FRONTEND_MENU",
            "params": [
                { "name": "menuhash", "type": "Hash" },
                { "name": "togglePause", "type": "BOOL" },
                { "name": "component", "type": "int" }
            ],
            "results": "void",
            "description": "Does stuff like this:\\\ngyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617\\\nExample:\\\nint GetHash = GET_HASH_KEY(\"fe_menu_version_corona_lobby\");\\\nACTIVATE_FRONTEND_MENU(GetHash, 0, -1);\\\nBOOL p1 is a toggle to define the game in pause.\\\nint p2 is unknown but -1 always works, not sure why though.\\\n\\[30/03/2017] ins1de :\\\nthe int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.\\\nExample : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);\\\nResult : Opens the \"Online\" tab without pausing the menu, with -1 it opens the map.\n\nBelow is a list of all known Frontend Menu Hashes.\n\n*   FE_MENU_VERSION_SP_PAUSE\n*   FE_MENU_VERSION_MP_PAUSE\n*   FE_MENU_VERSION_CREATOR_PAUSE\n*   FE_MENU_VERSION_CUTSCENE_PAUSE\n*   FE_MENU_VERSION_SAVEGAME\n*   FE_MENU_VERSION_PRE_LOBBY\n*   FE_MENU_VERSION_LOBBY\n*   FE_MENU_VERSION_MP_CHARACTER_SELECT\n*   FE_MENU_VERSION_MP_CHARACTER_CREATION\n*   FE_MENU_VERSION_EMPTY\n*   FE_MENU_VERSION_EMPTY_NO_BACKGROUND\n*   FE_MENU_VERSION_TEXT_SELECTION\n*   FE_MENU_VERSION_CORONA\n*   FE_MENU_VERSION_CORONA_LOBBY\n*   FE_MENU_VERSION_CORONA_JOINED_PLAYERS\n*   FE_MENU_VERSION_CORONA_INVITE_PLAYERS\n*   FE_MENU_VERSION_CORONA_INVITE_FRIENDS\n*   FE_MENU_VERSION_CORONA_INVITE_CREWS\n*   FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS\n*   FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS\n*   FE_MENU_VERSION_CORONA_RACE\n*   FE_MENU_VERSION_CORONA_BETTING\n*   FE_MENU_VERSION_JOINING_SCREEN\n*   FE_MENU_VERSION_LANDING_MENU\n*   FE_MENU_VERSION_LANDING_KEYMAPPING_MENU",
            "examples": [],
            "hash": "0xEF01D36B9C9D0C7B",
            "ns": "HUD",
            "jhash": "0x01D83872",
            "manualHash": true
        },
        "0xCE5D0E5E315DB238": {
            "name": "_ADD_BLIP_FOR_AREA",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate of the center of the blip."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate of the center of the blip."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate of the center of the blip."
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "The width of the blip."
                },
                {
                    "name": "height",
                    "type": "float",
                    "description": "The height of the blip."
                }
            ],
            "results": "Blip",
            "description": "Adds a rectangular blip for the specified coordinates/area.\n\nIt is recommended to use [SET_BLIP_ROTATION](#\\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.\n\nBy default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.\n\nExample image:\n![minimap](https://i.imgur.com/qLbXWcQ.png)\n![big map](https://i.imgur.com/0j7O7Rh.png)\n\n(Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local coords = GetEntityCoords(PlayerPedId())\nlocal blip = AddBlipForArea(coords.x, coords.y, coords.z, 100.0, 50.0)\nSetBlipRotation(blip, 0)\nSetBlipColour(blip, 0xFF00FF80)"
                }
            ],
            "hash": "0xCE5D0E5E315DB238",
            "ns": "HUD",
            "aliases": ["0xCE5D0E5E315DB238"],
            "manualHash": true,
            "resultsDescription": "A handle to the blip."
        },
        "0x5A039BB0BCA604B6": {
            "name": "ADD_BLIP_FOR_COORD",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate to create the blip on."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate."
                }
            ],
            "results": "Blip",
            "description": "Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local destination = AddBlipForCoord(200.0, 200.0, 5.0)"
                }
            ],
            "hash": "0x5A039BB0BCA604B6",
            "ns": "HUD",
            "jhash": "0xC6F43D0E",
            "manualHash": true,
            "resultsDescription": "A blip handle."
        },
        "0x5CDE92C702A8FCE7": {
            "name": "ADD_BLIP_FOR_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity handle to create the blip."
                }
            ],
            "results": "Blip",
            "description": "Create a blip that by default is red (enemy), you can use [SET_BLIP_AS_FRIENDLY](#\\_0xC6F43D0E) to make it blue (friend).\\\nCan be used for objects, vehicles and peds.\n\nExample of enemy:\n![enemy](https://i.imgur.com/fl78svv.png)\nExample of friend:\n![friend](https://i.imgur.com/Q16ho5d.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local blip = AddBlipForEntity(PlayerPedId()) -- This adds an enemy blip to yourself"
                },
                {
                    "lang": "js",
                    "code": "const blip = AddBlipForEntity(PlayerPedId()); // This adds an enemy blip to yourself"
                }
            ],
            "hash": "0x5CDE92C702A8FCE7",
            "ns": "HUD",
            "jhash": "0x30822554",
            "manualHash": true,
            "resultsDescription": "A blip handle."
        },
        "0xBE339365C863BD36": {
            "name": "ADD_BLIP_FOR_PICKUP",
            "params": [{ "name": "pickup", "type": "Pickup" }],
            "results": "Blip",
            "description": "",
            "examples": [],
            "hash": "0xBE339365C863BD36",
            "ns": "HUD",
            "jhash": "0x16693C3A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x46818D79B1F7499A": {
            "name": "ADD_BLIP_FOR_RADIUS",
            "params": [
                {
                    "name": "posX",
                    "type": "float",
                    "description": "The x position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "The y position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "The z position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The number that defines the radius of the blip circle"
                }
            ],
            "results": "Blip",
            "description": "Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use [AddBlipCoords](#\\_0xC6F43D0E))\n\nExample image:\n![example](https://i.imgur.com/9hQl3DB.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local coords = vector3(0.0, 0.0, 0.0)\n\nlocal blip = AddBlipForRadius(coords, 100.0) -- need to have .0\nSetBlipColour(blip, 1)\nSetBlipAlpha(blip, 128)"
                },
                {
                    "lang": "js",
                    "code": "const blip = AddBlipForRadius(0.0, 0.0, 0.0, 100.0);\nSetBlipColour(blip, 1);\nSetBlipAlpha(blip, 128);"
                }
            ],
            "hash": "0x46818D79B1F7499A",
            "ns": "HUD",
            "jhash": "0x4626756C",
            "manualHash": true,
            "resultsDescription": "The blip handle that can be manipulated with every `SetBlip` natives"
        },
        "0xA905192A6781C41B": {
            "name": "ADD_POINT_TO_GPS_MULTI_ROUTE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA905192A6781C41B",
            "ns": "HUD",
            "aliases": ["0xA905192A6781C41B"],
            "jhash": "0xFE485135",
            "manualHash": true
        },
        "0x311438A071DD9B1A": {
            "name": "ADD_POINT_TO_GPS_CUSTOM_ROUTE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x311438A071DD9B1A",
            "ns": "HUD",
            "aliases": ["0x311438A071DD9B1A"],
            "jhash": "0xEEBDFE55",
            "manualHash": true
        },
        "0xE7DCB5B874BCD96E": {
            "name": "ADD_TEXT_COMPONENT_FLOAT",
            "params": [
                {
                    "name": "value",
                    "type": "float",
                    "description": "The number to substitute in the label."
                },
                {
                    "name": "decimalPlaces",
                    "type": "int",
                    "description": "How many decimal places to add"
                }
            ],
            "results": "void",
            "description": "Adds a float to a text component placeholder, replacing `~1~` in the current text command's text label.\n\n![Example output](https://i.imgur.com/jvuQ0II.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- on initialization\nAddTextEntry('TEST_LABEL', 'Label: ~1~')\n\n-- when drawing\nBeginTextCommandThefeedPost('TEST_LABEL')\nAddTextComponentFloat(1000.0, 2)\nEndTextCommandThefeedPostTicker(false, true)"
                }
            ],
            "hash": "0xE7DCB5B874BCD96E",
            "ns": "HUD",
            "jhash": "0x24D78013",
            "manualHash": true
        },
        "0x5F68520888E69014": {
            "name": "ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F68520888E69014",
            "ns": "HUD",
            "aliases": [
                "_ADD_TEXT_COMPONENT_STRING3",
                "_ADD_TEXT_COMPONENT_SCALEFORM"
            ],
            "jhash": "0x0829A799",
            "manualHash": true
        },
        "0x60296AF4BA14ABC5": {
            "name": "ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x60296AF4BA14ABC5",
            "ns": "HUD",
            "jhash": "0xB58B25BD",
            "manualHash": true
        },
        "0x03B504CF259931BC": {
            "name": "ADD_TEXT_COMPONENT_INTEGER",
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x03B504CF259931BC",
            "ns": "HUD",
            "jhash": "0xFE272A57",
            "manualHash": true
        },
        "0xC63CD5D2920ACBE7": {
            "name": "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL",
            "params": [{ "name": "labelName", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC63CD5D2920ACBE7",
            "ns": "HUD",
            "aliases": ["_ADD_TEXT_COMPONENT_ITEM_STRING"],
            "jhash": "0xDCE05406",
            "manualHash": true
        },
        "0x6C188BE134E074AA": {
            "name": "ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME",
            "params": [
                {
                    "name": "text",
                    "type": "char*",
                    "description": "A string to add of up to 99 characters. This can contain additional `~` formatting directives."
                }
            ],
            "results": "void",
            "description": "Adds an arbitrary string as a text component placeholder, replacing `~a~` in the current text command's text label.\n\nSee the documentation on text formatting for more information.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- on initialization\nAddTextEntry('TEST_LABEL', 'Label: ~a~')\n\n-- when drawing\nBeginTextCommandDisplayText('TEST_LABEL')\nAddTextComponentSubstringPlayerName('Hello, World!')\nEndTextCommandDisplayText(0.5, 0.5)"
                }
            ],
            "hash": "0x6C188BE134E074AA",
            "ns": "HUD",
            "aliases": ["_ADD_TEXT_COMPONENT_STRING"],
            "jhash": "0x27A244D8",
            "manualHash": true
        },
        "0x80EAD8E2E1D5D52E": {
            "name": "ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x80EAD8E2E1D5D52E",
            "ns": "HUD",
            "aliases": ["0x80EAD8E2E1D5D52E"],
            "jhash": "0x5DE98F0A",
            "manualHash": true
        },
        "0x0E4C749FF9DE9CC4": {
            "name": "ADD_TEXT_COMPONENT_FORMATTED_INTEGER",
            "params": [
                {
                    "name": "value",
                    "type": "int",
                    "description": "The integer to add to the string"
                },
                {
                    "name": "commaSeparated",
                    "type": "BOOL",
                    "description": "Whether or not to add comma seperators. So if true 1000 would become 1,000."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- on initialization\nAddTextEntry('TEST_LABEL', '€~a~')\n\n-- when drawing\nBeginTextCommandThefeedPost('TEST_LABEL')\nAddTextComponentFormattedInteger(1000, true)\nEndTextCommandThefeedPostTicker(false, true)"
                }
            ],
            "hash": "0x0E4C749FF9DE9CC4",
            "ns": "HUD",
            "aliases": ["0x0E4C749FF9DE9CC4"],
            "jhash": "0x12929BDF",
            "manualHash": true
        },
        "0x17299B63C7683A2B": {
            "name": "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY",
            "params": [{ "name": "gxtEntryHash", "type": "Hash" }],
            "results": "void",
            "description": "```\nIt adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY(\"ES_HELP\"), adds \"Continue\". Just uses a text labels hash key  \n```",
            "examples": [],
            "hash": "0x17299B63C7683A2B",
            "ns": "HUD",
            "aliases": ["0x17299B63C7683A2B"],
            "jhash": "0x150E03B6",
            "manualHash": true
        },
        "0x761B77454205A61D": {
            "name": "ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\np1 was always -1\n```",
            "examples": [],
            "hash": "0x761B77454205A61D",
            "ns": "HUD",
            "aliases": ["0x761B77454205A61D", "_ADD_TEXT_COMPONENT_APP_TITLE"],
            "jhash": "0x65E1D404",
            "manualHash": true
        },
        "0x1115F16B8AB9E8BF": {
            "name": "ADD_TEXT_COMPONENT_SUBSTRING_TIME",
            "params": [
                { "name": "timestamp", "type": "int" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nAdds a timer (e.g. \"00:00:00:000\"). The appearance of the timer depends on the flags, which needs more research.  \n```",
            "examples": [],
            "hash": "0x1115F16B8AB9E8BF",
            "ns": "HUD",
            "jhash": "0x135B3CD0",
            "manualHash": true
        },
        "0xE124FA80A759019C": {
            "name": "BEGIN_TEXT_COMMAND_CLEAR_PRINT",
            "params": [{ "name": "text", "type": "char*" }],
            "results": "void",
            "description": "```\nclears a print text command with this text  \n```",
            "examples": [],
            "hash": "0xE124FA80A759019C",
            "ns": "HUD",
            "aliases": ["0xE124FA80A759019C"],
            "jhash": "0x550665AE",
            "manualHash": true
        },
        "0xCC3FDDED67BCFC63": {
            "name": "_ALLOW_PAUSE_MENU_WHEN_DEAD_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "Allows opening the pause menu this frame, when the player is dead.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n\twhile true do\n\t\tN_0xcc3fdded67bcfc63()\n\t\tWait(0)\n\tend\nend)"
                }
            ],
            "hash": "0xCC3FDDED67BCFC63",
            "ns": "HUD",
            "aliases": ["0xCC3FDDED67BCFC63"],
            "jhash": "0x630CD8EE",
            "manualHash": true
        },
        "0xABA17D7CE615ADBF": {
            "name": "BEGIN_TEXT_COMMAND_BUSYSPINNER_ON",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "void",
            "description": "```\nInitializes the text entry for the the text next to a loading prompt. All natives for for building UI texts can be used here  \nBEGIN_TEXT_COMMAND_PRINT  \ne.g  \nvoid StartLoadingMessage(char *text, int spinnerType = 3)  \n\t{  \n_SET_LOADING_PROMPT_TEXT_ENTRY(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n_SHOW_LOADING_PROMPT(spinnerType);  \n\t}  \n/*OR*/  \n\tvoid ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)  \n\t{  \n_SET_LOADING_PROMPT_TEXT_ENTRY(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n_SHOW_LOADING_PROMPT(spinnerType);  \nWAIT(timeMs);  \n_REMOVE_LOADING_PROMPT();  \n\t}  \nThese are some localized strings used in the loading spinner.  \n\"PM_WAIT\"                   = Please Wait  \n\"CELEB_WPLYRS\"              = Waiting For Players.  \n\"CELL_SPINNER2\"             = Scanning storage.  \n\"ERROR_CHECKYACHTNAME\" = Registering your yacht's name. Please wait.  \n\"ERROR_CHECKPROFANITY\"   = Checking your text for profanity. Please wait.  \n\"FM_COR_AUTOD\"                        = Just spinner no text  \n\"FM_IHELP_WAT2\"                        = Waiting for other players  \n\"FM_JIP_WAITO\"                            = Game options are being set  \n\"FMMC_DOWNLOAD\"                    = Downloading  \n\"FMMC_PLYLOAD\"                         = Loading  \n\"FMMC_STARTTRAN\"                    = Launching session  \n\"HUD_QUITTING\"                           =  Quiting session  \n\"KILL_STRIP_IDM\"                         = Waiting for to accept  \n\"MP_SPINLOADING\"                      = Loading  \n```",
            "examples": [],
            "hash": "0xABA17D7CE615ADBF",
            "ns": "HUD",
            "aliases": [
                "0xABA17D7CE615ADBF",
                "_SET_LOADING_PROMPT_TEXT_ENTRY",
                "_BEGIN_TEXT_COMMAND_BUSY_STRING"
            ],
            "jhash": "0xCB7C8994",
            "manualHash": true
        },
        "0x94CF4AC034C9C986": {
            "name": "ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE",
            "params": [{ "name": "website", "type": "char*" }],
            "results": "void",
            "description": "```\nThis native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)  \n```",
            "examples": [],
            "hash": "0x94CF4AC034C9C986",
            "ns": "HUD",
            "aliases": ["_ADD_TEXT_COMPONENT_STRING2"],
            "jhash": "0xC736999E",
            "manualHash": true
        },
        "0x54CE8AC98E120CAB": {
            "name": "_BEGIN_TEXT_COMMAND_GET_WIDTH",
            "params": [{ "name": "text", "type": "char*" }],
            "results": "void",
            "description": "```\nBEGIN_TEXT_COMMAND_*\nExample:\n_BEGIN_TEXT_COMMAND_GET_WIDTH(\"NUMBER\");\nADD_TEXT_COMPONENT_FLOAT(69.420f, 2);\nfloat width = _END_TEXT_COMMAND_GET_WIDTH(1);\n```",
            "examples": [],
            "hash": "0x54CE8AC98E120CAB",
            "ns": "HUD",
            "aliases": [
                "_SET_TEXT_ENTRY_FOR_WIDTH",
                "_BEGIN_TEXT_COMMAND_WIDTH"
            ],
            "jhash": "0x51E7A037",
            "manualHash": true
        },
        "0x8509B634FBE7DA11": {
            "name": "BEGIN_TEXT_COMMAND_DISPLAY_HELP",
            "params": [{ "name": "inputType", "type": "char*" }],
            "results": "void",
            "description": "```\nUsed to be known as _SET_TEXT_COMPONENT_FORMAT  \n```",
            "examples": [],
            "hash": "0x8509B634FBE7DA11",
            "ns": "HUD",
            "aliases": ["_SET_TEXT_COMPONENT_FORMAT"],
            "jhash": "0xB245FC10",
            "manualHash": true
        },
        "0x8F9EE5687F8EECCD": {
            "name": "BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT",
            "params": [{ "name": "gxtEntry", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8F9EE5687F8EECCD",
            "ns": "HUD",
            "aliases": ["0x8F9EE5687F8EECCD", "_BEGIN_TEXT_COMMAND_TIMER"],
            "jhash": "0xBF855650",
            "manualHash": true
        },
        "0x60734CC207C9833C": {
            "name": "ALLOW_SONAR_BLIPS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x60734CC207C9833C",
            "ns": "HUD",
            "aliases": ["0x60734CC207C9833C"],
            "jhash": "0xE7E1E32B",
            "manualHash": true
        },
        "0x202709F4C58A0424": {
            "name": "BEGIN_TEXT_COMMAND_THEFEED_POST",
            "params": [
                {
                    "name": "text",
                    "type": "char*",
                    "description": "The text label to use."
                }
            ],
            "results": "void",
            "description": "Declares the entry type of a notification, for example \"STRING\".\nint ShowNotification(char \\*text)\n{\nBEGIN_TEXT_COMMAND_THEFEED_POST(\"STRING\");\nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);\nreturn \\_DRAW_NOTIFICATION(1, 1);\n}",
            "examples": [
                {
                    "lang": "lua",
                    "code": "BeginTextCommandThefeedPost(\"STRING\")\nAddTextComponentSubstringPlayerName(\"Hello \" .. GetPlayerName(PlayerId()) .. \".\")\nEndTextCommandThefeedPostTicker(true, true)"
                }
            ],
            "hash": "0x202709F4C58A0424",
            "ns": "HUD",
            "aliases": ["_SET_NOTIFICATION_TEXT_ENTRY"],
            "jhash": "0x574EE85C",
            "manualHash": true
        },
        "0x25FBB336DF1804CB": {
            "name": "BEGIN_TEXT_COMMAND_DISPLAY_TEXT",
            "params": [{ "name": "text", "type": "char*" }],
            "results": "void",
            "description": "```\nThe following were found in the decompiled script files:  \nSTRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3  \nESDOLLA   \nESMINDOLLA - cash (negative)  \nUsed to be known as _SET_TEXT_ENTRY  \n```",
            "examples": [],
            "hash": "0x25FBB336DF1804CB",
            "ns": "HUD",
            "aliases": ["_SET_TEXT_ENTRY"],
            "jhash": "0x3E35563E",
            "manualHash": true
        },
        "0x0A24DA3A41B718F5": {
            "name": "BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED",
            "params": [
                {
                    "name": "labelName",
                    "type": "char*",
                    "description": "Text entry name. This can be created using [`AddTextEntry`](#\\_0x32CA01C3)."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Create new text entry\nAddTextEntry('TEST_LABEL', 'Hello world.')\n\n-- Draw help message\nBeginTextCommandDisplayHelp('TEST_LABEL')\nEndTextCommandDisplayHelp(0, false, true, -1)\n\n-- Test if the message has been displayed\nBeginTextCommandIsThisHelpMessageBeingDisplayed(\"TEST_LABEL\")\nlocal isDisplayed = EndTextCommandIsThisHelpMessageBeingDisplayed(0)"
                }
            ],
            "hash": "0x0A24DA3A41B718F5",
            "ns": "HUD",
            "aliases": ["0x0A24DA3A41B718F5"],
            "jhash": "0x00E20F2D",
            "manualHash": true
        },
        "0x853648FD1063A213": {
            "name": "BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED",
            "params": [{ "name": "text", "type": "char*" }],
            "results": "void",
            "description": "```\nnothin doin.   \nBOOL Message(char* text)  \n\t{  \nBEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \nreturn END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();  \n\t}  \n```",
            "examples": [],
            "hash": "0x853648FD1063A213",
            "ns": "HUD",
            "aliases": ["0x853648FD1063A213"],
            "jhash": "0xDD524A11",
            "manualHash": true
        },
        "0x521FB041D93DD0E4": {
            "name": "_BEGIN_TEXT_COMMAND_LINE_COUNT",
            "params": [{ "name": "entry", "type": "char*" }],
            "results": "void",
            "description": "```\nget's line count  \nint GetLineCount(char *text, float x, float y)  \n\t{  \n_BEGIN_TEXT_COMMAND_LINE_COUNT(\"STRING\");  \n                ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \nreturn _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);  \n\t}  \n```",
            "examples": [],
            "hash": "0x521FB041D93DD0E4",
            "ns": "HUD",
            "aliases": ["_SET_TEXT_GXT_ENTRY"],
            "jhash": "0x94B82066",
            "manualHash": true
        },
        "0x23D69E0465570028": {
            "name": "_BEGIN_TEXT_COMMAND_OBJECTIVE",
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x23D69E0465570028",
            "ns": "HUD",
            "aliases": ["0x23D69E0465570028"],
            "jhash": "0x0E103475",
            "manualHash": true
        },
        "0xF9113A30DE5C6670": {
            "name": "BEGIN_TEXT_COMMAND_SET_BLIP_NAME",
            "params": [
                {
                    "name": "textLabel",
                    "type": "char*",
                    "description": "The text label to set."
                }
            ],
            "results": "void",
            "description": "Starts a text command to change the name of a blip displayed in the pause menu.\n\nThis should be paired with [`END_TEXT_COMMAND_SET_BLIP_NAME`](#\\_0xBC38B49BCB83BC9B), once adding all required text components.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- creates a blip called 'Food for me!' at 0.0, 0.0, 0.0\nAddTextEntry('MYBLIP', 'Food for ~a~!')\n\nlocal blip = AddBlipForCoord(0.0, 0.0, 0.0)\nBeginTextCommandSetBlipName('MYBLIP')\nAddTextComponentSubstringPlayerName('me')\nEndTextCommandSetBlipName(blip)"
                }
            ],
            "hash": "0xF9113A30DE5C6670",
            "ns": "HUD",
            "jhash": "0xF4C211F6",
            "manualHash": true
        },
        "0x10D373323E5B9C0D": {
            "name": "BUSYSPINNER_OFF",
            "params": [],
            "results": "void",
            "description": "```\nRemoves the loading prompt at the bottom right of the screen.\n```",
            "examples": [],
            "hash": "0x10D373323E5B9C0D",
            "ns": "HUD",
            "aliases": ["0x10D373323E5B9C0D", "_REMOVE_LOADING_PROMPT"],
            "jhash": "0x94119534",
            "manualHash": true
        },
        "0xB87A37EEB7FAA67D": {
            "name": "BEGIN_TEXT_COMMAND_PRINT",
            "params": [{ "name": "GxtEntry", "type": "char*" }],
            "results": "void",
            "description": "```\nUsed to be known as _SET_TEXT_ENTRY_2  \nvoid ShowSubtitle(char *text)  \n{  \n\tBEGIN_TEXT_COMMAND_PRINT(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\tEND_TEXT_COMMAND_PRINT(2000, 1);  \n}  \n```",
            "examples": [],
            "hash": "0xB87A37EEB7FAA67D",
            "ns": "HUD",
            "aliases": ["_SET_TEXT_ENTRY_2"],
            "jhash": "0xF42C43C7",
            "manualHash": true
        },
        "0x2A179DF17CCF04CD": {
            "name": "CLEAR_ADDITIONAL_TEXT",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A179DF17CCF04CD",
            "ns": "HUD",
            "jhash": "0x518141E0",
            "manualHash": true
        },
        "0xB2A592B04648A9CB": {
            "name": "BUSYSPINNER_IS_DISPLAYING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB2A592B04648A9CB",
            "ns": "HUD",
            "aliases": ["0xB2A592B04648A9CB"],
            "annotations": { "cs_type": "Pickup" },
            "jhash": "0x3AF34DEF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6178F68A87A4D3A0": {
            "name": "CLEAR_ALL_HELP_MESSAGES",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6178F68A87A4D3A0",
            "ns": "HUD",
            "jhash": "0x9E5D9198",
            "manualHash": true
        },
        "0x9D292F73ADBD9313": {
            "name": "CLEAR_BRIEF",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9D292F73ADBD9313",
            "ns": "HUD",
            "jhash": "0x9F75A929",
            "manualHash": true
        },
        "0xD422FCC5F239A915": {
            "name": "BUSYSPINNER_IS_ON",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD422FCC5F239A915",
            "ns": "HUD",
            "aliases": [
                "0xD422FCC5F239A915",
                "_IS_LOADING_PROMPT_BEING_DISPLAYED"
            ],
            "jhash": "0xB8B3A5D0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD12882D3FF82BF11": {
            "name": "_CLEAR_ALL_BLIP_ROUTES",
            "params": [],
            "results": "void",
            "description": "Clears all active blip routes that have been set with [`SetBlipRoute`](#\\_0x3E160C90).",
            "examples": [],
            "hash": "0xD12882D3FF82BF11",
            "ns": "HUD",
            "aliases": ["0xD12882D3FF82BF11"],
            "manualHash": true
        },
        "0x0772DF77852C2E30": {
            "name": "CHANGE_FAKE_MP_CASH",
            "params": [
                { "name": "cash", "type": "int" },
                { "name": "bank", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDisplays cash change notifications on HUD.  \n```",
            "examples": [],
            "hash": "0x0772DF77852C2E30",
            "ns": "HUD",
            "aliases": [
                "_SET_SINGLEPLAYER_HUD_CASH",
                "_SET_PLAYER_CASH_CHANGE"
            ],
            "jhash": "0xE319F90B",
            "manualHash": true
        },
        "0xE6DE0561D9232A64": {
            "name": "CLEAR_GPS_CUSTOM_ROUTE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE6DE0561D9232A64",
            "ns": "HUD",
            "aliases": ["0xE6DE0561D9232A64"],
            "jhash": "0xCF2E3E24",
            "manualHash": true
        },
        "0x67EEDEA1B9BAFD94": {
            "name": "CLEAR_GPS_MULTI_ROUTE",
            "params": [],
            "results": "void",
            "description": "Does the same as [`SET_GPS_MULTI_ROUTE_RENDER(false)`](#\\_0x3DDA37128DD1ACA8)",
            "examples": [],
            "hash": "0x67EEDEA1B9BAFD94",
            "ns": "HUD",
            "aliases": ["0x67EEDEA1B9BAFD94"],
            "jhash": "0x0D9969E4",
            "manualHash": true
        },
        "0x7792424AA0EAC32E": {
            "name": "CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7792424AA0EAC32E",
            "ns": "HUD",
            "aliases": ["0x7792424AA0EAC32E"],
            "jhash": "0x2F9A309C",
            "manualHash": true
        },
        "0x7AA5B4CE533C858B": {
            "name": "CLEAR_GPS_RACE_TRACK",
            "params": [],
            "results": "void",
            "description": "```\nDoes the same as SET_RACE_TRACK_RENDER(false);\n```",
            "examples": [],
            "hash": "0x7AA5B4CE533C858B",
            "ns": "HUD",
            "jhash": "0x40C59829",
            "manualHash": true
        },
        "0x50085246ABD3FEFA": {
            "name": "CLEAR_FLOATING_HELP",
            "params": [
                { "name": "hudIndex", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x50085246ABD3FEFA",
            "ns": "HUD",
            "jhash": "0xB181F88F",
            "manualHash": true
        },
        "0x21986729D6A3A830": {
            "name": "CLEAR_GPS_FLAGS",
            "params": [],
            "results": "void",
            "description": "```\nClears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.  \nDoesn't seem like the flags are actually read by the game at all.  \n```",
            "examples": [],
            "hash": "0x21986729D6A3A830",
            "ns": "HUD",
            "jhash": "0x056AFCE6",
            "manualHash": true
        },
        "0x8DFCED7A656F8802": {
            "name": "CLEAR_HELP",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8DFCED7A656F8802",
            "ns": "HUD",
            "jhash": "0xE6D85741",
            "manualHash": true
        },
        "0xFF4FB7C8CDFA3DA7": {
            "name": "CLEAR_GPS_PLAYER_WAYPOINT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFF4FB7C8CDFA3DA7",
            "ns": "HUD",
            "jhash": "0x0B9C7FC2",
            "manualHash": true
        },
        "0xCC33FA791322B9D9": {
            "name": "CLEAR_PRINTS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCC33FA791322B9D9",
            "ns": "HUD",
            "jhash": "0x216CB1C5",
            "manualHash": true
        },
        "0x5E62BE5DC58E9E06": {
            "name": "CLEAR_PED_IN_PAUSE_MENU",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5E62BE5DC58E9E06",
            "ns": "HUD",
            "jhash": "0x28058ACF",
            "manualHash": true
        },
        "0x2CEA2839313C09AC": {
            "name": "CLEAR_SMALL_PRINTS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2CEA2839313C09AC",
            "ns": "HUD",
            "jhash": "0xA869A238",
            "manualHash": true
        },
        "0x2708FC083123F9FF": {
            "name": "_CLEAR_RACE_GALLERY_BLIPS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2708FC083123F9FF",
            "ns": "HUD",
            "aliases": ["0x2708FC083123F9FF"],
            "jhash": "0xCBEC9369",
            "manualHash": true
        },
        "0x1AC8F4AD40E22127": {
            "name": "_CLOSE_MULTIPLAYER_CHAT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1AC8F4AD40E22127",
            "ns": "HUD",
            "aliases": ["_ABORT_TEXT_CHAT"],
            "manualHash": true
        },
        "0xB57D8DD645CFA2CF": {
            "name": "CLEAR_REMINDER_MESSAGE",
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xB57D8DD645CFA2CF",
            "ns": "HUD",
            "aliases": ["0xB57D8DD645CFA2CF"],
            "jhash": "0x5BBCC934",
            "manualHash": true
        },
        "0x6D3465A73092F0E6": {
            "name": "DISABLE_FRONTEND_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6D3465A73092F0E6",
            "ns": "HUD",
            "jhash": "0xD86A029E",
            "manualHash": true
        },
        "0xCF708001E1E536DD": {
            "name": "CLEAR_THIS_PRINT",
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "```\np0: found arguments in the b617d scripts: pastebin.com/X5akCN7z  \n```",
            "examples": [],
            "hash": "0xCF708001E1E536DD",
            "ns": "HUD",
            "jhash": "0x06878327",
            "manualHash": true
        },
        "0xBFEFE3321A3F5015": {
            "name": "CREATE_FAKE_MP_GAMER_TAG",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped that the fake gamer tag will be attached to."
                },
                {
                    "name": "username",
                    "type": "char*",
                    "description": "The name displayed on the gamer tag."
                },
                {
                    "name": "crewIsPrivate",
                    "type": "BOOL",
                    "description": "If the crew is private. Public crews have a pointed end cap, private crews do not."
                },
                {
                    "name": "crewIsRockstar",
                    "type": "BOOL",
                    "description": "If the crew is a Rockstar crew. Rockstar crews include a Rockstar logo before the name."
                },
                {
                    "name": "crewName",
                    "type": "char*",
                    "description": "The name of the crew."
                },
                {
                    "name": "crewRank",
                    "type": "int",
                    "description": "The rank from 1-5 that the player is within the crew. Use 0 if the player is the founder of the crew. Only relevant for private crews."
                }
            ],
            "results": "int",
            "description": "As per the name, this native creates a \"fake\" gamer tag that is attached to a specific ped.\nUnlike \"real\" gamer tags, you cannot set the crew colour of these gamer tags.\n\nTo create gamer tags for actual players and for more gamer tag information, see [CREATE_MP_GAMER_TAG_WITH_CREW_COLOR](#\\_0x6DD05E9D83EFA4C9).",
            "examples": [],
            "hash": "0xBFEFE3321A3F5015",
            "ns": "HUD",
            "aliases": ["0xBFEFE3321A3F5015", "_CREATE_MP_GAMER_TAG"],
            "jhash": "0xF5CD2AA4",
            "manualHash": true,
            "resultsDescription": "The ID of the new gamer tag."
        },
        "0xD2B32BE3FC1626C6": {
            "name": "CLOSE_SOCIAL_CLUB_MENU",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2B32BE3FC1626C6",
            "ns": "HUD",
            "aliases": ["0xD2B32BE3FC1626C6"],
            "jhash": "0x5F86AA39",
            "manualHash": true
        },
        "0x1DB21A44B09E8BA3": {
            "name": "_DISABLE_MULTIPLAYER_CHAT",
            "params": [{ "name": "disable", "type": "BOOL" }],
            "results": "void",
            "description": "If true is passed, the player won't be able to open the multiplayer chat",
            "examples": [],
            "hash": "0x1DB21A44B09E8BA3",
            "ns": "HUD",
            "aliases": ["_SET_TEXT_CHAT_UNK"],
            "manualHash": true
        },
        "0x276B6CE369C33678": {
            "name": "DISPLAY_AREA_NAME",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x276B6CE369C33678",
            "ns": "HUD",
            "jhash": "0x489FDD41",
            "manualHash": true
        },
        "0x96DEC8D5430208B7": {
            "name": "DISPLAY_CASH",
            "params": [{ "name": "display", "type": "BOOL" }],
            "results": "void",
            "description": "```\n\"DISPLAY_CASH(true);\" makes the cash amount render on the screen when appropriate  \n\"DISPLAY_CASH(false);\" disables cash amount rendering  \n```",
            "examples": [],
            "hash": "0x96DEC8D5430208B7",
            "ns": "HUD",
            "jhash": "0x0049DF83",
            "manualHash": true
        },
        "0x6DD05E9D83EFA4C9": {
            "name": "CREATE_MP_GAMER_TAG_WITH_CREW_COLOR",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The local player ID to assign the gamer tag to."
                },
                {
                    "name": "username",
                    "type": "char*",
                    "description": "The name displayed on the gamer tag."
                },
                {
                    "name": "crewIsPrivate",
                    "type": "BOOL",
                    "description": "If the crew is private. Public crews have a pointed end cap, private crews do not."
                },
                {
                    "name": "crewIsRockstar",
                    "type": "BOOL",
                    "description": "If the crew is a Rockstar crew. Rockstar crews include a Rockstar logo before the name."
                },
                {
                    "name": "crewName",
                    "type": "char*",
                    "description": "The name of the crew."
                },
                {
                    "name": "crewRank",
                    "type": "int",
                    "description": "The rank from 1-5 that the player is within the crew. Use 0 if the player is the founder of the crew. Only relevant for private crews."
                },
                {
                    "name": "crewR",
                    "type": "int",
                    "description": "Red component of the crew colour."
                },
                {
                    "name": "crewG",
                    "type": "int",
                    "description": "Green component of the crew colour."
                },
                {
                    "name": "crewB",
                    "type": "int",
                    "description": "Blue component of the crew colour."
                }
            ],
            "results": "void",
            "description": "Creates a gamer tag for the specified local player ID, automatically attached to the player's current ped.\nThe created gamer tag will have the same ID as the player. You can use [IS_MP_GAMER_TAG_ACTIVE](#\\_0x4E929E7A5796FD26) to check if a gamer tag already exists for a player.\nAfter the gamer tag is created, all components will be set as invisible. Use [SET_MP_GAMER_TAG_VISIBILITY](#\\_0x63BB75ABEDC1F6A0) to change the visibility of individual components or [\\_SET_MP_GAMER_TAG_VISIBILITY_ALL](#\\_0xEE76FF7E6A0166B0) to set all of them at once.\n\nTo create a gamer tag for a ped that is not a player, see [CREATE_FAKE_MP_GAMER_TAG](#\\_0xBFEFE3321A3F5015).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerId = PlayerId() -- you can use any local player ID here\n\n-- clear any already existing gamer tag associated with this player\nif IsMpGamerTagActive(playerId) then\n\tRemoveMpGamerTag(playerId)\n\n\t-- wait until the gamer tag actually becomes free\n\trepeat Wait(0) until IsMpGamerTagFree(playerId)\nend\n\n-- create the gamer tag\nCreateMpGamerTagWithCrewColor(playerId, \"jaymoo\", false, true, \"RSG\", 0, 200, 0, 200)\n\n-- set the name, crew and typing indicator components as visible\nSetMpGamerTagVisibility(playerId, 0, true)\nSetMpGamerTagVisibility(playerId, 1, true)\nSetMpGamerTagVisibility(playerId, 16, true)"
                }
            ],
            "hash": "0x6DD05E9D83EFA4C9",
            "ns": "HUD",
            "aliases": [
                "0x6DD05E9D83EFA4C9",
                "_CREATE_MP_GAMER_TAG_COLOR",
                "_SET_MP_GAMER_TAG_COLOR",
                "_CREATE_MP_GAMER_TAG_FOR_NET_PLAYER"
            ],
            "jhash": "0xC969F2D0",
            "manualHash": true
        },
        "0xD8E694757BCEA8E9": {
            "name": "_DELETE_WAYPOINT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD8E694757BCEA8E9",
            "ns": "HUD",
            "aliases": ["0xD8E694757BCEA8E9"],
            "jhash": "0x62BABF2C",
            "manualHash": true
        },
        "0x7669F9E39DC17063": {
            "name": "_DISPLAY_HUD_WHEN_DEAD_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "Enables drawing some hud components, such as help labels, this frame, when the player is dead.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n\twhile true do\n\t\tN_0x7669f9e39dc17063()\n\t\tWait(0)\n\tend\nend)"
                }
            ],
            "hash": "0x7669F9E39DC17063",
            "ns": "HUD",
            "aliases": ["0x7669F9E39DC17063"],
            "jhash": "0xC380AC85",
            "manualHash": true
        },
        "0x960C9FF8F616E41C": {
            "name": "DISPLAY_HELP_TEXT_THIS_FRAME",
            "params": [
                { "name": "message", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThe messages are localized strings.  \nExamples:  \n\"No_bus_money\"  \n\"Enter_bus\"  \n\"Tour_help\"  \n\"LETTERS_HELP2\"  \n\"Dummy\"  \n**The bool appears to always be false (if it even is a bool, as it's represented by a zero)**  \n--------  \np1 doesn't seem to make a difference, regardless of the state it's in.   \npicture of where on the screen this is displayed?  \n```",
            "examples": [],
            "hash": "0x960C9FF8F616E41C",
            "ns": "HUD",
            "jhash": "0x18E3360A",
            "manualHash": true
        },
        "0xA5E78BA2B1331C55": {
            "name": "DISPLAY_AMMO_THIS_FRAME",
            "params": [{ "name": "display", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA5E78BA2B1331C55",
            "ns": "HUD",
            "jhash": "0x60693CEE",
            "manualHash": true
        },
        "0x15B8ECF844EE67ED": {
            "name": "DOES_PED_HAVE_AI_BLIP",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns whether the ped's blip is controlled by the game.   \nIt's the default blip you can see on enemies during freeroam in singleplayer (the one that fades out quickly).  \n```",
            "examples": [],
            "hash": "0x15B8ECF844EE67ED",
            "ns": "HUD",
            "jhash": "0x3BE1257F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x82CEDC33687E1F50": {
            "name": "DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "the toggle boolean"
                }
            ],
            "results": "void",
            "description": "Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.\nDoesn't need to be called every frame.\nPreview: https://i.imgur.com/DfqKWfJ.png\nMake sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.",
            "examples": [],
            "hash": "0x82CEDC33687E1F50",
            "ns": "HUD",
            "aliases": ["0x82CEDC33687E1F50"],
            "jhash": "0x2F28F0A6",
            "manualHash": true
        },
        "0xA6294919E56FF02A": {
            "name": "DISPLAY_HUD",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf Hud should be displayed  \n```",
            "examples": [],
            "hash": "0xA6294919E56FF02A",
            "ns": "HUD",
            "jhash": "0xD10E4E31",
            "manualHash": true
        },
        "0x6D14BFDC33B34F55": {
            "name": "DONT_TILT_MINIMAP_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "```\nWhen calling this, the current frame will have the players \"arrow icon\" be focused on the dead center of the radar.\n```",
            "examples": [],
            "hash": "0x6D14BFDC33B34F55",
            "ns": "HUD",
            "aliases": ["_CENTER_PLAYER_ON_RADAR_THIS_FRAME"],
            "jhash": "0x334EFD46",
            "manualHash": true
        },
        "0x73115226F4814E62": {
            "name": "DISPLAY_SNIPER_SCOPE_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "```\nDisplays the crosshair for this frame.  \n```",
            "examples": [],
            "hash": "0x73115226F4814E62",
            "ns": "HUD",
            "jhash": "0xBC6C73CB",
            "manualHash": true
        },
        "0x402F9ED62087E898": {
            "name": "DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x402F9ED62087E898",
            "ns": "HUD",
            "aliases": ["0x402F9ED62087E898"],
            "jhash": "0xC47AB1B0",
            "manualHash": true
        },
        "0xDD2238F57B977751": {
            "name": "DOES_BLIP_HAVE_GPS_ROUTE",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDD2238F57B977751",
            "ns": "HUD",
            "aliases": ["0xDD2238F57B977751"],
            "jhash": "0x3E47F357",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBD12F8228410D9B4": {
            "name": "END_TEXT_COMMAND_BUSYSPINNER_ON",
            "params": [{ "name": "busySpinnerType", "type": "int" }],
            "results": "void",
            "description": "```\nenum eBusySpinnerType\n{\n\tBUSY_SPINNER_LEFT,\n\tBUSY_SPINNER_LEFT_2,\n\tBUSY_SPINNER_LEFT_3,\n\tBUSY_SPINNER_SAVE,\n\tBUSY_SPINNER_RIGHT,\n};\n```",
            "examples": [],
            "hash": "0xBD12F8228410D9B4",
            "ns": "HUD",
            "aliases": [
                "0xBD12F8228410D9B4",
                "_SHOW_LOADING_PROMPT",
                "_END_TEXT_COMMAND_BUSY_STRING"
            ],
            "jhash": "0x903F5EE4",
            "manualHash": true
        },
        "0xCD015E5BB0D96A57": {
            "name": "END_TEXT_COMMAND_DISPLAY_TEXT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "void",
            "description": "```\nAfter applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.  \n```\n\n```\nNativeDB Added Parameter 3: int p2\n```",
            "examples": [],
            "hash": "0xCD015E5BB0D96A57",
            "ns": "HUD",
            "aliases": ["_DRAW_TEXT"],
            "jhash": "0x6F8350CE",
            "manualHash": true
        },
        "0xA0EBB943C300E693": {
            "name": "DISPLAY_RADAR",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf Minimap / Radar should be displayed.\n```",
            "examples": [],
            "hash": "0xA0EBB943C300E693",
            "ns": "HUD",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x52816BD4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x238FFE5C7B0498A6": {
            "name": "END_TEXT_COMMAND_DISPLAY_HELP",
            "params": [
                {
                    "name": "shape",
                    "type": "int",
                    "description": "0 for a normal rectangle shape, 1 and 2 has rounded edges, and can be used for floating help text hud component `FLOATING_HELP_TEXT_1` and `FLOATING_HELP_TEXT_2`. Use 1 for `FLOATING_HELP_TEXT_1` and 2 for `FLOATING_HELP_TEXT_2`, otherwise the help text will be reset to a normal help text on the top left corner on your screen."
                },
                {
                    "name": "loop",
                    "type": "BOOL",
                    "description": "If this is true, the message will stay forever unless you call [`CLEAR_ALL_HELP_MESSAGES`](#\\_0x6178F68A87A4D3A0)."
                },
                {
                    "name": "beep",
                    "type": "BOOL",
                    "description": "If this is true, the beeping sound will play. Beeping sound name is `INFO` in sound set `HUD_FRONTEND_DEFAULT_SOUNDSET`."
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "Duration in ms of how long this help message should display for. -1 for default."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Help texts support text formatting, check out https://docs.fivem.net/docs/game-references/text-formatting/\nAddTextEntry('HelpMsg', 'Press ~INPUT_CONTEXT~ to do something.')\n\nBeginTextCommandDisplayHelp('HelpMsg')\nEndTextCommandDisplayHelp(0, false, true, -1)\n\n\n\n-- Shows a floating help text which uses FLOATING_HELP_TEXT_1 hud component.\nAddTextEntry('FloatingHelpText', 'Press E to show respect.')\nSetFloatingHelpTextWorldPosition(0, vector3(100, 100, 100))\nSetFloatingHelpTextStyle(0, true, 2, -1, 3, 0)\nBeginTextCommandDisplayHelp('FloatingHelpText')\nEndTextCommandDisplayHelp(1, false, false, -1)"
                }
            ],
            "hash": "0x238FFE5C7B0498A6",
            "ns": "HUD",
            "aliases": ["_DISPLAY_HELP_TEXT_FROM_STRING_LABEL"],
            "jhash": "0xB59B530D",
            "manualHash": true
        },
        "0x1C7302E725259789": {
            "name": "DOES_TEXT_BLOCK_EXIST",
            "params": [{ "name": "gxt", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1C7302E725259789",
            "ns": "HUD",
            "jhash": "0x96F74838",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x85F061DA64ED2F67": {
            "name": "_END_TEXT_COMMAND_GET_WIDTH",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "float",
            "description": "```\nEND_TEXT_COMMAND_*\nIn scripts font most of the time is passed as 1.\nUse _BEGIN_TEXT_GET_COMMAND_GET_WIDTH\nparam is not font from what i've tested\n```",
            "examples": [],
            "hash": "0x85F061DA64ED2F67",
            "ns": "HUD",
            "aliases": ["_GET_TEXT_SCREEN_WIDTH"],
            "jhash": "0xD12A643A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA6DB27D19ECBB7DA": {
            "name": "DOES_BLIP_EXIST",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA6DB27D19ECBB7DA",
            "ns": "HUD",
            "jhash": "0xAE92DD96",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x10BDDBFC529428DD": {
            "name": "END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED",
            "params": [
                {
                    "name": "hudIndex",
                    "type": "int",
                    "description": "The hud index for help message."
                }
            ],
            "results": "BOOL",
            "description": "Returns whether a specific help message is being displayed or not.\n\n```cpp\nenum HudIndexes {\n    HELP_TEXT = 0,\n    FLOATING_HELP_TEXT_1 = 1,\n    FLOATING_HELP_TEXT_2 = 2,\n}\n```",
            "examples": [],
            "hash": "0x10BDDBFC529428DD",
            "ns": "HUD",
            "aliases": ["0x10BDDBFC529428DD"],
            "jhash": "0xF63A13EC",
            "manualHash": true,
            "resultsDescription": "`true`: Indicates if the specific help message has been displayed.\\\n`false`: Indicates that the specific help message is still being displayed."
        },
        "0xFCC75460ABA29378": {
            "name": "END_TEXT_COMMAND_CLEAR_PRINT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFCC75460ABA29378",
            "ns": "HUD",
            "aliases": ["0xFCC75460ABA29378"],
            "jhash": "0x67785AF2",
            "manualHash": true
        },
        "0xAC09CA973C564252": {
            "name": "DOES_TEXT_LABEL_EXIST",
            "params": [{ "name": "gxt", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nChecks if the passed gxt name exists in the game files.  \n```",
            "examples": [],
            "hash": "0xAC09CA973C564252",
            "ns": "HUD",
            "jhash": "0x6ECAE560",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A9BA1AB3E237613": {
            "name": "END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8A9BA1AB3E237613",
            "ns": "HUD",
            "aliases": ["0x8A9BA1AB3E237613"],
            "jhash": "0x672EFB45",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA86911979638106F": {
            "name": "END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT",
            "params": [
                {
                    "name": "buttonIndex",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" },
                    "description": "Index of the instructional button"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA86911979638106F",
            "ns": "HUD",
            "aliases": ["0xA86911979638106F", "_END_TEXT_COMMAND_TIMER"],
            "jhash": "0x6E7FDA1C",
            "manualHash": true
        },
        "0xBC38B49BCB83BC9B": {
            "name": "END_TEXT_COMMAND_SET_BLIP_NAME",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to change the name for."
                }
            ],
            "results": "void",
            "description": "Finalizes a text command started with [`BEGIN_TEXT_COMMAND_SET_BLIP_NAME`](#\\_0xF9113A30DE5C6670), setting the name\nof the specified blip.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- creates a blip called 'Food for me!' at 0.0, 0.0, 0.0\nAddTextEntry('MYBLIP', 'Food for ~a~!')\n\nlocal blip = AddBlipForCoords(0.0, 0.0, 0.0)\nBeginTextCommandSetBlipName('MYBLIP')\nAddTextComponentSubstringPlayerName('me')\nEndTextCommandSetBlipName(blip)"
                }
            ],
            "hash": "0xBC38B49BCB83BC9B",
            "ns": "HUD",
            "jhash": "0xE8E59820",
            "manualHash": true
        },
        "0x9040DFB09BE75706": {
            "name": "_END_TEXT_COMMAND_LINE_COUNT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "int",
            "description": "```\nEND_TEXT_COMMAND_*\nDetermines how many lines the text string will use when drawn on screen.\nMust use 0x521FB041D93DD0E4 for setting up\n```",
            "examples": [],
            "hash": "0x9040DFB09BE75706",
            "ns": "HUD",
            "aliases": [
                "0x9040DFB09BE75706",
                "_GET_TEXT_SCREEN_LINE_COUNT",
                "_END_TEXT_COMMAND_GET_LINE_COUNT"
            ],
            "jhash": "0xAA318785",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D77056A530643F6": {
            "name": "END_TEXT_COMMAND_PRINT",
            "params": [
                { "name": "duration", "type": "int" },
                { "name": "drawImmediately", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nDraws the subtitle at middle center of the screen.  \nint duration = time in milliseconds to show text on screen before disappearing  \ndrawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished  \nUsed to be known as _DRAW_SUBTITLE_TIMED  \n```",
            "examples": [],
            "hash": "0x9D77056A530643F6",
            "ns": "HUD",
            "aliases": ["_DRAW_SUBTITLE_TIMED"],
            "jhash": "0x38F82261",
            "manualHash": true
        },
        "0xCFDBDF5AE59BA0F4": {
            "name": "_END_TEXT_COMMAND_OBJECTIVE",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCFDBDF5AE59BA0F4",
            "ns": "HUD",
            "aliases": ["0xCFDBDF5AE59BA0F4"],
            "jhash": "0x2944A6C5",
            "manualHash": true
        },
        "0x8EFCCF6EC66D85E4": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP",
            "params": [
                { "name": "chTitle", "type": "char*" },
                { "name": "clanTxd", "type": "char*" },
                { "name": "clanTxn", "type": "char*" },
                { "name": "isImportant", "type": "BOOL" },
                { "name": "showSubtitle", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x8EFCCF6EC66D85E4",
            "ns": "HUD",
            "aliases": ["0x8EFCCF6EC66D85E4"],
            "jhash": "0x76FB0F21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA295B6F28BD587D": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_AWARD",
            "params": [
                {
                    "name": "textureDict",
                    "type": "char*",
                    "description": "The texture dictionary name for the icon on the left."
                },
                {
                    "name": "textureName",
                    "type": "char*",
                    "description": "The texture name for the icon on the left."
                },
                {
                    "name": "rpBonus",
                    "type": "int",
                    "description": "The gained \"RP\" amount that will be displayed on the right side of the notification."
                },
                {
                    "name": "colorOverlay",
                    "type": "int",
                    "description": "Hudcolor overlay that gets applied on top of the notification, conflicts with text/image visibility in most cases if set to something other than 0."
                },
                {
                    "name": "titleLabel",
                    "type": "char*",
                    "description": "The label that will be displayed at the top of the notification (title)."
                }
            ],
            "results": "int",
            "description": "Shows an \"award\" notification above the minimap, lua example result:\n\n![](https://i.imgur.com/e2DNaKX.png)\n\nOld description:\n\n```\nExample:  \nUI::_SET_NOTIFICATION_TEXT_ENTRY(\"HUNT\");  \nUI::_0xAA295B6F28BD587D(\"Hunting\", \"Hunting_Gold_128\", 0, 109, \"HUD_MED_UNLKED\");  \n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n    -- Get the ped headshot image.\n    local handle = RegisterPedheadshot(PlayerPedId())\n    while not IsPedheadshotReady(handle) or not IsPedheadshotValid(handle) do\n        Citizen.Wait(0)\n    end\n    local txd = GetPedheadshotTxdString(handle)\n\n    -- Add the notification text, the more text you add the smaller the font\n    -- size will become (text is forced on 1 line only), so keep this short!\n    BeginTextCommandThefeedPost(\"STRING\")\n    AddTextComponentSubstringPlayerName(\"You won the match!\")\n\n    -- Draw the notification\n    EndTextCommandThefeedPostAward(txd, txd, 200, 0, \"FM_GEN_UNLOCK\")\n    \n    -- Cleanup after yourself!\n    UnregisterPedheadshot(handle)\nend)"
                }
            ],
            "hash": "0xAA295B6F28BD587D",
            "ns": "HUD",
            "aliases": [
                "0xAA295B6F28BD587D",
                "_DRAW_NOTIFICATION_ICON",
                "_DRAW_NOTIFICATION_AWARD"
            ],
            "jhash": "0x02DED2B8",
            "manualHash": true,
            "resultsDescription": "The notification handle."
        },
        "0x97C9E4E7024A8F2C": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_CREWTAG",
            "params": [
                { "name": "crewTypeIsPrivate", "type": "BOOL" },
                { "name": "crewTagContainsRockstar", "type": "BOOL" },
                { "name": "crewTag", "type": "int*" },
                { "name": "rank", "type": "int" },
                { "name": "hasFounderStatus", "type": "BOOL" },
                { "name": "isImportant", "type": "BOOL" },
                { "name": "clanHandle", "type": "int" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "int",
            "description": "```\nThis function and the one below it are for after you receive an invite, not sending it.  \np0 = 1 or 0  \nnothin doin.   \nint invite(Player player)  \n\t{  \nint iVar2, iVar3;  \nnetworkHandleMgr handle;  \nNETWORK_HANDLE_FROM_PLAYER(player, &handle.netHandle, 13);  \nnetworkClanMgr clan;  \nchar *playerName = GET_PLAYER_NAME(player);  \n_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n_SET_NOTIFACTION_COLOR_NEXT(0);  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);  \nif (NETWORK_CLAN_PLAYER_GET_DESC(&clan, 35, &handle.netHandle))  \n{  \n\tiVar2 = 0;  \n\tif (ARE_STRINGS_EQUAL(clan.unk22, \"Leader\") && clan.unk30 == 0)  \n\t{  \niVar2 = 1;  \n\t}  \n\tif (clan.unk21 > 0)  \n\t{  \niVar3 = 0;  \n\t}  \n\telse  \n\t{  \niVar3 = 1;  \n\t}  \n\tBOOL unused = _0x54E79E9C(&clan.clanHandle, 35);  \n\treturn _DRAW_NOTIFICATION_APARTMENT_INVITE(iVar3, 0 /*unused*/, &clan.unk17, clan.unk30, iVar2, 0, clan.clanHandle, 0, 0, 0);  \n}  \n\t}  \n```",
            "examples": [],
            "hash": "0x97C9E4E7024A8F2C",
            "ns": "HUD",
            "aliases": [
                "0x97C9E4E7024A8F2C",
                "_NOTIFICATION_SEND_APARTMENT_INVITE",
                "_DRAW_NOTIFICATION_APARTMENT_INVITE"
            ],
            "jhash": "0xA9CCEF66",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x137BC35589E34E1E": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME",
            "params": [
                { "name": "crewTypeIsPrivate", "type": "BOOL" },
                { "name": "crewTagContainsRockstar", "type": "BOOL" },
                { "name": "crewTag", "type": "int*" },
                { "name": "rank", "type": "int" },
                { "name": "isLeader", "type": "BOOL" },
                { "name": "isImportant", "type": "BOOL" },
                { "name": "clanHandle", "type": "int" },
                { "name": "gamerStr", "type": "char*" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "int",
            "description": "```\np0 = 1 or 0  \ncrashes my game...  \nthis is for sending invites to network players - jobs/apartment/ect...   \nreturn notification handle  \nint invite(Player player)  \n\t{  \nnetworkHandleMgr netHandle;  \nnetworkClanMgr clan;  \nchar *playerName = GET_PLAYER_NAME(player);  \n_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n_SET_NOTIFACTION_COLOR_NEXT(1);  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);  \nNETWORK_HANDLE_FROM_PLAYER(player, &netHandle.netHandle, 13);  \nif (NETWORK_CLAN_PLAYER_IS_ACTIVE(&netHandle.netHandle))  \n{  \n\tNETWORK_CLAN_PLAYER_GET_DESC(&clan.clanHandle, 35, &netHandle.netHandle);  \n\t_DRAW_NOTIFICATION_CLAN_INVITE(0, _0x54E79E9C(&clan.clanHandle, 35), &clan.unk17, clan.isLeader, 0, 0, clan.clanHandle, playerName, 0, 0, 0);  \n}  \n\t}  \n```",
            "examples": [],
            "hash": "0x137BC35589E34E1E",
            "ns": "HUD",
            "aliases": [
                "0x137BC35589E34E1E",
                "_NOTIFICATION_SEND_CLAN_INVITE",
                "_DRAW_NOTIFICATION_CLAN_INVITE"
            ],
            "jhash": "0x88B9B909",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1E6611149DB3DB6B": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU",
            "params": [
                { "name": "picTxd", "type": "char*" },
                { "name": "picTxn", "type": "char*" },
                { "name": "flash", "type": "BOOL" },
                {
                    "name": "iconType",
                    "type": "int",
                    "description": "The icon type, you can find those here: [`END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT`](#\\_0x1CCD9A37359072CF)"
                },
                { "name": "nameStr", "type": "char*" },
                { "name": "subtitleStr", "type": "char*" },
                {
                    "name": "durationMultiplier",
                    "type": "float",
                    "description": "1.0 is normal, 2.0 is twice as long, and 0.5 is half its normal display time."
                }
            ],
            "results": "int",
            "description": "Example, only occurrence in the scripts:\n\n```\nv_8 = UI::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(\"CHAR_SOCIAL_CLUB\", \"CHAR_SOCIAL_CLUB\", 0, 0, &v_9, \"\", a_5);\n```\n\nExample result:\n![](https://i.imgur.com/YrN4Bcm.png)",
            "examples": [],
            "hash": "0x1E6611149DB3DB6B",
            "ns": "HUD",
            "aliases": ["0x1E6611149DB3DB6B", "_SET_NOTIFICATION_MESSAGE_4"],
            "jhash": "0x0EB382B7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1CCD9A37359072CF": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT",
            "params": [
                {
                    "name": "textureDict",
                    "type": "char*",
                    "description": "The texture dictionary for the icon."
                },
                {
                    "name": "textureName",
                    "type": "char*",
                    "description": "The texture name for the icon."
                },
                {
                    "name": "flash",
                    "type": "BOOL",
                    "description": "Flash, doesn't seem to work no matter what."
                },
                {
                    "name": "iconType",
                    "type": "int",
                    "description": "The icon type, see the list in the description below."
                },
                {
                    "name": "sender",
                    "type": "char*",
                    "description": "The notification title."
                },
                {
                    "name": "subject",
                    "type": "char*",
                    "description": "The notification subtitle."
                }
            ],
            "results": "int",
            "description": "Sets some extra options for a notification. It adds an image (or icon type) and sets a notification title (sender) and subtitle (subject).\n\nTexture dictionary and texture name parameters are usually the same exact value.\n\nExample result:\n\n![](https://i.imgur.com/LviutDl.png)\n\nOld description with list of possible icons and texture names:\n\n```\nList of picNames: pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n    -- Get the ped headshot image.\n    local handle = RegisterPedheadshot(PlayerPedId())\n    while not IsPedheadshotReady(handle) or not IsPedheadshotValid(handle) do\n        Citizen.Wait(0)\n    end\n    local txd = GetPedheadshotTxdString(handle)\n\n    -- Add the notification text\n    BeginTextCommandThefeedPost(\"STRING\")\n    AddTextComponentSubstringPlayerName(\"This is the private message :o\")\n\n    -- Set the notification icon, title and subtitle.\n    local title = GetPlayerName(PlayerId())\n    local subtitle = \"Private Message\"\n    local iconType = 0\n    local flash = false -- Flash doesn't seem to work no matter what.\n    EndTextCommandThefeedPostMessagetext(txd, txd, flash, iconType, title, subtitle)\n\n    -- Draw the notification\n    local showInBrief = true\n    local blink = false -- blink doesn't work when using icon notifications.\n    EndTextCommandThefeedPostTicker(blink, showInBrief)\n    \n    -- Cleanup after yourself!\n    UnregisterPedheadshot(handle)\nend)"
                }
            ],
            "hash": "0x1CCD9A37359072CF",
            "ns": "HUD",
            "aliases": ["_SET_NOTIFICATION_MESSAGE"],
            "jhash": "0xE7E3C98B",
            "manualHash": true,
            "resultsDescription": "The notification handle."
        },
        "0x5CBF7BADE20DB93E": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG",
            "params": [
                { "name": "picTxd", "type": "char*" },
                { "name": "picTxn", "type": "char*" },
                { "name": "flash", "type": "BOOL" },
                { "name": "iconType", "type": "int" },
                { "name": "nameStr", "type": "char*" },
                { "name": "subtitleStr", "type": "char*" },
                { "name": "duration", "type": "float" },
                { "name": "crewPackedStr", "type": "char*" }
            ],
            "results": "int",
            "description": "```\nList of picNames pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n\"duration\" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.  \n\"clanTag\" shows a crew tag in the \"sender\" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. \"MK\" becomes \"___MK\", \"ACE\" becomes \"___ACE\", etc.)  \n```",
            "examples": [],
            "hash": "0x5CBF7BADE20DB93E",
            "ns": "HUD",
            "aliases": ["_SET_NOTIFICATION_MESSAGE_CLAN_TAG"],
            "jhash": "0x3E807FE3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC6F580E4C94926AC": {
            "name": "_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_GXT_ENTRY",
            "params": [
                { "name": "txdName", "type": "char*" },
                { "name": "textureName", "type": "char*" },
                { "name": "flash", "type": "BOOL" },
                { "name": "iconType", "type": "int" },
                { "name": "sender", "type": "char*" },
                { "name": "subject", "type": "char*" }
            ],
            "results": "int",
            "description": "This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.\nNeeds more research.\nOnly one type of usage in the scripts:\nHUD::\\_C6F580E4C94926AC(\"CHAR_ACTING_UP\", \"CHAR_ACTING_UP\", 0, 0, \"DI_FEED_CHAR\", a\\_0);",
            "examples": [],
            "hash": "0xC6F580E4C94926AC",
            "ns": "HUD",
            "aliases": [
                "0xC6F580E4C94926AC",
                "_SET_NOTIFICATION_MESSAGE_3",
                "_END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_ENTRY"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x531B84E7DA981FB6": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON",
            "params": [
                { "name": "picTxd", "type": "char*" },
                { "name": "picTxn", "type": "char*" },
                { "name": "flash", "type": "BOOL" },
                { "name": "iconType1", "type": "int" },
                { "name": "nameStr", "type": "char*" },
                { "name": "subtitleStr", "type": "char*" },
                { "name": "duration", "type": "float" },
                { "name": "crewPackedStr", "type": "char*" },
                { "name": "iconType2", "type": "int" },
                { "name": "textColor", "type": "int" }
            ],
            "results": "int",
            "description": "```\nList of picNames: pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n\"duration\" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.  \n\"clanTag\" shows a crew tag in the \"sender\" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. \"MK\" becomes \"___MK\", \"ACE\" becomes \"___ACE\", etc.)  \niconType2 is a mirror of iconType. It shows in the \"subject\" line, right under the original iconType.  \nint IconNotification(char *text, char *text2, char *Subject)  \n{  \n\t_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\t_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2(\"CHAR_SOCIAL_CLUB\", \"CHAR_SOCIAL_CLUB\", 1, 7, text2, Subject, 1.0f, \"__EXAMPLE\", 7);  \n\treturn _DRAW_NOTIFICATION(1, 1);  \n}  \n```",
            "examples": [],
            "hash": "0x531B84E7DA981FB6",
            "ns": "HUD",
            "aliases": ["_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2"],
            "jhash": "0xDEB491C8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF020C96915705B3A": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_MPTICKER",
            "params": [
                { "name": "blink", "type": "BOOL" },
                { "name": "bHasTokens", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF020C96915705B3A",
            "ns": "HUD",
            "aliases": ["_DRAW_NOTIFICATION_4"],
            "jhash": "0x8E319AB8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDD6CB2CCE7C2735C": {
            "name": "_END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT",
            "params": [
                { "name": "type", "type": "int" },
                { "name": "button", "type": "char*" },
                { "name": "text", "type": "char*" }
            ],
            "results": "int",
            "description": "```\nreturns a notification handle, prints out a notification like below:\ntype range: 0 - 2\nif you set type to 1, button accepts \"~INPUT_SOMETHING~\"\nexample:\nHUD::_0xDD6CB2CCE7C2735C(1, \"~INPUT_TALK~\", \"Who you trynna get crazy with, ese? Don't you know I'm LOCO?!\");\n- imgur.com/UPy0Ial\nExamples from the scripts:\nl_D1[1/*1*/]=HUD::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING~\",\"\");\nl_D1[2/*1*/]=HUD::_DD6CB2CCE7C2735C(1,\"~INPUT_SAVE_REPLAY_CLIP~\",\"\");\nl_D1[1/*1*/]=HUD::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING~\",\"\");\nl_D1[2/*1*/]=HUD::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~\",\"\");\n```",
            "examples": [],
            "hash": "0xDD6CB2CCE7C2735C",
            "ns": "HUD",
            "aliases": ["0xDD6CB2CCE7C2735C", "_DRAW_NOTIFICATION_WITH_BUTTON"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44FA03975424A0EE": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED",
            "params": [
                { "name": "blink", "type": "BOOL" },
                { "name": "bHasTokens", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x44FA03975424A0EE",
            "ns": "HUD",
            "aliases": ["_DRAW_NOTIFICATION_2"],
            "jhash": "0x57B8D0D4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD202B92CBF1D816F": {
            "name": "_END_TEXT_COMMAND_THEFEED_POST_REPLAY_ICON",
            "params": [
                { "name": "eType", "type": "int" },
                { "name": "iIcon", "type": "int" },
                { "name": "sTitle", "type": "char*" }
            ],
            "results": "int",
            "description": "```\nreturns a notification handle, prints out a notification like below:  \ntype range: 0   \nif you set type to 1, image goes from 0 - 39 - Xbox you can add text to  \nexample:   \nUI::_0xD202B92CBF1D816F(1, 20, \"Who you trynna get crazy with, ese? Don't you know I'm LOCO?!\");  \n```",
            "examples": [],
            "hash": "0xD202B92CBF1D816F",
            "ns": "HUD",
            "aliases": ["0xD202B92CBF1D816F", "_DRAW_NOTIFICATION_WITH_ICON"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B7E9A4EAAA93C89": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_STATS",
            "params": [
                { "name": "statTitle", "type": "char*" },
                { "name": "iconEnum", "type": "int" },
                { "name": "stepVal", "type": "BOOL" },
                { "name": "barValue", "type": "int" },
                { "name": "isImportant", "type": "BOOL" },
                { "name": "picTxd", "type": "char*" },
                { "name": "picTxn", "type": "char*" }
            ],
            "results": "int",
            "description": "[List of picture names](https://pastebin.com/XdpJVbHz)\n\nExample result:\n\n![](https://i.imgur.com/SdEZ22m.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n    -- Get the ped headshot image.\n    local handle = RegisterPedheadshot(PlayerPedId())\n    while not IsPedheadshotReady(handle) or not IsPedheadshotValid(handle) do\n        Citizen.Wait(0)\n    end\n    local txd = GetPedheadshotTxdString(handle)\n\n    -- Add the notification text\n    BeginTextCommandThefeedPost(\"PS_UPDATE\")\n    AddTextComponentInteger(50)\n\n    -- Set the notification title and progress\n    local title = \"PSF_STAMINA\"\n    local p1 = 14\n    local lastProgress = 25\n    local newProgress = 50\n    local unknownBool = false\n    EndTextCommandThefeedPostStats(title, p1, newProgress, lastProgress, unknownBool, txd, txd)\n\n    -- Draw the notification\n    local showInBrief = true\n    local blink = false -- blink doesn't work when using icon notifications.\n    EndTextCommandThefeedPostTicker(blink, showInBrief)\n    \n    -- Cleanup after yourself!\n    UnregisterPedheadshot(handle)\nend)"
                }
            ],
            "hash": "0x2B7E9A4EAAA93C89",
            "ns": "HUD",
            "aliases": ["0x2B7E9A4EAAA93C89", "_SET_NOTIFICATION_MESSAGE_2"],
            "jhash": "0xED130FA1",
            "manualHash": true,
            "resultsDescription": "The notification handle."
        },
        "0xC8F3AAF93D0600BF": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU",
            "params": [
                { "name": "chTitle", "type": "char*" },
                { "name": "iconType", "type": "int" },
                { "name": "chSubtitle", "type": "char*" },
                { "name": "isImportant", "type": "BOOL" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC8F3AAF93D0600BF",
            "ns": "HUD",
            "aliases": ["0xC8F3AAF93D0600BF"],
            "jhash": "0x4FA43BA4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2ED7843F8F801023": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_TICKER",
            "params": [
                {
                    "name": "isImportant",
                    "type": "BOOL",
                    "description": "Makes the notification flash on the screen."
                },
                {
                    "name": "bHasTokens",
                    "type": "BOOL",
                    "description": "Makes the notification appear in the \"Pause Menu > Info/Brief > Notifications\" section."
                }
            ],
            "results": "int",
            "description": "Example output preview:\n\n![](https://i.imgur.com/TJvqkYq.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "BeginTextCommandThefeedPost(\"STRING\")\nAddTextComponentSubstringPlayerName(\"Hello \" .. GetPlayerName(PlayerId()) .. \".\")\nEndTextCommandThefeedPostTicker(true, true)"
                }
            ],
            "hash": "0x2ED7843F8F801023",
            "ns": "HUD",
            "aliases": ["_DRAW_NOTIFICATION"],
            "jhash": "0x08F7AF78",
            "manualHash": true,
            "resultsDescription": "The notification handle."
        },
        "0x02CFBA0C9E9275CE": {
            "name": "FLASH_ABILITY_BAR",
            "params": [
                {
                    "name": "millisecondsToFlash",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x02CFBA0C9E9275CE",
            "ns": "HUD",
            "jhash": "0x3648960D",
            "manualHash": true
        },
        "0x33EE12743CCD6343": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK",
            "params": [
                { "name": "chTitle", "type": "char*" },
                { "name": "iconType", "type": "int" },
                { "name": "chSubtitle", "type": "char*" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x33EE12743CCD6343",
            "ns": "HUD",
            "aliases": ["0x33EE12743CCD6343"],
            "jhash": "0xE05E7052",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6B1DE27EE78E6A19": {
            "name": "FLASH_MINIMAP_DISPLAY_WITH_COLOR",
            "params": [{ "name": "hudColorIndex", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6B1DE27EE78E6A19",
            "ns": "HUD",
            "aliases": ["0x6B1DE27EE78E6A19"],
            "jhash": "0x79A6CAF6",
            "manualHash": true
        },
        "0xA18AFB39081B6A1F": {
            "name": "FLASH_WANTED_DISPLAY",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA18AFB39081B6A1F",
            "ns": "HUD",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x629F866B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x378E809BF61EC840": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS",
            "params": [
                { "name": "isImportant", "type": "BOOL" },
                { "name": "bHasTokens", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x378E809BF61EC840",
            "ns": "HUD",
            "aliases": ["_DRAW_NOTIFICATION_3"],
            "jhash": "0x02BCAF9B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB6871B0555B02996": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU",
            "params": [
                { "name": "ch1TXD", "type": "char*" },
                { "name": "ch1TXN", "type": "char*" },
                { "name": "val1", "type": "int" },
                { "name": "ch2TXD", "type": "char*" },
                { "name": "ch2TXN", "type": "char*" },
                { "name": "val2", "type": "int" }
            ],
            "results": "int",
            "description": "```\nNativeDB Added Parameter 7: int hudColorIndex1\nNativeDB Added Parameter 8: int hudColorIndex2\n```",
            "examples": [],
            "hash": "0xB6871B0555B02996",
            "ns": "HUD",
            "aliases": ["0xB6871B0555B02996"],
            "jhash": "0x5E93FBFA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8817605C2BA76200": {
            "name": "_FORCE_CLOSE_TEXT_INPUT_BOX",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8817605C2BA76200",
            "ns": "HUD",
            "aliases": ["0x8817605C2BA76200"],
            "manualHash": true
        },
        "0x970F608F0EE6C885": {
            "name": "GET_BLIP_ALPHA",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x970F608F0EE6C885",
            "ns": "HUD",
            "jhash": "0x297AF6C8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1121BFA1A1A522A8": {
            "name": "FORCE_SONAR_BLIPS_THIS_FRAME",
            "params": [],
            "results": "Any",
            "description": "```\nDoesn't actually return anything.\n```",
            "examples": [],
            "hash": "0x1121BFA1A1A522A8",
            "ns": "HUD",
            "aliases": ["0x1121BFA1A1A522A8"],
            "jhash": "0x3F4AFB13",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7AE0589093A2E088": {
            "name": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR",
            "params": [
                { "name": "chTitle", "type": "char*" },
                { "name": "iconType", "type": "int" },
                { "name": "chSubtitle", "type": "char*" },
                { "name": "isImportant", "type": "BOOL" },
                { "name": "titleColor", "type": "int" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x7AE0589093A2E088",
            "ns": "HUD",
            "aliases": ["0x7AE0589093A2E088"],
            "jhash": "0x8C90D22F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBC8DBDCA2436F7E8": {
            "name": "GET_BLIP_FROM_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Blip",
            "description": "```\nReturns the Blip handle of given Entity.  \n```",
            "examples": [],
            "hash": "0xBC8DBDCA2436F7E8",
            "ns": "HUD",
            "jhash": "0x005A2A47",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCEF214315D276FD1": {
            "name": "FLAG_PLAYER_CONTEXT_IN_TOURNAMENT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCEF214315D276FD1",
            "ns": "HUD",
            "aliases": ["0xCEF214315D276FD1", "_SET_IS_IN_TOURNAMENT"],
            "jhash": "0xFF06772A",
            "manualHash": true
        },
        "0xF2DD778C22B15BDA": {
            "name": "FLASH_MINIMAP_DISPLAY",
            "params": [],
            "results": "void",
            "description": "```\nadds a short flash to the Radar/Minimap  \nUsage: UI.FLASH_MINIMAP_DISPLAY  \n```",
            "examples": [],
            "hash": "0xF2DD778C22B15BDA",
            "ns": "HUD",
            "jhash": "0xB8359952",
            "manualHash": true
        },
        "0xEE4C0E6DBC6F2C6F": {
            "name": "FORCE_CLOSE_REPORTUGC_MENU",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEE4C0E6DBC6F2C6F",
            "ns": "HUD",
            "aliases": ["0xEE4C0E6DBC6F2C6F"],
            "jhash": "0x67649EE0",
            "manualHash": true
        },
        "0xFA7C7F0AADF25D09": {
            "name": "GET_BLIP_INFO_ID_COORD",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xFA7C7F0AADF25D09",
            "ns": "HUD",
            "jhash": "0xB7374A66",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x56176892826A4FE8": {
            "name": "_GET_AI_BLIP",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Blip",
            "description": "```\nReturns the current AI BLIP for the specified ped  \n```",
            "examples": [],
            "hash": "0x56176892826A4FE8",
            "ns": "HUD",
            "aliases": ["0x56176892826A4FE8"],
            "jhash": "0xCA52CF43",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4BA4E2553AFEDC2C": {
            "name": "GET_BLIP_INFO_ID_ENTITY_INDEX",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "Entity",
            "description": "",
            "examples": [],
            "hash": "0x4BA4E2553AFEDC2C",
            "ns": "HUD",
            "jhash": "0xA068C40B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7CD934010E115C2C": {
            "name": "_GET_AI_BLIP_2",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Blip",
            "description": "",
            "examples": [],
            "hash": "0x7CD934010E115C2C",
            "ns": "HUD",
            "aliases": ["0x7CD934010E115C2C"],
            "annotations": { "cs_type": "void" },
            "jhash": "0x06349065",
            "manualHash": true
        },
        "0x003E92BA477F9D7F": {
            "name": "_GET_BLIP_ROTATION",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "int",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x003E92BA477F9D7F",
            "ns": "HUD",
            "aliases": ["0x003E92BA477F9D7F"],
            "manualHash": true
        },
        "0x586AFE3FF72D996E": {
            "name": "GET_BLIP_COORDS",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x586AFE3FF72D996E",
            "ns": "HUD",
            "jhash": "0xEF6FF47B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDF729E8D20CF7327": {
            "name": "GET_BLIP_COLOUR",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xDF729E8D20CF7327",
            "ns": "HUD",
            "jhash": "0xDD6A1E54",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2309595AD6145265": {
            "name": "GET_CURRENT_FRONTEND_MENU_VERSION",
            "params": [],
            "results": "Hash",
            "description": "```\nif (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat(\"fe_menu_version_empty_no_background\"))\n```",
            "examples": [],
            "hash": "0x2309595AD6145265",
            "ns": "HUD",
            "aliases": ["0x2309595AD6145265", "_GET_CURRENT_FRONTEND_MENU"],
            "jhash": "0x33D6868F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9B6786E4C03DD382": {
            "name": "GET_BLIP_INFO_ID_PICKUP_INDEX",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "Pickup",
            "description": "```\nThis function is hard-coded to always return 0.  \n```",
            "examples": [],
            "hash": "0x9B6786E4C03DD382",
            "ns": "HUD",
            "jhash": "0x86913D37",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x52F0982D7FD156B6": {
            "name": "GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID",
            "params": [],
            "results": "int",
            "description": "```\nThis function is hard-coded to always return 1.  \n```",
            "examples": [],
            "hash": "0x52F0982D7FD156B6",
            "ns": "HUD",
            "jhash": "0x8188935F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x729B5F1EFBC0AAEE": {
            "name": "GET_BLIP_HUD_COLOUR",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x729B5F1EFBC0AAEE",
            "ns": "HUD",
            "jhash": "0xE88B4BC2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1E314167F701DC3B": {
            "name": "GET_BLIP_INFO_ID_DISPLAY",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x1E314167F701DC3B",
            "ns": "HUD",
            "jhash": "0xD0FC19F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBE9B0959FFD0779B": {
            "name": "GET_BLIP_INFO_ID_TYPE",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "int",
            "description": "```\nReturns a value based on what the blip is attached to\n1 - Vehicle\n2 - Ped\n3 - Object\n4 - Coord\n5 - unk\n6 - Pickup\n7 - Radius\n```",
            "examples": [],
            "hash": "0xBE9B0959FFD0779B",
            "ns": "HUD",
            "jhash": "0x501D7B4E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD484BF71050CA1EE": {
            "name": "_GET_CLOSEST_BLIP_OF_TYPE",
            "params": [{ "name": "blipSprite", "type": "int" }],
            "results": "Blip",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xD484BF71050CA1EE",
            "ns": "HUD",
            "aliases": ["0xD484BF71050CA1EE"],
            "manualHash": true
        },
        "0x01A358D9128B7A86": {
            "name": "GET_CURRENT_WEBPAGE_ID",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x01A358D9128B7A86",
            "ns": "HUD",
            "aliases": ["0x01A358D9128B7A86", "_GET_ACTIVE_WEBSITE_ID"],
            "jhash": "0xAB5B7C18",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1FC877464A04FC4F": {
            "name": "GET_BLIP_SPRITE",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip handle."
                }
            ],
            "results": "int",
            "description": "Gets the sprite id of the specified blip. Blip sprite ids and images can be found [here](https://docs.fivem.net/docs/game-references/blips/).",
            "examples": [],
            "hash": "0x1FC877464A04FC4F",
            "ns": "HUD",
            "jhash": "0x72FF2E73",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7C9C91AB74A0360F": {
            "name": "GET_HUD_COLOUR",
            "params": [
                { "name": "hudColorIndex", "type": "int" },
                { "name": "r", "type": "int*" },
                { "name": "g", "type": "int*" },
                { "name": "b", "type": "int*" },
                { "name": "a", "type": "int*" }
            ],
            "results": "void",
            "description": "Gets hud color RGBA parameter values by passing a hud color index (hudColorIndex).\n\nHUD colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)",
            "examples": [],
            "hash": "0x7C9C91AB74A0360F",
            "ns": "HUD",
            "jhash": "0x63F66A0B",
            "manualHash": true
        },
        "0x97D47996FC48CBAD": {
            "name": "GET_CURRENT_WEBSITE_ID",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x97D47996FC48CBAD",
            "ns": "HUD",
            "jhash": "0x42A55B14",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1BEDE233E6CD2A1F": {
            "name": "GET_FIRST_BLIP_INFO_ID",
            "params": [{ "name": "blipSprite", "type": "int" }],
            "results": "Blip",
            "description": "",
            "examples": [],
            "hash": "0x1BEDE233E6CD2A1F",
            "ns": "HUD",
            "jhash": "0x64C0273D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE3B05614DCE1D014": {
            "name": "GET_GLOBAL_ACTIONSCRIPT_FLAG",
            "params": [{ "name": "flagIndex", "type": "int" }],
            "results": "int",
            "description": "```\nReturns the ActionScript flagValue.\nActionScript flags are global flags that scaleforms use\nFlags found during testing\n0: Returns 1 if the web_browser keyboard is open, otherwise 0\n1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)\n2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed\n9: Returns the current selection on the mobile phone scaleform\nThere are 20 flags in total.\n```",
            "examples": [],
            "hash": "0xE3B05614DCE1D014",
            "ns": "HUD",
            "aliases": ["0xE3B05614DCE1D014"],
            "jhash": "0xD217EE7E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF9904D11F1ACBEC3": {
            "name": "GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION",
            "params": [
                { "name": "worldX", "type": "float" },
                { "name": "worldY", "type": "float" },
                { "name": "worldZ", "type": "float" },
                { "name": "screenX", "type": "float*" },
                { "name": "screenY", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "```\nWorld to relative screen coords\nthis world to screen will keep the text on screen. it will keep it in the screen pos\n```",
            "examples": [],
            "hash": "0xF9904D11F1ACBEC3",
            "ns": "HUD",
            "aliases": ["0xF9904D11F1ACBEC3", "_GET_2D_COORD_FROM_3D_COORD"],
            "jhash": "0xFE9A39F8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF030907CCBB8A9FD": {
            "name": "GET_LENGTH_OF_LITERAL_STRING",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "int",
            "description": "```\nReturns the length of the string passed (much like strlen).  \n```",
            "examples": [],
            "hash": "0xF030907CCBB8A9FD",
            "ns": "HUD",
            "jhash": "0x99379D55",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x223CA69A8C4417FD": {
            "name": "GET_HUD_COMPONENT_POSITION",
            "params": [{ "name": "id", "type": "int" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x223CA69A8C4417FD",
            "ns": "HUD",
            "jhash": "0x080DCED6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7B5280EBA9840C72": {
            "name": "_GET_LABEL_TEXT",
            "params": [{ "name": "labelName", "type": "char*" }],
            "results": "char*",
            "description": "```\nGets a string literal from a label name.\nGET_F*\n```",
            "examples": [],
            "hash": "0x7B5280EBA9840C72",
            "ns": "HUD",
            "jhash": "0x95C4B5AD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x43E4111189E54F0E": {
            "name": "GET_LENGTH_OF_LITERAL_STRING_IN_BYTES",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x43E4111189E54F0E",
            "ns": "HUD",
            "aliases": ["0x43E4111189E54F0E", "_GET_LENGTH_OF_STRING"],
            "jhash": "0x7DBC0764",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x801BD273D3A23F74": {
            "name": "GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL",
            "params": [{ "name": "gxt", "type": "char*" }],
            "results": "int",
            "description": "```\nReturns the string length of the string from the gxt string .  \n```",
            "examples": [],
            "hash": "0x801BD273D3A23F74",
            "ns": "HUD",
            "jhash": "0xA4CA7BE5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDCD4EC3F419D02FA": {
            "name": "GET_MAIN_PLAYER_BLIP_ID",
            "params": [],
            "results": "Blip",
            "description": "",
            "examples": [],
            "hash": "0xDCD4EC3F419D02FA",
            "ns": "HUD",
            "jhash": "0xAB93F020",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x90A6526CF0381030": {
            "name": "GET_MENU_PED_MASKED_INT_STAT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x90A6526CF0381030",
            "ns": "HUD",
            "aliases": ["0x90A6526CF0381030"],
            "jhash": "0xD6CC4766",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5FBD7095FE7AE57F": {
            "name": "GET_MENU_PED_FLOAT_STAT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5FBD7095FE7AE57F",
            "ns": "HUD",
            "aliases": ["0x5FBD7095FE7AE57F"],
            "jhash": "0x51972B04",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF4CED81CEBEDC6D": {
            "name": "GET_MENU_PED_INT_STAT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEF4CED81CEBEDC6D",
            "ns": "HUD",
            "aliases": ["SET_USERIDS_UIHIDDEN", "0xEF4CED81CEBEDC6D"],
            "jhash": "0x4370999E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x052991E59076E4E4": {
            "name": "GET_MENU_PED_BOOL_STAT",
            "params": [
                { "name": "p0", "type": "Hash" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "```\np0 was always 0xAE2602A3.\n```",
            "examples": [],
            "hash": "0x052991E59076E4E4",
            "ns": "HUD",
            "aliases": ["0x052991E59076E4E4"],
            "jhash": "0xD43BB56D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x14F96AA50D6FBEA7": {
            "name": "GET_NEXT_BLIP_INFO_ID",
            "params": [{ "name": "blipSprite", "type": "int" }],
            "results": "Blip",
            "description": "",
            "examples": [],
            "hash": "0x14F96AA50D6FBEA7",
            "ns": "HUD",
            "jhash": "0x9356E92F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6E31B91145873922": {
            "name": "GET_MINIMAP_FOW_COORDINATE_IS_REVEALED",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6E31B91145873922",
            "ns": "HUD",
            "aliases": ["0x6E31B91145873922", "_IS_MINIMAP_AREA_REVEALED"],
            "jhash": "0x65B705F6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5C90988E7C8E1AF4": {
            "name": "GET_NEW_SELECTED_MISSION_CREATOR_BLIP",
            "params": [],
            "results": "Blip",
            "description": "",
            "examples": [],
            "hash": "0x5C90988E7C8E1AF4",
            "ns": "HUD",
            "aliases": ["DISABLE_BLIP_NAME_FOR_VAR", "0x5C90988E7C8E1AF4"],
            "jhash": "0xFFD7476C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE0130B41D3CF4574": {
            "name": "GET_MINIMAP_FOW_DISCOVERY_RATIO",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xE0130B41D3CF4574",
            "ns": "HUD",
            "aliases": ["0xE0130B41D3CF4574", "_GET_MINIMAP_REVEAL_PERCENTAGE"],
            "jhash": "0xA4098ACC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5BFF36D6ED83E0AE": {
            "name": "_GET_PAUSE_MENU_CURSOR_POSITION",
            "params": [],
            "results": "Vector3",
            "description": "Name between `GET_ONSCREEN_KEYBOARD_RESULT` and `GET_PAUSE_MENU_STATE`. Likely, `GET_PAUSE_MENU_*`.",
            "examples": [],
            "hash": "0x5BFF36D6ED83E0AE",
            "ns": "HUD",
            "aliases": ["0x5BFF36D6ED83E0AE"],
            "manualHash": true,
            "resultsDescription": "If the pause menu is open, it will return a Vector3, Z is always 0.\nIf the pause menu is closed, it will return Vector3.Zero"
        },
        "0x9A3FF3DE163034E8": {
            "name": "GET_NUMBER_OF_ACTIVE_BLIPS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9A3FF3DE163034E8",
            "ns": "HUD",
            "jhash": "0x144020FA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1A6478B61C6BDC3B": {
            "name": "GET_NAMED_RENDERTARGET_RENDER_ID",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x1A6478B61C6BDC3B",
            "ns": "HUD",
            "jhash": "0xF9D7A401",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3F0CF9CB7E589B88": {
            "name": "_GET_NORTH_RADAR_BLIP",
            "params": [],
            "results": "Blip",
            "description": "",
            "examples": [],
            "hash": "0x3F0CF9CB7E589B88",
            "ns": "HUD",
            "aliases": ["0x3F0CF9CB7E589B88"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x272ACD84970869C5": {
            "name": "GET_PAUSE_MENU_STATE",
            "params": [],
            "results": "int",
            "description": "```\nReturns:\n0\n5\n10\n15\n20\n25\n30\n35\n```",
            "examples": [],
            "hash": "0x272ACD84970869C5",
            "ns": "HUD",
            "jhash": "0x92F50134",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7E17BE53E1AAABAF": {
            "name": "_GET_PAUSE_MENU_SELECTION_DATA",
            "params": [
                { "name": "lastItemMenuId", "type": "int*" },
                { "name": "selectedItemMenuId", "type": "int*" },
                { "name": "selectedItemUniqueId", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nlastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)\nselectedItemMenuId: same as lastItemMenuId except for the currently selected menu item\nselectedItemUniqueId: this is uniqueID of the currently selected menu item\nwhen the pausemenu is closed:\nlastItemMenuId = -1\nselectedItemMenuId = -1\nselectedItemUniqueId = 0\nwhen the header gains focus:\nlastItemMenuId updates as normal or 0 if the pausemenu was just opened\nselectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened\nselectedItemUniqueId = -1\nwhen focus is moved from the header to a pausemenu page:\nlastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)\nselectedItemMenuId = -1\nselectedItemUniqueId updates as normal\n```",
            "examples": [],
            "hash": "0x7E17BE53E1AAABAF",
            "ns": "HUD",
            "aliases": ["0x7E17BE53E1AAABAF"],
            "jhash": "0x6025AA2F",
            "manualHash": true
        },
        "0xD0EF8A959B8A4CB9": {
            "name": "GET_STREET_NAME_FROM_HASH_KEY",
            "params": [{ "name": "hash", "type": "Hash" }],
            "results": "char*",
            "description": "Converts the hash of a street name into a readable string. To retrieve a hash for a given (street) coordinate, see [`GET_STREET_NAME_AT_COORD`](#\\_0x2EB41072B4C1E4C0).",
            "examples": [],
            "hash": "0xD0EF8A959B8A4CB9",
            "ns": "HUD",
            "jhash": "0x1E8E310C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x36C1451A88A09630": {
            "name": "_GET_PAUSE_MENU_SELECTION",
            "params": [
                {
                    "name": "lastItemMenuId",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "selectedItemUniqueId",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x36C1451A88A09630",
            "ns": "HUD",
            "aliases": ["0x36C1451A88A09630"],
            "jhash": "0x8543AAC8",
            "manualHash": true
        },
        "0x632B2940C67F4EA9": {
            "name": "_GET_SCALEFORM_MOVIE_CURSOR_SELECTION",
            "params": [
                {
                    "name": "scaleformHandle",
                    "type": "int",
                    "description": "Handle of the scaleform"
                },
                {
                    "name": "received",
                    "type": "bool*",
                    "annotations": { "cs_type": "Any*" },
                    "description": "Returns a boolean indicating if the data was received successfully (in Lua)."
                },
                {
                    "name": "selectionType",
                    "type": "int*",
                    "annotations": { "cs_type": "Any*" },
                    "description": "The type of MouseEvent specified above."
                },
                {
                    "name": "context",
                    "type": "int*",
                    "annotations": { "cs_type": "Any*" },
                    "description": "Context of the slot the mouse is hovering on."
                },
                {
                    "name": "slotIndex",
                    "type": "int*",
                    "description": "Index of the slot the mouse is hovering on."
                }
            ],
            "results": "BOOL",
            "description": "Gets mouse selection data from scaleforms with mouse support. Must be checked every frame.\nReturns item index if using the COLOUR_SWITCHER\\_02 scaleform.\nSelection types, found in MOUSE_EVENTS.as:\nMOUSE_DRAG_OUT = 0;\nMOUSE_DRAG_OVER = 1;\nMOUSE_DOWN = 2;\nMOUSE_MOVE = 3;\nMOUSE_UP = 4;\nMOUSE_PRESS = 5;\nMOUSE_RELEASE = 6;\nMOUSE_RELEASE_OUTSIDE = 7;\nMOUSE_ROLL_OUT = 8;\nMOUSE_ROLL_OVER = 9;\nMOUSE_WHEEL_UP = 10;\nMOUSE_WHEEL_DOWN = 11;\n\nScaleforms that this works with:\n\n*   COLOUR_SWITCHER\\_02\n*   MP_RESULTS_PANEL\n*   MP_NEXT_JOB_SELECTION\n*   SC_LEADERBOARD\n    Probably works with other scaleforms, needs more research.\n    In order to use this Native you MUST have controls 239, 240, 237, 238 enabled!\n    This native, due to its erroneous redundancy of the returned boolean value, works differently in C#: shifting the parameters (where `received` becomes `selectionType` and so on making the fourth parameter unused and always 0).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, _eventType, _context, _itemId = GetScaleformMovieCursorSelection(scaleform)"
                },
                {
                    "lang": "cs",
                    "code": "int eventType = 0;\nint itemId = 0;\nint context = 0;\nint unused = 0;\n\nvar success = GetScaleformMovieCursorSelection(scaleform.Handle, ref eventType, ref context, ref itemId, ref unused);"
                }
            ],
            "hash": "0x632B2940C67F4EA9",
            "ns": "HUD",
            "aliases": ["0x632B2940C67F4EA9"],
            "manualHash": true,
            "resultsDescription": "*   **retVal** Returns true if MOUSE_EVENT callback from Scaleforms has been called."
        },
        "0x4A9923385BDB9DAD": {
            "name": "GET_STANDARD_BLIP_ENUM_ID",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x4A9923385BDB9DAD",
            "ns": "HUD",
            "aliases": ["0x4A9923385BDB9DAD", "_GET_LEVEL_BLIP_SPRITE"],
            "annotations": { "cs_type": "BOOL" },
            "jhash": "0x87871CE0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCE94AEBA5D82908A": {
            "name": "_GET_TEXT_SUBSTRING_SLICE",
            "params": [
                { "name": "text", "type": "char*" },
                { "name": "startPosition", "type": "int" },
                { "name": "endPosition", "type": "int" }
            ],
            "results": "char*",
            "description": "```\nReturns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).\nExample:\n// Get \"STRING\" text from \"MY_STRING\"\nsubStr = HUD::_GET_TEXT_SUBSTRING_SLICE(\"MY_STRING\", 3, 9);\n// Overflows are possibly replaced with underscores (needs verification)\nsubStr = HUD::_GET_TEXT_SUBSTRING_SLICE(\"MY_STRING\", 3, 10); // \"STRING_\"?\n```",
            "examples": [],
            "hash": "0xCE94AEBA5D82908A",
            "ns": "HUD",
            "jhash": "0xFA6373BB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x169BD9382084C8C0": {
            "name": "_GET_TEXT_SUBSTRING",
            "params": [
                { "name": "text", "type": "char*" },
                { "name": "position", "type": "int" },
                { "name": "length", "type": "int" }
            ],
            "results": "char*",
            "description": "```\nReturns a substring of a specified length starting at a specified position.\nExample:\n// Get \"STRING\" text from \"MY_STRING\"\nsubStr = HUD::_GET_TEXT_SUBSTRING(\"MY_STRING\", 3, 6);\n```",
            "examples": [],
            "hash": "0x169BD9382084C8C0",
            "ns": "HUD",
            "jhash": "0x34A396EE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x186E5D252FA50E7D": {
            "name": "GET_WAYPOINT_BLIP_ENUM_ID",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x186E5D252FA50E7D",
            "ns": "HUD",
            "aliases": ["_GET_BLIP_INFO_ID_ITERATOR"],
            "jhash": "0xB9827942",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDB88A37483346780": {
            "name": "GET_RENDERED_CHARACTER_HEIGHT",
            "params": [
                { "name": "size", "type": "float" },
                { "name": "font", "type": "int" }
            ],
            "results": "float",
            "description": "```\nThis gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.\nOld name: _GET_TEXT_SCALE_HEIGHT\n```",
            "examples": [],
            "hash": "0xDB88A37483346780",
            "ns": "HUD",
            "aliases": ["0xDB88A37483346780", "_GET_TEXT_SCALE_HEIGHT"],
            "jhash": "0x3330175B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x02245FE4BED318B8": {
            "name": "HAS_ADDITIONAL_TEXT_LOADED",
            "params": [{ "name": "slot", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x02245FE4BED318B8",
            "ns": "HUD",
            "jhash": "0xB0E56045",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA277800A9EAE340E": {
            "name": "_HAS_DIRECTOR_MODE_BEEN_TRIGGERED",
            "params": [],
            "results": "BOOL",
            "description": "```\nHAS_*\n```",
            "examples": [],
            "hash": "0xA277800A9EAE340E",
            "ns": "HUD",
            "aliases": ["0xA277800A9EAE340E"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAC0BFBDC3BE00E14": {
            "name": "GIVE_PED_TO_PAUSE_MENU",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\np1 is either 1 or 2 in the PC scripts.  \n```\n\nThis native is used to \"give\"/duplicate a player ped to a frontend menu as configured via the `ACTIVATE_FRONTEND_MENU` native, you first must utilize the [CLONE_PED](#\\_0xEF29A16337FACADB) to clone said ped.",
            "examples": [],
            "hash": "0xAC0BFBDC3BE00E14",
            "ns": "HUD",
            "jhash": "0x2AD2C9CE",
            "manualHash": true
        },
        "0xB2798643312205C5": {
            "name": "_GET_TEXT_SUBSTRING_SAFE",
            "params": [
                { "name": "text", "type": "char*" },
                { "name": "position", "type": "int" },
                { "name": "length", "type": "int" },
                { "name": "maxLength", "type": "int" }
            ],
            "results": "char*",
            "description": "```\nReturns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.\nNOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69\nExample:\n// Condensed example of how Rockstar uses this function\nstrLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());\nsubStr = HUD::_GET_TEXT_SUBSTRING_SAFE(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);\n--\n\"fm_race_creator.ysc\", line 85115:\n// parameters modified for clarity\nBOOL sub_8e5aa(char *text, int length) {\n    for (i = 0; i <= (length - 2); i += 1) {\n        if (!MISC::ARE_STRINGS_EQUAL(HUD::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), \" \")) {\n            return FALSE;\n        }\n    }\n    return TRUE;\n}\n```",
            "examples": [],
            "hash": "0xB2798643312205C5",
            "ns": "HUD",
            "jhash": "0x0183A66C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x81DF9ABA6C83DFF9": {
            "name": "_GET_WARNING_MESSAGE_TITLE_HASH",
            "params": [],
            "results": "Hash",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x81DF9ABA6C83DFF9",
            "ns": "HUD",
            "manualHash": true
        },
        "0xADBF060E2B30C5BC": {
            "name": "HAS_THIS_ADDITIONAL_TEXT_LOADED",
            "params": [
                { "name": "gxt", "type": "char*" },
                { "name": "slot", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nChecks if the specified gxt has loaded into the passed slot.  \n```",
            "examples": [],
            "hash": "0xADBF060E2B30C5BC",
            "ns": "HUD",
            "jhash": "0x80A52040",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA4DEDE28B1814289": {
            "name": "_HIDE_AREA_AND_VEHICLE_NAME_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "```\nHIDE_*_THIS_FRAME\n\nHides area and vehicle name HUD components for one frame.\n```",
            "examples": [],
            "hash": "0xA4DEDE28B1814289",
            "ns": "HUD",
            "aliases": ["0xA4DEDE28B1814289"],
            "jhash": "0x52746FE1",
            "manualHash": true
        },
        "0x4B0311D3CDC4648F": {
            "name": "HIDE_LOADING_ON_FADE_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4B0311D3CDC4648F",
            "ns": "HUD",
            "jhash": "0x35087963",
            "manualHash": true
        },
        "0x719FF505F097FD20": {
            "name": "HIDE_HUD_AND_RADAR_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "```\nI think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)  \n```",
            "examples": [],
            "hash": "0x719FF505F097FD20",
            "ns": "HUD",
            "jhash": "0xB75D4AD2",
            "manualHash": true
        },
        "0xD46923FC481CA285": {
            "name": "HIDE_HELP_TEXT_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD46923FC481CA285",
            "ns": "HUD",
            "jhash": "0xF3807BED",
            "manualHash": true
        },
        "0x20FE7FDFEEAD38C0": {
            "name": "HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x20FE7FDFEEAD38C0",
            "ns": "HUD",
            "aliases": ["0x20FE7FDFEEAD38C0"],
            "jhash": "0xCE36E3FE",
            "manualHash": true
        },
        "0x6806C51AD12B83B8": {
            "name": "HIDE_HUD_COMPONENT_THIS_FRAME",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "This function hides various HUD (Heads-up Display) components.\n\nListed below are the integers and the corresponding HUD component.\n\n*   1 : WANTED_STARS\n*   2 : WEAPON_ICON\n*   3 : CASH\n*   4 : MP_CASH\n*   5 : MP_MESSAGE\n*   6 : VEHICLE_NAME\n*   7 : AREA_NAME\n*   8 : VEHICLE_CLASS\n*   9 : STREET_NAME\n*   10 : HELP_TEXT\n*   11 : FLOATING_HELP_TEXT\\_1\n*   12 : FLOATING_HELP_TEXT\\_2\n*   13 : CASH_CHANGE\n*   14 : RETICLE\n*   15 : SUBTITLE_TEXT\n*   16 : RADIO_STATIONS\n*   17 : SAVING_GAME\n*   18 : GAME_STREAM\n*   19 : WEAPON_WHEEL\n*   20 : WEAPON_WHEEL_STATS\n*   21 : HUD_COMPONENTS\n*   22 : HUD_WEAPONS\n\nThese integers also work for the [`SHOW_HUD_COMPONENT_THIS_FRAME`](#\\_0x0B4DF1FA60C0E664) native, but instead shows the HUD Component.",
            "examples": [],
            "hash": "0x6806C51AD12B83B8",
            "ns": "HUD",
            "jhash": "0xDB2D0762",
            "manualHash": true
        },
        "0x5FBAE526203990C9": {
            "name": "HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5FBAE526203990C9",
            "ns": "HUD",
            "aliases": ["_DISABLE_RADAR_THIS_FRAME"],
            "jhash": "0x1A4318F7",
            "manualHash": true
        },
        "0x532CFF637EF80148": {
            "name": "HIDE_NUMBER_ON_BLIP",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x532CFF637EF80148",
            "ns": "HUD",
            "jhash": "0x0B6D610D",
            "manualHash": true
        },
        "0x488043841BBE156F": {
            "name": "_HUD_DISPLAY_LOADING_SCREEN_TIPS",
            "params": [],
            "results": "void",
            "description": "Displays loading screen tips, requires `_0x56C8B608CFD49854` to be called beforehand.",
            "examples": [],
            "hash": "0x488043841BBE156F",
            "ns": "HUD",
            "aliases": ["0x488043841BBE156F"],
            "manualHash": true
        },
        "0xE374C498D8BADC14": {
            "name": "HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE374C498D8BADC14",
            "ns": "HUD",
            "jhash": "0x31ABA127",
            "manualHash": true
        },
        "0xA48931185F0536FE": {
            "name": "_HUD_WEAPON_WHEEL_GET_SELECTED_HASH",
            "params": [],
            "results": "Hash",
            "description": "```\nReturns the weapon hash to the selected/highlighted weapon in the wheel\n```",
            "examples": [],
            "hash": "0xA48931185F0536FE",
            "ns": "HUD",
            "aliases": ["0xA48931185F0536FE"],
            "jhash": "0x22E9F555",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x72C1056D678BB7D8": {
            "name": "HUD_SET_WEAPON_WHEEL_TOP_SLOT",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "void",
            "description": "```\nSet the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash\n```",
            "examples": [],
            "hash": "0x72C1056D678BB7D8",
            "ns": "HUD",
            "aliases": [
                "0x72C1056D678BB7D8",
                "_HUD_WEAPON_WHEEL_SET_SLOT_HASH"
            ],
            "jhash": "0x83B608A0",
            "manualHash": true
        },
        "0xEB354E5376BC81A7": {
            "name": "HUD_FORCE_WEAPON_WHEEL",
            "params": [{ "name": "show", "type": "BOOL" }],
            "results": "void",
            "description": "```\nForces the weapon wheel to show/hide.\n```",
            "examples": [],
            "hash": "0xEB354E5376BC81A7",
            "ns": "HUD",
            "aliases": ["0xEB354E5376BC81A7", "_SHOW_WEAPON_WHEEL"],
            "jhash": "0x1EFFB02A",
            "manualHash": true
        },
        "0x14C9FDCC41F81F63": {
            "name": "_HUD_WEAPON_WHEEL_IGNORE_CONTROL_INPUT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc\n```",
            "examples": [],
            "hash": "0x14C9FDCC41F81F63",
            "ns": "HUD",
            "aliases": ["0x14C9FDCC41F81F63"],
            "jhash": "0xE70D1F43",
            "manualHash": true
        },
        "0x2432784ACA090DA4": {
            "name": "IS_FLOATING_HELP_TEXT_ON_SCREEN",
            "params": [{ "name": "hudIndex", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2432784ACA090DA4",
            "ns": "HUD",
            "aliases": ["0x2432784ACA090DA4"],
            "jhash": "0x45472FD5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x327EDEEEAC55C369": {
            "name": "IS_HELP_MESSAGE_FADING_OUT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x327EDEEEAC55C369",
            "ns": "HUD",
            "jhash": "0x3E50AE92",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0AFC4AF510774B47": {
            "name": "_HUD_WEAPON_WHEEL_IGNORE_SELECTION",
            "params": [],
            "results": "void",
            "description": "```\nCalling this each frame, stops the player from receiving a weapon via the weapon wheel.\n```",
            "examples": [],
            "hash": "0x0AFC4AF510774B47",
            "ns": "HUD",
            "aliases": ["_BLOCK_WEAPON_WHEEL_THIS_FRAME", "0x0AFC4AF510774B47"],
            "jhash": "0xB26FED2B",
            "manualHash": true
        },
        "0xA13E93403F26C812": {
            "name": "_HUD_WEAPON_WHEEL_GET_SLOT_HASH",
            "params": [{ "name": "weaponTypeIndex", "type": "int" }],
            "results": "Hash",
            "description": "```\nReturns the weapon hash active in a specific weapon wheel slotList\n```",
            "examples": [],
            "hash": "0xA13E93403F26C812",
            "ns": "HUD",
            "aliases": ["0xA13E93403F26C812"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDA5F8727EB75B926": {
            "name": "IS_BLIP_SHORT_RANGE",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDA5F8727EB75B926",
            "ns": "HUD",
            "jhash": "0x1226765A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDAD37F45428801AE": {
            "name": "IS_HELP_MESSAGE_ON_SCREEN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDAD37F45428801AE",
            "ns": "HUD",
            "jhash": "0x4B3C9CA9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE41CA53051197A27": {
            "name": "IS_BLIP_ON_MINIMAP",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE41CA53051197A27",
            "ns": "HUD",
            "jhash": "0x258CBA3A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA5E41FD83AD6CEF0": {
            "name": "IS_BLIP_FLASHING",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA5E41FD83AD6CEF0",
            "ns": "HUD",
            "jhash": "0x52E111D7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3BAB9A4E4F2FF5C7": {
            "name": "IS_FRONTEND_READY_FOR_CONTROL",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3BAB9A4E4F2FF5C7",
            "ns": "HUD",
            "aliases": ["0x3BAB9A4E4F2FF5C7"],
            "jhash": "0xD3BF3ABD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4D79439A6B55AC67": {
            "name": "IS_HELP_MESSAGE_BEING_DISPLAYED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4D79439A6B55AC67",
            "ns": "HUD",
            "jhash": "0xA65F262A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1930DFA731813EC4": {
            "name": "IS_HUD_PREFERENCE_SWITCHED_ON",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1930DFA731813EC4",
            "ns": "HUD",
            "jhash": "0xC3BC1B4F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBC4C9EA5391ECC0D": {
            "name": "IS_HUD_COMPONENT_ACTIVE",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "```\nFull list of components below  \nHUD = 0;  \nHUD_WANTED_STARS = 1;  \nHUD_WEAPON_ICON = 2;  \nHUD_CASH = 3;  \nHUD_MP_CASH = 4;  \nHUD_MP_MESSAGE = 5;  \nHUD_VEHICLE_NAME = 6;  \nHUD_AREA_NAME = 7;  \nHUD_VEHICLE_CLASS = 8;  \nHUD_STREET_NAME = 9;  \nHUD_HELP_TEXT = 10;  \nHUD_FLOATING_HELP_TEXT_1 = 11;  \nHUD_FLOATING_HELP_TEXT_2 = 12;  \nHUD_CASH_CHANGE = 13;  \nHUD_RETICLE = 14;  \nHUD_SUBTITLE_TEXT = 15;  \nHUD_RADIO_STATIONS = 16;  \nHUD_SAVING_GAME = 17;  \nHUD_GAME_STREAM = 18;  \nHUD_WEAPON_WHEEL = 19;  \nHUD_WEAPON_WHEEL_STATS = 20;  \nMAX_HUD_COMPONENTS = 21;  \nMAX_HUD_WEAPONS = 22;  \nMAX_SCRIPTED_HUD_COMPONENTS = 141;  \n```",
            "examples": [],
            "hash": "0xBC4C9EA5391ECC0D",
            "ns": "HUD",
            "jhash": "0x6214631F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7984C03AA5CC2F41": {
            "name": "IS_MESSAGE_BEING_DISPLAYED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7984C03AA5CC2F41",
            "ns": "HUD",
            "jhash": "0x6A77FE8D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4E929E7A5796FD26": {
            "name": "IS_MP_GAMER_TAG_ACTIVE",
            "params": [{ "name": "gamerTagId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4E929E7A5796FD26",
            "ns": "HUD",
            "aliases": ["0x4E929E7A5796FD26"],
            "jhash": "0x60118951",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4167EFE0527D706E": {
            "name": "IS_HOVERING_OVER_MISSION_CREATOR_BLIP",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4167EFE0527D706E",
            "ns": "HUD",
            "aliases": ["0x4167EFE0527D706E"],
            "jhash": "0xC5EB849A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAF754F20EB5CD51A": {
            "name": "IS_MINIMAP_RENDERING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAF754F20EB5CD51A",
            "ns": "HUD",
            "aliases": ["0xAF754F20EB5CD51A", "_IS_RADAR_ENABLED"],
            "jhash": "0x9CD18314",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9049FE339D5F6F6F": {
            "name": "_IS_MINIMAP_IN_INTERIOR",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9049FE339D5F6F6F",
            "ns": "HUD",
            "aliases": ["0x9049FE339D5F6F6F"],
            "jhash": "0x199DED14",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x113750538FA31298": {
            "name": "IS_NAMED_RENDERTARGET_LINKED",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x113750538FA31298",
            "ns": "HUD",
            "jhash": "0x8B52601F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA86478C6958735C5": {
            "name": "IS_HUD_HIDDEN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA86478C6958735C5",
            "ns": "HUD",
            "jhash": "0x40BADA1D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4E3CD0EF8A489541": {
            "name": "IS_NAVIGATING_MENU_CONTENT",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x4E3CD0EF8A489541",
            "ns": "HUD",
            "aliases": ["0x4E3CD0EF8A489541"],
            "jhash": "0xDA7951A2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6E0EB3EB47C8D7AA": {
            "name": "IS_MP_GAMER_TAG_MOVIE_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6E0EB3EB47C8D7AA",
            "ns": "HUD",
            "aliases": ["0x6E0EB3EB47C8D7AA", "_HAS_MP_GAMER_TAG"],
            "jhash": "0xEFD2564A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x26F49BF3381D933D": {
            "name": "IS_MISSION_CREATOR_BLIP",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x26F49BF3381D933D",
            "ns": "HUD",
            "jhash": "0x24ACC4E9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3D9ACB1EB139E702": {
            "name": "_IS_MOUSE_CURSOR_ABOVE_INSTRUCTIONAL_BUTTONS",
            "params": [],
            "results": "BOOL",
            "description": "Returns true if the cursor is hovering above instructional buttons.\nNote: The buttons need to support mouse (with the TOGGLE_MOUSE_SUPPORT scaleform movie method) for it to return true.",
            "examples": [],
            "hash": "0x3D9ACB1EB139E702",
            "ns": "HUD",
            "aliases": ["0x3D9ACB1EB139E702"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x78DCDC15C9F116B4": {
            "name": "IS_NAMED_RENDERTARGET_REGISTERED",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x78DCDC15C9F116B4",
            "ns": "HUD",
            "jhash": "0x284057F5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB118AF58B5F332A1": {
            "name": "_IS_MULTIPLAYER_CHAT_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.  \n```",
            "examples": [],
            "hash": "0xB118AF58B5F332A1",
            "ns": "HUD",
            "aliases": ["_IS_TEXT_CHAT_ACTIVE"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x595B5178E412E199": {
            "name": "IS_MP_GAMER_TAG_FREE",
            "params": [{ "name": "gamerTagId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x595B5178E412E199",
            "ns": "HUD",
            "aliases": ["ADD_TREVOR_RANDOM_MODIFIER"],
            "jhash": "0x63959059",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x157F93B036700462": {
            "name": "IS_RADAR_HIDDEN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x157F93B036700462",
            "ns": "HUD",
            "jhash": "0x1AB3B954",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB0034A223497FFCB": {
            "name": "IS_PAUSE_MENU_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB0034A223497FFCB",
            "ns": "HUD",
            "jhash": "0xD3600591",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6F72CD94F7B5B68C": {
            "name": "IS_ONLINE_POLICIES_MENU_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "Returns the same as `IS_SOCIAL_CLUB_ACTIVE`.",
            "examples": [],
            "hash": "0x6F72CD94F7B5B68C",
            "ns": "HUD",
            "aliases": ["0x6F72CD94F7B5B68C"],
            "jhash": "0x9D4934F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDD100EB17A94FF65": {
            "name": "IS_SCRIPTED_HUD_COMPONENT_ACTIVE",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDD100EB17A94FF65",
            "ns": "HUD",
            "jhash": "0x2B86F382",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9EB6522EA68F22FE": {
            "name": "IS_RADAR_PREFERENCE_SWITCHED_ON",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9EB6522EA68F22FE",
            "ns": "HUD",
            "jhash": "0x14AEAA28",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1C491717107431C7": {
            "name": "IS_PAUSE_MENU_RESTARTING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1C491717107431C7",
            "ns": "HUD",
            "jhash": "0x3C4CF4D9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9135584D09A3437E": {
            "name": "IS_REPORTUGC_MENU_OPEN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9135584D09A3437E",
            "ns": "HUD",
            "aliases": ["0x9135584D09A3437E"],
            "jhash": "0x9D2C94FA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8B6817B71B85EBF0": {
            "name": "IS_STREAMING_ADDITIONAL_TEXT",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8B6817B71B85EBF0",
            "ns": "HUD",
            "jhash": "0xF079E4EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAD6DACA4BA53E0A4": {
            "name": "IS_SUBTITLE_PREFERENCE_SWITCHED_ON",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAD6DACA4BA53E0A4",
            "ns": "HUD",
            "jhash": "0x63BA19F5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAF42195A42C63BBA": {
            "name": "_IS_WARNING_MESSAGE_ACTIVE_2",
            "params": [],
            "results": "BOOL",
            "description": "```\nIS_WARNING_MESSAGE_*\n```",
            "examples": [],
            "hash": "0xAF42195A42C63BBA",
            "ns": "HUD",
            "aliases": ["0xAF42195A42C63BBA"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x09C0403ED9A751C2": {
            "name": "IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x09C0403ED9A751C2",
            "ns": "HUD",
            "aliases": ["0x09C0403ED9A751C2"],
            "jhash": "0xE8C8E535",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE18B138FABC53103": {
            "name": "IS_WARNING_MESSAGE_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "Returns true if a Warning Message or ReportUGC menu is active.",
            "examples": [],
            "hash": "0xE18B138FABC53103",
            "ns": "HUD",
            "aliases": ["IS_MEDICAL_DISABLED"],
            "jhash": "0x94C834AD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC406BE343FC4B9AF": {
            "name": "IS_SOCIAL_CLUB_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC406BE343FC4B9AF",
            "ns": "HUD",
            "aliases": ["0xC406BE343FC4B9AF"],
            "jhash": "0xD4DA14EF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2162C446DFDF38FD": {
            "name": "_LOG_DEBUG_INFO",
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "```\nNot present in retail version of the game, actual definiton seems to be\n_LOG_DEBUG_INFO(const char* category, const char* debugText);\n```",
            "examples": [],
            "hash": "0x2162C446DFDF38FD",
            "ns": "HUD",
            "aliases": ["0x2162C446DFDF38FD"],
            "jhash": "0x2DFD35C7",
            "manualHash": true
        },
        "0x1279E861A329E73F": {
            "name": "LOCK_MINIMAP_POSITION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "void",
            "description": "```\nLocks the minimap to the specified world position.  \n```",
            "examples": [],
            "hash": "0x1279E861A329E73F",
            "ns": "HUD",
            "jhash": "0xB9632A91",
            "manualHash": true
        },
        "0xEB709A36958ABE0D": {
            "name": "_IS_VALID_MP_GAMER_TAG_MOVIE",
            "params": [{ "name": "gamerTagId", "type": "int" }],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0xEB709A36958ABE0D",
            "ns": "HUD",
            "aliases": [
                "0xEB709A36958ABE0D",
                "_HAS_MP_GAMER_TAG_2",
                "_HAS_MP_GAMER_TAG_CREW_FLAGS_SET"
            ],
            "jhash": "0xF11414C4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x299FAEBB108AE05B": {
            "name": "LOCK_MINIMAP_ANGLE",
            "params": [{ "name": "angle", "type": "int" }],
            "results": "void",
            "description": "```\nLocks the minimap to the specified angle in integer degrees.  \nangle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.  \n```",
            "examples": [],
            "hash": "0x299FAEBB108AE05B",
            "ns": "HUD",
            "jhash": "0xDEC733E4",
            "manualHash": true
        },
        "0x1DD1F58F493F1DA5": {
            "name": "IS_WAYPOINT_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1DD1F58F493F1DA5",
            "ns": "HUD",
            "jhash": "0x5E4DF47B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0C698D8F099174C7": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x0C698D8F099174C7",
            "ns": "HUD",
            "manualHash": true
        },
        "0x0CF54F20DE43879C": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0CF54F20DE43879C",
            "ns": "HUD",
            "manualHash": true
        },
        "0x214CD562A939246A": {
            "params": [],
            "results": "BOOL",
            "description": "```\nHAS_S*\n```",
            "examples": [],
            "hash": "0x214CD562A939246A",
            "ns": "HUD",
            "jhash": "0x812CBE0E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1185A8087587322C": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSET_TEXT_??? - Used in golf and golf_mp  \n```",
            "examples": [],
            "hash": "0x1185A8087587322C",
            "ns": "HUD",
            "manualHash": true
        },
        "0xF6C09E276AEB3F2D": {
            "name": "LINK_NAMED_RENDERTARGET",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF6C09E276AEB3F2D",
            "ns": "HUD",
            "jhash": "0x6844C4B9",
            "manualHash": true
        },
        "0x211C4EF450086857": {
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x211C4EF450086857",
            "ns": "HUD",
            "jhash": "0x801D0D86",
            "manualHash": true
        },
        "0x2790F4B17D098E26": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSET_F*\n```",
            "examples": [],
            "hash": "0x2790F4B17D098E26",
            "ns": "HUD",
            "manualHash": true
        },
        "0x04655F9D075D0AE5": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSET_*\n```",
            "examples": [],
            "hash": "0x04655F9D075D0AE5",
            "ns": "HUD",
            "manualHash": true
        },
        "0x243296A510B562B6": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x243296A510B562B6",
            "ns": "HUD",
            "manualHash": true
        },
        "0x2916A928514C9827": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2916A928514C9827",
            "ns": "HUD",
            "manualHash": true
        },
        "0x2DE6C5E2E996F178": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2DE6C5E2E996F178",
            "ns": "HUD",
            "manualHash": true
        },
        "0x2C9F302398E13141": {
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "Correct native name lies between SET_BLIP_SPRITE and SET_RADIUS_BLIP_EDGE alphabetically.",
            "examples": [],
            "hash": "0x2C9F302398E13141",
            "ns": "HUD",
            "jhash": "0xCA95C487",
            "manualHash": true
        },
        "0x2E22FEFA0100275E": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2E22FEFA0100275E",
            "ns": "HUD",
            "jhash": "0x96863460",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x24A49BEAF468DC90": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x24A49BEAF468DC90",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x41350B4FC28E3941": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x41350B4FC28E3941",
            "ns": "HUD",
            "manualHash": true
        },
        "0x2F057596F2BD0061": {
            "params": [],
            "results": "BOOL",
            "description": "```\nAppears to return whether the player is using the pause menu store. Can't be sure though.  \n```",
            "examples": [],
            "hash": "0x2F057596F2BD0061",
            "ns": "HUD",
            "jhash": "0xC85C4487",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2C173AE2BDB9385E": {
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to check."
                }
            ],
            "results": "int",
            "description": "GET_BLIP_\\*\nSeems to always return 0 from what I can tell. I've tried a lot of different blip related natives and it always seems to return 0. Decompiled scripts always pass a blip handle as p0.",
            "examples": [],
            "hash": "0x2C173AE2BDB9385E",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": "Seems to always return 0 from what I can tell. I've tried a lot of different blip related natives and it always seems to return 0."
        },
        "0x4B5B620C9B59ED34": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4B5B620C9B59ED34",
            "ns": "HUD",
            "manualHash": true
        },
        "0x35A3CD97B2C0A6D2": {
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x35A3CD97B2C0A6D2",
            "ns": "HUD",
            "manualHash": true
        },
        "0x583049884A2EEE3C": {
            "name": "THEFEED_FORCE_RENDER_OFF",
            "params": [],
            "results": "void",
            "description": "Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.",
            "examples": [],
            "hash": "0x583049884A2EEE3C",
            "ns": "HUD",
            "aliases": ["0x583049884A2EEE3C", "_THEFEED_HIDE_GTAO_TOOLTIPS"],
            "jhash": "0xC8BAB2F2",
            "manualHash": true
        },
        "0x7C226D5346D4D10A": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7C226D5346D4D10A",
            "ns": "HUD",
            "manualHash": true
        },
        "0x577599CCED639CA2": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x577599CCED639CA2",
            "ns": "HUD",
            "manualHash": true
        },
        "0x57D760D55F54E071": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "```\nFORCE_*\n```",
            "examples": [],
            "hash": "0x57D760D55F54E071",
            "ns": "HUD",
            "jhash": "0x9854485F",
            "manualHash": true
        },
        "0x8410C5E0CD847B9D": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x8410C5E0CD847B9D",
            "ns": "HUD",
            "manualHash": true
        },
        "0x55F5A5F07134DE60": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x55F5A5F07134DE60",
            "ns": "HUD",
            "jhash": "0x7A569F78",
            "manualHash": true
        },
        "0x62E849B7EB28E770": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x62E849B7EB28E770",
            "ns": "HUD",
            "manualHash": true
        },
        "0x8F08017F9D7C47BD": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8F08017F9D7C47BD",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x801879A9B4F4B2FB": {
            "params": [],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0x801879A9B4F4B2FB",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x593FEAE1F73392D4": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x593FEAE1F73392D4",
            "ns": "HUD",
            "jhash": "0x22CA9F2A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x98C3CF913D895111": {
            "params": [
                { "name": "string", "type": "char*" },
                { "name": "length", "type": "int" }
            ],
            "results": "char*",
            "description": "```\nGET_F*\n```",
            "examples": [],
            "hash": "0x98C3CF913D895111",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x66E7CB63C97B7D20": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x66E7CB63C97B7D20",
            "ns": "HUD",
            "jhash": "0x92DAFA78",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x817B86108EB94E51": {
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "Any*" },
                { "name": "p5", "type": "Any*" },
                { "name": "p6", "type": "Any*" },
                { "name": "p7", "type": "Any*" },
                { "name": "p8", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nUI::_817B86108EB94E51(1, &g_189F36._f10CD1[0/*16*/], &g_189F36._f10CD1[1/*16*/], &g_189F36._f10CD1[2/*16*/], &g_189F36._f10CD1[3/*16*/], &g_189F36._f10CD1[4/*16*/], &g_189F36._f10CD1[5/*16*/], &g_189F36._f10CD1[6/*16*/], &g_189F36._f10CD1[7/*16*/]);  \n```",
            "examples": [],
            "hash": "0x817B86108EB94E51",
            "ns": "HUD",
            "jhash": "0xD2161E77",
            "manualHash": true
        },
        "0xADED7F5748ACAFE6": {
            "name": "THEFEED_COMMENT_TELEPORT_POOL_OFF",
            "params": [],
            "results": "void",
            "description": "```\nDisplays \"normal\" notifications again after calling `_0x56C8B608CFD49854` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).\n```",
            "examples": [],
            "hash": "0xADED7F5748ACAFE6",
            "ns": "HUD",
            "aliases": ["0xADED7F5748ACAFE6", "_THEFEED_SHOW_GTAO_TOOLTIPS"],
            "jhash": "0x1D6859CA",
            "manualHash": true
        },
        "0xA17784FCA9548D15": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA17784FCA9548D15",
            "ns": "HUD",
            "manualHash": true
        },
        "0x9FCB3CBFB3EAD69A": {
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "SET_C\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x9FCB3CBFB3EAD69A",
            "ns": "HUD",
            "manualHash": true
        },
        "0xBA8D65C1C65702E5": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nFORCE_*\n```",
            "examples": [],
            "hash": "0xBA8D65C1C65702E5",
            "ns": "HUD",
            "jhash": "0x58612465",
            "manualHash": true
        },
        "0xB7B873520C84C118": {
            "params": [],
            "results": "void",
            "description": "SET_C\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xB7B873520C84C118",
            "ns": "HUD",
            "manualHash": true
        },
        "0xC2D2AD9EAAE265B8": {
            "params": [],
            "results": "BOOL",
            "description": "```\nGetter for 0xCD74233600C4EA6B\n\nGET_*\n```",
            "examples": [],
            "hash": "0xC2D2AD9EAAE265B8",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA238192F33110615": {
            "params": [
                { "name": "p0", "type": "int*" },
                { "name": "p1", "type": "int*" },
                { "name": "p2", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA238192F33110615",
            "ns": "HUD",
            "jhash": "0x46794EB2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBF4F34A85CA2970C": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF4F34A85CA2970C",
            "ns": "HUD",
            "jhash": "0x317775DF",
            "manualHash": true
        },
        "0xCA6B2F7CE32AB653": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCA6B2F7CE32AB653",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC8E1071177A23BE5": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC8E1071177A23BE5",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCD74233600C4EA6B": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSetter for 0xC2D2AD9EAAE265B8\n\nSET_*\n```",
            "examples": [],
            "hash": "0xCD74233600C4EA6B",
            "ns": "HUD",
            "manualHash": true
        },
        "0xD2049635DEB9C375": {
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xD2049635DEB9C375",
            "ns": "HUD",
            "jhash": "0xE8D3A910",
            "manualHash": true
        },
        "0xDAF87174BE7454FF": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDAF87174BE7454FF",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE67C6DFD386EA5E7": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE67C6DFD386EA5E7",
            "ns": "HUD",
            "jhash": "0x5476B9FD",
            "manualHash": true
        },
        "0x805D7CBB36FD6C4C": {
            "name": "OPEN_ONLINE_POLICIES_MENU",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x805D7CBB36FD6C4C",
            "ns": "HUD",
            "aliases": ["_SHOW_SOCIAL_CLUB_LEGAL_SCREEN"],
            "jhash": "0x19FCBBB2",
            "manualHash": true
        },
        "0xB552929B85FC27EC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB552929B85FC27EC",
            "ns": "HUD",
            "manualHash": true
        },
        "0xF284AC67940C6812": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xF284AC67940C6812",
            "ns": "HUD",
            "jhash": "0x7D95AFFF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE4C3B169876D33D7": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xE4C3B169876D33D7",
            "ns": "HUD",
            "manualHash": true
        },
        "0x523A590C1A3CC0D3": {
            "name": "OPEN_REPORTUGC_MENU",
            "params": [],
            "results": "void",
            "description": "```\nShows a menu for reporting UGC content.\n```",
            "examples": [],
            "hash": "0x523A590C1A3CC0D3",
            "ns": "HUD",
            "aliases": ["0x523A590C1A3CC0D3", "_DISPLAY_JOB_REPORT"],
            "jhash": "0x10DE5150",
            "manualHash": true
        },
        "0xC594B315EDF2D4AF": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC594B315EDF2D4AF",
            "ns": "HUD",
            "jhash": "0x41B0D022",
            "manualHash": true
        },
        "0xF13FE2A80C05C561": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF13FE2A80C05C561",
            "ns": "HUD",
            "jhash": "0x850690FF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6A1738B4323FE2D9": {
            "name": "_OVERRIDE_MULTIPLAYER_CHAT_PREFIX",
            "params": [
                {
                    "name": "gxtEntryHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6A1738B4323FE2D9",
            "ns": "HUD",
            "aliases": ["0x6A1738B4323FE2D9"],
            "manualHash": true
        },
        "0xF47E567B3630DD12": {
            "name": "_OVERRIDE_MULTIPLAYER_CHAT_COLOUR",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "hudColor", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF47E567B3630DD12",
            "ns": "HUD",
            "aliases": ["0xF47E567B3630DD12"],
            "manualHash": true
        },
        "0xD1942374085C8469": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD1942374085C8469",
            "ns": "HUD",
            "manualHash": true
        },
        "0x75D3691713C3B05A": {
            "name": "OPEN_SOCIAL_CLUB_MENU",
            "params": [],
            "results": "void",
            "description": "Uses the `SOCIAL_CLUB2` scaleform.",
            "examples": [],
            "hash": "0x75D3691713C3B05A",
            "ns": "HUD",
            "aliases": ["0x75D3691713C3B05A"],
            "jhash": "0x57218529",
            "manualHash": true
        },
        "0xDE03620F8703A9DF": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xDE03620F8703A9DF",
            "ns": "HUD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9245E81072704B8A": {
            "name": "_PAUSE_MENU_DISABLE_BUSYSPINNER",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "true to disable and false to re-enable the loading icon."
                }
            ],
            "results": "void",
            "description": "Disables the loading spinner in Pause Menu when switching from one header tab to another.",
            "examples": [],
            "hash": "0x9245E81072704B8A",
            "ns": "HUD",
            "aliases": ["0x9245e81072704b8a"],
            "manualHash": true
        },
        "0xEB81A3DADD503187": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xEB81A3DADD503187",
            "ns": "HUD",
            "manualHash": true
        },
        "0xDD564BDD0472C936": {
            "name": "PAUSE_MENU_ACTIVATE_CONTEXT",
            "params": [
                {
                    "name": "hash",
                    "type": "Hash",
                    "description": "Context name hash."
                }
            ],
            "results": "void",
            "description": "Activates the specified frontend menu context.\n\npausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.\n\nThe `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.\n\nThe `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.\n\nThis basically allows you to hide certain menu sections, or things like instructional buttons.\n\nSee the old description below for more info.\n\n***\n\n> Seems to add/set the current menu context (to show/hide buttons?)\n> Pausemenu.xml:\n> `<Contexts>*ALL*, DISPLAY_CORONA_BUTTONS, *NONE*, BET_LOCKED, BET_AVAILABLE, SCROLL_OPTION</Contexts>`\n> Code:\n>\n> ```\n> if (...) {\n>     sub_bbd34(a_0, 0, \"FM_BET_HELP\");\n>     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_available}); // This native\n>     UI::OBJECT_DECAL_TOGGLE(${bet_locked});\n> } else {\n>     sub_bbd34(a_0, 0, \"\");\n>     UI::OBJECT_DECAL_TOGGLE(${bet_available});\n>     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_locked}); // This native\n> }\n> ```\n>\n> OBJECT_DECAL_TOGGLE seems to remove a context, It also has a hash collision\n> // Old\n> Scripts do not make this native's purpose clear. However, this native most likely has something to do with decals since in nearly every instance, \"OBJECT_DECAL_TOGGLE\" is called prior.",
            "examples": [],
            "hash": "0xDD564BDD0472C936",
            "ns": "HUD",
            "aliases": ["0xDD564BDD0472C936", "_ADD_FRONTEND_MENU_CONTEXT"],
            "jhash": "0x9FE8FD5E",
            "manualHash": true
        },
        "0x13C4B962653A5280": {
            "name": "_PAUSE_MENU_GET_UNIQUE_ID_OF_MOUSE_HOVERED_SLOT",
            "params": [],
            "results": "int",
            "description": "If mouse is hovering on a slot, it returns uniqueid of that slot, else it returns -1.",
            "examples": [],
            "hash": "0x13C4B962653A5280",
            "ns": "HUD",
            "aliases": ["0x13C4B962653A5280"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x84698AB38D0C6636": {
            "name": "PAUSE_MENU_IS_CONTEXT_ACTIVE",
            "params": [{ "name": "contextHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x84698AB38D0C6636",
            "ns": "HUD",
            "aliases": ["0x84698AB38D0C6636"],
            "jhash": "0xC51BC42F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x359AF31A4B52F5ED": {
            "name": "_PAUSE_MENU_GET_INDEX_OF_MOUSE_HOVERED_SLOT",
            "params": [],
            "results": "int",
            "description": "If mouse is hovering on a slot, it returns the slot's index, else it returns -1.",
            "examples": [],
            "hash": "0x359AF31A4B52F5ED",
            "ns": "HUD",
            "aliases": ["0x359AF31A4B52F5ED"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC78E239AC5B2DDB9": {
            "name": "PAUSE_MENU_SET_BUSY_SPINNER",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC78E239AC5B2DDB9",
            "ns": "HUD",
            "aliases": ["0xC78E239AC5B2DDB9"],
            "jhash": "0x6C67131A",
            "manualHash": true
        },
        "0xF83D0FEBE75E62C9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 9: Any p8\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xF83D0FEBE75E62C9",
            "ns": "HUD",
            "manualHash": true
        },
        "0x2A25ADC48F87841F": {
            "name": "PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x2A25ADC48F87841F",
            "ns": "HUD",
            "aliases": ["0x2A25ADC48F87841F"],
            "jhash": "0x016D7AF9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4895BDEA16E7C080": {
            "name": "PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS",
            "params": [
                {
                    "name": "p0",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                }
            ],
            "results": "void",
            "description": "Updates instructional buttons in Pause Menu after menu contexts have been toggled. p0 purpose is currently unknown, only 0 is used in scripts.",
            "examples": [],
            "hash": "0x4895BDEA16E7C080",
            "ns": "HUD",
            "aliases": ["_ENABLE_DEATHBLOOD_SEETHROUGH", "0x4895BDEA16E7C080"],
            "jhash": "0x15B24768",
            "manualHash": true
        },
        "0x77F16B447824DA6C": {
            "name": "PAUSE_MENUCEPTION_GO_DEEPER",
            "params": [
                {
                    "name": "pageId",
                    "type": "int",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "Sets current pause menu page/component to the specified value.\nAvailable page IDs: https://pastebin.com/qxuhwjPT",
            "examples": [],
            "hash": "0x77F16B447824DA6C",
            "ns": "HUD",
            "aliases": ["0x77F16B447824DA6C"],
            "jhash": "0x0A89336C",
            "manualHash": true
        },
        "0x444D8CF241EC25C5": {
            "name": "PAUSE_MENU_DEACTIVATE_CONTEXT",
            "params": [{ "name": "contextHash", "type": "Hash" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x444D8CF241EC25C5",
            "ns": "HUD",
            "aliases": ["OBJECT_DECAL_TOGGLE"],
            "jhash": "0x0029046E",
            "manualHash": true
        },
        "0xF06EBB91A81E09E3": {
            "name": "PAUSE_MENU_SET_WARN_ON_TAB_CHANGE",
            "params": [
                {
                    "name": "setWarn",
                    "type": "BOOL",
                    "description": "Wether to show the message or not."
                }
            ],
            "results": "void",
            "description": "Shows this warning message when trying to switch pause menu header tabs: https://i.imgur.com/8qmfztu.png",
            "examples": [],
            "hash": "0xF06EBB91A81E09E3",
            "ns": "HUD",
            "aliases": ["0xF06EBB91A81E09E3"],
            "jhash": "0x11D09737",
            "manualHash": true
        },
        "0xC65AB383CD91DF98": {
            "name": "PRELOAD_BUSYSPINNER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC65AB383CD91DF98",
            "ns": "HUD",
            "aliases": ["0xC65AB383CD91DF98"],
            "jhash": "0x71077FBD",
            "manualHash": true
        },
        "0x1EAE6DD17B7A5EFA": {
            "name": "_RACE_GALLERY_NEXT_BLIP_SPRITE",
            "params": [{ "name": "spriteId", "type": "int" }],
            "results": "void",
            "description": "```\nSets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).\n```",
            "examples": [],
            "hash": "0x1EAE6DD17B7A5EFA",
            "ns": "HUD",
            "aliases": ["0x1EAE6DD17B7A5EFA"],
            "jhash": "0x13E7A5A9",
            "manualHash": true
        },
        "0xCDCA26E80FAECB8F": {
            "name": "PAUSE_MENUCEPTION_THE_KICK",
            "params": [],
            "results": "void",
            "description": "Forces the Pause Menu to back out of unique pages such as Awards, Unlocks, Key Bindings etc",
            "examples": [],
            "hash": "0xCDCA26E80FAECB8F",
            "ns": "HUD",
            "aliases": ["0xCDCA26E80FAECB8F"],
            "jhash": "0xC84BE309",
            "manualHash": true
        },
        "0x742D6FD43115AF73": {
            "name": "PULSE_BLIP",
            "params": [{ "name": "blip", "type": "Blip" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x742D6FD43115AF73",
            "ns": "HUD",
            "jhash": "0x44253855",
            "manualHash": true
        },
        "0x14621BB1DF14E2B2": {
            "name": "RELEASE_CONTROL_OF_FRONTEND",
            "params": [],
            "results": "void",
            "description": "Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.\n\nTo disable the keys, use [`0xEC9264727EEC0F28`](#\\_0xEC9264727EEC0F28).",
            "examples": [],
            "hash": "0x14621BB1DF14E2B2",
            "ns": "HUD",
            "aliases": ["0x14621BB1DF14E2B2"],
            "jhash": "0xB9392CE7",
            "manualHash": true
        },
        "0x551DF99658DB6EE8": {
            "name": "_RACE_GALLERY_ADD_BLIP",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "Any",
            "description": "```\nAdd a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.\n```",
            "examples": [],
            "hash": "0x551DF99658DB6EE8",
            "ns": "HUD",
            "aliases": ["0x551DF99658DB6EE8"],
            "jhash": "0x786CA0A2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x86A652570E5F25DD": {
            "name": "REMOVE_BLIP",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip*",
                    "description": "Blip handle to remove."
                }
            ],
            "results": "void",
            "description": "Removes the blip from your map.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Create the blip\nlocal coords = vector3(200.0, 200.0, 5.0)\nlocal blip = AddBlipForCoord(coords)\n\n-- When you want to remove it\nRemoveBlip(blip)"
                }
            ],
            "hash": "0x86A652570E5F25DD",
            "ns": "HUD",
            "jhash": "0xD8C3C1CD",
            "manualHash": true
        },
        "0x31698AA80E0223F8": {
            "name": "REMOVE_MP_GAMER_TAG",
            "params": [
                {
                    "name": "gamerTagId",
                    "type": "int",
                    "description": "A player ID with a gamer tag or a fake gamer tag ID."
                }
            ],
            "results": "void",
            "description": "Removes the gamer tag associated with the provided ID. This does not happen instantly. Use [IS_MP_GAMER_TAG_FREE](#\\_0x595B5178E412E199) to determine when the ID is free for reuse.",
            "examples": [],
            "hash": "0x31698AA80E0223F8",
            "ns": "HUD",
            "aliases": ["0x31698AA80E0223F8"],
            "jhash": "0x3D081FE4",
            "manualHash": true
        },
        "0x57D9C12635E25CE3": {
            "name": "REGISTER_NAMED_RENDERTARGET",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x57D9C12635E25CE3",
            "ns": "HUD",
            "jhash": "0xFAE5D6F0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5354C5BA2EA868A4": {
            "name": "_RACE_GALLERY_FULLSCREEN",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf toggle is true, the map is shown in full screen\nIf toggle is false, the map is shown in normal mode\n```",
            "examples": [],
            "hash": "0x5354C5BA2EA868A4",
            "ns": "HUD",
            "aliases": ["0x5354C5BA2EA868A4", "_SET_MAP_FULL_SCREEN"],
            "jhash": "0xE4FD20D8",
            "manualHash": true
        },
        "0x968F270E39141ECA": {
            "name": "REMOVE_MULTIPLAYER_HUD_CASH",
            "params": [],
            "results": "void",
            "description": "```\nRemoves multiplayer cash hud each frame  \n```",
            "examples": [],
            "hash": "0x968F270E39141ECA",
            "ns": "HUD",
            "jhash": "0x07BF4A7D",
            "manualHash": true
        },
        "0x81FA173F170560D1": {
            "name": "REFRESH_WAYPOINT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x81FA173F170560D1",
            "ns": "HUD",
            "jhash": "0xB395D753",
            "manualHash": true
        },
        "0x1CCC708F0F850613": {
            "name": "REPLACE_HUD_COLOUR",
            "params": [
                { "name": "hudColorIndex", "type": "int" },
                { "name": "hudColorIndex2", "type": "int" }
            ],
            "results": "void",
            "description": "Changes the hud color at a given index (hudColorIndex) by another one (hudColorIndex2).\n\nHUD colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)",
            "examples": [],
            "hash": "0x1CCC708F0F850613",
            "ns": "HUD",
            "aliases": ["0x1CCC708F0F850613", "_SET_HUD_COLOURS_SWITCH"],
            "jhash": "0x3B216749",
            "manualHash": true
        },
        "0xE9F6FFE837354DD4": {
            "name": "RELEASE_NAMED_RENDERTARGET",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE9F6FFE837354DD4",
            "ns": "HUD",
            "jhash": "0xD3F6C892",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7C6789AA1CFEDD0": {
            "name": "REMOVE_MULTIPLAYER_BANK_CASH",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC7C6789AA1CFEDD0",
            "ns": "HUD",
            "jhash": "0x728B4EF4",
            "manualHash": true
        },
        "0xF314CF4F0211894E": {
            "name": "REPLACE_HUD_COLOUR_WITH_RGBA",
            "params": [
                { "name": "hudColorIndex", "type": "int" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "a", "type": "int" }
            ],
            "results": "void",
            "description": "Hud colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)",
            "examples": [],
            "hash": "0xF314CF4F0211894E",
            "ns": "HUD",
            "aliases": ["0xF314CF4F0211894E", "_SET_HUD_COLOUR"],
            "jhash": "0xF6E7E92B",
            "manualHash": true
        },
        "0x95CF81BD06EE1887": {
            "name": "REMOVE_MULTIPLAYER_WALLET_CASH",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x95CF81BD06EE1887",
            "ns": "HUD",
            "aliases": ["0x95CF81BD06EE1887"],
            "jhash": "0x7BFFE82F",
            "manualHash": true
        },
        "0x71A78003C8E71424": {
            "name": "REQUEST_ADDITIONAL_TEXT",
            "params": [
                { "name": "gxt", "type": "char*" },
                { "name": "slot", "type": "int" }
            ],
            "results": "void",
            "description": "```\nRequest a gxt into the passed slot.  \n```",
            "examples": [],
            "hash": "0x71A78003C8E71424",
            "ns": "HUD",
            "jhash": "0x9FA9175B",
            "manualHash": true
        },
        "0x6009F9F1AE90D8A6": {
            "name": "REQUEST_ADDITIONAL_TEXT_FOR_DLC",
            "params": [
                { "name": "gxt", "type": "char*" },
                { "name": "slot", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6009F9F1AE90D8A6",
            "ns": "HUD",
            "aliases": ["_REQUEST_ADDITIONAL_TEXT_2"],
            "jhash": "0xF4D27EBE",
            "manualHash": true
        },
        "0x6EF54AB721DC6242": {
            "name": "_REMOVE_WARNING_MESSAGE_LIST_ITEMS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6EF54AB721DC6242",
            "ns": "HUD",
            "aliases": ["0x6EF54AB721DC6242"],
            "manualHash": true
        },
        "0xB99C4E4D9499DF29": {
            "name": "RESET_GLOBAL_ACTIONSCRIPT_FLAG",
            "params": [{ "name": "flagIndex", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB99C4E4D9499DF29",
            "ns": "HUD",
            "aliases": ["0xB99C4E4D9499DF29"],
            "jhash": "0x4C4C10CF",
            "manualHash": true
        },
        "0x450930E616475D0D": {
            "name": "RESET_HUD_COMPONENT_VALUES",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x450930E616475D0D",
            "ns": "HUD",
            "jhash": "0xD15B46DA",
            "manualHash": true
        },
        "0x10706DC6AD2D49C0": {
            "name": "RESTART_FRONTEND_MENU",
            "params": [
                { "name": "menuHash", "type": "Hash" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nBefore using this native click the native above and look at the decription.  \nExample:  \nint GetHash = Function.Call<int>(Hash.GET_HASH_KEY, \"fe_menu_version_corona_lobby\");  \nFunction.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);  \nFunction.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);  \nThis native refreshes the frontend menu.  \np1 = Hash of Menu  \np2 = Unknown but always works with -1.  \n```",
            "examples": [],
            "hash": "0x10706DC6AD2D49C0",
            "ns": "HUD",
            "jhash": "0xB07DAF98",
            "manualHash": true
        },
        "0x1DFEDD15019315A9": {
            "name": "_SET_ABILITY_BAR_VISIBILITY_IN_MULTIPLAYER",
            "params": [{ "name": "visible", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x1DFEDD15019315A9",
            "ns": "HUD",
            "manualHash": true
        },
        "0x24AC0137444F9FD5": {
            "name": "SET_BLIP_AS_MISSION_CREATOR_BLIP",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x24AC0137444F9FD5",
            "ns": "HUD",
            "jhash": "0x802FB686",
            "manualHash": true
        },
        "0x9969599CCFF5D85E": {
            "name": "SET_ABILITY_BAR_VALUE",
            "params": [
                { "name": "value", "type": "float" },
                { "name": "maxValue", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9969599CCFF5D85E",
            "ns": "HUD",
            "jhash": "0x24E53FD8",
            "manualHash": true
        },
        "0x12782CE0A636E9F0": {
            "name": "RESET_RETICULE_VALUES",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x12782CE0A636E9F0",
            "ns": "HUD",
            "jhash": "0xBE27AA3F",
            "manualHash": true
        },
        "0x231C8F89D0539D8F": {
            "name": "SET_BIGMAP_ACTIVE",
            "params": [
                {
                    "name": "toggleBigMap",
                    "type": "BOOL",
                    "description": "Enable or disable the expanded minimap."
                },
                {
                    "name": "showFullMap",
                    "type": "BOOL",
                    "description": "Enable or disable the full map from being shown on the minimap, requires p0 to be true."
                }
            ],
            "results": "void",
            "description": "Toggles the big minimap state like in GTA:Online.\n\nTo get the current state of the minimap, use [`IS_BIGMAP_ACTIVE`](#\\_0xFFF65C63).",
            "examples": [],
            "hash": "0x231C8F89D0539D8F",
            "ns": "HUD",
            "aliases": ["_SET_RADAR_BIGMAP_ENABLED"],
            "jhash": "0x08EB83D2",
            "manualHash": true
        },
        "0x234CDD44D996FD9A": {
            "name": "SET_BLIP_CATEGORY",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to change the category index of"
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "The category index to change to"
                }
            ],
            "results": "void",
            "description": "Examples result:\n\n![](https://i.imgur.com/skY6vAJ.png)\n\n**index:**\n\n```\n1 = No distance shown in legend\n2 = Distance shown in legend\n7 = \"Other Players\" category, also shows distance in legend\n10 = \"Property\" category\n11 = \"Owned Property\" category\n```\n\nAny other value behaves like `index = 1`, `index` wraps around after 255\n\nBlips with categories `7`, `10` or `11` will all show under the specific categories listing in the map legend, regardless of sprite or name.\n\n**Legend entries**\n\n| index | Legend entry | Label |\n| --- | --- | --- |\n| 7 | Other Players | `BLIP_OTHPLYR` |\n| 10 | Property | `BLIP_PROPCAT` |\n| 11 | Owned Property | `BLIP_APARTCAT` |",
            "examples": [
                {
                    "lang": "lua",
                    "code": "blip = AddBlipForCoord(-702.97290039063, -1393.2911376953, 5.1502623558044)\nSetBlipSprite(blip, 370) -- Helipad For Sale\nSetBlipCategory(blip, 10)\n\nblip = AddBlipForCoord(-712.40521240234, -1298.7811279297, 5.1019215583801)\nSetBlipSprite(blip, 371) -- Dock For Sale\nSetBlipCategory(blip, 10)\n\nblip = AddBlipForCoord(-927.92755126953, -2824.1362304688, 13.947744369507)\nSetBlipSprite(blip, 372) -- Hangar For Sale\nSetBlipCategory(blip, 10)"
                }
            ],
            "hash": "0x234CDD44D996FD9A",
            "ns": "HUD",
            "jhash": "0xEF72F533",
            "manualHash": true
        },
        "0x6F6F290102C02AB4": {
            "name": "SET_BLIP_AS_FRIENDLY",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip handle"
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "True for friendly, false for enemy"
                }
            ],
            "results": "void",
            "description": "Allows the user to set a blip as friendly or enemy based on the toggle.",
            "examples": [],
            "hash": "0x6F6F290102C02AB4",
            "ns": "HUD",
            "jhash": "0xF290CFD8",
            "manualHash": true
        },
        "0xBE8BE4FE60E27B72": {
            "name": "SET_BLIP_AS_SHORT_RANGE",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip handle."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "True to only display the blip as 'short range', false to display the blip from a longer distance."
                }
            ],
            "results": "void",
            "description": "Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.",
            "examples": [],
            "hash": "0xBE8BE4FE60E27B72",
            "ns": "HUD",
            "jhash": "0x5C67725E",
            "manualHash": true
        },
        "0x889329C80FE5963C": {
            "name": "_SET_ALLOW_ABILITY_BAR_IN_MULTIPLAYER",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x889329C80FE5963C",
            "ns": "HUD",
            "manualHash": true
        },
        "0xB203913733F27884": {
            "name": "SET_BLIP_BRIGHT",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB203913733F27884",
            "ns": "HUD",
            "jhash": "0x72BEE6DF",
            "manualHash": true
        },
        "0xC4278F70131BAA6D": {
            "name": "_SET_BLIP_DISPLAY_INDICATOR_ON_BLIP",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMust be toggled before being queued for animation\n```",
            "examples": [],
            "hash": "0xC4278F70131BAA6D",
            "ns": "HUD",
            "aliases": ["0xC4278F70131BAA6D"],
            "jhash": "0x6AA6A1CC",
            "manualHash": true
        },
        "0x45FF974EEE1C8734": {
            "name": "SET_BLIP_ALPHA",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets alpha-channel for blip color.\nExample:\nBlip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);\nHUD::SET_BLIP_COLOUR(blip , 3);\nHUD::SET_BLIP_ALPHA(blip , 64);\n```",
            "examples": [],
            "hash": "0x45FF974EEE1C8734",
            "ns": "HUD",
            "jhash": "0xA791FCCD",
            "manualHash": true
        },
        "0x9029B2F3DA924928": {
            "name": "SET_BLIP_DISPLAY",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "displayId", "type": "int" }
            ],
            "results": "void",
            "description": "**displayId Behaviour**\n\n| display ID \t| Behaviour                                                   \t|\n|------------\t|-------------------------------------------------------------\t|\n| 0          \t| Doesn't show up, ever, anywhere.                            \t|\n| 1          \t| Doesn't show up, ever, anywhere.                            \t|\n| 2          \t| Shows on both main map and minimap. (Selectable on map)     \t|\n| 3          \t| Shows on main map only. (Selectable on map)                 \t|\n| 4          \t| Shows on main map only. (Selectable on map)                 \t|\n| 5          \t| Shows on minimap only.                                      \t|\n| 6          \t| Shows on both main map and minimap. (Selectable on map)     \t|\n| 7          \t| Doesn't show up, ever, anywhere.                            \t|\n| 8          \t| Shows on both main map and minimap. (Not selectable on map) \t|\n| 9          \t| Shows on minimap only.                                      \t|\n| 10         \t| Shows on both main map and minimap. (Not selectable on map) \t|\n\nAnything higher than 10 seems to be exactly the same as 10.\n\nRockstar seem to only use 0, 2, 3, 4, 5 and 8 in the decompiled scripts.",
            "examples": [],
            "hash": "0x9029B2F3DA924928",
            "ns": "HUD",
            "jhash": "0x2B521F91",
            "manualHash": true
        },
        "0x03D7FB09E75D6B7E": {
            "name": "SET_BLIP_COLOUR",
            "params": [
                { "name": "blip", "type": "Blip" },
                {
                    "name": "color",
                    "type": "int",
                    "description": "See [blip colors here](https://docs.fivem.net/docs/game-references/blips/#blip-colors)"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x03D7FB09E75D6B7E",
            "ns": "HUD",
            "jhash": "0xBB3C5A41",
            "manualHash": true
        },
        "0xAE2AF67E9D9AF65D": {
            "name": "SET_BLIP_COORDS",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAE2AF67E9D9AF65D",
            "ns": "HUD",
            "jhash": "0x680A34D4",
            "manualHash": true
        },
        "0x2AEE8F8390D2298C": {
            "name": "SET_BLIP_FADE",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "opacity", "type": "int" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2AEE8F8390D2298C",
            "ns": "HUD",
            "jhash": "0xA5999031",
            "manualHash": true
        },
        "0xAA51DB313C010A7E": {
            "name": "SET_BLIP_FLASH_INTERVAL",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to change flashing interval"
                },
                {
                    "name": "interval",
                    "type": "int",
                    "description": "Interval in milliseconds before flashing the blip"
                }
            ],
            "results": "void",
            "description": "Sets the interval in milliseconds before flashing the blip.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local blip = AddBlipForCoord(0, 0, 0)\n\nSetBlipFlashes(blip, true)\n\n-- flash the blip every 50ms\nSetBlipFlashInterval(blip, 50)"
                },
                {
                    "lang": "js",
                    "code": "const blip = AddBlipForCoord(0, 0, 0)\n\nSetBlipFlashes(blip, true)\n\n// flash the blip every 50ms\nSetBlipFlashInterval(blip, 50)"
                }
            ],
            "hash": "0xAA51DB313C010A7E",
            "ns": "HUD",
            "jhash": "0xEAF67377",
            "manualHash": true
        },
        "0xB14552383D39CE3E": {
            "name": "SET_BLIP_FLASHES",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB14552383D39CE3E",
            "ns": "HUD",
            "jhash": "0xC0047F15",
            "manualHash": true
        },
        "0xE2590BC29220CEBB": {
            "name": "SET_BLIP_HIGH_DETAIL",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE2590BC29220CEBB",
            "ns": "HUD",
            "jhash": "0xD5842BFF",
            "manualHash": true
        },
        "0x54318C915D27E4CE": {
            "name": "SET_BLIP_HIDDEN_ON_LEGEND",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x54318C915D27E4CE",
            "ns": "HUD",
            "aliases": ["0x54318C915D27E4CE"],
            "jhash": "0x43996428",
            "manualHash": true
        },
        "0xAE9FC9EF6A9FAC79": {
            "name": "SET_BLIP_PRIORITY",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "priority", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSee this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935  \n```",
            "examples": [],
            "hash": "0xAE9FC9EF6A9FAC79",
            "ns": "HUD",
            "jhash": "0xCE87DA6F",
            "manualHash": true
        },
        "0xD3CD6FD297AE87CC": {
            "name": "SET_BLIP_FLASH_TIMER",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to start flashing"
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "Time in milliseconds to flash the blip before stopping"
                }
            ],
            "results": "void",
            "description": "Flashes blip for time in milliseconds before stopping.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local blip = AddBlipForCoord(0, 0, 0)\n\n-- flash blip for seven seconds then stop\nSetBlipFlashTimer(blip, 7000)"
                },
                {
                    "lang": "js",
                    "code": "const blip = AddBlipForCoord(0, 0, 0)\n\n//flash blip for seven seconds then stop\nSetBlipFlashTimer(blip, 7000)"
                }
            ],
            "hash": "0xD3CD6FD297AE87CC",
            "ns": "HUD",
            "jhash": "0x8D5DF611",
            "manualHash": true
        },
        "0x2E8D9498C56DD0D1": {
            "name": "SET_BLIP_FLASHES_ALTERNATE",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2E8D9498C56DD0D1",
            "ns": "HUD",
            "jhash": "0x1A81202B",
            "manualHash": true
        },
        "0x4F7D8A9BFB0B43E9": {
            "name": "SET_BLIP_ROUTE",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "enabled", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nEnable / disable showing route for the Blip-object.  \n```",
            "examples": [],
            "hash": "0x4F7D8A9BFB0B43E9",
            "ns": "HUD",
            "jhash": "0x3E160C90",
            "manualHash": true
        },
        "0x837155CD2F63DA09": {
            "name": "SET_BLIP_ROUTE_COLOUR",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "colour", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x837155CD2F63DA09",
            "ns": "HUD",
            "jhash": "0xDDE7C65C",
            "manualHash": true
        },
        "0xEAA0FFE120D92784": {
            "name": "SET_BLIP_NAME_FROM_TEXT_FILE",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "gxtEntry", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nDoesn't work if the label text of gxtEntry is >= 80.  \n```",
            "examples": [],
            "hash": "0xEAA0FFE120D92784",
            "ns": "HUD",
            "jhash": "0xAC8A5461",
            "manualHash": true
        },
        "0xD38744167B2FA257": {
            "name": "SET_BLIP_SCALE",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "scale", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD38744167B2FA257",
            "ns": "HUD",
            "jhash": "0x1E6EC434",
            "manualHash": true
        },
        "0xF87683CDF73C3F6E": {
            "name": "SET_BLIP_ROTATION",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "rotation", "type": "int" }
            ],
            "results": "void",
            "description": "```\nAfter some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.\n```",
            "examples": [],
            "hash": "0xF87683CDF73C3F6E",
            "ns": "HUD",
            "jhash": "0x6B8F44FE",
            "manualHash": true
        },
        "0x2B6D467DAB714E8D": {
            "name": "_SET_BLIP_SHRINK",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMakes a blip go small when off the minimap.\nSET_BLIP_AS_*\n```",
            "examples": [],
            "hash": "0x2B6D467DAB714E8D",
            "ns": "HUD",
            "aliases": ["0x2B6D467DAB714E8D"],
            "jhash": "0xC575F0BC",
            "manualHash": true
        },
        "0x127DE7B20C60A6A3": {
            "name": "SET_BLIP_NAME_TO_PLAYER_NAME",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "player", "type": "Player" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x127DE7B20C60A6A3",
            "ns": "HUD",
            "jhash": "0x03A0B8F9",
            "manualHash": true
        },
        "0x14892474891E09EB": {
            "name": "SET_BLIP_SECONDARY_COLOUR",
            "params": [
                { "name": "blip", "type": "Blip" },
                {
                    "name": "r",
                    "type": "int",
                    "annotations": { "cs_type": "float" }
                },
                {
                    "name": "g",
                    "type": "int",
                    "annotations": { "cs_type": "float" }
                },
                {
                    "name": "b",
                    "type": "int",
                    "annotations": { "cs_type": "float" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x14892474891E09EB",
            "ns": "HUD",
            "jhash": "0xC6384D32",
            "manualHash": true
        },
        "0x13127EC3665E8EE1": {
            "name": "SET_BLIP_SHOW_CONE",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x13127EC3665E8EE1",
            "ns": "HUD",
            "jhash": "0xFF545AD8",
            "manualHash": true
        },
        "0x39BBF623FC803EAC": {
            "name": "SET_COLOUR_OF_NEXT_TEXT_COMPONENT",
            "params": [{ "name": "hudColor", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x39BBF623FC803EAC",
            "ns": "HUD",
            "aliases": ["0x39BBF623FC803EAC", "_SET_NOTIFICATION_COLOR_NEXT"],
            "jhash": "0x6F1A1901",
            "manualHash": true
        },
        "0xA8B6AFDAC320AC87": {
            "name": "_SET_BLIP_SQUARED_ROTATION",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "heading", "type": "float" }
            ],
            "results": "void",
            "description": "```\nDoes not require whole number/integer rotations.\n```",
            "examples": [],
            "hash": "0xA8B6AFDAC320AC87",
            "ns": "HUD",
            "aliases": ["0xA8B6AFDAC320AC87"],
            "manualHash": true
        },
        "0xCD6524439909C979": {
            "name": "_SET_BLIP_SCALE_TRANSFORMATION",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "xScale", "type": "float" },
                { "name": "yScale", "type": "float" }
            ],
            "results": "void",
            "description": "See https://imgur.com/a/lLkEsMN\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xCD6524439909C979",
            "ns": "HUD",
            "manualHash": true
        },
        "0xDF735600A4696DAF": {
            "name": "SET_BLIP_SPRITE",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to change."
                },
                {
                    "name": "spriteId",
                    "type": "int",
                    "description": "The sprite ID to set."
                }
            ],
            "results": "void",
            "description": "Sets the displayed sprite for a specific blip.\n\nThere's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetBlipSprite(blip, 588) -- changes `blip` to radar_nhp_orbit"
                }
            ],
            "hash": "0xDF735600A4696DAF",
            "ns": "HUD",
            "jhash": "0x8DBBB0B9",
            "manualHash": true
        },
        "0xB094BC1DB4018240": {
            "name": "SET_FLOATING_HELP_TEXT_TO_ENTITY",
            "params": [
                { "name": "hudIndex", "type": "int" },
                { "name": "entity", "type": "Entity" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB094BC1DB4018240",
            "ns": "HUD",
            "aliases": ["0xB094BC1DB4018240"],
            "jhash": "0x18B012B7",
            "manualHash": true
        },
        "0x7679CC1BCEBE3D4C": {
            "name": "SET_FLOATING_HELP_TEXT_SCREEN_POSITION",
            "params": [
                { "name": "hudIndex", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7679CC1BCEBE3D4C",
            "ns": "HUD",
            "aliases": ["0x7679CC1BCEBE3D4C"],
            "jhash": "0x198F32D7",
            "manualHash": true
        },
        "0x2632482FD6B9AB87": {
            "name": "_SET_DIRECTOR_MODE_CLEAR_TRIGGERED_FLAG",
            "params": [],
            "results": "void",
            "description": "```\nSET_*\n```",
            "examples": [],
            "hash": "0x2632482FD6B9AB87",
            "ns": "HUD",
            "aliases": ["0x2632482FD6B9AB87"],
            "manualHash": true
        },
        "0x788E7FD431BD67F1": {
            "name": "SET_FLOATING_HELP_TEXT_STYLE",
            "params": [
                {
                    "name": "hudIndex",
                    "type": "int",
                    "description": "The hud index for the floating help message"
                },
                {
                    "name": "style",
                    "type": "int",
                    "description": "Value 0 won't show an arrow at all. Values 1, 2 and -2 will display an arrow."
                },
                {
                    "name": "hudColor",
                    "type": "int",
                    "description": "https://docs.fivem.net/docs/game-references/hud-colors/"
                },
                {
                    "name": "alpha",
                    "type": "int",
                    "description": "Value for the help box opacity, from 0-255. Anything greater will simply ignore the alpha value. Always 191 in R\\* scripts."
                },
                {
                    "name": "arrowPosition",
                    "type": "int",
                    "description": "Used to set the arrow positon. No value will hide the arrow"
                },
                {
                    "name": "boxOffset",
                    "type": "int",
                    "description": "Offset for the floating help box. Note: Arrow stays fixed"
                }
            ],
            "results": "void",
            "description": "### Arrow Positions\n\n*   0 = Off / No arrow\n*   1 = Top\n*   2 = Left\n*   3 = Bottom\n*   4 = Right\n\n### Note\n\nAny numeric value greater than 4 will result in a right arrow (Index 4)\n\n### Important\n\nNeeds to be called every frame\n\n![Preview of the provided example code](https://forum.cfx.re/uploads/default/original/4X/7/f/3/7f319bc93c3a00b8829bd4ac8dddc235fbf3a9ef.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "function DisplayHelpText(string)\n    BeginTextCommandDisplayHelp(\"STRING\")\n    AddTextComponentSubstringPlayerName(string)\n    EndTextCommandDisplayHelp(1, false, false, 0)\nend\n\nCreateThread(function()\n    while true do\n        Wait(0)\n\n        local Ped = PlayerPedId()\n\n        DisplayHelpText('Example Text')\n        SetFloatingHelpTextStyle(0, 2, 2, 0, 3, 0)\n        SetFloatingHelpTextToEntity(0, Ped, 0, 0)\n    end\nend)"
                },
                {
                    "lang": "js",
                    "code": "function DisplayHelpText(string) {\n    BeginTextCommandDisplayHelp(\"STRING\")\n    AddTextComponentSubstringPlayerName(string)\n    EndTextCommandDisplayHelp(1, false, false, 0)\n}\n\nsetTick(() => {\n    const Ped = PlayerPedId()\n\n    DisplayHelpText('Example Text')\n    SetFloatingHelpTextStyle(0, 2, 2, 0, 3, 0)\n    SetFloatingHelpTextToEntity(0, Ped, 0, 0)\n})"
                }
            ],
            "hash": "0x788E7FD431BD67F1",
            "ns": "HUD",
            "aliases": ["0x788E7FD431BD67F1"],
            "jhash": "0x97852A82",
            "manualHash": true
        },
        "0x745711A75AB09277": {
            "name": "SET_FRONTEND_ACTIVE",
            "params": [{ "name": "active", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x745711A75AB09277",
            "ns": "HUD",
            "jhash": "0x81E1AD32",
            "manualHash": true
        },
        "0x784BA7E0ECEB4178": {
            "name": "SET_FLOATING_HELP_TEXT_WORLD_POSITION",
            "params": [
                { "name": "hudIndex", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x784BA7E0ECEB4178",
            "ns": "HUD",
            "aliases": ["0x784BA7E0ECEB4178"],
            "jhash": "0x93045157",
            "manualHash": true
        },
        "0x900086F371220B6F": {
            "name": "SET_GPS_CUSTOM_ROUTE_RENDER",
            "params": [
                { "name": "toggle", "type": "BOOL" },
                {
                    "name": "radarThickness",
                    "type": "int",
                    "description": "The width of the GPS route on the radar"
                },
                {
                    "name": "mapThickness",
                    "type": "int",
                    "description": "The width of the GPS route on the map"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x900086F371220B6F",
            "ns": "HUD",
            "aliases": ["0x900086F371220B6F"],
            "jhash": "0xDA0AF00E",
            "manualHash": true
        },
        "0x3DDA37128DD1ACA8": {
            "name": "SET_GPS_MULTI_ROUTE_RENDER",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3DDA37128DD1ACA8",
            "ns": "HUD",
            "aliases": ["0x3DDA37128DD1ACA8"],
            "jhash": "0xE87CBE4C",
            "manualHash": true
        },
        "0x320D0E0D936A0E9B": {
            "name": "SET_GPS_FLASHES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x320D0E0D936A0E9B",
            "ns": "HUD",
            "jhash": "0xE991F733",
            "manualHash": true
        },
        "0xAABB1F56E2A17CED": {
            "name": "SET_HUD_COMPONENT_POSITION",
            "params": [
                { "name": "id", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAABB1F56E2A17CED",
            "ns": "HUD",
            "jhash": "0x2F3A0D15",
            "manualHash": true
        },
        "0x504DFE62A1692296": {
            "name": "_SET_INTERIOR_ZOOM_LEVEL_INCREASED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x504DFE62A1692296",
            "ns": "HUD",
            "aliases": ["0x504DFE62A1692296"],
            "manualHash": true
        },
        "0x5B440763A4C8D15B": {
            "name": "SET_GPS_FLAGS",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nOnly the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.\nDoesn't seem like the flags are actually read by the game at all.\n```",
            "examples": [],
            "hash": "0x5B440763A4C8D15B",
            "ns": "HUD",
            "jhash": "0x60539BAB",
            "manualHash": true
        },
        "0x7B21E0BB01E8224A": {
            "name": "_SET_MAIN_PLAYER_BLIP_COLOUR",
            "params": [{ "name": "color", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7B21E0BB01E8224A",
            "ns": "HUD",
            "aliases": ["0x7B21E0BB01E8224A"],
            "manualHash": true
        },
        "0xB9C362BABECDDC7A": {
            "name": "_SET_HELP_MESSAGE_TEXT_STYLE",
            "params": [
                { "name": "style", "type": "int" },
                { "name": "hudColor", "type": "int" },
                { "name": "alpha", "type": "int" },
                { "name": "p3", "type": "int" },
                { "name": "p4", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB9C362BABECDDC7A",
            "ns": "HUD",
            "aliases": ["0xB9C362BABECDDC7A"],
            "manualHash": true
        },
        "0x975D66A0BC17064C": {
            "name": "SET_MAX_HEALTH_HUD_DISPLAY",
            "params": [{ "name": "maximumValue", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x975D66A0BC17064C",
            "ns": "HUD",
            "aliases": ["0x975D66A0BC17064C"],
            "jhash": "0xF07D8CEF",
            "manualHash": true
        },
        "0x06A320535F5F0248": {
            "name": "SET_MAX_ARMOUR_HUD_DISPLAY",
            "params": [{ "name": "maximumValue", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x06A320535F5F0248",
            "ns": "HUD",
            "aliases": ["0x06A320535F5F0248"],
            "jhash": "0x827F14DE",
            "manualHash": true
        },
        "0x3F5CC444DCAAA8F2": {
            "name": "SET_HEALTH_HUD_DISPLAY_VALUES",
            "params": [
                { "name": "health", "type": "int" },
                { "name": "capacity", "type": "int" },
                { "name": "wasAdded", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3F5CC444DCAAA8F2",
            "ns": "HUD",
            "aliases": ["0x3F5CC444DCAAA8F2"],
            "jhash": "0x7FB6FB2A",
            "manualHash": true
        },
        "0x58FADDED207897DC": {
            "name": "SET_MINIMAP_BLOCK_WAYPOINT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x58FADDED207897DC",
            "ns": "HUD",
            "jhash": "0xA41C3B62",
            "manualHash": true
        },
        "0x7EC8ABA5E74B3D7A": {
            "name": "_SET_INTERIOR_ZOOM_LEVEL_DECREASED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x7EC8ABA5E74B3D7A",
            "ns": "HUD",
            "aliases": ["0x7EC8ABA5E74B3D7A"],
            "manualHash": true
        },
        "0x0923DBF87DFF735E": {
            "name": "SET_MINIMAP_FOW_REVEAL_COORDINATE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0923DBF87DFF735E",
            "ns": "HUD",
            "aliases": ["0x0923DBF87DFF735E"],
            "jhash": "0xE010F081",
            "manualHash": true
        },
        "0xD201F3FF917A506D": {
            "name": "_SET_MINIMAP_ALTITUDE_INDICATOR_LEVEL",
            "params": [
                { "name": "altitude", "type": "float" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nArgument must be 0.0f or above 38.0f, or it will be ignored.  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0xD201F3FF917A506D",
            "ns": "HUD",
            "aliases": ["_SET_MINIMAP_ATTITUDE_INDICATOR_LEVEL"],
            "jhash": "0x0308EDF6",
            "manualHash": true
        },
        "0x71BDB63DBAF8DA59": {
            "name": "SET_MINIMAP_GOLF_COURSE",
            "params": [
                {
                    "name": "hole",
                    "type": "int",
                    "description": "The ID of the hole to draw on the map. ID starts with 1 for hole 1, 2 for hole 2, etc. 0 disables the golf map behaviour."
                }
            ],
            "results": "void",
            "description": "Not much is known so far on what it does *exactly*.\nAll I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.\n\nYou need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.\nYou'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.\n\nUse [`SET_MINIMAP_GOLF_COURSE_OFF()`](#\\_0x35EDD5B2E3FF01C0) to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).",
            "examples": [
                {
                    "lang": "cs",
                    "code": "// draw hole 2\nSetMinimapGolfCourse(2);\n\n// set the other minimap properties for this specific hole:\nSetRadarZoom(850);\nLockMinimapPosition(-1220.0f, 240.0f);\nLockMinimapAngle(90);\nToggleStealthRadar(false);\nSetRadarBigmapEnabled(false, false);\n\n// Create the flag blip and set the sprite to the flag sprite.\nint blip = AddBlipForCoord(-1321.98f, 158.93f, 57.8f);\nSetBlipSprite(blip, 358);\n\n// result of this code example: https://i.imgur.com/DUnUzKS.png"
                }
            ],
            "hash": "0x71BDB63DBAF8DA59",
            "ns": "HUD",
            "aliases": ["0x71BDB63DBAF8DA59"],
            "jhash": "0x5133A750",
            "manualHash": true
        },
        "0x35EDD5B2E3FF01C0": {
            "name": "SET_MINIMAP_GOLF_COURSE_OFF",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x35EDD5B2E3FF01C0",
            "ns": "HUD",
            "aliases": ["0x35EDD5B2E3FF01C0"],
            "jhash": "0x20FD3E87",
            "manualHash": true
        },
        "0x75A9A10948D1DEA6": {
            "name": "SET_MINIMAP_COMPONENT",
            "params": [
                {
                    "name": "componentID",
                    "type": "int",
                    "description": "The component ID to change."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "True to enable/colorize, false to disable."
                },
                {
                    "name": "hudColor",
                    "type": "int",
                    "description": "The hudcolor index, the list of hud colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)."
                }
            ],
            "results": "int",
            "description": "This native is used to colorize/toggle certain map components like the army base.\n\nComponent IDs 6 through 14 are used by the freemode event King of the Castle in GTA Online.\n\n### An incomplete list of component IDs:\n\n*   **0**: Los Santos International Airport yellow runway markers\n*   **1**: Sandy Shores Airfield yellow runway markers\n*   **2**: McKenzie Field yellow runway markers\n*   **6**: Vespucci Beach lifeguard building\n*   **7**: Top level zone of Alien Camp (Hippy Camp)\n*   **8**: Paleto Bay fire station drill tower\n*   **9** Land Act Dam tower\n*   **10** Pala Springs Aerial Tramway\n*   **11** Galileo Observatory power unit\n*   **12** Small zone (empty \"interior\") near Central Los Santos Medical Center\n*   **13** Richman Mansion grotto\n*   **14** 2 Alien Camp (Hippy Camp) circles\n*   **15** Fort Zancudo",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Enables Fort Zancudo on the map\nSetMinimapComponent(15, true, 0)"
                }
            ],
            "hash": "0x75A9A10948D1DEA6",
            "ns": "HUD",
            "jhash": "0x419DCDC4",
            "manualHash": true,
            "resultsDescription": "Hardcoded to always return 1 (int)"
        },
        "0xF8DEE0A5600CBB93": {
            "name": "SET_MINIMAP_HIDE_FOW",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf true, the entire map will be revealed.\n```",
            "examples": [],
            "hash": "0xF8DEE0A5600CBB93",
            "ns": "HUD",
            "aliases": ["0xF8DEE0A5600CBB93", "_SET_MINIMAP_REVEALED"],
            "jhash": "0xD8D77733",
            "manualHash": true
        },
        "0x1A5CD7752DD28CD3": {
            "name": "SET_MINIMAP_IN_SPECTATOR_MODE",
            "params": [
                { "name": "toggle", "type": "BOOL" },
                { "name": "ped", "type": "Ped" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1A5CD7752DD28CD3",
            "ns": "HUD",
            "aliases": ["KEY_HUD_COLOUR"],
            "jhash": "0xD5BFCADB",
            "manualHash": true
        },
        "0x9133955F1A2DA957": {
            "name": "SET_MINIMAP_IN_PROLOGUE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nToggles the North Yankton map\n```",
            "examples": [],
            "hash": "0x9133955F1A2DA957",
            "ns": "HUD",
            "aliases": ["_SET_DRAW_MAP_VISIBLE", "_SET_NORTH_YANKTON_MAP"],
            "jhash": "0x02F5F1D1",
            "manualHash": true
        },
        "0x6B50FC8749632EC1": {
            "name": "SET_MINIMAP_SONAR_SWEEP",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "A boolean value where `true` activates the sonar sweep animation on the minimap, and `false` turns it off."
                }
            ],
            "results": "void",
            "description": "Enables or disables the sonar sweep animation on the minimap.\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x6B50FC8749632EC1",
            "ns": "HUD",
            "aliases": ["_SET_MINIMAP_SONAR_ENABLED"],
            "manualHash": true,
            "resultsDescription": "This native does not return any value."
        },
        "0x5F28ECF5FC84772F": {
            "name": "SET_MISSION_NAME",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F28ECF5FC84772F",
            "ns": "HUD",
            "jhash": "0x68DCAE10",
            "manualHash": true
        },
        "0xE45087D85F468BC2": {
            "name": "_SET_MISSION_NAME_2",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE45087D85F468BC2",
            "ns": "HUD",
            "aliases": ["0xE45087D85F468BC2"],
            "jhash": "0x8D9A1734",
            "manualHash": true
        },
        "0xAAE7CE1D63167423": {
            "name": "_SET_MOUSE_CURSOR_ACTIVE_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "```\nShows the cursor on screen for one frame.\n```",
            "examples": [],
            "hash": "0xAAE7CE1D63167423",
            "ns": "HUD",
            "aliases": ["_SHOW_CURSOR_THIS_FRAME"],
            "manualHash": true
        },
        "0x98215325A695E78A": {
            "name": "_SET_MOUSE_CURSOR_VISIBLE_IN_MENUS",
            "params": [
                {
                    "name": "enable",
                    "type": "BOOL",
                    "description": "Set to false to disable the cursor, true to enable it."
                }
            ],
            "results": "void",
            "description": "Shows/hides the frontend cursor on the pause menu or similar menus.\nClicking off and then on the game window will show it again.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n    local menuType = \"FE_MENU_VERSION_CORONA_LOBBY\"\n    ActivateFrontendMenu(GetHashKey(menuType), false, -1)\n    --100 works as well\n    Citizen.Wait(1000)\n    --Hide frontend cursor\n    N_0x98215325a695e78a(false)\nend)"
                }
            ],
            "hash": "0x98215325A695E78A",
            "ns": "HUD",
            "aliases": ["0x98215325A695E78A"],
            "manualHash": true
        },
        "0x7B7723747CCB55B6": {
            "name": "SET_MP_GAMER_TAG_BIG_TEXT",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                { "name": "string", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7B7723747CCB55B6",
            "ns": "HUD",
            "aliases": ["0x7B7723747CCB55B6", "_SET_MP_GAMER_TAG_CHATTING"],
            "jhash": "0x939218AB",
            "manualHash": true
        },
        "0x8DB8CFFD58B62552": {
            "name": "_SET_MOUSE_CURSOR_SPRITE",
            "params": [{ "name": "spriteId", "type": "int" }],
            "results": "void",
            "description": "```\nChanges the mouse cursor's sprite.   \npublic enum CursorType  \n{  \n    None = 0,  \n    Normal = 1,  \n    TransparentNormal = 2,  \n    PreGrab = 3,  \n    Grab = 4,  \n    MiddleFinger = 5,  \n    LeftArrow = 6,  \n    RightArrow = 7,  \n    UpArrow = 8,  \n    DownArrow = 9,  \n    HorizontalExpand = 10,  \n    Add = 11,  \n    Remove = 12,  \n}  \n```",
            "examples": [],
            "hash": "0x8DB8CFFD58B62552",
            "ns": "HUD",
            "aliases": ["0x8DB8CFFD58B62552", "_SET_CURSOR_SPRITE"],
            "manualHash": true
        },
        "0x9C16459B2324B2CF": {
            "name": "_SET_MP_GAMER_TAG_MP_BAG_LARGE_COUNT",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                { "name": "count", "type": "int" }
            ],
            "results": "void",
            "description": "```\ndisplays wanted star above head  \n```",
            "examples": [],
            "hash": "0x9C16459B2324B2CF",
            "ns": "HUD",
            "aliases": ["0x9B9AA95688F78DD3", "_SET_MP_GAMER_TAG_UNK"],
            "manualHash": true
        },
        "0xD29EC58C2F6B5014": {
            "name": "_SET_MP_GAMER_TAG_DISABLE_PLAYER_HEALTH_SYNC",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "If player health synchronisation should be disabled."
                }
            ],
            "results": "void",
            "description": "By default, the player health value shown by a gamer tag's health bar is synchronised with the health of the ped it is attached to.\nThis native disables that behaviour, allowing [`_SET_MP_GAMER_TAG_OVERRIDE_PLAYER_HEALTH`](#\\_0x1563FE35E9928E67) to have an effect.",
            "examples": [],
            "hash": "0xD29EC58C2F6B5014",
            "ns": "HUD",
            "aliases": [
                "0xD29EC58C2F6B5014",
                "_SET_MP_GAMER_HEALTH_BAR_DISPLAY"
            ],
            "manualHash": true
        },
        "0x3158C77A7E888AB4": {
            "name": "SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR",
            "params": [
                {
                    "name": "gamerTagId",
                    "type": "int",
                    "description": "a gamerTagId obtained using  for example: [CREATE_FAKE_MP_GAMER_TAG](https://runtime.fivem.net/doc/natives/?\\_0xBFEFE3321A3F5015)"
                },
                {
                    "name": "hudColorIndex",
                    "type": "int",
                    "description": "a hud color index, see the full list here: [link](https://docs.fivem.net/docs/game-references/hud-colors/)"
                }
            ],
            "results": "void",
            "description": "Should be enabled as component (2). Has 0 alpha by default.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId() --get our players ped\nlocal playerName = GetPlayerName(PlayerId()) --get our players name\nlocal gamerTagId = CreateFakeMpGamerTag(playerPed, playerName, 0, 0, \"\", 0) --create a gamer tag\nSetMpGamerTagVisibility(gamerTagId, 2, 1)  --set the visibility of component 2(healthArmour) to true\nSetMpGamerTagAlpha(gamerTagId, 2, 255) --set the alpha of component 2(healthArmour) to 255\nSetMpGamerTagHealthBarColor(gamerTagId, 129) --set component 2(healthArmour) color to 129(HUD_COLOUR_YOGA) "
                },
                {
                    "lang": "cs",
                    "code": "Player player = Game.Player; //get our player\nint gamerTagId = CreateFakeMpGamerTag(player.Character.Handle, player.Name, false, false, null, 0); //create a gamer tag\nSetMpGamerTagVisibility(gamerTagId, 2, true); //set the visibility of component 2(healthArmour) to true\nSetMpGamerTagAlpha(gamerTagId, 2, 255); //set the alpha of component 2(healthArmour) to 255\nSetMpGamerTagHealthBarColor(gamerTagId, 129); //set component 2(healthArmour) color to 129(HUD_COLOUR_YOGA) "
                }
            ],
            "hash": "0x3158C77A7E888AB4",
            "ns": "HUD",
            "aliases": [
                "0x3158C77A7E888AB4",
                "_SET_MP_GAMER_TAG_HEALTH_BAR_COLOR"
            ],
            "jhash": "0x5777EC77",
            "manualHash": true
        },
        "0xD48FE545CD46F857": {
            "name": "SET_MP_GAMER_TAG_ALPHA",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                { "name": "component", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets flag's sprite transparency. 0-255.  \n```",
            "examples": [],
            "hash": "0xD48FE545CD46F857",
            "ns": "HUD",
            "aliases": ["0xD48FE545CD46F857"],
            "jhash": "0xF4418611",
            "manualHash": true
        },
        "0xEE76FF7E6A0166B0": {
            "name": "_SET_MP_GAMER_TAG_VISIBILITY_ALL",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "The new visibility state of all gamer tag components."
                }
            ],
            "results": "void",
            "description": "Sets the visibility of all components of the gamer tag to the specified value.",
            "examples": [],
            "hash": "0xEE76FF7E6A0166B0",
            "ns": "HUD",
            "aliases": [
                "0xEE76FF7E6A0166B0",
                "_SET_MP_GAMER_TAG_",
                "_SET_MP_GAMER_TAG",
                "_SET_MP_GAMER_TAG_ENABLED"
            ],
            "jhash": "0x767DED29",
            "manualHash": true
        },
        "0xA67F9C46D612B6F1": {
            "name": "_SET_MP_GAMER_TAG_USE_VEHICLE_HEALTH",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "If vehicle health should be displayed instead of player health."
                }
            ],
            "results": "void",
            "description": "Sets the health bar of a gamer tag to show the health of the last (or current) vehicle of the ped the gamer tag is attached to.\nThe vehicle health value is stored separate from the player health and using it won't clear any player health overrides.",
            "examples": [],
            "hash": "0xA67F9C46D612B6F1",
            "ns": "HUD",
            "aliases": ["0xA67F9C46D612B6F1", "_SET_MP_GAMER_TAG_ICONS"],
            "jhash": "0xB01A5434",
            "manualHash": true
        },
        "0x1563FE35E9928E67": {
            "name": "_SET_MP_GAMER_TAG_OVERRIDE_PLAYER_HEALTH",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                {
                    "name": "health",
                    "type": "int",
                    "description": "The amount the health the player has."
                },
                {
                    "name": "maximumHealth",
                    "type": "int",
                    "description": "The maximum amount of health the player could have."
                }
            ],
            "results": "void",
            "description": "Manually sets the player health value for a gamer tag, using the maximum health to calculate what percentage of the bar should be filled.\nHas no effect unless [\\_SET_MP_GAMER_TAG_DISABLE_PLAYER_HEALTH_SYNC](#\\_0xD29EC58C2F6B5014) has been called prior to disable synchronisation with the attached ped.",
            "examples": [],
            "hash": "0x1563FE35E9928E67",
            "ns": "HUD",
            "aliases": ["0x1563FE35E9928E67", "_SET_MP_GAMER_HEALTH_BAR_MAX"],
            "manualHash": true
        },
        "0xDD21B55DF695CD0A": {
            "name": "SET_MULTIPLAYER_BANK_CASH",
            "params": [],
            "results": "void",
            "description": "Preview image:\n\n![](https://i.imgur.com/1BTmdyv.png)\n\nTo change the bank balance use [`STAT_SET_INT`](#\\_0xB3271D7AB655B441) with \"BANK_BALANCE\" to whatever value you need to.",
            "examples": [
                {
                    "lang": "cs",
                    "code": "// Code to show both Money and Bank HUD\nN_0x170f541e1cadd1de(true);\nSetMultiplayerWalletCash();\nSetMultiplayerBankCash();\nN_0x170f541e1cadd1de(false);\n\n// Add a delay to let the player read his money\nawait Delay(5000);\n\n// Hide both Bank and Money HUD\nRemoveMultiplayerWalletCash();\nRemoveMultiplayerBankCash();"
                }
            ],
            "hash": "0xDD21B55DF695CD0A",
            "ns": "HUD",
            "jhash": "0x2C842D03",
            "manualHash": true
        },
        "0x613ED644950626AE": {
            "name": "SET_MP_GAMER_TAG_COLOUR",
            "params": [
                {
                    "name": "gamerTagId",
                    "type": "int",
                    "description": "a gamerTagId obtained using  for example: [`CREATE_FAKE_MP_GAMER_TAG`](#\\_0xBFEFE3321A3F5015)."
                },
                {
                    "name": "component",
                    "type": "int",
                    "description": "a component id, see the full list here: [link](https://docs.fivem.net/docs/game-references/gamer-tags/#components-list)"
                },
                {
                    "name": "hudColorIndex",
                    "type": "int",
                    "description": "a hud color index, see the full list here: [link](https://docs.fivem.net/docs/game-references/hud-colors/)"
                }
            ],
            "results": "void",
            "description": "Sets a gamer tag's component colour",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId() --get our players ped\nlocal playerName = GetPlayerName(PlayerId()) --get our players name\nlocal gamerTagId = CreateFakeMpGamerTag(playerPed, playerName, 0, 0, \"\", 0) --create a gamer tag\nSetMpGamerTagColour(gamerTagId, 0, 129) --set component 0(GAMER_NAME) color to 129(HUD_COLOUR_YOGA) "
                },
                {
                    "lang": "cs",
                    "code": "Player player = Game.Player; //get our player\nint gamerTagId = CreateFakeMpGamerTag(player.Character.Handle, player.Name, false, false, null, 0); //create a gamer tag\nSetMpGamerTagColour(gamerTagId, 0, 129); //set component 0(GAMER_NAME) color to 129(HUD_COLOUR_YOGA) "
                }
            ],
            "hash": "0x613ED644950626AE",
            "ns": "HUD",
            "aliases": ["0x613ED644950626AE"],
            "jhash": "0x7E3AA40A",
            "manualHash": true
        },
        "0xCF228E2AA03099C3": {
            "name": "SET_MP_GAMER_TAG_WANTED_LEVEL",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                { "name": "wantedlvl", "type": "int" }
            ],
            "results": "void",
            "description": "```\ndisplays wanted star above head  \n```",
            "examples": [],
            "hash": "0xCF228E2AA03099C3",
            "ns": "HUD",
            "aliases": ["0xCF228E2AA03099C3"],
            "jhash": "0x0EBB003F",
            "manualHash": true
        },
        "0xFD1D220394BCB824": {
            "name": "SET_MULTIPLAYER_HUD_CASH",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xFD1D220394BCB824",
            "ns": "HUD",
            "jhash": "0xA8DB435E",
            "manualHash": true
        },
        "0xDEA2B8283BAA3944": {
            "name": "SET_MP_GAMER_TAG_NAME",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                { "name": "string", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDEA2B8283BAA3944",
            "ns": "HUD",
            "aliases": ["0xDEA2B8283BAA3944"],
            "jhash": "0x627A559B",
            "manualHash": true
        },
        "0xC2D15BEF167E27BC": {
            "name": "SET_MULTIPLAYER_WALLET_CASH",
            "params": [],
            "results": "void",
            "description": "Preview image:\n\n![](https://i.imgur.com/1BTmdyv.png)\n\nTo change money value use [`STAT_SET_INT`](#\\_0xB3271D7AB655B441) with \"MP0\\_WALLET_BALANCE\" to whatever value you need to.",
            "examples": [
                {
                    "lang": "cs",
                    "code": "// Code to show both Money and Bank HUD\nN_0x170f541e1cadd1de(true);\nSetMultiplayerWalletCash();\nSetMultiplayerBankCash();\nN_0x170f541e1cadd1de(false);\n\n// Add a delay to let the player read his money\nawait Delay(5000);\n\n// Hide both Bank and Money HUD\nRemoveMultiplayerWalletCash();\nRemoveMultiplayerBankCash();"
                }
            ],
            "hash": "0xC2D15BEF167E27BC",
            "ns": "HUD",
            "aliases": ["0xC2D15BEF167E27BC"],
            "jhash": "0xF4F3C796",
            "manualHash": true
        },
        "0xFE43368D2AA4F2FC": {
            "name": "SET_NEW_WAYPOINT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFE43368D2AA4F2FC",
            "ns": "HUD",
            "jhash": "0x8444E1F0",
            "manualHash": true
        },
        "0xE52B8E7F85D39A08": {
            "name": "SET_PED_AI_BLIP_GANG_ID",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "gangId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE52B8E7F85D39A08",
            "ns": "HUD",
            "aliases": ["0xE52B8E7F85D39A08", "_SET_AI_BLIP_TYPE"],
            "jhash": "0xD8E31B1A",
            "manualHash": true
        },
        "0xDF47FC56C71569CF": {
            "name": "SET_PAUSE_MENU_ACTIVE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDF47FC56C71569CF",
            "ns": "HUD",
            "jhash": "0x1DCD878E",
            "manualHash": true
        },
        "0x3CA6050692BC61B0": {
            "name": "SET_PAUSE_MENU_PED_LIGHTING",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "True enables the light, false disables the light."
                }
            ],
            "results": "void",
            "description": "Toggles the light state for the pause menu ped in frontend menus.\n\nThis is used by R\\* in combination with [`SET_PAUSE_MENU_PED_SLEEP_STATE`](#\\_0xECF128344E9FF9F1) to toggle the \"offline\" or \"online\" state in the \"friends\" tab of the pause menu in GTA Online.\n\nExample:\nOn: ![lights on](https://vespura.com/hi/i/2019-04-01\\_16-09\\_540ee\\_1015.png)\nOff: ![lights off](https://vespura.com/hi/i/2019-04-01\\_16-10\\_8b5e7\\_1016.png)",
            "examples": [],
            "hash": "0x3CA6050692BC61B0",
            "ns": "HUD",
            "aliases": ["0x3CA6050692BC61B0"],
            "jhash": "0x127310EB",
            "manualHash": true
        },
        "0x63BB75ABEDC1F6A0": {
            "name": "SET_MP_GAMER_TAG_VISIBILITY",
            "params": [
                { "name": "gamerTagId", "type": "int" },
                { "name": "component", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```cpp\nenum eMpGamerTagComponent\n{\n\tMP_TAG_GAMER_NAME,\n\tMP_TAG_CREW_TAG,\n\tMP_TAG_HEALTH_ARMOUR,\n\tMP_TAG_BIG_TEXT,\n\tMP_TAG_AUDIO_ICON,\n\tMP_TAG_USING_MENU,\n\tMP_TAG_PASSIVE_MODE,\n\tMP_TAG_WANTED_STARS,\n\tMP_TAG_DRIVER,\n\tMP_TAG_CO_DRIVER,\n\tMP_TAG_TAGGED,\n\tMP_TAG_GAMER_NAME_NEARBY,\n\tMP_TAG_ARROW,\n\tMP_TAG_PACKAGES,\n\tMP_TAG_INV_IF_PED_FOLLOWING,\n\tMP_TAG_RANK_TEXT,\n\tMP_TAG_TYPING,\n\tMP_TAG_BAG_LARGE,\n\tMP_TAG_ARROW,\n\tMP_TAG_GANG_CEO,\n\tMP_TAG_GANG_BIKER,\n\tMP_TAG_BIKER_ARROW,\n\tMP_TAG_MC_ROLE_PRESIDENT,\n\tMP_TAG_MC_ROLE_VICE_PRESIDENT,\n\tMP_TAG_MC_ROLE_ROAD_CAPTAIN,\n\tMP_TAG_MC_ROLE_SARGEANT,\n\tMP_TAG_MC_ROLE_ENFORCER,\n\tMP_TAG_MC_ROLE_PROSPECT,\n\tMP_TAG_TRANSMITTER,\n\tMP_TAG_BOMB\n};\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0x63BB75ABEDC1F6A0",
            "ns": "HUD",
            "aliases": ["0x63BB75ABEDC1F6A0"],
            "jhash": "0xD41DF479",
            "manualHash": true
        },
        "0x97C65887D4B37FA9": {
            "name": "SET_PED_AI_BLIP_NOTICE_RANGE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "range", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x97C65887D4B37FA9",
            "ns": "HUD",
            "aliases": ["0x97C65887D4B37FA9", "_SET_AI_BLIP_MAX_DISTANCE"],
            "jhash": "0xF9DC2AF7",
            "manualHash": true
        },
        "0x0C4BBF625CA98C4E": {
            "name": "SET_PED_AI_BLIP_FORCED_ON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nif \"flag\" is true, the AI blip will always be displayed for the specified ped, if it has an AI blip  \nIf \"flag\" is false, the AI blip will only be displayed when the player is in combat with the specified ped, if it has an AI blip  \n```",
            "examples": [],
            "hash": "0x0C4BBF625CA98C4E",
            "ns": "HUD",
            "aliases": ["0x0C4BBF625CA98C4E", "_IS_AI_BLIP_ALWAYS_SHOWN"],
            "jhash": "0xFFDF46F0",
            "manualHash": true
        },
        "0xECF128344E9FF9F1": {
            "name": "SET_PAUSE_MENU_PED_SLEEP_STATE",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "0 will make the ped slowly fall asleep, 1 will slowly wake the ped up."
                }
            ],
            "results": "void",
            "description": "Toggles the pause menu ped sleep state for frontend menus.\n\n[Example GIF](https://vespura.com/hi/i/2019-04-01\\_15-51\\_8ed38\\_1014.gif)",
            "examples": [],
            "hash": "0xECF128344E9FF9F1",
            "ns": "HUD",
            "aliases": ["0xECF128344E9FF9F1"],
            "jhash": "0x8F45D327",
            "manualHash": true
        },
        "0x3EED80DFF7325CAA": {
            "name": "SET_PED_AI_BLIP_HAS_CONE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3EED80DFF7325CAA",
            "ns": "HUD",
            "aliases": ["HIDE_SPECIAL_ABILITY_LOCKON_OPERATION"],
            "jhash": "0x872C2CFB",
            "manualHash": true
        },
        "0xFCFACD0DB9D7A57D": {
            "name": "_SET_PED_AI_BLIP_SPRITE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "spriteId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFCFACD0DB9D7A57D",
            "ns": "HUD",
            "aliases": ["0xFCFACD0DB9D7A57D"],
            "manualHash": true
        },
        "0x77E2DD177910E1CF": {
            "name": "_SET_PLAYER_BLIP_POSITION_THIS_FRAME",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets the position of the arrow icon representing the player on both the minimap and world map.  \nToo bad this wouldn't work over the network (obviously not). Could spoof where we would be.  \n```",
            "examples": [],
            "hash": "0x77E2DD177910E1CF",
            "ns": "HUD",
            "jhash": "0x54E75C7D",
            "manualHash": true
        },
        "0x1EAC5F91BCBC5073": {
            "name": "SET_RACE_TRACK_RENDER",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1EAC5F91BCBC5073",
            "ns": "HUD",
            "aliases": ["0x1EAC5F91BCBC5073"],
            "jhash": "0xFB9BABF5",
            "manualHash": true
        },
        "0xD30C50DF888D58B5": {
            "name": "SET_PED_HAS_AI_BLIP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "hasCone", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.\nSee gtaforums.com/topic/884370-native-research-ai-blips for further information.\n```",
            "examples": [],
            "hash": "0xD30C50DF888D58B5",
            "ns": "HUD",
            "aliases": [
                "0xD30C50DF888D58B5",
                "_SET_PED_ENEMY_AI_BLIP",
                "_SET_PED_AI_BLIP"
            ],
            "jhash": "0x96C4C4DD",
            "manualHash": true
        },
        "0xB13DCB4C6FAAD238": {
            "name": "_SET_PED_HAS_AI_BLIP_WITH_COLOR",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "hasCone", "type": "BOOL" },
                {
                    "name": "color",
                    "type": "int",
                    "description": "See [`SET_BLIP_COLOUR`](#\\_0x03D7FB09E75D6B7E)."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB13DCB4C6FAAD238",
            "ns": "HUD",
            "aliases": ["0xB13DCB4C6FAAD238"],
            "manualHash": true
        },
        "0x096EF57A0C999BBA": {
            "name": "SET_RADAR_ZOOM",
            "params": [{ "name": "zoomLevel", "type": "int" }],
            "results": "void",
            "description": "```\nzoomLevel ranges from 0 to 200  \n```",
            "examples": [],
            "hash": "0x096EF57A0C999BBA",
            "ns": "HUD",
            "jhash": "0x2A50D1A6",
            "manualHash": true
        },
        "0xE81B7D2A3DAB2D81": {
            "name": "SET_RADAR_AS_EXTERIOR_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE81B7D2A3DAB2D81",
            "ns": "HUD",
            "jhash": "0x39ABB10E",
            "manualHash": true
        },
        "0xBD12C5EEE184C337": {
            "name": "SET_RADAR_ZOOM_PRECISE",
            "params": [{ "name": "zoom", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBD12C5EEE184C337",
            "ns": "HUD",
            "aliases": ["RESPONDING_AS_TEMP"],
            "jhash": "0xDCA3F423",
            "manualHash": true
        },
        "0x808519373FD336A3": {
            "name": "_SET_PLAYER_IS_IN_DIRECTOR_MODE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf toggle is true, hides special ability bar / character name in the pause menu\nIf toggle is false, shows special ability bar / character name in the pause menu\nSET_PLAYER_*\n```",
            "examples": [],
            "hash": "0x808519373FD336A3",
            "ns": "HUD",
            "aliases": ["0x808519373FD336A3", "_SET_DIRECTOR_MODE"],
            "manualHash": true
        },
        "0xCB7CC0D58405AD41": {
            "name": "SET_RADAR_ZOOM_TO_DISTANCE",
            "params": [{ "name": "zoom", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCB7CC0D58405AD41",
            "ns": "HUD",
            "aliases": ["_SET_RADAR_ZOOM_LEVEL_THIS_FRAME"],
            "jhash": "0x09CF1CE5",
            "manualHash": true
        },
        "0xD68A5FF8A3A89874": {
            "name": "SET_SCRIPT_VARIABLE_HUD_COLOUR",
            "params": [
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "a", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets the color of HUD_COLOUR_SCRIPT_VARIABLE\n```",
            "examples": [],
            "hash": "0xD68A5FF8A3A89874",
            "ns": "HUD",
            "aliases": ["0xD68A5FF8A3A89874"],
            "jhash": "0x0E41E45C",
            "manualHash": true
        },
        "0x59E727A1C9D3E31A": {
            "name": "SET_RADAR_AS_INTERIOR_THIS_FRAME",
            "params": [
                { "name": "interior", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "heading", "type": "int" },
                { "name": "zoom", "type": "int" }
            ],
            "results": "void",
            "description": "```\nList of interior hashes: pastebin.com/1FUyXNqY  \nNot for every interior zoom > 0 available.  \n```",
            "examples": [],
            "hash": "0x59E727A1C9D3E31A",
            "ns": "HUD",
            "jhash": "0x6F2626E1",
            "manualHash": true
        },
        "0xBE6B23FFA53FB442": {
            "name": "SET_TEXT_COLOUR",
            "params": [
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "```\ncolors you input not same as you think?\nA: for some reason its R B G A\n```",
            "examples": [],
            "hash": "0xBE6B23FFA53FB442",
            "ns": "HUD",
            "jhash": "0xE54DD2C8",
            "manualHash": true
        },
        "0x16A304E6CB2BFAB9": {
            "name": "_SET_SCRIPT_VARIABLE_2_HUD_COLOUR",
            "params": [
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "a", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets the color of HUD_COLOUR_SCRIPT_VARIABLE_2\n```",
            "examples": [],
            "hash": "0x16A304E6CB2BFAB9",
            "ns": "HUD",
            "aliases": ["0x16A304E6CB2BFAB9"],
            "jhash": "0x6BE3ACA8",
            "manualHash": true
        },
        "0x1CA3E9EAC9D93E5E": {
            "name": "SET_TEXT_DROP_SHADOW",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1CA3E9EAC9D93E5E",
            "ns": "HUD",
            "jhash": "0xE2A11511",
            "manualHash": true
        },
        "0x25615540D894B814": {
            "name": "SET_RADIUS_BLIP_EDGE",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip handle"
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Whether to turn off or on the effect"
                }
            ],
            "results": "void",
            "description": "Enabling this on a radius blip will make it outline only.\\\nPlease note that this only works on a **radius** blip (i.e. one generated using [`ADD_BLIP_FOR_RADIUS`](#\\_0x46818D79B1F7499A)), not a normal blip.\n\n**Example result:**\\\n![example-image](https://i.imgur.com/hS6ki7p.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local coords = GetEntityCoords(PlayerPedId())\nlocal radiusBlip = AddBlipForRadius(coords, 100.0) -- need to have .0\nSetBlipColour(radiusBlip, 1)\nSetBlipAlpha(radiusBlip, 255)\nSetRadiusBlipEdge(radiusBlip, true)"
                }
            ],
            "hash": "0x25615540D894B814",
            "ns": "HUD",
            "aliases": ["0x25615540D894B814"],
            "jhash": "0x40E25DB8",
            "manualHash": true
        },
        "0xF98E4B3E56AFC7B1": {
            "name": "SET_RADAR_ZOOM_TO_BLIP",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "zoom", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF98E4B3E56AFC7B1",
            "ns": "HUD",
            "aliases": ["0xF98E4B3E56AFC7B1"],
            "jhash": "0x25EC28C0",
            "manualHash": true
        },
        "0xC02F4DBFB51D988B": {
            "name": "SET_TEXT_CENTRE",
            "params": [{ "name": "align", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC02F4DBFB51D988B",
            "ns": "HUD",
            "jhash": "0xE26D39A1",
            "manualHash": true
        },
        "0x9E778248D6685FE0": {
            "name": "SET_SOCIAL_CLUB_TOUR",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "```\nHUD::SET_SOCIAL_CLUB_TOUR(\"Gallery\");\nHUD::SET_SOCIAL_CLUB_TOUR(\"Missions\");\nHUD::SET_SOCIAL_CLUB_TOUR(\"General\");\nHUD::SET_SOCIAL_CLUB_TOUR(\"Playlists\");\n```",
            "examples": [],
            "hash": "0x9E778248D6685FE0",
            "ns": "HUD",
            "aliases": ["0x9E778248D6685FE0"],
            "jhash": "0x7AD67C95",
            "manualHash": true
        },
        "0x4E096588B13FFECA": {
            "name": "SET_TEXT_JUSTIFICATION",
            "params": [{ "name": "justifyType", "type": "int" }],
            "results": "void",
            "description": "```\nTypes -  \n0: Center-Justify  \n1: Left-Justify  \n2: Right-Justify  \nRight-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen  \n```",
            "examples": [],
            "hash": "0x4E096588B13FFECA",
            "ns": "HUD",
            "aliases": ["0x4E096588B13FFECA"],
            "jhash": "0x68CDFA60",
            "manualHash": true
        },
        "0x465C84BC39F1C351": {
            "name": "SET_TEXT_DROPSHADOW",
            "params": [
                {
                    "name": "distance",
                    "type": "int",
                    "description": "Shadow distance in pixels, both horizontal and vertical."
                },
                { "name": "r", "type": "int", "description": "Red color." },
                { "name": "g", "type": "int", "description": "Green color." },
                { "name": "b", "type": "int", "description": "Blue color." },
                { "name": "a", "type": "int", "description": "Alpha." }
            ],
            "results": "void",
            "description": "distance - shadow distance in pixels, both horizontal and vertical\nr, g, b, a - color",
            "examples": [],
            "hash": "0x465C84BC39F1C351",
            "ns": "HUD",
            "jhash": "0xE6587517",
            "manualHash": true
        },
        "0x07C837F9A01C34C9": {
            "name": "SET_TEXT_SCALE",
            "params": [
                { "name": "scale", "type": "float" },
                { "name": "size", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSize range : 0F to 1.0F\np0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.\n```",
            "examples": [],
            "hash": "0x07C837F9A01C34C9",
            "ns": "HUD",
            "jhash": "0xB6E15B23",
            "manualHash": true
        },
        "0x2513DFB0FB8400FE": {
            "name": "SET_TEXT_OUTLINE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2513DFB0FB8400FE",
            "ns": "HUD",
            "jhash": "0xC753412F",
            "manualHash": true
        },
        "0x6B3C4650BC8BEE47": {
            "name": "SET_TEXT_RIGHT_JUSTIFY",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6B3C4650BC8BEE47",
            "ns": "HUD",
            "jhash": "0x45B60520",
            "manualHash": true
        },
        "0x0C5A80A9E096D529": {
            "name": "_SET_WARNING_MESSAGE_LIST_ROW",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "name", "type": "char*" },
                { "name": "cash", "type": "int" },
                { "name": "rp", "type": "int" },
                { "name": "lvl", "type": "int" },
                { "name": "colour", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nParam names copied from the corresponding scaleform function \"SET_LIST_ROW\"\n```",
            "examples": [],
            "hash": "0x0C5A80A9E096D529",
            "ns": "HUD",
            "aliases": ["0x0C5A80A9E096D529"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x66E0276CC5F6B9DA": {
            "name": "SET_TEXT_FONT",
            "params": [{ "name": "fontType", "type": "int" }],
            "results": "void",
            "description": "```\nfonts that mess up your text where made for number values/misc stuff  \n```",
            "examples": [],
            "hash": "0x66E0276CC5F6B9DA",
            "ns": "HUD",
            "jhash": "0x80BC530D",
            "manualHash": true
        },
        "0x441603240D202FA6": {
            "name": "SET_TEXT_EDGE",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "a", "type": "int" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x441603240D202FA6",
            "ns": "HUD",
            "jhash": "0x3F1A5DAB",
            "manualHash": true
        },
        "0x5E1460624D194A38": {
            "name": "SET_USE_ISLAND_MAP",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "A boolean value where `true` switches the minimap to the Cayo Perico map, and `false` reverts it to the standard map."
                }
            ],
            "results": "void",
            "description": "Switches the display of the in-game minimap to the Cayo Perico map. This native needs to be called every frame to maintain the toggled state effectively.\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x5E1460624D194A38",
            "ns": "HUD",
            "aliases": ["_SET_TOGGLE_MINIMAP_HEIST_ISLAND"],
            "manualHash": true,
            "resultsDescription": "This native does not return any value."
        },
        "0x5F15302936E07111": {
            "name": "SET_TEXT_RENDER_ID",
            "params": [{ "name": "renderId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F15302936E07111",
            "ns": "HUD",
            "jhash": "0xC5C3B7F3",
            "manualHash": true
        },
        "0x38B55259C2E078ED": {
            "name": "_SET_WARNING_MESSAGE_WITH_HEADER_UNK",
            "params": [
                { "name": "entryHeader", "type": "char*" },
                { "name": "entryLine1", "type": "char*" },
                { "name": "flags", "type": "int" },
                { "name": "entryLine2", "type": "char*" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any*" },
                { "name": "p7", "type": "Any*" },
                { "name": "showBg", "type": "BOOL" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x38B55259C2E078ED",
            "ns": "HUD",
            "manualHash": true
        },
        "0xA50ABC31E3CDFAFF": {
            "name": "SET_TEXT_LEADING",
            "params": [
                {
                    "name": "p0",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA50ABC31E3CDFAFF",
            "ns": "HUD",
            "jhash": "0x98CE21D4",
            "manualHash": true
        },
        "0x63145D9C883A1A70": {
            "name": "SET_TEXT_WRAP",
            "params": [
                { "name": "start", "type": "float" },
                { "name": "end", "type": "float" }
            ],
            "results": "void",
            "description": "```\nIt sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.  \nstart - left boundry on screen position (0.0 - 1.0)  \nend - right boundry on screen position (0.0 - 1.0)  \n```",
            "examples": [],
            "hash": "0x63145D9C883A1A70",
            "ns": "HUD",
            "jhash": "0x6F60AB54",
            "manualHash": true
        },
        "0xC3B07BA00A83B0F1": {
            "name": "SET_WIDESCREEN_FORMAT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC3B07BA00A83B0F1",
            "ns": "HUD",
            "jhash": "0xF016E08F",
            "manualHash": true
        },
        "0x038C1F517D7FDCF8": {
            "name": "SET_TEXT_PROPORTIONAL",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x038C1F517D7FDCF8",
            "ns": "HUD",
            "jhash": "0xF49D8A08",
            "manualHash": true
        },
        "0x15803FEC3B9A872B": {
            "name": "_SET_WARNING_MESSAGE_WITH_ALERT",
            "params": [
                {
                    "name": "labelTitle",
                    "type": "char*",
                    "description": "Label of the alert's title."
                },
                {
                    "name": "labelMsg",
                    "type": "char*",
                    "description": "Label of the alert's message."
                },
                {
                    "name": "p2",
                    "type": "int",
                    "description": "This is an enum, check the description for a list."
                },
                {
                    "name": "p3",
                    "type": "int",
                    "description": "This is an enum, check the description for a list."
                },
                {
                    "name": "labelMsg2",
                    "type": "char*",
                    "description": "Label of another message line"
                },
                {
                    "name": "p5",
                    "type": "BOOL",
                    "annotations": { "cs_type": "int" },
                    "description": "usually 0"
                },
                { "name": "p6", "type": "int", "description": "usually -1" },
                { "name": "p7", "type": "int", "description": "usually 0" },
                {
                    "name": "p8",
                    "type": "char*",
                    "description": "unknown label"
                },
                {
                    "name": "p9",
                    "type": "char*",
                    "description": "unknown label"
                },
                {
                    "name": "background",
                    "type": "BOOL",
                    "description": "Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background."
                },
                {
                    "name": "errorCode",
                    "type": "int",
                    "description": "Error code, shown at the bottom left if set to value other than 0."
                }
            ],
            "results": "void",
            "description": "instructionalKey enum list:\n\n```\nButtons = {\n      Empty = 0,\n      Select = 1, -- (RETURN)\n      Ok = 2, -- (RETURN)\n      Yes = 4, -- (RETURN)\n      Back = 8, -- (ESC)\n      Cancel = 16, -- (ESC)\n      No = 32, -- (ESC)\n      RetrySpace = 64, -- (SPACE)\n      Restart = 128, -- (SPACE)\n      Skip = 256, -- (SPACE)\n      Quit = 512, -- (ESC)\n      Adjust = 1024, -- (ARROWS)\n      SpaceKey = 2048, -- (SPACE)\n      Share = 4096, -- (SPACE)\n      SignIn = 8192, -- (SPACE)\n      Continue = 16384, -- (RETURN)\n      AdjustLeftRight = 32768, -- (SCROLL L/R)\n      AdjustUpDown = 65536, -- (SCROLL U/D)\n      Overwrite = 131072, -- (SPACE)\n      SocialClubSignup = 262144, -- (RETURN)\n      Confirm = 524288, -- (RETURN)\n      Queue = 1048576, -- (RETURN)\n      RetryReturn = 2097152, -- (RETURN)\n      BackEsc = 4194304, -- (ESC)\n      SocialClub = 8388608, -- (RETURN)\n      Spectate = 16777216, -- (SPACE)\n      OkEsc = 33554432, -- (ESC)\n      CancelTransfer = 67108864, -- (ESC)\n      LoadingSpinner = 134217728,\n      NoReturnToGTA = 268435456, -- (ESC)\n      CancelEsc = 536870912, -- (ESC)\n}\n\nAlt = {\n      Empty = 0,\n      No = 1, -- (SPACE)\n      Host = 2, -- (ESC)\n      SearchForJob = 4, -- (RETURN)\n      ReturnKey = 8, -- (TURN)\n      Freemode = 16, -- (ESC)\n}\n```\n\n**Result of the example code:** <https://i.imgur.com/TvmNF4k.png>",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n\tAddTextEntry(\"FACES_WARNH2\", \"Nice title\")\n\tAddTextEntry(\"QM_NO_0\", \"Cool message\")\n\tAddTextEntry(\"QM_NO_3\", \"Cool message 2\")\n\twhile true do\n\t\tCitizen.Wait(0)\n\t\tDrawFrontendAlert(\"FACES_WARNH2\", \"QM_NO_0\", 3, 3, \"QM_NO_3\", 2, -1, false, \"FM_NXT_RAC\", \"QM_NO_1\", true, 10)\n\tend\nend)"
                }
            ],
            "hash": "0x15803FEC3B9A872B",
            "ns": "HUD",
            "aliases": ["0x15803FEC3B9A872B", "_DRAW_FRONTEND_ALERT"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true
        },
        "0x5FBCA48327B914DF": {
            "name": "SHOW_HEADING_INDICATOR_ON_BLIP",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAdds the GTA: Online player heading indicator to a blip.  \n```",
            "examples": [],
            "hash": "0x5FBCA48327B914DF",
            "ns": "HUD",
            "aliases": ["0x5FBCA48327B914DF"],
            "jhash": "0xD1C3D71B",
            "manualHash": true
        },
        "0x6CDD58146A436083": {
            "name": "_SET_USE_WAYPOINT_AS_DESTINATION",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "`true` to show 'Destination', `false` to show 'Waypoint' (the default)"
                }
            ],
            "results": "void",
            "description": "Sets a global mode which makes the pause menu map show 'Destination' instead of 'Waypoint' in the key legend on the\nbottom of the screen.\n\n<!--\n\nName guess:\n\n  - alphabetical function order, below [SET_USER_RADIO_CONTROL_ENABLED, SET_USE_HI_DOF], above SET_VARIABLE_ON_SOUND.\n\n-->",
            "examples": [],
            "hash": "0x6CDD58146A436083",
            "ns": "HUD",
            "aliases": ["0x6CDD58146A436083"],
            "manualHash": true
        },
        "0xDC38CC1E35B6A5D7": {
            "name": "SET_WARNING_MESSAGE_WITH_HEADER",
            "params": [
                { "name": "titleMsg", "type": "char*" },
                { "name": "entryLine1", "type": "char*" },
                { "name": "flags", "type": "int" },
                { "name": "promptMsg", "type": "char*" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "Any" },
                { "name": "background", "type": "BOOL" },
                { "name": "p7", "type": "Any*" },
                { "name": "showBg", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nYou can only use text entries. No custom text.  \nC# Example :  \nFunction.Call(Hash._SET_WARNING_MESSAGE_2, \"HUD_QUIT\", \"HUD_CGIGNORE\", 2, \"HUD_CGINVITE\", 0, -1, 0, 0, 1);  \nyou can recreate this easily with scaleforms  \n---------------  \nFixed native name, from before nativedb restoration.  \n```\n\n```\nNativeDB Added Parameter 10: Any p9\n```",
            "examples": [],
            "hash": "0xDC38CC1E35B6A5D7",
            "ns": "HUD",
            "aliases": ["_SET_WARNING_MESSAGE_2"],
            "jhash": "0x2DB9EAB5",
            "manualHash": true
        },
        "0x7B1776B3B53F8D74": {
            "name": "SET_WARNING_MESSAGE",
            "params": [
                {
                    "name": "entryLine1",
                    "type": "char*",
                    "description": "The text label to display as the first line of the warning message."
                },
                {
                    "name": "instructionalKey",
                    "type": "int",
                    "description": "This is an enum, check the description for a list."
                },
                {
                    "name": "entryLine2",
                    "type": "char*",
                    "description": "The text label to display as the second line of the warning message."
                },
                {
                    "name": "p3",
                    "type": "BOOL",
                    "description": "Purpose unknown."
                },
                {
                    "name": "p4",
                    "type": "int",
                    "description": "Purpose unknown."
                },
                {
                    "name": "background",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" },
                    "description": "Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background."
                },
                {
                    "name": "p6",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" },
                    "description": "Purpose unknown."
                },
                {
                    "name": "showBg",
                    "type": "BOOL",
                    "description": "Purpose unknown."
                },
                {
                    "name": "errorCode",
                    "type": "int",
                    "description": "When not 0, adds a field displaying the value as 'error code' to the warning message."
                }
            ],
            "results": "void",
            "description": "**instructionalKey enum list**:\n\n```\nenum INSTRUCTIONAL_BUTTON_TYPES\n{\n    NONE = 0,\n    SELECT = 1,\n    OK = 2,\n    YES = 4,\n    BACK = 8,\n    BACK_SELECT = 9,\n    BACK_OK = 10,\n    BACK_YES = 12,\n    CANCEL = 16,\n    CANCEL_SELECT = 17,\n    CANCEL_OK = 18,\n    CANCEL_YES = 20,\n    NO = 32,\n    NO_SELECT = 33,\n    NO_OK = 34,\n    YES_NO = 36,\n    RETRY = 64,\n    RETRY_SELECT = 65,\n    RETRY_OK = 66,\n    RETRY_YES = 68,\n    RETRY_BACK = 72,\n    RETRY_BACK_SELECT = 73,\n    RETRY_BACK_OK = 74,\n    RETRY_BACK_YES = 76,\n    RETRY_CANCEL = 80,\n    RETRY_CANCEL_SELECT = 81,\n    RETRY_CANCEL_OK = 82,\n    RETRY_CANCEL_YES = 84,\n    SKIP = 256,\n    SKIP_SELECT = 257,\n    SKIP_OK = 258,\n    SKIP_YES = 260,\n    SKIP_BACK = 264,\n    SKIP_BACK_SELECT = 265,\n    SKIP_BACK_OK = 266,\n    SKIP_BACK_YES = 268,\n    SKIP_CANCEL = 272,\n    SKIP_CANCEL_SELECT = 273,\n    SKIP_CANCEL_OK = 274,\n    SKIP_CANCEL_YES = 276,\n    CONTINUE = 16384,\n    BACK_CONTINUE = 16392,\n    CANCEL_CONTINUE = 16400,\n    LOADING_SPINNER = 134217728,\n    SELECT_LOADING_SPINNER = 134217729,\n    OK_LOADING_SPINNER = 134217730,\n    YES_LOADING_SPINNER = 134217732,\n    BACK_LOADING_SPINNER = 134217736,\n    BACK_SELECT_LOADING_SPINNER = 134217737,\n    BACK_OK_LOADING_SPINNER = 134217738,\n    BACK_YES_LOADING_SPINNER = 134217740,\n    CANCEL_LOADING_SPINNER = 134217744,\n    CANCEL_SELECT_LOADING_SPINNER = 134217745,\n    CANCEL_OK_LOADING_SPINNER = 134217746,\n    CANCEL_YES_LOADING_SPINNER = 134217748\n}\n```\n\nNote: this list is definitely NOT complete, but these are the ones I've been able to find before giving up because it's such a boring thing to look for 'good' combinations.\n\n**Result of the example code:**\n<https://i.imgur.com/imwoimm.png>",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Make the first line using custom text.\nAddTextEntry(\"warning_message_first_line\", \"This is the first line.\")\n\n-- Make the second line using custom text.\nAddTextEntry(\"warning_message_second_line\", \"This is the second line!\")\n\n-- Add an event handler for when the screen is dismissed.\nAddEventHandler(\"optionSelected\", function(selected)\n    print(selected) -- do whatever you want with the selected choice.\n    -- players can either press the physicial buttons, or they can click\n    -- the instructional buttons with their mouse and it will trigger\n    -- the event as well.\nend)\n\n\n-- Create a thread to loop this warning message.\nCreateThread(function()\n    while true do\n        Wait(0)\n        -- Display the warning message every tick.\n        SetWarningMessage(\"warning_message_first_line\", 82, \"warning_message_second_line\", 0, -1, true, 0, 0, 0)\n        \n        -- Check for key presses or instructional button clicks.\n        -- Input group of 2 is required for this to work while the warning is being displayed.\n        \n        if (IsControlJustReleased(2, 201) or IsControlJustReleased(2, 217)) then -- any select/confirm key was pressed.\n            TriggerEvent(\"optionSelected\", \"select\")\n            break\n        elseif (IsControlJustReleased(2, 203)) then -- spacebar/x on controller (alt option) was pressed.\n            TriggerEvent(\"optionSelected\", \"alt\")\n            break\n        elseif (IsControlJustReleased(2, 202)) then -- any of the cancel/back buttons was pressed\n            TriggerEvent(\"optionSelected\", \"cancel\")\n            break\n        end\n    end\nend)"
                }
            ],
            "hash": "0x7B1776B3B53F8D74",
            "ns": "HUD",
            "jhash": "0xBE699BDE",
            "manualHash": true
        },
        "0xA7E4E2D361C2627F": {
            "name": "SET_WAYPOINT_OFF",
            "params": [],
            "results": "void",
            "description": "```\nThis native removes the current waypoint from the map.\nExample:\nC#:\nFunction.Call(Hash.SET_WAYPOINT_OFF);\nC++:\nHUD::SET_WAYPOINT_OFF();\n```",
            "examples": [],
            "hash": "0xA7E4E2D361C2627F",
            "ns": "HUD",
            "jhash": "0xB3496E1B",
            "manualHash": true
        },
        "0x23C3EB807312F01A": {
            "name": "SHOW_FRIEND_INDICATOR_ON_BLIP",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to toggle the half circle on."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Enables or disables the half circle around the blip (on the right side of the blip)."
                }
            ],
            "results": "void",
            "description": "Highlights a blip by a half cyan circle on the right side of the blip. ![](https://i.imgur.com/FrV9M4e.png) Indicating that that player is a friend (in GTA:O). This color can not be changed.\n\nTo toggle the left side (crew member indicator) of the half circle around the blip, use: [`SHOW_CREW_INDICATOR_ON_BLIP`](#\\_0xDCFB5D4DB8BF367E).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local player = 1 -- make sure this is an actual player, dont just use this example code!\nlocal blip = GetBlipFromEntity(GetPlayerPed(player))\n\n-- Toggle the friend outline indicator on the blip.\nShowFriendIndicatorOnBlip(blip, true)"
                }
            ],
            "hash": "0x23C3EB807312F01A",
            "ns": "HUD",
            "aliases": ["0x23C3EB807312F01A", "SET_BLIP_FRIEND"],
            "jhash": "0x4C8F02B4",
            "manualHash": true
        },
        "0xB81656BC81FE24D1": {
            "name": "SHOW_OUTLINE_INDICATOR_ON_BLIP",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to toggle the outline on."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Enables or disables the outline."
                }
            ],
            "results": "void",
            "description": "Toggles a cyan outline around the blip.\n\nColor can be changed with [`SET_BLIP_SECONDARY_COLOUR`](#\\_0x14892474891E09EB). Enabling this circle will override the \"crew\" and \"friend\" half-circles (see [`SHOW_CREW_INDICATOR_ON_BLIP`](#\\_0xDCFB5D4DB8BF367E) and [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#\\_0x23C3EB807312F01A)).",
            "examples": [],
            "hash": "0xB81656BC81FE24D1",
            "ns": "HUD",
            "aliases": ["0xB81656BC81FE24D1", "SET_BLIP_FRIENDLY"],
            "jhash": "0x8DE82C15",
            "manualHash": true
        },
        "0x701919482C74B5AB": {
            "name": "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS",
            "params": [
                { "name": "entryHeader", "type": "char*" },
                { "name": "entryLine1", "type": "char*" },
                { "name": "instructionalKey", "type": "Any" },
                { "name": "entryLine2", "type": "char*" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any*" },
                { "name": "p8", "type": "Any*" },
                { "name": "p9", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nYou can only use text entries. No custom text.  \n```\n\n```\nNativeDB Added Parameter 11: Any p10\n```",
            "examples": [],
            "hash": "0x701919482C74B5AB",
            "ns": "HUD",
            "aliases": ["_SET_WARNING_MESSAGE_3"],
            "jhash": "0x749929D3",
            "manualHash": true
        },
        "0xCAC2031EBF79B1A8": {
            "name": "_SHOW_HAS_COMPLETED_INDICATOR_ON_BLIP",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAdds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF\n_SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0xCAC2031EBF79B1A8",
            "ns": "HUD",
            "manualHash": true
        },
        "0xDCFB5D4DB8BF367E": {
            "name": "SHOW_CREW_INDICATOR_ON_BLIP",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to toggle the half blue circle around the blip on."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Enables or disables the half blue circle around the blip (on the left side)."
                }
            ],
            "results": "void",
            "description": "Enables or disables the blue half circle ![](https://i.imgur.com/iZes9Ec.png) around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using [`SET_BLIP_SECONDARY_COLOUR`](#\\_0x14892474891E09EB).\n\nTo toggle the right side of the circle use: [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#\\_0x23C3EB807312F01A).\n\nExample code result:\n![](https://i.imgur.com/iZ9tNWl.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local player = 1 -- make sure this is an actual player, dont just use this example code!\nlocal blip = GetBlipFromEntity(GetPlayerPed(player))\n\n-- Toggle the crew display.\nShowCrewIndicatorOnBlip(blip, true)\n\n-- Set the crew circle color.\n-- hud color 18 seems to be the closest color to the green crew color from GTA:O.\nSetBlipSecondaryColour(blip, GetHudColour(18))\n-- Result: https://i.imgur.com/iZ9tNWl.png"
                }
            ],
            "hash": "0xDCFB5D4DB8BF367E",
            "ns": "HUD",
            "aliases": ["0xDCFB5D4DB8BF367E", "SET_BLIP_CREW"],
            "jhash": "0xABBE1E45",
            "manualHash": true
        },
        "0x0B4DF1FA60C0E664": {
            "name": "SHOW_HUD_COMPONENT_THIS_FRAME",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "This function shows various HUD (Heads-up Display) components.\n\nListed below are the integers and the corresponding HUD component.\n\n*   1 : WANTED_STARS\n*   2 : WEAPON_ICON\n*   3 : CASH\n*   4 : MP_CASH\n*   5 : MP_MESSAGE\n*   6 : VEHICLE_NAME\n*   7 : AREA_NAME\n*   8 : VEHICLE_CLASS\n*   9 : STREET_NAME\n*   10 : HELP_TEXT\n*   11 : FLOATING_HELP_TEXT\\_1\n*   12 : FLOATING_HELP_TEXT\\_2\n*   13 : CASH_CHANGE\n*   14 : RETICLE\n*   15 : SUBTITLE_TEXT\n*   16 : RADIO_STATIONS\n*   17 : SAVING_GAME\n*   18 : GAME_STREAM\n*   19 : WEAPON_WHEEL\n*   20 : WEAPON_WHEEL_STATS\n*   21 : HUD_COMPONENTS\n*   22 : HUD_WEAPONS\n\nThese integers also work for the [`HIDE_HUD_COMPONENT_THIS_FRAME`](#\\_0x6806C51AD12B83B8) native, but instead hides the HUD component.",
            "examples": [],
            "hash": "0x0B4DF1FA60C0E664",
            "ns": "HUD",
            "jhash": "0x95E1546E",
            "manualHash": true
        },
        "0xF1A6C18B35BCADE6": {
            "name": "SHOW_START_MISSION_INSTRUCTIONAL_BUTTON",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF1A6C18B35BCADE6",
            "ns": "HUD",
            "aliases": ["0xF1A6C18B35BCADE6"],
            "jhash": "0xA2CAAB4F",
            "manualHash": true
        },
        "0x75A16C3DA34F1245": {
            "name": "SHOW_HEIGHT_ON_BLIP",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x75A16C3DA34F1245",
            "ns": "HUD",
            "aliases": ["0x75A16C3DA34F1245"],
            "jhash": "0x1D99F676",
            "manualHash": true
        },
        "0x4F38DCA127DAAEA2": {
            "name": "_SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "SHOW_\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x4F38DCA127DAAEA2",
            "ns": "HUD",
            "manualHash": true
        },
        "0xDB34E8D56FC13B08": {
            "name": "START_GPS_CUSTOM_ROUTE",
            "params": [
                {
                    "name": "hudColor",
                    "type": "int",
                    "description": "The HUD color of the GPS path."
                },
                {
                    "name": "displayOnFoot",
                    "type": "BOOL",
                    "description": "Draws the path regardless if the player is in a vehicle or not."
                },
                {
                    "name": "followPlayer",
                    "type": "BOOL",
                    "description": "Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed."
                }
            ],
            "results": "void",
            "description": "Starts a new GPS custom-route, allowing you to plot lines on the map.\nLines are drawn directly between points.\nThe GPS custom route works like the GPS multi route, except it does not follow roads.\n\n**Example result:**\n\n![](https://i.imgur.com/BDm5pzt.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Clear any old route first\nClearGpsCustomRoute()\n\n-- Start a new route\nStartGpsMultiRoute(6, false, true)\n\n-- Add the points\nAddPointToGpsCustomRoute(1638.2155761719, -2344.685546875, 95.610511779785)\nAddPointToGpsCustomRoute(1653.0858154297, -2068.8654785156, 96.737915039063)\nAddPointToGpsCustomRoute(1451.9561767578, -2113.5344238281, 56.082130432129)\nAddPointToGpsCustomRoute(1540.6088867188, -2514.4519042969, 58.842422485352)\nAddPointToGpsCustomRoute(1638.2155761719, -2344.685546875, 95.610511779785)\n\n-- Set the route to render\nSetGpsCustomRouteRender(true, 16, 16)"
                }
            ],
            "hash": "0xDB34E8D56FC13B08",
            "ns": "HUD",
            "aliases": ["0xDB34E8D56FC13B08"],
            "jhash": "0x7F93799B",
            "manualHash": true
        },
        "0xEC9264727EEC0F28": {
            "name": "TAKE_CONTROL_OF_FRONTEND",
            "params": [],
            "results": "void",
            "description": "Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.\n\nTo enable the keys again, use [`0x14621BB1DF14E2B2`](#\\_0x14621BB1DF14E2B2).",
            "examples": [],
            "hash": "0xEC9264727EEC0F28",
            "ns": "HUD",
            "aliases": ["0xEC9264727EEC0F28"],
            "jhash": "0xC06B763D",
            "manualHash": true
        },
        "0x56C8B608CFD49854": {
            "name": "THEFEED_COMMENT_TELEPORT_POOL_ON",
            "params": [],
            "results": "void",
            "description": "```\nEnables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.\n```",
            "examples": [],
            "hash": "0x56C8B608CFD49854",
            "ns": "HUD",
            "aliases": ["0x56C8B608CFD49854"],
            "jhash": "0xF881AB87",
            "manualHash": true
        },
        "0x74513EA3E505181E": {
            "name": "SHOW_TICK_ON_BLIP",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAdds a green checkmark on top of a blip.  \n```",
            "examples": [],
            "hash": "0x74513EA3E505181E",
            "ns": "HUD",
            "aliases": ["0x74513EA3E505181E", "_SET_BLIP_CHECKED"],
            "jhash": "0x3DCF0092",
            "manualHash": true
        },
        "0xA3C0B359DCB848B6": {
            "name": "SHOW_NUMBER_ON_BLIP",
            "params": [
                { "name": "blip", "type": "Blip" },
                { "name": "number", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA3C0B359DCB848B6",
            "ns": "HUD",
            "jhash": "0x7BFC66C6",
            "manualHash": true
        },
        "0xBA751764F0821256": {
            "name": "SUPPRESS_FRONTEND_RENDERING_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA751764F0821256",
            "ns": "HUD",
            "aliases": ["0xBA751764F0821256"],
            "jhash": "0x7F349900",
            "manualHash": true
        },
        "0x15CFA549788D35EF": {
            "name": "_THEFEED_DISPLAY_LOADING_SCREEN_TIPS",
            "params": [],
            "results": "void",
            "description": "Displays loading screen tips, requires `0x56C8B608CFD49854` to be called beforehand.",
            "examples": [],
            "hash": "0x15CFA549788D35EF",
            "ns": "HUD",
            "aliases": ["0x15CFA549788D35EF", "_THEFEED_ENABLE"],
            "manualHash": true
        },
        "0x60E892BA4F5BDCA4": {
            "name": "_SHOW_SIGNIN_UI",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x60E892BA4F5BDCA4",
            "ns": "HUD",
            "aliases": ["0x60E892BA4F5BDCA4"],
            "manualHash": true
        },
        "0x32888337579A5970": {
            "name": "_THEFEED_DISABLE_LOADING_SCREEN_TIPS",
            "params": [],
            "results": "void",
            "description": "Stops loading screen tips shown by invoking either `0x488043841BBE156F` or `0x15CFA549788D35EF`",
            "examples": [],
            "hash": "0x32888337579A5970",
            "ns": "HUD",
            "aliases": ["0x32888337579A5970", "_THEFEED_DISABLE"],
            "manualHash": true
        },
        "0x80FE4F3AB4E1B62A": {
            "name": "THEFEED_CLEAR_FROZEN_POST",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x80FE4F3AB4E1B62A",
            "ns": "HUD",
            "aliases": ["0x80FE4F3AB4E1B62A", "_THEFEED_FLUSH_PERSISTENT"],
            "jhash": "0x3CD4307C",
            "manualHash": true
        },
        "0xA8FDB297A8D25FBA": {
            "name": "THEFEED_FLUSH_QUEUE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA8FDB297A8D25FBA",
            "ns": "HUD",
            "aliases": ["0xA8FDB297A8D25FBA"],
            "jhash": "0x5205C6F5",
            "manualHash": true
        },
        "0x3D3D15AF7BCAAF83": {
            "name": "START_GPS_MULTI_ROUTE",
            "params": [
                {
                    "name": "hudColor",
                    "type": "int",
                    "description": "The HUD color of the GPS path."
                },
                {
                    "name": "routeFromPlayer",
                    "type": "BOOL",
                    "description": "Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point."
                },
                {
                    "name": "displayOnFoot",
                    "type": "BOOL",
                    "description": "Draws the GPS path regardless if the player is in a vehicle or not."
                }
            ],
            "results": "void",
            "description": "Starts a new GPS multi-route, allowing you to create custom GPS paths.\nGPS functions like the waypoint, except it can contain multiple points it's forced to go through.\nOnce the player has passed a point, the GPS will no longer force its path through it.\n\nWorks independently from the player-placed waypoint and blip routes.\n\n**Example result:**\n\n![](https://i.imgur.com/ZZHQatX.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Clear any old route first\nClearGpsMultiRoute()\n\n-- Start a new route\nStartGpsMultiRoute(6, false, true)\n\n-- Add the points\nAddPointToGpsMultiRoute(1638.2155761719, -2344.685546875, 95.610511779785)\nAddPointToGpsMultiRoute(1653.0858154297, -2068.8654785156, 96.737915039063)\nAddPointToGpsMultiRoute(1451.9561767578, -2113.5344238281, 56.082130432129)\nAddPointToGpsMultiRoute(1540.6088867188, -2514.4519042969, 58.842422485352)\nAddPointToGpsMultiRoute(1638.2155761719, -2344.685546875, 95.610511779785)\n\n-- Set the route to render\nSetGpsMultiRouteRender(true)"
                }
            ],
            "hash": "0x3D3D15AF7BCAAF83",
            "ns": "HUD",
            "aliases": ["0x3D3D15AF7BCAAF83"],
            "jhash": "0xC3DCBEDB",
            "manualHash": true
        },
        "0xA13C11E1B5C06BFC": {
            "name": "THEFEED_FORCE_RENDER_ON",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA13C11E1B5C06BFC",
            "ns": "HUD",
            "aliases": ["0xA13C11E1B5C06BFC"],
            "jhash": "0x520FCB6D",
            "manualHash": true
        },
        "0xFDEC055AB549E328": {
            "name": "THEFEED_FREEZE_NEXT_POST",
            "params": [],
            "results": "void",
            "description": "```\nRequires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).\n```",
            "examples": [],
            "hash": "0xFDEC055AB549E328",
            "ns": "HUD",
            "aliases": [
                "0xFDEC055AB549E328",
                "_THEFEED_SET_NEXT_POST_PERSISTENT"
            ],
            "jhash": "0xAFA1148B",
            "manualHash": true
        },
        "0x82352748437638CA": {
            "name": "THEFEED_GET_FIRST_VISIBLE_DELETE_REMAINING",
            "params": [],
            "results": "int",
            "description": "```\nReturns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.\n```",
            "examples": [],
            "hash": "0x82352748437638CA",
            "ns": "HUD",
            "aliases": [
                "0x82352748437638CA",
                "_GET_CURRENT_NOTIFICATION",
                "_THEFEED_GET_CURRENT_NOTIFICATION"
            ],
            "jhash": "0x294405D4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA9CBFD40B3FA3010": {
            "name": "THEFEED_IS_PAUSED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA9CBFD40B3FA3010",
            "ns": "HUD",
            "aliases": ["0xA9CBFD40B3FA3010"],
            "jhash": "0xC5223796",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFDB423997FA30340": {
            "name": "THEFEED_PAUSE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFDB423997FA30340",
            "ns": "HUD",
            "aliases": ["0xFDB423997FA30340"],
            "jhash": "0x4D0449C6",
            "manualHash": true
        },
        "0x25F87B30C382FCA7": {
            "name": "THEFEED_HIDE_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "Once called each frame hides all above radar notifications.",
            "examples": [],
            "hash": "0x25F87B30C382FCA7",
            "ns": "HUD",
            "aliases": [
                "0x25F87B30C382FCA7",
                "_HIDE_HUD_NOTIFICATIONS_THIS_FRAME"
            ],
            "jhash": "0x1E63088A",
            "manualHash": true
        },
        "0x6F1554B0CC2089FA": {
            "name": "THEFEED_ONLY_SHOW_TOOLTIPS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6F1554B0CC2089FA",
            "ns": "HUD",
            "aliases": ["0x6F1554B0CC2089FA"],
            "jhash": "0xA7C8594B",
            "manualHash": true
        },
        "0xE1CD1E48E025E661": {
            "name": "THEFEED_RESUME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE1CD1E48E025E661",
            "ns": "HUD",
            "aliases": ["0xE1CD1E48E025E661"],
            "jhash": "0xD3F40140",
            "manualHash": true
        },
        "0x17AD8C9706BDD88A": {
            "name": "_THEFEED_SET_ANIMPOSTFX_COUNT",
            "params": [{ "name": "count", "type": "int" }],
            "results": "void",
            "description": "Related to notification color flashing, setting p0 to 0 invalidates a `_SET_NOTIFICATION_FLASH_COLOR` call for the target notification.",
            "examples": [],
            "hash": "0x17AD8C9706BDD88A",
            "ns": "HUD",
            "aliases": ["0x17AD8C9706BDD88A"],
            "jhash": "0x24A97AF8",
            "manualHash": true
        },
        "0xFDD85225B2DEA55E": {
            "name": "THEFEED_RESET_ALL_PARAMETERS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFDD85225B2DEA55E",
            "ns": "HUD",
            "aliases": ["0xFDD85225B2DEA55E", "_THEFEED_CLEAR_ANIMPOSTFX"],
            "jhash": "0xA4524B23",
            "manualHash": true
        },
        "0xBE4390CB40B3E627": {
            "name": "THEFEED_REMOVE_ITEM",
            "params": [{ "name": "notificationId", "type": "int" }],
            "results": "void",
            "description": "```\nRemoves a notification instantly instead of waiting for it to disappear  \n```",
            "examples": [],
            "hash": "0xBE4390CB40B3E627",
            "ns": "HUD",
            "aliases": ["_REMOVE_NOTIFICATION"],
            "jhash": "0xECA8ACB9",
            "manualHash": true
        },
        "0x4A0C7C9BB10ABB36": {
            "name": "_THEFEED_SET_ANIMPOSTFX_SOUND",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nRequires GAME_STREAM_ENUMS.MSGTEXT. Default sounds: \"DPAD_WEAPON_SCROLL\" and \"HUD_FRONTEND_DEFAULT_SOUNDSET\"\n```",
            "examples": [],
            "hash": "0x4A0C7C9BB10ABB36",
            "ns": "HUD",
            "aliases": ["0x4A0C7C9BB10ABB36"],
            "jhash": "0x44018EDB",
            "manualHash": true
        },
        "0x92F0DA1E27DB96DC": {
            "name": "_THEFEED_SET_NEXT_POST_BACKGROUND_COLOR",
            "params": [{ "name": "hudColorIndex", "type": "int" }],
            "results": "void",
            "description": "```\nFrom the decompiled scripts:\nHUD::_92F0DA1E27DB96DC(6);\nHUD::_92F0DA1E27DB96DC(184);\nHUD::_92F0DA1E27DB96DC(190);\nsets background color for the next notification\n6 = red\n184 = green\n190 = yellow\nHere is a list of some colors that can be used: gyazo.com/68bd384455fceb0a85a8729e48216e15\n```",
            "examples": [],
            "hash": "0x92F0DA1E27DB96DC",
            "ns": "HUD",
            "aliases": [
                "0x92F0DA1E27DB96DC",
                "_SET_NOTIFICATION_BACKGROUND_COLOR",
                "_THEFEED_NEXT_POST_BACKGROUND_COLOR"
            ],
            "jhash": "0x07CE2EA4",
            "manualHash": true
        },
        "0x17430B918701C342": {
            "name": "_THEFEED_SET_ANIMPOSTFX_COLOR",
            "params": [
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" },
                { "name": "alpha", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x17430B918701C342",
            "ns": "HUD",
            "aliases": ["0x17430B918701C342", "_SET_NOTIFICATION_FLASH_COLOR"],
            "jhash": "0xCF14D7F2",
            "manualHash": true
        },
        "0xB695E2CD0A2DA9EE": {
            "name": "THEFEED_SPS_EXTEND_WIDESCREEN_OFF",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB695E2CD0A2DA9EE",
            "ns": "HUD",
            "aliases": [
                "0xB695E2CD0A2DA9EE",
                "_THEFEED_DISABLE_BASELINE_OFFSET"
            ],
            "jhash": "0x4A4A40A4",
            "manualHash": true
        },
        "0xD4438C0564490E63": {
            "name": "THEFEED_SPS_EXTEND_WIDESCREEN_ON",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD4438C0564490E63",
            "ns": "HUD",
            "aliases": [
                "0xD4438C0564490E63",
                "_THEFEED_ENABLE_BASELINE_OFFSET"
            ],
            "jhash": "0x709B4BCB",
            "manualHash": true
        },
        "0x8183455E16C42E3A": {
            "name": "UNLOCK_MINIMAP_ANGLE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8183455E16C42E3A",
            "ns": "HUD",
            "jhash": "0x742043F9",
            "manualHash": true
        },
        "0xBAE4F9B97CD43B30": {
            "name": "_THEFEED_SET_FLUSH_ANIMPOSTFX",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf true, remove all feed components instantly. Otherwise tween/animate close each component\n```",
            "examples": [],
            "hash": "0xBAE4F9B97CD43B30",
            "ns": "HUD",
            "aliases": ["0xBAE4F9B97CD43B30"],
            "manualHash": true
        },
        "0x317EBA71D7543F52": {
            "name": "THEFEED_UPDATE_ITEM_TEXTURE",
            "params": [
                { "name": "txdString1", "type": "char*" },
                { "name": "txnString1", "type": "char*" },
                { "name": "txdString2", "type": "char*" },
                { "name": "txnString2", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nUsed in the native scripts to reference \"GET_PEDHEADSHOT_TXD_STRING\" and \"CHAR_DEFAULT\".\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x317EBA71D7543F52",
            "ns": "HUD",
            "aliases": ["0x317EBA71D7543F52", "_THEFEED_ADD_TXD_REF"],
            "jhash": "0x6A3F747D",
            "manualHash": true
        },
        "0x6AFDFB93754950C7": {
            "name": "TOGGLE_STEALTH_RADAR",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6AFDFB93754950C7",
            "ns": "HUD",
            "jhash": "0xC68D47C4",
            "manualHash": true
        },
        "0x170F541E1CADD1DE": {
            "name": "USE_FAKE_MP_CASH",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nRelated to displaying cash on the HUD\nAlways called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts\n```",
            "examples": [],
            "hash": "0x170F541E1CADD1DE",
            "ns": "HUD",
            "aliases": ["0x170F541E1CADD1DE"],
            "jhash": "0x6253B9D7",
            "manualHash": true
        },
        "0x55598D21339CB998": {
            "name": "THEFEED_SET_SCRIPTED_MENU_HEIGHT",
            "params": [{ "name": "pos", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x55598D21339CB998",
            "ns": "HUD",
            "aliases": ["0x55598D21339CB998", "_CLEAR_NOTIFICATIONS_POS"],
            "jhash": "0x1DA7E41A",
            "manualHash": true
        },
        "0x3E93E06DB8EF1F30": {
            "name": "UNLOCK_MINIMAP_POSITION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3E93E06DB8EF1F30",
            "ns": "HUD",
            "jhash": "0x5E8E6F54",
            "manualHash": true
        },
        "0x72DD432F3CDFC0EE": {
            "name": "TRIGGER_SONAR_BLIP",
            "params": [
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p4", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x72DD432F3CDFC0EE",
            "ns": "HUD",
            "aliases": ["0x72DD432F3CDFC0EE"],
            "jhash": "0xBF25E7B2",
            "manualHash": true
        }
    },
    "MOBILE": {
        "0xC4E2813898C97A4B": {
            "name": "CAN_PHONE_BE_SEEN_ON_SCREEN",
            "params": [],
            "results": "BOOL",
            "description": "```\nThis one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.  \nI can confirm the above. This function is hard-coded to always return 1.  \n```",
            "examples": [],
            "hash": "0xC4E2813898C97A4B",
            "ns": "MOBILE",
            "jhash": "0x5F978584",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFDE8F069C542D126": {
            "name": "CELL_CAM_ACTIVATE",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFDE8F069C542D126",
            "ns": "MOBILE",
            "jhash": "0x234C1AE9",
            "manualHash": true
        },
        "0x015C49A93E3E086E": {
            "name": "_CELL_CAM_DISABLE_THIS_FRAME",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nDisables the phone up-button, oddly enough.   \ni.e.: When the phone is out, and this method is called with false as it's parameter, the phone will not be able to scroll up. However, when you use the down arrow key, it's functionality still, works on the phone.   \nWhen the phone is not out, and this method is called with false as it's parameter, you will not be able to bring up the phone. Although the up arrow key still works for whatever functionality it's used for, just not for the phone.  \nThis can be used for creating menu's when trying to disable the phone from being used.   \nYou do not have to call the function again with false as a parameter, as soon as the function stops being called, the phone will again be usable.  \n```",
            "examples": [],
            "hash": "0x015C49A93E3E086E",
            "ns": "MOBILE",
            "aliases": ["0x015C49A93E3E086E", "_DISABLE_PHONE_THIS_FRAME"],
            "jhash": "0x4479B304",
            "manualHash": true
        },
        "0x439E9BC95B7E7FBE": {
            "name": "CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x439E9BC95B7E7FBE",
            "ns": "MOBILE",
            "jhash": "0xBEA88097",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x53F4892D18EC90A4": {
            "name": "_CELL_CAM_SET_DISTANCE",
            "params": [
                {
                    "name": "p0",
                    "type": "float",
                    "description": "Value from -1.0 to 1.0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x53F4892D18EC90A4",
            "ns": "MOBILE",
            "aliases": ["0x53F4892D18EC90A4"],
            "manualHash": true
        },
        "0xD6ADE981781FCA09": {
            "name": "_CELL_CAM_SET_HEAD_PITCH",
            "params": [
                {
                    "name": "p0",
                    "type": "float",
                    "description": "Value from -1.0 to 1.0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD6ADE981781FCA09",
            "ns": "MOBILE",
            "aliases": ["0xD6ADE981781FCA09"],
            "manualHash": true
        },
        "0x15E69E2802C24B8D": {
            "name": "_CELL_CAM_SET_ROLL",
            "params": [
                {
                    "name": "p0",
                    "type": "float",
                    "description": "Value from -1.0 to 1.0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x15E69E2802C24B8D",
            "ns": "MOBILE",
            "aliases": ["0x15E69E2802C24B8D"],
            "manualHash": true
        },
        "0x95C9E72F3D7DEC9B": {
            "name": "_CELL_CAM_MOVE_FINGER",
            "params": [{ "name": "direction", "type": "int" }],
            "results": "void",
            "description": "```\nFor move the finger of player, the value of int goes 1 at 5.  \n```",
            "examples": [],
            "hash": "0x95C9E72F3D7DEC9B",
            "ns": "MOBILE",
            "aliases": ["_MOVE_FINGER"],
            "manualHash": true
        },
        "0x44E44169EF70138E": {
            "name": "_CELL_CAM_SET_LEAN",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nif the bool \"Toggle\" is \"true\" so the phone is lean.  \nif the bool \"Toggle\" is \"false\" so the phone is not lean.  \n```",
            "examples": [],
            "hash": "0x44E44169EF70138E",
            "ns": "MOBILE",
            "aliases": ["_SET_PHONE_LEAN"],
            "manualHash": true
        },
        "0xF1E22DC13F5EEBAD": {
            "name": "_CELL_CAM_SET_HEAD_ROLL",
            "params": [
                {
                    "name": "p0",
                    "type": "float",
                    "description": "Value from -1.0 to 1.0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF1E22DC13F5EEBAD",
            "ns": "MOBILE",
            "aliases": ["0xF1E22DC13F5EEBAD"],
            "manualHash": true
        },
        "0x466DA42C89865553": {
            "name": "_CELL_CAM_SET_HEAD_HEIGHT",
            "params": [
                {
                    "name": "p0",
                    "type": "float",
                    "description": "Value from -1.0 to 0.0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x466DA42C89865553",
            "ns": "MOBILE",
            "aliases": ["0x466DA42C89865553"],
            "jhash": "0x66DCD9D2",
            "manualHash": true
        },
        "0x1CEFB61F193070AE": {
            "name": "GET_MOBILE_PHONE_ROTATION",
            "params": [
                { "name": "rotation", "type": "Vector3*" },
                { "name": "p1", "type": "Vehicle" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1CEFB61F193070AE",
            "ns": "MOBILE",
            "jhash": "0x17A29F23",
            "manualHash": true
        },
        "0x3117D84EFA60F77B": {
            "name": "_CELL_CAM_SET_VERTICAL_OFFSET",
            "params": [
                {
                    "name": "p0",
                    "type": "float",
                    "description": "Value from 0.0 to 2.0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3117D84EFA60F77B",
            "ns": "MOBILE",
            "aliases": ["0x3117D84EFA60F77B"],
            "manualHash": true
        },
        "0x1B0B4AEED5B9B41C": {
            "name": "_CELL_CAM_SET_HORIZONTAL_OFFSET",
            "params": [
                {
                    "name": "p0",
                    "type": "float",
                    "description": "Value from -1.0 to 1.0"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1B0B4AEED5B9B41C",
            "ns": "MOBILE",
            "aliases": ["0x1B0B4AEED5B9B41C"],
            "manualHash": true
        },
        "0xA4E8E696C532FBC7": {
            "name": "CREATE_MOBILE_PHONE",
            "params": [{ "name": "phoneType", "type": "int" }],
            "results": "void",
            "description": "```\nCreates a mobile phone of the specified type.  \nPossible phone types:  \n0 - Default phone / Michael's phone  \n1 - Trevor's phone  \n2 - Franklin's phone  \n4 - Prologue phone  \nThese values represent bit flags, so a value of '3' would toggle Trevor and Franklin's phones together, causing unexpected behavior and most likely crash the game.  \n```",
            "examples": [],
            "hash": "0xA4E8E696C532FBC7",
            "ns": "MOBILE",
            "jhash": "0x5BBC5E23",
            "manualHash": true
        },
        "0xBB779C0CA917E865": {
            "name": "SET_MOBILE_PHONE_ROTATION",
            "params": [
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nLast parameter is unknown and always zero.  \n```",
            "examples": [],
            "hash": "0xBB779C0CA917E865",
            "ns": "MOBILE",
            "jhash": "0x209C28CF",
            "manualHash": true
        },
        "0x3BC861DF703E5097": {
            "name": "DESTROY_MOBILE_PHONE",
            "params": [],
            "results": "void",
            "description": "```\nDestroys the currently active mobile phone.  \n```",
            "examples": [],
            "hash": "0x3BC861DF703E5097",
            "ns": "MOBILE",
            "jhash": "0x1A65037B",
            "manualHash": true
        },
        "0xB4A53E05F68B6FA1": {
            "name": "GET_MOBILE_PHONE_RENDER_ID",
            "params": [{ "name": "renderId", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB4A53E05F68B6FA1",
            "ns": "MOBILE",
            "jhash": "0x88E4FECE",
            "manualHash": true
        },
        "0xAC2890471901861C": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAC2890471901861C",
            "ns": "MOBILE",
            "manualHash": true
        },
        "0x584FDFDA48805B86": {
            "name": "GET_MOBILE_PHONE_POSITION",
            "params": [{ "name": "position", "type": "Vector3*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x584FDFDA48805B86",
            "ns": "MOBILE",
            "jhash": "0xB2E1E1A0",
            "manualHash": true
        },
        "0xF511F759238A5122": {
            "name": "SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf bool Toggle = true so the mobile is hide to screen.  \nIf bool Toggle = false so the mobile is show to screen.  \n```",
            "examples": [],
            "hash": "0xF511F759238A5122",
            "ns": "MOBILE",
            "jhash": "0x29828690",
            "manualHash": true
        },
        "0xCBDD322A73D6D932": {
            "name": "SET_MOBILE_PHONE_SCALE",
            "params": [{ "name": "scale", "type": "float" }],
            "results": "void",
            "description": "```\nThe minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.  \n```",
            "examples": [],
            "hash": "0xCBDD322A73D6D932",
            "ns": "MOBILE",
            "jhash": "0x09BCF1BE",
            "manualHash": true
        },
        "0xA2CCBE62CD4C91A4": {
            "params": [{ "name": "toggle", "type": "int*" }],
            "results": "void",
            "description": "```\nNeeds more research. If the \"phone_cam12\" filter is applied, this function is called with \"TRUE\"; otherwise, \"FALSE\".\nExample (XBOX 360):\n// check current filter selection\nif (MISC::ARE_STRINGS_EQUAL(getElem(g_2471024, &l_17, 4), \"phone_cam12\") != 0)\n{\n    MOBILE::_0xC273BB4D(0); // FALSE\n}\nelse\n{\n    MOBILE::_0xC273BB4D(1); // TRUE\n}\n```",
            "examples": [],
            "hash": "0xA2CCBE62CD4C91A4",
            "ns": "MOBILE",
            "jhash": "0xC273BB4D",
            "manualHash": true
        },
        "0x693A5C6D6734085B": {
            "name": "SET_MOBILE_PHONE_POSITION",
            "params": [
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x693A5C6D6734085B",
            "ns": "MOBILE",
            "jhash": "0x841800B3",
            "manualHash": true
        },
        "0x375A706A5C2FD084": {
            "name": "_SET_MOBILE_PHONE_UNK",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x375A706A5C2FD084",
            "ns": "MOBILE",
            "aliases": ["0x375A706A5C2FD084"],
            "manualHash": true
        }
    },
    "MISC": {
        "0x73D57CFFDD12C355": {
            "name": "ABSF",
            "params": [{ "name": "value", "type": "float" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x73D57CFFDD12C355",
            "ns": "MISC",
            "jhash": "0xAF6F6E0B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1D08B970013C34B6": {
            "name": "ACOS",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x1D08B970013C34B6",
            "ns": "MISC",
            "jhash": "0xF4038776",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x918C7B2D2FF3928B": {
            "name": "_ADD_DISPATCH_SPAWN_BLOCKING_ANGLED_AREA",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                }
            ],
            "results": "Any",
            "description": "To remove, see: [`REMOVE_DISPATCH_SPAWN_BLOCKING_AREA`](#\\_0x264AC28B01B353A5).\n\nSee [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.",
            "examples": [],
            "hash": "0x918C7B2D2FF3928B",
            "ns": "MISC",
            "aliases": ["0x918C7B2D2FF3928B"],
            "jhash": "0xF557BAF9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF0D31AD191A74F87": {
            "name": "ABSI",
            "params": [{ "name": "value", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF0D31AD191A74F87",
            "ns": "MISC",
            "jhash": "0xB44677C5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1F464EF988465A81": {
            "name": "ADD_HOSPITAL_RESTART",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "int",
            "description": "```\nReturns the index of the newly created hospital spawn point.  \np3 might be radius?  \n```",
            "examples": [],
            "hash": "0x1F464EF988465A81",
            "ns": "MISC",
            "jhash": "0x4F3E3104",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2D4259F1FEB81DA9": {
            "name": "_ADD_DISPATCH_SPAWN_BLOCKING_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x2D4259F1FEB81DA9",
            "ns": "MISC",
            "aliases": ["0x2D4259F1FEB81DA9"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x67F6413D3220E18D": {
            "name": "ADD_POP_MULTIPLIER_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\nNativeDB Added Parameter 10: BOOL p9\n```",
            "examples": [],
            "hash": "0x67F6413D3220E18D",
            "ns": "MISC",
            "aliases": ["0x67F6413D3220E18D"],
            "jhash": "0x42BF09B3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x32C7A7E8C43A1F80": {
            "name": "ADD_POP_MULTIPLIER_SPHERE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "pedMultiplier", "type": "float" },
                { "name": "vehicleMultiplier", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\nThis native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE\n```",
            "examples": [],
            "hash": "0x32C7A7E8C43A1F80",
            "ns": "MISC",
            "aliases": ["0x32C7A7E8C43A1F80"],
            "jhash": "0xCE4A3D20",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x69FE6DC87BD2A5E9": {
            "name": "ADD_REPLAY_STAT_VALUE",
            "params": [{ "name": "value", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x69FE6DC87BD2A5E9",
            "ns": "MISC",
            "aliases": ["0x69FE6DC87BD2A5E9"],
            "jhash": "0x81216EE0",
            "manualHash": true
        },
        "0x452736765B31FC4B": {
            "name": "ADD_POLICE_RESTART",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x452736765B31FC4B",
            "ns": "MISC",
            "jhash": "0xE96C29FE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1A992DA297A4630C": {
            "name": "ADD_STUNT_JUMP",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "Jump entry left far bottom corner coordinate X."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Jump entry left far bottom corner coordinate Y."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Jump entry left far bottom corner coordinate Z."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "Jump entry right near top corner coordinate X."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Jump entry right near top corner coordinate Y."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Jump entry right near top corner coordinate Z."
                },
                {
                    "name": "x3",
                    "type": "float",
                    "description": "Landing zone end coordinate X."
                },
                {
                    "name": "y3",
                    "type": "float",
                    "description": "Landing zone end coordinate Y."
                },
                {
                    "name": "z3",
                    "type": "float",
                    "description": "Landing zone end coordinate Z."
                },
                {
                    "name": "x4",
                    "type": "float",
                    "description": "Landing zone start coordinate X."
                },
                {
                    "name": "y4",
                    "type": "float",
                    "description": "Landing zone start coordinate Y."
                },
                {
                    "name": "z4",
                    "type": "float",
                    "description": "Landing zone start coordinate Z."
                },
                {
                    "name": "camX",
                    "type": "float",
                    "description": "Stuntcam (cinematic) coordinate x."
                },
                {
                    "name": "camY",
                    "type": "float",
                    "description": "Stuntcam (cinematic) coordinate y."
                },
                {
                    "name": "camZ",
                    "type": "float",
                    "description": "Stuntcam (cinematic) coordinate z."
                },
                {
                    "name": "unk1",
                    "type": "int",
                    "description": "Unknown, always 150."
                },
                {
                    "name": "unk2",
                    "type": "int",
                    "description": "Unknown, always 0."
                },
                {
                    "name": "unk3",
                    "type": "int",
                    "description": "Unknown, always 0."
                }
            ],
            "results": "int",
            "description": "See description of [`ADD_STUNT_JUMP_ANGLED`](#\\_0xBBE5D803A5360CBF) for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.",
            "examples": [],
            "hash": "0x1A992DA297A4630C",
            "ns": "MISC",
            "jhash": "0xB630E5FF",
            "manualHash": true,
            "resultsDescription": "The ID of the stunt jump that was added."
        },
        "0xB8721407EE9C3FF6": {
            "name": "_ADD_TACTICAL_ANALYSIS_POINT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nAdds a point related to CTacticalAnalysis\n```",
            "examples": [],
            "hash": "0xB8721407EE9C3FF6",
            "ns": "MISC",
            "aliases": ["0xB8721407EE9C3FF6"],
            "jhash": "0x24A4E0B2",
            "manualHash": true
        },
        "0x0C515FAB3FF9EA92": {
            "name": "ARE_STRINGS_EQUAL",
            "params": [
                { "name": "string1", "type": "char*" },
                { "name": "string2", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0C515FAB3FF9EA92",
            "ns": "MISC",
            "jhash": "0x877C0BC5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDEA36202FC3382DF": {
            "name": "ALLOW_MISSION_CREATOR_WARP",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDEA36202FC3382DF",
            "ns": "MISC",
            "aliases": ["0xDEA36202FC3382DF"],
            "jhash": "0x082BA6F2",
            "manualHash": true
        },
        "0xE0E500246FF73D66": {
            "name": "BEGIN_REPLAY_STATS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE0E500246FF73D66",
            "ns": "MISC",
            "jhash": "0x17F4F44D",
            "manualHash": true
        },
        "0xC843060B5765DCE7": {
            "name": "ASIN",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xC843060B5765DCE7",
            "ns": "MISC",
            "jhash": "0x998E5CAD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8927CBF9D22261A4": {
            "name": "ATAN2",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x8927CBF9D22261A4",
            "ns": "MISC",
            "jhash": "0x2508AC81",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9B2BD3773123EA2F": {
            "name": "BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION",
            "params": [
                { "name": "dispatchService", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9B2BD3773123EA2F",
            "ns": "MISC",
            "aliases": ["0x9B2BD3773123EA2F"],
            "jhash": "0xE0F0684F",
            "manualHash": true
        },
        "0x58A39BE597CE99CD": {
            "name": "_CANCEL_ONSCREEN_KEYBOARD",
            "params": [],
            "results": "void",
            "description": "```\nDO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.\nUse _FORCE_CLOSE_TEXT_INPUT_BOX instead.\nCANCEL_*\n```",
            "examples": [],
            "hash": "0x58A39BE597CE99CD",
            "ns": "MISC",
            "aliases": ["0x58A39BE597CE99CD"],
            "jhash": "0x196444BB",
            "manualHash": true
        },
        "0xBBE5D803A5360CBF": {
            "name": "ADD_STUNT_JUMP_ANGLED",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "Entry zone bottom left corner x."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Entry zone bottom left corner y."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Entry zone bottom left corner z."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "Entry zone top right corner x."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Entry zone top right corner y."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Entry zone top right corner z."
                },
                {
                    "name": "radius1",
                    "type": "float",
                    "description": "Probably a \"feather\" radius for entry zone, you need to enter the jump within the min/max coordinates, or within this radius of those two coordinates."
                },
                {
                    "name": "x3",
                    "type": "float",
                    "description": "Landing zone start corner coordinate x."
                },
                {
                    "name": "y3",
                    "type": "float",
                    "description": "Landing zone start corner coordinate y."
                },
                {
                    "name": "z3",
                    "type": "float",
                    "description": "Landing zone start corner coordinate z."
                },
                {
                    "name": "x4",
                    "type": "float",
                    "description": "Landing zone end corner coordinate x."
                },
                {
                    "name": "y4",
                    "type": "float",
                    "description": "Landing zone end corner coordinate y."
                },
                {
                    "name": "z4",
                    "type": "float",
                    "description": "Landing zone end corner coordinate z."
                },
                {
                    "name": "radius2",
                    "type": "float",
                    "description": "Probably a \"feather\" radius for landing zone, you need to land within the min/max coordinates, or within this radius of those two coordinates."
                },
                {
                    "name": "camX",
                    "type": "float",
                    "description": "Stunt (cinematic) camera x position."
                },
                {
                    "name": "camY",
                    "type": "float",
                    "description": "Stunt (cinematic) camera y position."
                },
                {
                    "name": "camZ",
                    "type": "float",
                    "description": "Stunt (cinematic) camera z position."
                },
                { "name": "unk1", "type": "int", "description": "always 150" },
                { "name": "unk2", "type": "int", "description": "always 0" },
                { "name": "unk3", "type": "int", "description": "always 0" }
            ],
            "results": "int",
            "description": "Creates a new stunt jump.\n\nThe radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP\\_**ANGLED**.\n\nInfo about the specific 'parameter sections':\n\n**x1, y1, z1, x2, y2, z2 and radius1:**\n\nFirst coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.\n\n**x3, y3, z3, x4, y4, z4 and radius2:**\n\nNext part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).\n\n**camX, camY and camZ:**\n\nThe final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.\n\n**unk1, unk2 and unk3:**\n\nNot sure what these are for, but they're always `150, 0, 0` in decompiled scripts.\n\nVisualized example in-game:\n\n![](https://d.fivem.dev/2019-03-15\\_18-24\\_c7802\\_846.png)\n\nHere is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local data = {\n    entry = {\n        leftbottom = vector3(-963.1714, -2778.506, 14.47828),\n        righttop = vector3(-965.7361, -2777.121, 19.46395),\n        radius = 8.0\n    },\n    landing = {\n        start = vector3(-988.8297, -2830.789, 11.96478),\n        ending = vector3(-1027.989, -2895.436, 16.95805),\n        radius = 18.0\n    },\n    camcoords = vector3(-967.196, -2811.716, 14.5521),\n    unk1 = 150,\n    unk2 = 0,\n    unk3 = 0\n\n}\n\nlocal stuntjump = AddStuntJumpAngled(\n    data.entry.leftbottom, \n    data.entry.righttop,\n    data.entry.radius,\n    data.landing.start,\n    data.landing.ending,\n    data.landing.radius,\n    data.camcoords,\n    data.unk1,\n    data.unk2,\n    data.unk3\n)\n\nprint(\"New stunt jump added, id: \" .. stuntjump)\n\nCitizen.CreateThread(function()\n    while true do\n        Wait(0)\n        DrawLine(data.entry.leftbottom, data.entry.righttop, 255, 255, 255, 255)\n        DrawLine(data.landing.start, data.landing.ending, 255, 0, 0, 255)\n        DrawMarker(28, data.camcoords.x, data.camcoords.y, data.camcoords.z, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 255, 255, 255, 150, false, false, 2, false, nil, nil, false)\n    end\nend)"
                }
            ],
            "hash": "0xBBE5D803A5360CBF",
            "ns": "MISC",
            "jhash": "0xB9B7E777",
            "manualHash": true,
            "resultsDescription": "The ID of the stuntjump that was created."
        },
        "0x5AA3BEFA29F03AD4": {
            "name": "ARE_PROFILE_SETTINGS_VALID",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5AA3BEFA29F03AD4",
            "ns": "MISC",
            "aliases": ["0x5AA3BEFA29F03AD4"],
            "jhash": "0x46B5A15C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC79AE21974B01FB2": {
            "name": "_CLEANUP_ASYNC_INSTALL",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC79AE21974B01FB2",
            "ns": "MISC",
            "aliases": ["0xC79AE21974B01FB2"],
            "manualHash": true
        },
        "0xA56F01F3765B93A0": {
            "name": "CLEAR_AREA",
            "params": [
                { "name": "X", "type": "float" },
                { "name": "Y", "type": "float" },
                { "name": "Z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "ignoreCopCars", "type": "BOOL" },
                { "name": "ignoreObjects", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nExample: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);  \n```",
            "examples": [],
            "hash": "0xA56F01F3765B93A0",
            "ns": "MISC",
            "jhash": "0x854E9AB8",
            "manualHash": true
        },
        "0x04F8FC8FCF58F88D": {
            "name": "CLEAR_AREA_OF_COPS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x coordinate of where to clear cops."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y coordinate of where to clear cops."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z coordinate of where to clear cops."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The area radius to clear cops."
                },
                {
                    "name": "createNetEvent",
                    "type": "BOOL",
                    "annotations": { "cs_type": "int" },
                    "description": "specifies whether a `CClearAreaEvent` event of should be created for online use."
                }
            ],
            "results": "void",
            "description": "Clears an area of cops at the given coordinates and radius.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Clear the area, do also create an event\nClearAreaOfCops(0.0, 0.0, 0.0, 10000.0, true)"
                }
            ],
            "hash": "0x04F8FC8FCF58F88D",
            "ns": "MISC",
            "jhash": "0x95C53824",
            "manualHash": true
        },
        "0xA9D1795CD5043663": {
            "name": "ATAN",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xA9D1795CD5043663",
            "ns": "MISC",
            "jhash": "0x7A03CC8E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE80492A9AC099A93": {
            "name": "CLEAR_BIT",
            "params": [
                { "name": "address", "type": "int*" },
                { "name": "offset", "type": "int" }
            ],
            "results": "void",
            "description": "```\nThis sets bit [offset] of [address] to off.\nExample:\nMISC::CLEAR_BIT(&bitAddress, 1);\nTo check if this bit has been enabled:\nMISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards\n```",
            "examples": [],
            "hash": "0xE80492A9AC099A93",
            "ns": "MISC",
            "jhash": "0x8BC9E618",
            "manualHash": true
        },
        "0xDD9B9B385AAC7F5B": {
            "name": "CLEAR_AREA_OF_OBJECTS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nI looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.  \n```",
            "examples": [],
            "hash": "0xDD9B9B385AAC7F5B",
            "ns": "MISC",
            "jhash": "0xBB720FE7",
            "manualHash": true
        },
        "0x957838AAF91BD12D": {
            "name": "CLEAR_AREA_LEAVE_VEHICLE_HEALTH",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMISC::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.\n```",
            "examples": [],
            "hash": "0x957838AAF91BD12D",
            "ns": "MISC",
            "aliases": ["0x957838AAF91BD12D", "_CLEAR_AREA_OF_EVERYTHING"],
            "jhash": "0x20E4FFD9",
            "manualHash": true
        },
        "0xE6B7B0ACD4E4B75E": {
            "name": "CANCEL_STUNT_JUMP",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE6B7B0ACD4E4B75E",
            "ns": "MISC",
            "jhash": "0xF43D9821",
            "manualHash": true
        },
        "0xA2716D40842EAF79": {
            "name": "_CLEAR_RESTART_CUSTOM_POSITION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA2716D40842EAF79",
            "ns": "MISC",
            "aliases": ["0xA2716D40842EAF79", "_SET_NEXT_RESPAWN_TO_CUSTOM"],
            "manualHash": true
        },
        "0x11DB3500F042A8AA": {
            "name": "CLEAR_ANGLED_AREA_OF_VEHICLES",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "BOOL" },
                { "name": "p10", "type": "BOOL" },
                { "name": "p11", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 13: Any p12\n```",
            "examples": [],
            "hash": "0x11DB3500F042A8AA",
            "ns": "MISC",
            "jhash": "0xF11A3018",
            "manualHash": true
        },
        "0x0A1CB9094635D1A6": {
            "name": "CLEAR_AREA_OF_PROJECTILES",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x coordinate of where to clear projectiles."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y coordinate of where to clear projectiles."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z coordinate of where to clear projectiles."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The area radius to clear projectiles."
                },
                {
                    "name": "createNetEvent",
                    "type": "BOOL",
                    "annotations": { "cs_type": "int" },
                    "description": "specifies whether a `CClearAreaEvent` event of should be created for online use."
                }
            ],
            "results": "void",
            "description": "Clears an area of projectiles at the given coordinates and radius.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Clear the area, do also create an event\nClearAreaOfProjectiles(0.0, 0.0, 0.0, 10000.0, true)"
                }
            ],
            "hash": "0x0A1CB9094635D1A6",
            "ns": "MISC",
            "jhash": "0x18DB5434",
            "manualHash": true
        },
        "0xB3CD58CCA6CDA852": {
            "name": "_CLEAR_TACTICAL_ANALYSIS_POINTS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB3CD58CCA6CDA852",
            "ns": "MISC",
            "aliases": ["0xB3CD58CCA6CDA852"],
            "jhash": "0x66C3C59C",
            "manualHash": true
        },
        "0x01C7B9B38428AEB6": {
            "name": "CLEAR_AREA_OF_VEHICLES",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nExample: \t\tCLEAR_AREA_OF_VEHICLES(0, 0, 0, 10000, false, false, false, false, false);  \n```\n\n```\nNativeDB Added Parameter 10: BOOL p9\n```",
            "examples": [],
            "hash": "0x01C7B9B38428AEB6",
            "ns": "MISC",
            "jhash": "0x63320F3C",
            "manualHash": true
        },
        "0x957E790EA1727B64": {
            "name": "_CLEAR_CLOUD_HAT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x957E790EA1727B64",
            "ns": "MISC",
            "jhash": "0x2D7787BC",
            "manualHash": true
        },
        "0xBE31FD6CE464AC59": {
            "name": "CLEAR_AREA_OF_PEDS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x coordinate of where to clear peds."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y coordinate of where to clear peds."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z coordinate of where to clear peds."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The area radius to clear peds."
                },
                {
                    "name": "createNetEvent",
                    "type": "BOOL",
                    "annotations": { "cs_type": "int" },
                    "description": "specifies whether a `CClearAreaEvent` event of should be created for online use."
                }
            ],
            "results": "void",
            "description": "Clears an area of peds at the given coordinates and radius.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Clear the area, do also create an event\nClearAreaOfPeds(0.0, 0.0, 0.0, 10000.0, true)"
                }
            ],
            "hash": "0xBE31FD6CE464AC59",
            "ns": "MISC",
            "jhash": "0x25BE7FA8",
            "manualHash": true
        },
        "0x338D2E3477711050": {
            "name": "CLEAR_OVERRIDE_WEATHER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x338D2E3477711050",
            "ns": "MISC",
            "jhash": "0x7740EA4E",
            "manualHash": true
        },
        "0x1E34710ECD4AB0EB": {
            "name": "COMPARE_STRINGS",
            "params": [
                { "name": "str1", "type": "char*" },
                { "name": "str2", "type": "char*" },
                { "name": "matchCase", "type": "BOOL" },
                { "name": "maxLength", "type": "int" }
            ],
            "results": "int",
            "description": "```\nCompares two strings up to a specified number of characters.\nParameters:\nstr1 - String to be compared.\nstr2 - String to be compared.\nmatchCase - Comparison will be case-sensitive.\nmaxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.\nReturns:\nA value indicating the relationship between the strings:\n<0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)\n0 - The contents of both strings are equal.\n>0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)\nExamples:\nMISC::COMPARE_STRINGS(\"STRING\", \"string\", false, -1); // 0; equal\nMISC::COMPARE_STRINGS(\"TESTING\", \"test\", false, 4); // 0; equal\nMISC::COMPARE_STRINGS(\"R2D2\", \"R2xx\", false, 2); // 0; equal\nMISC::COMPARE_STRINGS(\"foo\", \"bar\", false, -1); // 4; 'f' > 'b'\nMISC::COMPARE_STRINGS(\"A\", \"A\", true, 1); // 0; equal\nWhen comparing case-sensitive strings, lower-case characters are greater than upper-case characters:\nMISC::COMPARE_STRINGS(\"A\", \"a\", true, 1); // -1; 'A' < 'a'\nMISC::COMPARE_STRINGS(\"a\", \"A\", true, 1); // 1; 'a' > 'A'\n```",
            "examples": [],
            "hash": "0x1E34710ECD4AB0EB",
            "ns": "MISC",
            "jhash": "0xFE25A58F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x213AEB2B90CBA7AC": {
            "name": "_COPY_MEMORY",
            "params": [
                { "name": "dst", "type": "Any*" },
                { "name": "src", "type": "Any" },
                { "name": "size", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x213AEB2B90CBA7AC",
            "ns": "MISC",
            "aliases": ["0x213AEB2B90CBA7AC"],
            "manualHash": true
        },
        "0x1B1AB132A16FDA55": {
            "name": "CLEAR_REPLAY_STATS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1B1AB132A16FDA55",
            "ns": "MISC",
            "jhash": "0xC47DFF02",
            "manualHash": true
        },
        "0xCCC39339BEF76CF5": {
            "name": "CLEAR_WEATHER_TYPE_PERSIST",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCCC39339BEF76CF5",
            "ns": "MISC",
            "jhash": "0x6AB757D8",
            "manualHash": true
        },
        "0x556C1AA270D5A207": {
            "name": "DELETE_INCIDENT",
            "params": [{ "name": "incidentId", "type": "int" }],
            "results": "void",
            "description": "```\nDelete an incident with a given id.  \n=======================================================  \nCorrection, I have change this to int, instead of int*  \nas it doesn't use a pointer to the createdIncident.  \nIf you try it you will crash (or) freeze.  \n=======================================================  \n```",
            "examples": [],
            "hash": "0x556C1AA270D5A207",
            "ns": "MISC",
            "jhash": "0x212BD0DC",
            "manualHash": true
        },
        "0x05983472F0494E60": {
            "name": "CREATE_INCIDENT_WITH_ENTITY",
            "params": [
                { "name": "dispatchService", "type": "int" },
                { "name": "ped", "type": "Ped" },
                { "name": "numUnits", "type": "int" },
                { "name": "radius", "type": "float" },
                { "name": "outIncidentID", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\np0 could be type (valueused in scripts: 14, 7, 5, 3, 11)  \np1 is a return from get_player_ped() in am_gang_call.c, but player_ped_id() in other (non am) scripts.  \np3 is usually 0f or 3f  \n=====================================================  \nenum IncidentTypes  \n{  \n    FireDepartment = 3,  \n    Paramedics = 5,  \n    Police = 7,  \n    PedsInCavalcades = 11,   \n    Merryweather = 14  \n};  \nAs for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.   \nSide Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).  \nSide Note 2: I say it breaks as if you call this proper,  \nif(CREATE_INCIDENT) etc it will return false if you do as I said above.  \n=====================================================  \n```\n\n```\nNativeDB Added Parameter 6: Any p5\nNativeDB Added Parameter 7: Any p6\n```",
            "examples": [],
            "hash": "0x05983472F0494E60",
            "ns": "MISC",
            "jhash": "0xBBC35B03",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0CF97F497FE7D048": {
            "name": "CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK",
            "params": [
                {
                    "name": "transitionTimeInMs",
                    "type": "int",
                    "annotations": { "cs_type": "float" },
                    "description": "Transition time in milliseconds."
                }
            ],
            "results": "void",
            "description": "Clears the active weather type after a specific amount of time determined by `transitionTimeInMs`.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterCommand('weathertransition', function(source, args)\n    -- Set the weather type to foggy so we can see the change\n    SetWeatherTypeNowPersist(\"FOGGY\")\n    -- Clear the weather and run the transition\n    local transitionTimeInMs = tonumber(args[1]) or 5000\n    if transitionTimeInMs > 0 then\n        ClearWeatherTypeNowPersistNetwork(transitionTimeInMs)\n    end\nend, false)"
                }
            ],
            "hash": "0x0CF97F497FE7D048",
            "ns": "MISC",
            "aliases": ["0x0CF97F497FE7D048"],
            "manualHash": true
        },
        "0xC8535819C450EBA8": {
            "name": "DISABLE_HOSPITAL_RESTART",
            "params": [
                { "name": "hospitalIndex", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThe game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.\n```",
            "examples": [],
            "hash": "0xC8535819C450EBA8",
            "ns": "MISC",
            "jhash": "0x09F49C72",
            "manualHash": true
        },
        "0xDC518000E39DAE1F": {
            "name": "DELETE_STUNT_JUMP",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC518000E39DAE1F",
            "ns": "MISC",
            "jhash": "0x840CB5DA",
            "manualHash": true
        },
        "0x3F892CAF67444AE7": {
            "name": "CREATE_INCIDENT",
            "params": [
                { "name": "dispatchService", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "numUnits", "type": "int" },
                { "name": "radius", "type": "float" },
                { "name": "outIncidentID", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\nenum IncidentTypes  \n{  \n    FireDepartment = 3,  \n    Paramedics = 5,  \n    Police = 7,  \n    PedsInCavalcades = 11,   \n    Merryweather = 14  \n};  \nAs for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.   \nSide Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).  \nSide Note 2: I say it breaks as if you call this proper,  \nif(CREATE_INCIDENT) etc it will return false if you do as I said above.  \n=====================================================  \n```\n\n```\nNativeDB Added Parameter 8: Any p7\nNativeDB Added Parameter 9: Any p8\n```",
            "examples": [],
            "hash": "0x3F892CAF67444AE7",
            "ns": "MISC",
            "jhash": "0xFC5FF7B3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA78CFA0366592FE": {
            "name": "DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "windowTitle", "type": "char*" },
                { "name": "p2", "type": "Any*" },
                { "name": "defaultText", "type": "char*" },
                { "name": "defaultConcat1", "type": "char*" },
                { "name": "defaultConcat2", "type": "char*" },
                { "name": "defaultConcat3", "type": "char*" },
                { "name": "defaultConcat4", "type": "char*" },
                { "name": "defaultConcat5", "type": "char*" },
                { "name": "defaultConcat6", "type": "char*" },
                { "name": "defaultConcat7", "type": "char*" },
                { "name": "maxInputLength", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCA78CFA0366592FE",
            "ns": "MISC",
            "aliases": ["0xCA78CFA0366592FE", "_DISPLAY_ONSCREEN_KEYBOARD_2"],
            "jhash": "0xD2688412",
            "manualHash": true
        },
        "0x23285DED6EBD7EA3": {
            "name": "DISABLE_POLICE_RESTART",
            "params": [
                { "name": "policeIndex", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nDisables the spawn point at the police house on the specified index.\npoliceIndex: The police house index.\ntoggle: true to enable the spawn point, false to disable.\n- Nacorpio\n```",
            "examples": [],
            "hash": "0x23285DED6EBD7EA3",
            "ns": "MISC",
            "jhash": "0x0A280324",
            "manualHash": true
        },
        "0xA5272EBEDD4747F6": {
            "name": "DISABLE_STUNT_JUMP_SET",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA5272EBEDD4747F6",
            "ns": "MISC",
            "jhash": "0x644C9FA4",
            "manualHash": true
        },
        "0x1327E2FE9746BAEE": {
            "name": "DOES_POP_MULTIPLIER_AREA_EXIST",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1327E2FE9746BAEE",
            "ns": "MISC",
            "aliases": ["0x1327E2FE9746BAEE"],
            "jhash": "0xE933B34A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x171BAFB3C60389F4": {
            "name": "DOES_POP_MULTIPLIER_SPHERE_EXIST",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x171BAFB3C60389F4",
            "ns": "MISC",
            "aliases": ["0x171BAFB3C60389F4"],
            "jhash": "0xD2B7A5A0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x50EEAAD86232EE55": {
            "name": "DO_AUTO_SAVE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x50EEAAD86232EE55",
            "ns": "MISC",
            "jhash": "0x54C44B1A",
            "manualHash": true
        },
        "0x28A04B411933F8A6": {
            "name": "ENABLE_TENNIS_MODE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMakes the ped jump around like they're in a tennis match  \n```",
            "examples": [],
            "hash": "0x28A04B411933F8A6",
            "ns": "MISC",
            "jhash": "0x0BD3F9EC",
            "manualHash": true
        },
        "0xE369A5783B866016": {
            "name": "ENABLE_STUNT_JUMP_SET",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE369A5783B866016",
            "ns": "MISC",
            "jhash": "0x9D1E7785",
            "manualHash": true
        },
        "0xDC0F817884CDD856": {
            "name": "ENABLE_DISPATCH_SERVICE",
            "params": [
                {
                    "name": "dispatchService",
                    "type": "int",
                    "description": "The ID of the dispatch service to toggle."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "True to enable the dispatch service, false to disable the dispatch service."
                }
            ],
            "results": "void",
            "description": "Enables or disables the specified 'dispatch service' type. 'Dispatch services' are used for spawning AI response peds/vehicles for events such as a fire in the street (type 3 - DT_FireDepartment), or gunfire in a gang area (type 11 - DT_Gangs).\n\nList of dispatch services:\n\n```cpp\nenum DispatchType\n{\n\tDT_Invalid = 0,\n\tDT_PoliceAutomobile,\n\tDT_PoliceHelicopter,\n\tDT_FireDepartment,\n\tDT_SwatAutomobile,\n\tDT_AmbulanceDepartment,\n\tDT_PoliceRiders,\n\tDT_PoliceVehicleRequest,\n\tDT_PoliceRoadBlock,\n\tDT_PoliceAutomobileWaitPulledOver,\n\tDT_PoliceAutomobileWaitCruising,\n\tDT_Gangs,\n\tDT_SwatHelicopter,\n\tDT_PoliceBoat,\n\tDT_ArmyVehicle,\n\tDT_BikerBackup = 15\n};\n```\n\nNote that 'dispatch service' has nothing to do with the police scanner (audio), to toggle that, use [SET_AUDIO_FLAG](#\\_0xB9EFD5C25018725A) with `'PoliceScannerDisabled'`.",
            "examples": [],
            "hash": "0xDC0F817884CDD856",
            "ns": "MISC",
            "aliases": ["0xDC0F817884CDD856"],
            "jhash": "0x0B710A51",
            "manualHash": true
        },
        "0x00DC833F2568DBF6": {
            "name": "DISPLAY_ONSCREEN_KEYBOARD",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "windowTitle", "type": "char*" },
                { "name": "p2", "type": "char*" },
                { "name": "defaultText", "type": "char*" },
                { "name": "defaultConcat1", "type": "char*" },
                { "name": "defaultConcat2", "type": "char*" },
                { "name": "defaultConcat3", "type": "char*" },
                { "name": "maxInputLength", "type": "int" }
            ],
            "results": "void",
            "description": "```\nwindowTitle's  \n-----------------  \nCELL_EMAIL_BOD\t=\t\"Enter your Eyefind message\"  \nCELL_EMAIL_BODE\t=\t\"Message too long. Try again\"  \nCELL_EMAIL_BODF\t=\t\"Forbidden message. Try again\"  \nCELL_EMAIL_SOD\t=\t\"Enter your Eyefind subject\"  \nCELL_EMAIL_SODE\t=\t\"Subject too long. Try again\"  \nCELL_EMAIL_SODF\t=\t\"Forbidden text. Try again\"  \nCELL_EMASH_BOD\t=\t\"Enter your Eyefind message\"  \nCELL_EMASH_BODE\t=\t\"Message too long. Try again\"  \nCELL_EMASH_BODF\t=\t\"Forbidden message. Try again\"  \nCELL_EMASH_SOD\t=\t\"Enter your Eyefind subject\"  \nCELL_EMASH_SODE\t=\t\"Subject too long. Try again\"  \nCELL_EMASH_SODF\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP10\t=\t\"Enter Synopsis\"  \nFMMC_KEY_TIP12\t=\t\"Enter Custom Team Name\"  \nFMMC_KEY_TIP12F\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP12N\t=\t\"Custom Team Name\"  \nFMMC_KEY_TIP8\t=\t\"Enter Message\"  \nFMMC_KEY_TIP8F\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP8FS\t=\t\"Invalid Message. Try again\"  \nFMMC_KEY_TIP8S\t=\t\"Enter Message\"  \nFMMC_KEY_TIP9\t=\t\"Enter Outfit Name\"  \nFMMC_KEY_TIP9F\t=\t\"Invalid Outfit Name. Try again\"  \nFMMC_KEY_TIP9N\t=\t\"Outfit Name\"  \nPM_NAME_CHALL\t=\t\"Enter Challenge Name\"  \n```",
            "examples": [],
            "hash": "0x00DC833F2568DBF6",
            "ns": "MISC",
            "jhash": "0xAD99F2CE",
            "manualHash": true
        },
        "0x6874E2190B0C1972": {
            "name": "FIND_SPAWN_POINT_IN_DIRECTION",
            "params": [
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "dirX", "type": "float" },
                { "name": "dirY", "type": "float" },
                { "name": "dirZ", "type": "float" },
                { "name": "distance", "type": "float" },
                { "name": "spawnPoint", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "```\nFinds a position ahead of the player by predicting the players next actions.  \nThe positions match path finding node positions.  \nWhen roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.  \n```",
            "examples": [],
            "hash": "0x6874E2190B0C1972",
            "ns": "MISC",
            "jhash": "0x71AEFD77",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0AA53F866B3134D": {
            "name": "FORCE_GAME_STATE_PLAYING",
            "params": [],
            "results": "void",
            "description": "```\nSets the localplayer playerinfo state back to playing (State 0)  \nStates are:  \n-1: \"Invalid\"  \n0: \"Playing\"  \n1: \"Died\"  \n2: \"Arrested\"  \n3: \"Failed Mission\"  \n4: \"Left Game\"  \n5: \"Respawn\"  \n6: \"In MP Cutscene\"  \n```",
            "examples": [],
            "hash": "0xC0AA53F866B3134D",
            "ns": "MISC",
            "aliases": ["_RESET_LOCALPLAYER_STATE"],
            "jhash": "0x5D209F25",
            "manualHash": true
        },
        "0xA23E821FBDF8A5F2": {
            "name": "END_REPLAY_STATS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA23E821FBDF8A5F2",
            "ns": "MISC",
            "jhash": "0xCB570185",
            "manualHash": true
        },
        "0xF6062E089251C898": {
            "name": "FORCE_LIGHTNING_FLASH",
            "params": [],
            "results": "void",
            "description": "```\ncreates single lightning+thunder at random position  \n```",
            "examples": [],
            "hash": "0xF6062E089251C898",
            "ns": "MISC",
            "aliases": ["_CREATE_LIGHTNING_THUNDER"],
            "jhash": "0xDF38165E",
            "manualHash": true
        },
        "0xEB6891F03362FB12": {
            "name": "_FORCE_SOCIAL_CLUB_UPDATE",
            "params": [],
            "results": "void",
            "description": "```\nExits the game and downloads a fresh social club update on next restart.  \n```",
            "examples": [],
            "hash": "0xEB6891F03362FB12",
            "ns": "MISC",
            "manualHash": true
        },
        "0x8B3CA62B1EF19B62": {
            "name": "GET_ALLOCATED_STACK_SIZE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x8B3CA62B1EF19B62",
            "ns": "MISC",
            "jhash": "0x4E9CA30A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE599A503B3837E1B": {
            "name": "_GET_BENCHMARK_TIME",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xE599A503B3837E1B",
            "ns": "MISC",
            "aliases": ["0xE599A503B3837E1B"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB335F761606DB47C": {
            "name": "_GET_BASE_ELEMENT_METADATA",
            "params": [
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB335F761606DB47C",
            "ns": "MISC",
            "aliases": ["0xB335F761606DB47C"],
            "jhash": "0xE23416C1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x186FC4BE848E1C92": {
            "name": "GET_ANGLE_BETWEEN_2D_VECTORS",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x186FC4BE848E1C92",
            "ns": "MISC",
            "jhash": "0xDBF75E58",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1B2366C3F2A5C8DF": {
            "name": "_GET_BENCHMARK_PASS_FROM_COMMAND_LINE",
            "params": [],
            "results": "int",
            "description": "```\nReturns value of the '-benchmarkPass' command line option.\n```",
            "examples": [],
            "hash": "0x1B2366C3F2A5C8DF",
            "ns": "MISC",
            "aliases": ["0x1B2366C3F2A5C8DF"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDFB4138EEFED7B81": {
            "name": "GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "distance", "type": "float" },
                { "name": "outCoords", "type": "Vector3*" },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDFB4138EEFED7B81",
            "ns": "MISC",
            "aliases": [
                "0xDFB4138EEFED7B81",
                "_GET_PROJECTILE_NEAR_PED_COORDS"
            ],
            "jhash": "0x6BDE5CE4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x53158863FCC0893A": {
            "name": "GET_BITS_IN_RANGE",
            "params": [
                { "name": "var", "type": "int" },
                { "name": "rangeStart", "type": "int" },
                { "name": "rangeEnd", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x53158863FCC0893A",
            "ns": "MISC",
            "jhash": "0xCA03A1E5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4C9296CBCD1B971E": {
            "name": "GET_FAKE_WANTED_LEVEL",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x4C9296CBCD1B971E",
            "ns": "MISC",
            "aliases": ["0x4C9296CBCD1B971E"],
            "jhash": "0x0022A430",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4750FC27570311EC": {
            "name": "_GET_BENCHMARK_ITERATIONS_FROM_COMMAND_LINE",
            "params": [],
            "results": "int",
            "description": "```\nReturns value of the '-benchmarkIterations' command line option.\n```",
            "examples": [],
            "hash": "0x4750FC27570311EC",
            "ns": "MISC",
            "aliases": ["0x4750FC27570311EC"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x15C40837039FFAF7": {
            "name": "GET_FRAME_TIME",
            "params": [],
            "results": "float",
            "description": "Gets the high precision frame time of the last frame in seconds.\n\n*note: the example above is way less precise.*",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local time1 = GetGameTimer()\nCitizen.Wait(0)\n\n-- Prints for example 0.01253530010581 at around 90 FPS\nprint(GetFrameTime())\n\n-- This would print about the same as above, but is less accurate, ie: 0.012\nprint((GetGameTimer() - time1) / 1000)"
                }
            ],
            "hash": "0x15C40837039FFAF7",
            "ns": "MISC",
            "jhash": "0x96374262",
            "manualHash": true,
            "resultsDescription": "The frame time (in seconds) of the last frame."
        },
        "0x9CD27B0045628463": {
            "name": "GET_GAME_TIMER",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9CD27B0045628463",
            "ns": "MISC",
            "jhash": "0xA4EA0691",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x20AC25E781AE4A84": {
            "name": "_GET_CLOUD_HAT_OPACITY",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x20AC25E781AE4A84",
            "ns": "MISC",
            "aliases": ["0x20AC25E781AE4A84"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8D7A43EC6A5FEA45": {
            "name": "GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "projectileHash", "type": "Hash" },
                { "name": "projectilePos", "type": "Vector3*" },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8D7A43EC6A5FEA45",
            "ns": "MISC",
            "aliases": [
                "0x8D7A43EC6A5FEA45",
                "_GET_IS_PROJECTILE_TYPE_IN_AREA"
            ],
            "jhash": "0x1A40454B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF1B760881820C952": {
            "name": "GET_DISTANCE_BETWEEN_COORDS",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "The X coordinate of the first point."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "The Y coordinate of the first point."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "The Z coordinate of the first point."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "The X coordinate of the second point."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "The Y coordinate of the second point."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "The Z coordinate of the second point."
                },
                {
                    "name": "useZ",
                    "type": "BOOL",
                    "description": "Whether or not to use the Z coordinate."
                }
            ],
            "results": "float",
            "description": "Returns the distance between two three-dimensional points, optionally ignoring the Z values.\nIf useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.\nConsider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local dist = GetDistanceBetweenCoords(0.0, 0.0, 0.0, 5.0, 5.0, 5.0, true)\n\n-- language faster equivalent:\nlocal firstVec = vector3(0.0, 0.0, 0.0)\nlocal secondVec = vector3(5.0, 5.0, 5.0)\n\nlocal dist = #(firstVec - secondVec) -- Use Z\nlocal dist = #(firstVec.xy - secondVec.xy) -- Do not use Z"
                },
                {
                    "lang": "cs",
                    "code": "float dist = GetDistanceBetweenCoords(0f, 0f, 0f, 5f, 5f, 5f, true)\n\n// language faster equivalent:\n\nVector3 firstVec = new Vector3(0f, 0f, 0f);\nVector3 secondVec = new Vector3(5f, 5f, 5f);\n\nfloat dist = firstVec.DistanceToSquared(secondVec); -- Use Z\nfloat dist = firstVec.DistanceToSquared2D(secondVec); -- Do not use Z"
                }
            ],
            "hash": "0xF1B760881820C952",
            "ns": "MISC",
            "jhash": "0xF698765E",
            "manualHash": true,
            "resultsDescription": "The distance between the passed points in units."
        },
        "0xFC8202EFC642E6F2": {
            "name": "GET_FRAME_COUNT",
            "params": [],
            "results": "int",
            "description": "Gets the number of the current frame being displayed.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Create a thread\nCitizen.CreateThread(function()\n    -- Loop forever\n    while true do\n        -- Get the number of the current frame being displayed\n        local startCount = GetFrameCount()\n\n        -- Wait one second\n        Wait(1000)\n\n        -- Get the new number of the current frame being displayed, after waiting one second\n        local endCount = GetFrameCount()\n\n        -- Calculate the number of frames that have been rendered between the two points\n        local frameNum = endCount - startCount\n\n        -- Print the output to the console, mentioning that it is an approximate value\n        print(\"Approximate FPS: \"..frameNum)\n    end\nend)"
                }
            ],
            "hash": "0xFC8202EFC642E6F2",
            "ns": "MISC",
            "jhash": "0xB477A015",
            "manualHash": true,
            "resultsDescription": "The number of the current frame being displayed."
        },
        "0x9E82F0F362881B29": {
            "name": "_GET_GROUND_Z_FOR_3D_COORD_2",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "groundZ", "type": "float*" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 6: BOOL p5\n```",
            "examples": [],
            "hash": "0x9E82F0F362881B29",
            "ns": "MISC",
            "aliases": ["0x9E82F0F362881B29"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC906A7DAB05C8D2B": {
            "name": "GET_GROUND_Z_FOR_3D_COORD",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "Position on the X-axis to get ground elevation at."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Position on the Y-axis to get ground elevation at."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Position on the Z-axis to get ground elevation at."
                },
                {
                    "name": "groundZ",
                    "type": "float*",
                    "description": "The ground elevation at the specified position."
                },
                { "name": "ignoreWater", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nBear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.\n```\n\n```\nNativeDB Added Parameter 6: BOOL p5\n```",
            "examples": [],
            "hash": "0xC906A7DAB05C8D2B",
            "ns": "MISC",
            "jhash": "0xA1BFD5E0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8BDC7BFC57A81E76": {
            "name": "GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "groundZ", "type": "float*" },
                { "name": "normal", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8BDC7BFC57A81E76",
            "ns": "MISC",
            "aliases": [
                "0x8BDC7BFC57A81E76",
                "_GET_GROUND_Z_COORD_WITH_OFFSETS"
            ],
            "jhash": "0x64D91CED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2FFB6B224F4B2926": {
            "name": "GET_HEADING_FROM_VECTOR_2D",
            "params": [
                { "name": "dx", "type": "float" },
                { "name": "dy", "type": "float" }
            ],
            "results": "float",
            "description": "```\ndx = x1 - x2\ndy = y1 - y2\n```",
            "examples": [],
            "hash": "0x2FFB6B224F4B2926",
            "ns": "MISC",
            "jhash": "0xD209D52B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x24DA7D7667FD7B09": {
            "name": "_GET_GLOBAL_CHAR_BUFFER",
            "params": [],
            "results": "char*",
            "description": "```\nReturns pointer to an empty string.\nGET_C*\n```",
            "examples": [],
            "hash": "0x24DA7D7667FD7B09",
            "ns": "MISC",
            "aliases": ["0x24DA7D7667FD7B09"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD24D37CC275948CC": {
            "name": "GET_HASH_KEY",
            "params": [
                {
                    "name": "string",
                    "type": "char*",
                    "description": "The string to hash."
                }
            ],
            "results": "Hash",
            "description": "This native converts its past string to hash. It is hashed using jenkins one at a time method.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local zentorno = GetHashKey('zentorno')\n\nif GetEntityModel(car) == zentorno then\n    print('Car is a zentorno!')\nend"
                }
            ],
            "hash": "0xD24D37CC275948CC",
            "ns": "MISC",
            "jhash": "0x98EFF6F1",
            "manualHash": true,
            "resultsDescription": "The hash of `string`."
        },
        "0xCBAD6729F7B1F4FC": {
            "name": "GET_INDEX_OF_CURRENT_LEVEL",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xCBAD6729F7B1F4FC",
            "ns": "MISC",
            "jhash": "0x6F203C6E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9689123E3F213AA5": {
            "name": "_GET_IS_PLAYER_IN_ANIMAL_FORM",
            "params": [],
            "results": "BOOL",
            "description": "```\nAlthough we don't have a jenkins hash for this one, the name is 100% confirmed.\n```",
            "examples": [],
            "hash": "0x9689123E3F213AA5",
            "ns": "MISC",
            "aliases": ["0x9689123E3F213AA5"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA33CDCCDA663159E": {
            "name": "GET_MISSION_FLAG",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA33CDCCDA663159E",
            "ns": "MISC",
            "jhash": "0x95115F97",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6E04F06094C87047": {
            "name": "GET_IS_AUTO_SAVE_OFF",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if profile setting 208 is equal to 0.\n```",
            "examples": [],
            "hash": "0x6E04F06094C87047",
            "ns": "MISC",
            "aliases": ["0x6E04F06094C87047"],
            "jhash": "0xA8546914",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x03E8D3D5F549087A": {
            "name": "GET_MODEL_DIMENSIONS",
            "params": [
                { "name": "modelHash", "type": "Hash" },
                { "name": "minimum", "type": "Vector3*" },
                { "name": "maximum", "type": "Vector3*" }
            ],
            "results": "void",
            "description": "```\nGets the dimensions of a model.\nCalculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.\nExample from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);\n```",
            "examples": [],
            "hash": "0x03E8D3D5F549087A",
            "ns": "MISC",
            "jhash": "0x91ABB8E0",
            "manualHash": true
        },
        "0x711327CD09C8F162": {
            "name": "GET_NEXT_WEATHER_TYPE_HASH_NAME",
            "params": [],
            "results": "Hash",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.",
            "examples": [],
            "hash": "0x711327CD09C8F162",
            "ns": "MISC",
            "aliases": ["_GET_NEXT_WEATHER_TYPE"],
            "jhash": "0x353E8056",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x996DD1E1E02F1008": {
            "name": "GET_NUM_SUCCESSFUL_STUNT_JUMPS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x996DD1E1E02F1008",
            "ns": "MISC",
            "aliases": ["0x996DD1E1E02F1008"],
            "jhash": "0x006F9BA2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFEAD16FC8F9DFC0F": {
            "name": "GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE",
            "params": [{ "name": "stackSize", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xFEAD16FC8F9DFC0F",
            "ns": "MISC",
            "aliases": ["_GET_FREE_STACK_SLOTS_COUNT"],
            "jhash": "0x11A178B8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEB4A0C2D56441717": {
            "name": "_GET_NUM_DISPATCHED_UNITS_FOR_PLAYER",
            "params": [{ "name": "dispatchService", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xEB4A0C2D56441717",
            "ns": "MISC",
            "aliases": [
                "0xEB4A0C2D56441717",
                "_GET_NUMBER_OF_DISPATCHED_UNITS_FOR_PLAYER"
            ],
            "jhash": "0x3CE5BF6B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xABB2FA71C83A1B72": {
            "name": "_GET_POWER_SAVING_MODE_DURATION",
            "params": [],
            "results": "int",
            "description": "```\nReturns duration of how long the game has been in power-saving mode (aka \"constrained\") in milliseconds.\n```",
            "examples": [],
            "hash": "0xABB2FA71C83A1B72",
            "ns": "MISC",
            "aliases": ["0xABB2FA71C83A1B72"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x82FDE6A57EE4EE44": {
            "name": "_GET_PROJECTILE_NEAR_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "distance", "type": "float" },
                { "name": "outCoords", "type": "Vector3*" },
                { "name": "outProjectile", "type": "Object*" },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x82FDE6A57EE4EE44",
            "ns": "MISC",
            "aliases": ["0x82FDE6A57EE4EE44"],
            "jhash": "0x507BC6F7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC488FF2356EA7791": {
            "name": "GET_PROFILE_SETTING",
            "params": [{ "name": "profileSetting", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC488FF2356EA7791",
            "ns": "MISC",
            "jhash": "0xD374BEBC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8362B09B91893647": {
            "name": "GET_ONSCREEN_KEYBOARD_RESULT",
            "params": [],
            "results": "char*",
            "description": "```\nReturns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.  \n```",
            "examples": [],
            "hash": "0x8362B09B91893647",
            "ns": "MISC",
            "jhash": "0x44828FB3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x96695E368AD855F3": {
            "name": "GET_RAIN_LEVEL",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x96695E368AD855F3",
            "ns": "MISC",
            "jhash": "0xC9F67F28",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD2D57F1D764117B1": {
            "name": "GET_RANDOM_EVENT_FLAG",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD2D57F1D764117B1",
            "ns": "MISC",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x794CC92C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x564B884A05EC45A3": {
            "name": "GET_PREV_WEATHER_TYPE_HASH_NAME",
            "params": [],
            "results": "Hash",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.",
            "examples": [],
            "hash": "0x564B884A05EC45A3",
            "ns": "MISC",
            "aliases": ["_GET_PREV_WEATHER_TYPE"],
            "jhash": "0xA8171E9E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF2D49816A804D134": {
            "name": "_GET_RANDOM_INT_IN_RANGE_2",
            "params": [
                { "name": "startRange", "type": "int" },
                { "name": "endRange", "type": "int" }
            ],
            "results": "int",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xF2D49816A804D134",
            "ns": "MISC",
            "manualHash": true
        },
        "0x313CE5879CEB6FCD": {
            "name": "GET_RANDOM_FLOAT_IN_RANGE",
            "params": [
                { "name": "startRange", "type": "float" },
                { "name": "endRange", "type": "float" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x313CE5879CEB6FCD",
            "ns": "MISC",
            "jhash": "0x0562C4D0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC9274A7EF6B2867": {
            "name": "GET_REPLAY_STAT_COUNT",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xDC9274A7EF6B2867",
            "ns": "MISC",
            "aliases": ["0xDC9274A7EF6B2867"],
            "jhash": "0xC7BD1AF0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD53343AA4FB7DD28": {
            "name": "GET_RANDOM_INT_IN_RANGE",
            "params": [
                { "name": "startRange", "type": "int" },
                { "name": "endRange", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xD53343AA4FB7DD28",
            "ns": "MISC",
            "jhash": "0x4051115B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8098C8D6597AAE18": {
            "name": "GET_REPLAY_STAT_AT_INDEX",
            "params": [{ "name": "index", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x8098C8D6597AAE18",
            "ns": "MISC",
            "aliases": ["0x8098C8D6597AAE18"],
            "jhash": "0x22BE2423",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B626A0150E4D449": {
            "name": "GET_REPLAY_STAT_MISSION_TYPE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2B626A0150E4D449",
            "ns": "MISC",
            "aliases": ["0x2B626A0150E4D449"],
            "jhash": "0x710E5D1E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x17DF68D720AA77F8": {
            "name": "GET_TENNIS_SWING_ANIM_COMPLETE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x17DF68D720AA77F8",
            "ns": "MISC",
            "aliases": ["0x17DF68D720AA77F8"],
            "jhash": "0x8501E727",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA09F896CE912481F": {
            "name": "GET_SIZE_OF_SAVE_DATA",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA09F896CE912481F",
            "ns": "MISC",
            "aliases": ["0xA09F896CE912481F"],
            "jhash": "0x9EF0BC64",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC5868A966E5BE3AE": {
            "name": "GET_SNOW_LEVEL",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xC5868A966E5BE3AE",
            "ns": "MISC",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x1B09184F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B5E102E4A42F2BF": {
            "name": "GET_STATUS_OF_MISSION_REPEAT_SAVE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2B5E102E4A42F2BF",
            "ns": "MISC",
            "aliases": ["0x2B5E102E4A42F2BF"],
            "jhash": "0x144AAF22",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9870ACFB89A90995": {
            "name": "HAS_BULLET_IMPACTED_IN_AREA",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np3 - possibly radius?  \n```",
            "examples": [],
            "hash": "0x9870ACFB89A90995",
            "ns": "MISC",
            "jhash": "0x902BC7D9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6856EC3D35C81EA4": {
            "name": "GET_TOTAL_SUCCESSFUL_STUNT_JUMPS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x6856EC3D35C81EA4",
            "ns": "MISC",
            "aliases": ["0x6856EC3D35C81EA4"],
            "jhash": "0x495BE324",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF3BBE884A14BB413": {
            "name": "_GET_WEATHER_TYPE_TRANSITION",
            "params": [
                { "name": "weatherType1", "type": "Hash*" },
                { "name": "weatherType2", "type": "Hash*" },
                { "name": "percentWeather2", "type": "float*" }
            ],
            "results": "void",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.",
            "examples": [],
            "hash": "0xF3BBE884A14BB413",
            "ns": "MISC",
            "jhash": "0x9A5C1D56",
            "manualHash": true
        },
        "0x1F400FEF721170DA": {
            "name": "GET_WIND_DIRECTION",
            "params": [],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x1F400FEF721170DA",
            "ns": "MISC",
            "jhash": "0x89499A0D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x075F1D57402C93BA": {
            "name": "HAVE_CREDITS_REACHED_END",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x075F1D57402C93BA",
            "ns": "MISC",
            "aliases": ["0x075F1D57402C93BA"],
            "jhash": "0x2569C9A7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA8CF1CC0AFCD3F12": {
            "name": "GET_WIND_SPEED",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xA8CF1CC0AFCD3F12",
            "ns": "MISC",
            "jhash": "0x098F0F3C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x071E2A839DE82D90": {
            "name": "_HAS_BUTTON_COMBINATION_JUST_BEEN_ENTERED",
            "params": [
                { "name": "hash", "type": "Hash" },
                { "name": "amount", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nThis native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the \"amount\" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/\nINT_SCORES_SCORTED was a hash collision\n```",
            "examples": [],
            "hash": "0x071E2A839DE82D90",
            "ns": "MISC",
            "aliases": ["0x071E2A839DE82D90"],
            "jhash": "0xFF6191E1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x14832BF2ABA53FC5": {
            "name": "_HAS_ASYNC_INSTALL_FINISHED",
            "params": [],
            "results": "BOOL",
            "description": "```\nHardcoded to always return true.\n```",
            "examples": [],
            "hash": "0x14832BF2ABA53FC5",
            "ns": "MISC",
            "aliases": ["0x14832BF2ABA53FC5"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE8B9C0EC9E183F35": {
            "name": "_HAS_RESUMED_FROM_SUSPEND",
            "params": [],
            "results": "BOOL",
            "description": "```\nHardcoded to return false.\n```",
            "examples": [],
            "hash": "0xE8B9C0EC9E183F35",
            "ns": "MISC",
            "aliases": ["0xE8B9C0EC9E183F35"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9F1935CA1F724008": {
            "name": "IS_AUSSIE_VERSION",
            "params": [],
            "results": "BOOL",
            "description": "```\nif (MISC::IS_AUSSIE_VERSION()) {\n    sub_127a9(&l_31, 1024); // l_31 |= 1024\n    l_129 = 3;\n    sub_129d2(\"AUSSIE VERSION IS TRUE!?!?!\"); // DEBUG\n}\nUsed to block some of the prostitute stuff due to laws in Australia.\n```",
            "examples": [],
            "hash": "0x9F1935CA1F724008",
            "ns": "MISC",
            "jhash": "0x944BA1DC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x557E43C447E700A8": {
            "name": "_HAS_CHEAT_STRING_JUST_BEEN_ENTERED",
            "params": [{ "name": "hash", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nGet inputted \"Cheat code\", for example:\nwhile (TRUE)\n{\n    if (MISC::_557E43C447E700A8(${fugitive}))\n    {\n       // Do something.\n    }\n    SYSTEM::WAIT(0);\n}\nCalling this will also set the last saved string hash to zero.\n```",
            "examples": [],
            "hash": "0x557E43C447E700A8",
            "ns": "MISC",
            "aliases": ["0x557E43C447E700A8"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x69240733738C19A0": {
            "name": "IS_AUTO_SAVE_IN_PROGRESS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x69240733738C19A0",
            "ns": "MISC",
            "jhash": "0x36F75399",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC8C5D7CFEAB8394": {
            "name": "HAS_BULLET_IMPACTED_IN_BOX",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDC8C5D7CFEAB8394",
            "ns": "MISC",
            "jhash": "0x2C2618CC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3F2023999AD51C1F": {
            "name": "IS_BULLET_IN_AREA",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3F2023999AD51C1F",
            "ns": "MISC",
            "jhash": "0xB54F46CA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x21FFB63D8C615361": {
            "name": "IGNORE_NEXT_RESTART",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x21FFB63D8C615361",
            "ns": "MISC",
            "jhash": "0xDA13A4B6",
            "manualHash": true
        },
        "0x1A8B5F3C01E2B477": {
            "name": "IS_BULLET_IN_ANGLED_AREA",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "See [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.\n\nFor projectiles, see: [`IS_PROJECTILE_TYPE_IN_ANGLED_AREA`](#\\_0xF0BC12401061DEA0)",
            "examples": [],
            "hash": "0x1A8B5F3C01E2B477",
            "ns": "MISC",
            "jhash": "0xE2DB58F7",
            "manualHash": true,
            "resultsDescription": "True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area."
        },
        "0xDE0F6D7450D37351": {
            "name": "IS_BULLET_IN_BOX",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDE0F6D7450D37351",
            "ns": "MISC",
            "jhash": "0xAB73ED26",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA921AA820C25702F": {
            "name": "IS_BIT_SET",
            "params": [
                { "name": "address", "type": "int" },
                { "name": "offset", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nReturns bit's boolean state from [offset] of [address].\nExample:\nMISC::IS_BIT_SET(bitAddress, 1);\nTo enable and disable bits, see:\nMISC::SET_BIT(&bitAddress, 1);   // enable\nMISC::CLEAR_BIT(&bitAddress, 1); // disable\n```",
            "examples": [],
            "hash": "0xA921AA820C25702F",
            "ns": "MISC",
            "jhash": "0x902E26AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA61B4DF533DCB56E": {
            "name": "IS_AREA_OCCUPIED",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "BOOL" },
                { "name": "p10", "type": "BOOL" },
                { "name": "p11", "type": "Any" },
                { "name": "p12", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA61B4DF533DCB56E",
            "ns": "MISC",
            "jhash": "0xC013972F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4D982ADB1978442D": {
            "name": "IS_DURANGO_VERSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4D982ADB1978442D",
            "ns": "MISC",
            "jhash": "0x46FB06A5",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0xA049A5BE0F04F2F8": {
            "name": "_IS_COMMAND_LINE_BENCHMARK_VALUE_SET",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if command line option '-benchmark' is set.\n```",
            "examples": [],
            "hash": "0xA049A5BE0F04F2F8",
            "ns": "MISC",
            "aliases": ["0xA049A5BE0F04F2F8"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC8BC6461E629BEAA": {
            "name": "IS_INCIDENT_VALID",
            "params": [{ "name": "incidentId", "type": "int" }],
            "results": "BOOL",
            "description": "```\n=======================================================  \nCorrection, I have change this to int, instead of int*  \nas it doesn't use a pointer to the createdIncident.  \nIf you try it you will crash (or) freeze.  \n=======================================================  \n```",
            "examples": [],
            "hash": "0xC8BC6461E629BEAA",
            "ns": "MISC",
            "jhash": "0x31FD0BA4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7EA2B6AF97ECA6ED": {
            "name": "IS_FRONTEND_FADING",
            "params": [],
            "results": "BOOL",
            "description": "```\nThis function is hard-coded to always return 0.  \n```",
            "examples": [],
            "hash": "0x7EA2B6AF97ECA6ED",
            "ns": "MISC",
            "jhash": "0x8FF6232C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A75CE2956274ADD": {
            "name": "IS_MEMORY_CARD_IN_USE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8A75CE2956274ADD",
            "ns": "MISC",
            "jhash": "0x40CE4DFD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA72BC0B675B1519E": {
            "name": "IS_ORBIS_VERSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA72BC0B675B1519E",
            "ns": "MISC",
            "jhash": "0x40282018",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0x2B4A15E44DE0F478": {
            "name": "IS_MINIGAME_IN_PROGRESS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2B4A15E44DE0F478",
            "ns": "MISC",
            "jhash": "0x53A95E13",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x48AF36444B965238": {
            "name": "IS_PC_VERSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x48AF36444B965238",
            "ns": "MISC",
            "jhash": "0x4D5D9EE3",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 1."
        },
        "0x684A41975F077262": {
            "name": "_IS_IN_POWER_SAVING_MODE",
            "params": [],
            "results": "BOOL",
            "description": "```\naka \"constrained\"\n```",
            "examples": [],
            "hash": "0x684A41975F077262",
            "ns": "MISC",
            "aliases": ["0x684A41975F077262"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1312F4B242609CE3": {
            "name": "_IS_POP_MULTIPLIER_AREA_UNK",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x1312F4B242609CE3",
            "ns": "MISC",
            "manualHash": true
        },
        "0xF0BC12401061DEA0": {
            "name": "IS_PROJECTILE_TYPE_IN_ANGLED_AREA",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                },
                { "name": "p7", "type": "float" },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "See [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.\n\n```\nNativeDB Removed Parameter 7: float p7\n```",
            "examples": [],
            "hash": "0xF0BC12401061DEA0",
            "ns": "MISC",
            "jhash": "0xD1AE2681",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2FAA3A30BEC0F25D": {
            "name": "IS_NEXT_WEATHER_TYPE",
            "params": [{ "name": "weatherType", "type": "char*" }],
            "results": "BOOL",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.",
            "examples": [],
            "hash": "0x2FAA3A30BEC0F25D",
            "ns": "MISC",
            "jhash": "0x99CB167F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44F28F86433B10A9": {
            "name": "IS_PREV_WEATHER_TYPE",
            "params": [{ "name": "weatherType", "type": "char*" }],
            "results": "BOOL",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.",
            "examples": [],
            "hash": "0x44F28F86433B10A9",
            "ns": "MISC",
            "jhash": "0x250ADA61",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE54E209C35FFA18D": {
            "name": "IS_POINT_OBSCURED_BY_A_MISSION_ENTITY",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE54E209C35FFA18D",
            "ns": "MISC",
            "jhash": "0xC161558D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFEFCF11B01287125": {
            "name": "IS_SNIPER_BULLET_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nDetermines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.  \n```",
            "examples": [],
            "hash": "0xFEFCF11B01287125",
            "ns": "MISC",
            "jhash": "0x0483715C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x61A23B7EDA9BDA24": {
            "name": "IS_SNIPER_INVERTED",
            "params": [],
            "results": "BOOL",
            "description": "```\nThis function is hard-coded to always return 0.  \n```",
            "examples": [],
            "hash": "0x61A23B7EDA9BDA24",
            "ns": "MISC",
            "jhash": "0x5C3BF51B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA042B6957743895": {
            "name": "IS_STRING_NULL_OR_EMPTY",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCA042B6957743895",
            "ns": "MISC",
            "jhash": "0x42E9F2CA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2E0DC353342C4A6D": {
            "name": "IS_PROJECTILE_TYPE_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "type", "type": "int" },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nDetermines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.  \n```",
            "examples": [],
            "hash": "0x2E0DC353342C4A6D",
            "ns": "MISC",
            "jhash": "0x2B73BCF6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2272B0A1343129F4": {
            "name": "IS_STUNT_JUMP_MESSAGE_SHOWING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2272B0A1343129F4",
            "ns": "MISC",
            "aliases": ["0x2272B0A1343129F4"],
            "jhash": "0x021636EE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x34318593248C8FB2": {
            "name": "IS_PROJECTILE_TYPE_WITHIN_DISTANCE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "projHash", "type": "Hash" },
                { "name": "radius", "type": "float" },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x34318593248C8FB2",
            "ns": "MISC",
            "aliases": ["0x34318593248C8FB2", "_IS_PROJECTILE_TYPE_IN_RADIUS"],
            "jhash": "0xBE81F1E2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5D5479D115290C3F": {
            "name": "IS_TENNIS_MODE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5D5479D115290C3F",
            "ns": "MISC",
            "jhash": "0x04A947BA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xADCDE75E1C60F32D": {
            "name": "IS_POSITION_OCCUPIED",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "X coordinate of the position to check."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Y coordinate of the position to check."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Z coordinate of the position to check."
                },
                {
                    "name": "range",
                    "type": "float",
                    "description": "The range, seems to not be very accurate during testing."
                },
                {
                    "name": "p4",
                    "type": "BOOL",
                    "description": "Unknown, when set to true it seems to always return true no matter what I try."
                },
                {
                    "name": "checkVehicles",
                    "type": "BOOL",
                    "description": "Check for any vehicles in that area."
                },
                {
                    "name": "checkPeds",
                    "type": "BOOL",
                    "description": "Check for any peds in that area."
                },
                { "name": "p7", "type": "BOOL", "description": "Unknown." },
                { "name": "p8", "type": "BOOL", "description": "Unknown." },
                {
                    "name": "ignoreEntity",
                    "type": "Entity",
                    "description": "This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities."
                },
                { "name": "p10", "type": "BOOL", "description": "Unknown." }
            ],
            "results": "BOOL",
            "description": "The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.",
            "examples": [],
            "hash": "0xADCDE75E1C60F32D",
            "ns": "MISC",
            "jhash": "0x452E8D9E",
            "manualHash": true,
            "resultsDescription": "Returns true if there is anything in that location matching the provided parameters."
        },
        "0xF22B6C47C6EAB066": {
            "name": "IS_STRING_NULL",
            "params": [{ "name": "string", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF22B6C47C6EAB066",
            "ns": "MISC",
            "jhash": "0x8E71E00F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5270A8FBC098C3F8": {
            "name": "IS_PROJECTILE_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "ownedByPlayer", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nDetermines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.  \nownedByPlayer = only projectiles fired by the player will be detected.  \n```",
            "examples": [],
            "hash": "0x5270A8FBC098C3F8",
            "ns": "MISC",
            "jhash": "0x78E1A557",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7B30F65D7B710098": {
            "name": "IS_THIS_A_MINIGAME_SCRIPT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7B30F65D7B710098",
            "ns": "MISC",
            "jhash": "0x7605EF6F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF6201B4DAF662A9D": {
            "name": "IS_XBOX360_VERSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF6201B4DAF662A9D",
            "ns": "MISC",
            "jhash": "0x24005CC8",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0xFC4842A34657BFCB": {
            "name": "LOAD_CLOUD_HAT",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "transitionTime", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThe following cloudhats are useable:\naltostratus\nCirrus\ncirrocumulus\nClear 01\nCloudy 01\nContrails\nHorizon\nhorizonband1\nhorizonband2\nhorizonband3\nhorsey\nNimbus\nPuffs\nRAIN\nSnowy 01\nStormy 01\nstratoscumulus\nStripey\nshower\nWispy\n```",
            "examples": [],
            "hash": "0xFC4842A34657BFCB",
            "ns": "MISC",
            "aliases": ["_SET_CLOUD_HAT_TRANSITION"],
            "jhash": "0xED88FC61",
            "manualHash": true
        },
        "0x02DEAAC8F8EA7FE7": {
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "```\nFound in the scripts:\nMISC::_02DEAAC8F8EA7FE7(\"\");\n```",
            "examples": [],
            "hash": "0x02DEAAC8F8EA7FE7",
            "ns": "MISC",
            "manualHash": true
        },
        "0xCCA1072C29D096C2": {
            "name": "IS_PS3_VERSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCCA1072C29D096C2",
            "ns": "MISC",
            "jhash": "0x4C0D5303",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0x06462A961E94B67C": {
            "params": [],
            "results": "void",
            "description": "```\nCLEAR_*\n```",
            "examples": [],
            "hash": "0x06462A961E94B67C",
            "ns": "MISC",
            "jhash": "0x5A45B11A",
            "manualHash": true
        },
        "0x1BB299305C3E8C13": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nSCRIPT_RACE_*\n```",
            "examples": [],
            "hash": "0x1BB299305C3E8C13",
            "ns": "MISC",
            "jhash": "0xA27F4472",
            "manualHash": true
        },
        "0x7A3F19700A4D0525": {
            "name": "IS_STUNT_JUMP_IN_PROGRESS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7A3F19700A4D0525",
            "ns": "MISC",
            "jhash": "0xF477D0B1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1178E104409FE58C": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x1178E104409FE58C",
            "ns": "MISC",
            "manualHash": true
        },
        "0x1EAE0A6E978894A2": {
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nUnsure about the use of this native but here's an example:\nvoid sub_8709() {\n    MISC::_1EAE0A6E978894A2(0, 1);\n    MISC::_1EAE0A6E978894A2(1, 1);\n    MISC::_1EAE0A6E978894A2(2, 1);\n    MISC::_1EAE0A6E978894A2(3, 1);\n    MISC::_1EAE0A6E978894A2(4, 1);\n    MISC::_1EAE0A6E978894A2(5, 1);\n    MISC::_1EAE0A6E978894A2(6, 1);\n    MISC::_1EAE0A6E978894A2(7, 1);\n    MISC::_1EAE0A6E978894A2(8, 1);\n}\nSo it appears that p0 ranges from 0 to 8.\nENABLE_DISPATCH_SERVICE, seems to have a similar layout.\n```",
            "examples": [],
            "hash": "0x1EAE0A6E978894A2",
            "ns": "MISC",
            "jhash": "0x8F60366E",
            "manualHash": true
        },
        "0x3BBBD13E5041A79E": {
            "name": "_LANDING_MENU_IS_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU\n```",
            "examples": [],
            "hash": "0x3BBBD13E5041A79E",
            "ns": "MISC",
            "aliases": ["0x3BBBD13E5041A79E"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2107A3773771186D": {
            "params": [],
            "results": "BOOL",
            "description": "```\nHAS_*\n```",
            "examples": [],
            "hash": "0x2107A3773771186D",
            "ns": "MISC",
            "jhash": "0x78350773",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x23227DF0B2115469": {
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x23227DF0B2115469",
            "ns": "MISC",
            "manualHash": true
        },
        "0x21C235BC64831E5A": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "BOOL" }
            ],
            "results": "Vector3",
            "description": "```\nGET_C*\n```",
            "examples": [],
            "hash": "0x21C235BC64831E5A",
            "ns": "MISC",
            "jhash": "0xCAECF37E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x397BAA01068BAA96": {
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x397BAA01068BAA96",
            "ns": "MISC",
            "jhash": "0x39771F21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x19BFED045C647C49": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nGET_TENNIS_*; references 0xFBFEC0E9 = interruptswing\n```",
            "examples": [],
            "hash": "0x19BFED045C647C49",
            "ns": "MISC",
            "jhash": "0x1A332D2D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x39455BF4F4F55186": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "Any" },
                { "name": "p11", "type": "Any" },
                { "name": "p12", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x39455BF4F4F55186",
            "ns": "MISC",
            "manualHash": true
        },
        "0x31125FD509D9043F": {
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x31125FD509D9043F",
            "ns": "MISC",
            "manualHash": true
        },
        "0x54F157E0336A3822": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "```\nFrom the scripts:\nMISC::_54F157E0336A3822(sub_aa49(a_0), \"ForcedStopDirection\", v_E);\nRelated to tennis mode.\nSET_*\n```",
            "examples": [],
            "hash": "0x54F157E0336A3822",
            "ns": "MISC",
            "jhash": "0x49F977A9",
            "manualHash": true
        },
        "0x4DCDF92BF64236CD": {
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x4DCDF92BF64236CD",
            "ns": "MISC",
            "manualHash": true
        },
        "0x693478ACBD7F18E7": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x693478ACBD7F18E7",
            "ns": "MISC",
            "manualHash": true
        },
        "0x48F069265A0E4BEC": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nOnly found 3 times in decompiled scripts. Not a whole lot to go off of.\nMISC::_48F069265A0E4BEC(a_0, \"Movie_Name_For_This_Player\");\nMISC::_48F069265A0E4BEC(&a_0._fB, \"Ringtone_For_This_Player\");\nMISC::_48F069265A0E4BEC(&a_0._f1EC4._f12[v_A/*6*/], &v_13); // where v_13 is \"MPATMLOGSCRS0\" thru \"MPATMLOGSCRS15\"\n```",
            "examples": [],
            "hash": "0x48F069265A0E4BEC",
            "ns": "MISC",
            "jhash": "0xF91B8C33",
            "manualHash": true
        },
        "0x65D2EBB47E1CEC21": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets GtaThread+0x14A\n\nSET_S*\n```",
            "examples": [],
            "hash": "0x65D2EBB47E1CEC21",
            "ns": "MISC",
            "manualHash": true
        },
        "0x6FDDF453C0C756EC": {
            "params": [],
            "results": "BOOL",
            "description": "```\nHAS_*\nProbably something like \"has game been started for the first time\".\n```",
            "examples": [],
            "hash": "0x6FDDF453C0C756EC",
            "ns": "MISC",
            "jhash": "0xC3C10FCC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B1F2E327B6B6FE1": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x5B1F2E327B6B6FE1",
            "ns": "MISC",
            "jhash": "0x50C39926",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6F2135B6129620C1": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets bit 3 in GtaThread+0x150\n\nSET_T*\n```",
            "examples": [],
            "hash": "0x6F2135B6129620C1",
            "ns": "MISC",
            "jhash": "0x8B2DE971",
            "manualHash": true
        },
        "0x97E7E2C04245115B": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x97E7E2C04245115B",
            "ns": "MISC",
            "manualHash": true
        },
        "0x703CC7F60CBB2B57": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x703CC7F60CBB2B57",
            "ns": "MISC",
            "manualHash": true
        },
        "0xA4A0065E39C9F25C": {
            "params": [
                { "name": "p0", "type": "Vector3*" },
                { "name": "p1", "type": "float*" },
                { "name": "fadeInAfterLoad", "type": "BOOL*" },
                { "name": "p3", "type": "BOOL*" }
            ],
            "results": "BOOL",
            "description": "```\nGET_SAVE_*\n\nGET_SAVE_UNLESS_CUSTOM_DOT ?\n```",
            "examples": [],
            "hash": "0xA4A0065E39C9F25C",
            "ns": "MISC",
            "jhash": "0xC4D71AB4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7EC6F9A478A6A512": {
            "params": [],
            "results": "void",
            "description": "```\nPossibly used to clear scenario points.\n\nCLEAR_*\n```",
            "examples": [],
            "hash": "0x7EC6F9A478A6A512",
            "ns": "MISC",
            "manualHash": true
        },
        "0x7F8F6405F4777AF6": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "BOOL" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x7F8F6405F4777AF6",
            "ns": "MISC",
            "jhash": "0x89459F0A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD10282B6E3751BA0": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xD10282B6E3751BA0",
            "ns": "MISC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8269816F6CFD40F8": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nOnly found 2 times in decompiled scripts. Not a whole lot to go off of.\nMISC::_8269816F6CFD40F8(&a_0._f1F5A._f6[0/*8*/], \"TEMPSTAT_LABEL\"); // gets saved in a struct called \"g_SaveData_STRING_ScriptSaves\"\nMISC::_8269816F6CFD40F8(&a_0._f4B4[v_1A/*8*/], &v_5); // where v_5 is \"Name0\" thru \"Name9\", gets saved in a struct called \"OUTFIT_Name\"\n```",
            "examples": [],
            "hash": "0x8269816F6CFD40F8",
            "ns": "MISC",
            "jhash": "0x74E8FAD9",
            "manualHash": true
        },
        "0xE3D969D2785FFB5E": {
            "params": [],
            "results": "void",
            "description": "```\nsets something to 1  \n```",
            "examples": [],
            "hash": "0xE3D969D2785FFB5E",
            "ns": "MISC",
            "manualHash": true
        },
        "0x8951EB9C6906D3C8": {
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x8951EB9C6906D3C8",
            "ns": "MISC",
            "manualHash": true
        },
        "0xBA4B8D83BDC75551": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xBA4B8D83BDC75551",
            "ns": "MISC",
            "manualHash": true
        },
        "0x8D74E26F54B4E5C3": {
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "```\nI*\n```",
            "examples": [],
            "hash": "0x8D74E26F54B4E5C3",
            "ns": "MISC",
            "jhash": "0xE77199F7",
            "manualHash": true
        },
        "0xE532EC1A63231B4F": {
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSET_*\n```",
            "examples": [],
            "hash": "0xE532EC1A63231B4F",
            "ns": "MISC",
            "jhash": "0xA0D8C749",
            "manualHash": true
        },
        "0x916CA67D26FD1E37": {
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "Does nothing (it's a nullsub). Seems to be PS4 specific.\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x916CA67D26FD1E37",
            "ns": "MISC",
            "manualHash": true
        },
        "0xFA3FFB0EEBC288A3": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xFA3FFB0EEBC288A3",
            "ns": "MISC",
            "manualHash": true
        },
        "0xD642319C54AADEB6": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xD642319C54AADEB6",
            "ns": "MISC",
            "jhash": "0xC58250F1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0AD167E4B39D9A2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "Any" },
                { "name": "p11", "type": "Any" },
                { "name": "p12", "type": "Any" },
                { "name": "p13", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xA0AD167E4B39D9A2",
            "ns": "MISC",
            "manualHash": true
        },
        "0xD9F692D349249528": {
            "params": [],
            "results": "void",
            "description": "```\nRESET_*\n```",
            "examples": [],
            "hash": "0xD9F692D349249528",
            "ns": "MISC",
            "jhash": "0xE0C9307E",
            "manualHash": true
        },
        "0xEB078CA2B5E82ADD": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xEB078CA2B5E82ADD",
            "ns": "MISC",
            "manualHash": true
        },
        "0xFB80AB299D2EE1BD": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nToggles some stunt jump stuff.\n```",
            "examples": [],
            "hash": "0xFB80AB299D2EE1BD",
            "ns": "MISC",
            "manualHash": true
        },
        "0xB51B9AB9EF81868C": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB51B9AB9EF81868C",
            "ns": "MISC",
            "jhash": "0x75B06B5A",
            "manualHash": true
        },
        "0xEB2104E905C6F2E9": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xEB2104E905C6F2E9",
            "ns": "MISC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF56DFB7B61BE7276": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "p10", "type": "float" },
                { "name": "p11", "type": "float" },
                { "name": "p12", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF56DFB7B61BE7276",
            "ns": "MISC",
            "jhash": "0xC6CC812C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE95B0C7D5BA3B96B": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "Related to tennis mode. Checks for `0x0FCED5ADF = swung`",
            "examples": [],
            "hash": "0xE95B0C7D5BA3B96B",
            "ns": "MISC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEBD3205A207939ED": {
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xEBD3205A207939ED",
            "ns": "MISC",
            "manualHash": true
        },
        "0xFAA457EF263E8763": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nAnother unknown label type...\nMISC::_FAA457EF263E8763(a_0, \"Thumb_label\");\nMISC::_FAA457EF263E8763(&a_0._f10, \"Photo_label\");\nMISC::_FAA457EF263E8763(a_0, \"GXTlabel\");\nMISC::_FAA457EF263E8763(&a_0._f21, \"StringComp\");\nMISC::_FAA457EF263E8763(&a_0._f43, \"SecondStringComp\");\nMISC::_FAA457EF263E8763(&a_0._f53, \"ThirdStringComp\");\nMISC::_FAA457EF263E8763(&a_0._f32, \"SenderStringComp\");\nMISC::_FAA457EF263E8763(&a_0._f726[v_1A/*16*/], &v_20); // where v_20 is \"LastJobTL_0_1\" thru \"LastJobTL_2_1\", gets saved in a struct called \"LAST_JobGamer_TL\"\nMISC::_FAA457EF263E8763(&a_0._f4B, \"PAID_PLAYER\");\nMISC::_FAA457EF263E8763(&a_0._f5B, \"RADIO_STATION\");\n```",
            "examples": [],
            "hash": "0xFAA457EF263E8763",
            "ns": "MISC",
            "jhash": "0x6B4335DD",
            "manualHash": true
        },
        "0xFB00CA71DA386228": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFB00CA71DA386228",
            "ns": "MISC",
            "jhash": "0x054EC103",
            "manualHash": true
        },
        "0x7472BB270D7B4F3E": {
            "name": "POPULATE_NOW",
            "params": [],
            "results": "void",
            "description": "```\nspawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called  \n```",
            "examples": [],
            "hash": "0x7472BB270D7B4F3E",
            "ns": "MISC",
            "jhash": "0x72C20700",
            "manualHash": true
        },
        "0x2C2B3493FBF51C71": {
            "name": "PAUSE_DEATH_ARREST_RESTART",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2C2B3493FBF51C71",
            "ns": "MISC",
            "aliases": ["_DISABLE_AUTOMATIC_RESPAWN"],
            "jhash": "0x296574AE",
            "manualHash": true
        },
        "0x72DE52178C291CB5": {
            "name": "QUEUE_MISSION_REPEAT_LOAD",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x72DE52178C291CB5",
            "ns": "MISC",
            "aliases": ["0x72DE52178C291CB5"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0xF62B3C48",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9243BAC96D64C050": {
            "name": "NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9243BAC96D64C050",
            "ns": "MISC",
            "jhash": "0x878486CE",
            "manualHash": true
        },
        "0x3ED1438C1F5C6612": {
            "name": "NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "```\np0 was always 2 in R* scripts.\nCalled before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.\n```",
            "examples": [],
            "hash": "0x3ED1438C1F5C6612",
            "ns": "MISC",
            "aliases": ["0x3ED1438C1F5C6612"],
            "jhash": "0x3301EA47",
            "manualHash": true
        },
        "0xE266ED23311F24D4": {
            "name": "PLAY_TENNIS_SWING_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE266ED23311F24D4",
            "ns": "MISC",
            "aliases": ["0xE266ED23311F24D4"],
            "jhash": "0xC20A7D2B",
            "manualHash": true
        },
        "0x8FA9C42FC5D7C64B": {
            "name": "PLAY_TENNIS_DIVE_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8FA9C42FC5D7C64B",
            "ns": "MISC",
            "aliases": ["0x8FA9C42FC5D7C64B"],
            "jhash": "0x0C8865DF",
            "manualHash": true
        },
        "0x10C2FA78D0E128A1": {
            "name": "REGISTER_ENUM_TO_SAVE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x10C2FA78D0E128A1",
            "ns": "MISC",
            "jhash": "0x9B38374A",
            "manualHash": true
        },
        "0x1162EA8AE9D24EEA": {
            "name": "OVERRIDE_SAVE_HOUSE",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "Vector3*" },
                { "name": "p7", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1162EA8AE9D24EEA",
            "ns": "MISC",
            "jhash": "0x47436C12",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x11B56FBBF7224868": {
            "name": "PRELOAD_CLOUD_HAT",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "```\nFound in the scripts:\nMISC::_11B56FBBF7224868(\"CONTRAILS\");\n```",
            "examples": [],
            "hash": "0x11B56FBBF7224868",
            "ns": "MISC",
            "aliases": ["0x11B56FBBF7224868"],
            "jhash": "0x8727A4C5",
            "manualHash": true
        },
        "0x34C9EE5986258415": {
            "name": "REGISTER_INT_TO_SAVE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x34C9EE5986258415",
            "ns": "MISC",
            "jhash": "0xB930956F",
            "manualHash": true
        },
        "0x44A0BDC559B35F6E": {
            "name": "QUEUE_MISSION_REPEAT_SAVE",
            "params": [],
            "results": "BOOL",
            "description": "Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.",
            "examples": [],
            "hash": "0x44A0BDC559B35F6E",
            "ns": "MISC",
            "aliases": ["0x44A0BDC559B35F6E"],
            "jhash": "0x3589452B",
            "manualHash": true,
            "resultsDescription": "Returns 1 if the message isn't currently on screen."
        },
        "0x7CAEC29ECB5DFEBB": {
            "name": "REGISTER_FLOAT_TO_SAVE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7CAEC29ECB5DFEBB",
            "ns": "MISC",
            "jhash": "0xDB06F7AD",
            "manualHash": true
        },
        "0xA735353C77334EA0": {
            "name": "_REGISTER_INT64_TO_SAVE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA735353C77334EA0",
            "ns": "MISC",
            "aliases": ["0xA735353C77334EA0"],
            "manualHash": true
        },
        "0xC8F4131414C835A1": {
            "name": "REGISTER_BOOL_TO_SAVE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC8F4131414C835A1",
            "ns": "MISC",
            "jhash": "0x5417E0E0",
            "manualHash": true
        },
        "0x6F7794F28C6B2535": {
            "name": "_REGISTER_TEXT_LABEL_TO_SAVE_2",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nSeems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE?\nMISC::_6F7794F28C6B2535(&a_0._f1, \"tlPlateText\");\nMISC::_6F7794F28C6B2535(&a_0._f1C, \"tlPlateText_pending\");\nMISC::_6F7794F28C6B2535(&a_0._f10B, \"tlCarAppPlateText\");\n\"tl\" prefix sounds like \"Text Label\"\n```",
            "examples": [],
            "hash": "0x6F7794F28C6B2535",
            "ns": "MISC",
            "aliases": ["0x6F7794F28C6B2535"],
            "jhash": "0xE2089749",
            "manualHash": true
        },
        "0xEDB1232C5BEAE62F": {
            "name": "REGISTER_TEXT_LABEL_TO_SAVE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEDB1232C5BEAE62F",
            "ns": "MISC",
            "jhash": "0x284352C4",
            "manualHash": true
        },
        "0xE6869BECDD8F2403": {
            "name": "REMOVE_POP_MULTIPLIER_SPHERE",
            "params": [
                { "name": "id", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE6869BECDD8F2403",
            "ns": "MISC",
            "aliases": ["0xE6869BECDD8F2403"],
            "jhash": "0x92E7E4EB",
            "manualHash": true
        },
        "0x77A84429DD9F0A15": {
            "name": "RESET_DISPATCH_IDEAL_SPAWN_DISTANCE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x77A84429DD9F0A15",
            "ns": "MISC",
            "jhash": "0xDA65ECAA",
            "manualHash": true
        },
        "0xB129E447A2EDA4BF": {
            "name": "REMOVE_POP_MULTIPLIER_AREA",
            "params": [
                { "name": "id", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB129E447A2EDA4BF",
            "ns": "MISC",
            "aliases": ["0xB129E447A2EDA4BF"],
            "jhash": "0xFBDBE374",
            "manualHash": true
        },
        "0x264AC28B01B353A5": {
            "name": "REMOVE_DISPATCH_SPAWN_BLOCKING_AREA",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x264AC28B01B353A5",
            "ns": "MISC",
            "jhash": "0xA8D2FB92",
            "manualHash": true
        },
        "0xC0714D0A7EEECA54": {
            "name": "REGISTER_SAVE_HOUSE",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any*" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC0714D0A7EEECA54",
            "ns": "MISC",
            "jhash": "0x39C1849A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAC7BFD5C1D83EA75": {
            "name": "RESET_DISPATCH_SPAWN_BLOCKING_AREAS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAC7BFD5C1D83EA75",
            "ns": "MISC",
            "jhash": "0x9A17F835",
            "manualHash": true
        },
        "0xA6A12939F16D85BE": {
            "name": "_REMOVE_STEALTH_KILL",
            "params": [
                { "name": "hash", "type": "Hash" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAppears to remove stealth kill action from memory\n```",
            "examples": [],
            "hash": "0xA6A12939F16D85BE",
            "ns": "MISC",
            "aliases": ["0xA6A12939F16D85BE"],
            "jhash": "0x42B484ED",
            "manualHash": true
        },
        "0x437138B6A830166A": {
            "name": "_RESET_BENCHMARK_RECORDING",
            "params": [],
            "results": "void",
            "description": "```\nBegins with RESET_*. Next character in the name is either D or E.\n```",
            "examples": [],
            "hash": "0x437138B6A830166A",
            "ns": "MISC",
            "aliases": ["0x437138B6A830166A"],
            "manualHash": true
        },
        "0x8EF5573A1F801A5C": {
            "name": "SCRIPT_RACE_GET_PLAYER_SPLIT_TIME",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "int*" },
                { "name": "p2", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8EF5573A1F801A5C",
            "ns": "MISC",
            "aliases": ["0x8EF5573A1F801A5C"],
            "jhash": "0x07FF553F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEB2DB0CAD13154B3": {
            "name": "RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xEB2DB0CAD13154B3",
            "ns": "MISC",
            "jhash": "0x1479E85A",
            "manualHash": true
        },
        "0x5896F2BD5683A4E1": {
            "name": "_RESET_DISPATCH_SPAWN_LOCATION",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x5896F2BD5683A4E1",
            "ns": "MISC",
            "manualHash": true
        },
        "0x37DEB0AA183FB6D8": {
            "name": "_SAVE_BENCHMARK_RECORDING",
            "params": [],
            "results": "void",
            "description": "```\nSaves the benchmark recording to %USERPROFILE%\\Documents\\Rockstar Games\\GTA V\\Benchmarks and submits some metrics.\n```",
            "examples": [],
            "hash": "0x37DEB0AA183FB6D8",
            "ns": "MISC",
            "aliases": ["0x37DEB0AA183FB6D8"],
            "manualHash": true
        },
        "0x933D6A9EEC1BACD0": {
            "name": "SET_BIT",
            "params": [
                { "name": "address", "type": "int*" },
                { "name": "offset", "type": "int" }
            ],
            "results": "void",
            "description": "```\nThis sets bit [offset] of [address] to on.\nThe offsets used are different bits to be toggled on and off, typically there is only one address used in a script.\nExample:\nMISC::SET_BIT(&bitAddress, 1);\nTo check if this bit has been enabled:\nMISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards\nPlease note, this method may assign a value to [address] when used.\n```",
            "examples": [],
            "hash": "0x933D6A9EEC1BACD0",
            "ns": "MISC",
            "jhash": "0x4EFE7E6B",
            "manualHash": true
        },
        "0xE574A662ACAEFBB1": {
            "name": "_RESTART_GAME",
            "params": [],
            "results": "void",
            "description": "In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.",
            "examples": [],
            "hash": "0xE574A662ACAEFBB1",
            "ns": "MISC",
            "aliases": ["0xE574A662ACAEFBB1"],
            "manualHash": true
        },
        "0x1FF6BF9A63E5757F": {
            "name": "SCRIPT_RACE_SHUTDOWN",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1FF6BF9A63E5757F",
            "ns": "MISC",
            "aliases": ["0x1FF6BF9A63E5757F"],
            "jhash": "0xDF99925C",
            "manualHash": true
        },
        "0x438822C279B73B93": {
            "name": "_SET_BEAST_MODE_ACTIVE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x438822C279B73B93",
            "ns": "MISC",
            "aliases": ["0x438822C279B73B93"],
            "manualHash": true
        },
        "0x0A60017F841A54F2": {
            "name": "SCRIPT_RACE_INIT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A60017F841A54F2",
            "ns": "MISC",
            "aliases": ["0x0A60017F841A54F2"],
            "jhash": "0x2D33F15A",
            "manualHash": true
        },
        "0xF36199225D6D8C86": {
            "name": "SET_CLOUDS_ALPHA",
            "params": [
                {
                    "name": "opacity",
                    "type": "float",
                    "description": "The opacity value to set for clouds."
                }
            ],
            "results": "void",
            "description": "Allows modification of the cloud opacity. It can also be used in other contexts, such as when the player is in a switch state [`IS_PLAYER_SWITCH_IN_PROGRESS`](#\\_0xD9D2CFFF49FAB35F).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Check if the player is in a Switch \"state\"\nif IsPlayerSwitchInProgress() then\n    -- If the player is in a Switch state, set the clouds opacity to 1.0\n    SetCloudsAlpha(1.0)\nend"
                },
                {
                    "lang": "js",
                    "code": "// Check if the player is in a Switch \"state\"\nif (IsPlayerSwitchInProgress()) {\n    // If the player is in a Switch state, set the clouds opacity to 1.0\n    SetCloudsAlpha(1.0);\n}"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// Check if the player is in a Switch \"state\"\nif (IsPlayerSwitchInProgress()) {\n    // If the player is in a Switch state, set the clouds opacity to 1.0\n    SetCloudsAlpha(1f);\n}"
                }
            ],
            "hash": "0xF36199225D6D8C86",
            "ns": "MISC",
            "aliases": ["0xF36199225D6D8C86", "_SET_CLOUD_HAT_OPACITY"],
            "manualHash": true
        },
        "0x8EF07E15701D61ED": {
            "name": "SET_BITS_IN_RANGE",
            "params": [
                { "name": "var", "type": "int*" },
                { "name": "rangeStart", "type": "int" },
                { "name": "rangeEnd", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8EF07E15701D61ED",
            "ns": "MISC",
            "jhash": "0x32094719",
            "manualHash": true
        },
        "0x44F7CBC1BEB3327D": {
            "name": "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x44F7CBC1BEB3327D",
            "ns": "MISC",
            "jhash": "0xABADB709",
            "manualHash": true
        },
        "0xB938B7E6D3C0620C": {
            "name": "SET_CREDITS_ACTIVE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB938B7E6D3C0620C",
            "ns": "MISC",
            "jhash": "0xEC2A0ECF",
            "manualHash": true
        },
        "0xA66C71C98D5F2CFB": {
            "name": "SET_EXPLOSIVE_AMMO_THIS_FRAME",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA66C71C98D5F2CFB",
            "ns": "MISC",
            "jhash": "0x2EAFA1D1",
            "manualHash": true
        },
        "0x6FE601A64180D423": {
            "name": "SET_DISPATCH_IDEAL_SPAWN_DISTANCE",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6FE601A64180D423",
            "ns": "MISC",
            "jhash": "0x6283BE32",
            "manualHash": true
        },
        "0xD10F442036302D50": {
            "name": "SET_DISPATCH_SPAWN_LOCATION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD10F442036302D50",
            "ns": "MISC",
            "aliases": ["0xD10F442036302D50"],
            "jhash": "0x6F009E33",
            "manualHash": true
        },
        "0x48838ED9937A15D1": {
            "name": "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x48838ED9937A15D1",
            "ns": "MISC",
            "jhash": "0x1C996BCD",
            "manualHash": true
        },
        "0xF3D78F59DFE18D79": {
            "name": "SET_FADE_IN_AFTER_LOAD",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF3D78F59DFE18D79",
            "ns": "MISC",
            "jhash": "0x6E00EB0B",
            "manualHash": true
        },
        "0xDA66D2796BA33F12": {
            "name": "SET_FADE_IN_AFTER_DEATH_ARREST",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets whether the game should fade in after the player dies or is arrested.  \n```",
            "examples": [],
            "hash": "0xDA66D2796BA33F12",
            "ns": "MISC",
            "jhash": "0xACDE6985",
            "manualHash": true
        },
        "0xFF1BED81BFDC0FE0": {
            "name": "SET_EXPLOSIVE_MELEE_THIS_FRAME",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFF1BED81BFDC0FE0",
            "ns": "MISC",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x96663D56",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4A18E01DF2C87B86": {
            "name": "SET_FADE_OUT_AFTER_DEATH",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets whether the game should fade out after the player dies.  \n```",
            "examples": [],
            "hash": "0x4A18E01DF2C87B86",
            "ns": "MISC",
            "jhash": "0xC9F6F0BC",
            "manualHash": true
        },
        "0x1E0B4DC0D990A4E7": {
            "name": "SET_FADE_OUT_AFTER_ARREST",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets whether the game should fade out after the player is arrested.  \n```",
            "examples": [],
            "hash": "0x1E0B4DC0D990A4E7",
            "ns": "MISC",
            "jhash": "0xCB074B9D",
            "manualHash": true
        },
        "0x740E14FAD5842351": {
            "name": "SET_GRAVITY_LEVEL",
            "params": [{ "name": "level", "type": "int" }],
            "results": "void",
            "description": "```\nlevel can be from 0 to 3  \n0: 9.8   \n1: 2.4   \n2: 0.1 - very low  \n3: 0.0  \n```",
            "examples": [],
            "hash": "0x740E14FAD5842351",
            "ns": "MISC",
            "jhash": "0x2D833F4A",
            "manualHash": true
        },
        "0x11879CDD803D30F4": {
            "name": "SET_FIRE_AMMO_THIS_FRAME",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x11879CDD803D30F4",
            "ns": "MISC",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x7C18FC8A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1454F2448DE30163": {
            "name": "SET_FAKE_WANTED_LEVEL",
            "params": [{ "name": "fakeWantedLevel", "type": "int" }],
            "results": "void",
            "description": "```\nSets a visually fake wanted level on the user interface. Used by Rockstar's scripts to \"override\" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.\nMax is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.\n```",
            "examples": [],
            "hash": "0x1454F2448DE30163",
            "ns": "MISC",
            "jhash": "0x85B1C9FA",
            "manualHash": true
        },
        "0xB08B85D860E7BA3C": {
            "name": "SET_INCIDENT_REQUESTED_UNITS",
            "params": [
                { "name": "incidentId", "type": "int" },
                { "name": "dispatchService", "type": "int" },
                { "name": "numUnits", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB08B85D860E7BA3C",
            "ns": "MISC",
            "aliases": ["0xB08B85D860E7BA3C"],
            "jhash": "0x0242D88E",
            "manualHash": true
        },
        "0xA1183BCFEE0F93D1": {
            "name": "_SET_FORCE_PLAYER_TO_JUMP",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xA1183BCFEE0F93D1",
            "ns": "MISC",
            "aliases": ["0xA1183BCFEE0F93D1"],
            "manualHash": true
        },
        "0xC5F0A8EBD3F361CE": {
            "name": "SET_INSTANCE_PRIORITY_HINT",
            "params": [{ "name": "flag", "type": "int" }],
            "results": "void",
            "description": "```\nSets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.\n```",
            "examples": [],
            "hash": "0xC5F0A8EBD3F361CE",
            "ns": "MISC",
            "aliases": ["_SET_UNK_MAP_FLAG"],
            "jhash": "0xE202879D",
            "manualHash": true
        },
        "0xD261BA3E7E998072": {
            "name": "_SET_INCIDENT_UNK",
            "params": [
                { "name": "incidentId", "type": "int" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSET_INCIDENT_*\n```",
            "examples": [],
            "hash": "0xD261BA3E7E998072",
            "ns": "MISC",
            "aliases": ["0xD261BA3E7E998072"],
            "jhash": "0x1F38102E",
            "manualHash": true
        },
        "0x577D1284D6873711": {
            "name": "SET_GAME_PAUSED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nMake sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe  \n```",
            "examples": [],
            "hash": "0x577D1284D6873711",
            "ns": "MISC",
            "jhash": "0x8230FF6C",
            "manualHash": true
        },
        "0x9BAE5AD2508DF078": {
            "name": "SET_INSTANCE_PRIORITY_MODE",
            "params": [
                {
                    "name": "toggle",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" },
                    "description": "toggles the instance priority mode"
                }
            ],
            "results": "void",
            "description": "Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. It causes a loading screen to show as it reloads map data.",
            "examples": [],
            "hash": "0x9BAE5AD2508DF078",
            "ns": "MISC",
            "aliases": [
                "_ENABLE_MP_DLC_MAPS",
                "_USE_FREEMODE_MAP_BEHAVIOR",
                "_LOWER_MAP_PROP_DENSITY"
            ],
            "jhash": "0x721B2492",
            "manualHash": true
        },
        "0x19E00D7322C6F85B": {
            "name": "SET_MINIGAME_IN_PROGRESS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x19E00D7322C6F85B",
            "ns": "MISC",
            "jhash": "0x348B9046",
            "manualHash": true
        },
        "0x9D8D44ADBBA61EF2": {
            "name": "_SET_PLAYER_ROCKSTAR_EDITOR_DISABLED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSET_PLAYER_*\n```",
            "examples": [],
            "hash": "0x9D8D44ADBBA61EF2",
            "ns": "MISC",
            "aliases": ["0x9D8D44ADBBA61EF2"],
            "manualHash": true
        },
        "0xC4301E5121A0ED73": {
            "name": "SET_MISSION_FLAG",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf true, the player can't save the game.   \nIf the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.  \n^ also, if the mission flag is already set, the function does nothing at all  \n```",
            "examples": [],
            "hash": "0xC4301E5121A0ED73",
            "ns": "MISC",
            "jhash": "0x57592D52",
            "manualHash": true
        },
        "0x4EBB7E87AA0DBED4": {
            "name": "_SET_PLAYER_IS_IN_ANIMAL_FORM",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf toggle is true, the ped's head is shown in the pause menu\nIf toggle is false, the ped's head is not shown in the pause menu\n```",
            "examples": [],
            "hash": "0x4EBB7E87AA0DBED4",
            "ns": "MISC",
            "aliases": ["0x4EBB7E87AA0DBED4", "_SHOW_PED_IN_PAUSE_MENU"],
            "manualHash": true
        },
        "0x643E26EA6E024D92": {
            "name": "_SET_RAIN_LEVEL",
            "params": [
                {
                    "name": "level",
                    "type": "float",
                    "description": "Strength of rain effects"
                }
            ],
            "results": "void",
            "description": "Controls rain, rain sounds and the creation of puddles.\n\nWith an `level` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.\n\nWith an `level` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.\n\nTo use the rain level of the current weather, call this native with `-1f` as `level`.",
            "examples": [],
            "hash": "0x643E26EA6E024D92",
            "ns": "MISC",
            "aliases": ["_SET_RAIN_FX_INTENSITY"],
            "manualHash": true
        },
        "0xA43D5C6FE51ADBEF": {
            "name": "SET_OVERRIDE_WEATHER",
            "params": [{ "name": "weatherType", "type": "char*" }],
            "results": "void",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.",
            "examples": [],
            "hash": "0xA43D5C6FE51ADBEF",
            "ns": "MISC",
            "jhash": "0xD9082BB5",
            "manualHash": true
        },
        "0x971927086CFD2158": {
            "name": "SET_RANDOM_EVENT_FLAG",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "```\nIf the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.  \nDoes nothing if the mission flag is set.  \n```",
            "examples": [],
            "hash": "0x971927086CFD2158",
            "ns": "MISC",
            "jhash": "0xA77F31E8",
            "manualHash": true
        },
        "0x444D98F98C11F3EC": {
            "name": "SET_RANDOM_SEED",
            "params": [{ "name": "seed", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x444D98F98C11F3EC",
            "ns": "MISC",
            "jhash": "0xDB3FEB5C",
            "manualHash": true
        },
        "0x8B05F884CF7E8020": {
            "name": "SET_RANDOM_WEATHER_TYPE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8B05F884CF7E8020",
            "ns": "MISC",
            "jhash": "0xE7AA1BC9",
            "manualHash": true
        },
        "0x706B5EDCAA7FA663": {
            "name": "_SET_RESTART_CUSTOM_POSITION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x706B5EDCAA7FA663",
            "ns": "MISC",
            "aliases": ["0x706B5EDCAA7FA663", "_SET_CUSTOM_RESPAWN_POSITION"],
            "manualHash": true
        },
        "0xC9BF75D28165FF77": {
            "name": "SET_SAVE_MENU_ACTIVE",
            "params": [{ "name": "ignoreVehicle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)\n```",
            "examples": [],
            "hash": "0xC9BF75D28165FF77",
            "ns": "MISC",
            "jhash": "0xF5CCF164",
            "manualHash": true
        },
        "0x2587A48BC88DFADF": {
            "name": "SET_RIOT_MODE_ENABLED",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Turn on or off riot mode. Set to `true` to enable riot mode."
                }
            ],
            "results": "void",
            "description": "Activates riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.",
            "examples": [],
            "hash": "0x2587A48BC88DFADF",
            "ns": "MISC",
            "aliases": ["0x2587A48BC88DFADF"],
            "jhash": "0xD9660339",
            "manualHash": true
        },
        "0x7F06937B0CDCBC1A": {
            "name": "_SET_SNOW_LEVEL",
            "params": [{ "name": "level", "type": "float" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x7F06937B0CDCBC1A",
            "ns": "MISC",
            "manualHash": true
        },
        "0x57FFF03E423A4C0B": {
            "name": "SET_SUPER_JUMP_THIS_FRAME",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player we are setting this for."
                }
            ],
            "results": "void",
            "description": "Allows the player to perform super jumps. This function must be called every frame for it to work.\nIt basically OR's a flag for a single frame, allowing the ped to perform a super jump only when the flag is set.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n    while true do\n        SetSuperJumpThisFrame(PlayerId())\n        -- Try enabling the two down below if you also want invincibility and no ragdoll effects\n        --SetPlayerInvincible(PlayerId(), true)\n        --SetPedCanRagdoll(PlayerPedId(), false)\n        Citizen.Wait(0)\n    end\nend)"
                }
            ],
            "hash": "0x57FFF03E423A4C0B",
            "ns": "MISC",
            "annotations": { "cs_type": "int" },
            "jhash": "0x86745EF3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB98236CAAECEF897": {
            "name": "SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB98236CAAECEF897",
            "ns": "MISC",
            "jhash": "0xD06F1720",
            "manualHash": true
        },
        "0x4F548CABEAE553BC": {
            "name": "SET_SAVE_HOUSE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4F548CABEAE553BC",
            "ns": "MISC",
            "jhash": "0xC3240BB4",
            "manualHash": true
        },
        "0xFB5045B7C42B75BF": {
            "name": "SET_WEATHER_TYPE_OVERTIME_PERSIST",
            "params": [
                {
                    "name": "weatherType",
                    "type": "char*",
                    "description": "The weather type to override to."
                },
                {
                    "name": "time",
                    "type": "float",
                    "description": "A float on how long to take to transition (in seconds)."
                }
            ],
            "results": "void",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.",
            "examples": [],
            "hash": "0xFB5045B7C42B75BF",
            "ns": "MISC",
            "aliases": ["_SET_WEATHER_TYPE_OVER_TIME"],
            "jhash": "0x386F0D25",
            "manualHash": true
        },
        "0x1D408577D440E81E": {
            "name": "SET_TIME_SCALE",
            "params": [{ "name": "timeScale", "type": "float" }],
            "results": "void",
            "description": "```\nMaximum value is 1.  \nAt a value of 0 the game will still run at a minimum time scale.  \nSlow Motion 1: 0.6  \nSlow Motion 2: 0.4  \nSlow Motion 3: 0.2  \n```",
            "examples": [],
            "hash": "0x1D408577D440E81E",
            "ns": "MISC",
            "jhash": "0xA7F84694",
            "manualHash": true
        },
        "0xD79185689F8FD5DF": {
            "name": "SET_STUNT_JUMPS_CAN_TRIGGER",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD79185689F8FD5DF",
            "ns": "MISC",
            "aliases": ["0xD79185689F8FD5DF"],
            "jhash": "0x3C806A2D",
            "manualHash": true
        },
        "0x29B487C359E19889": {
            "name": "SET_WEATHER_TYPE_NOW",
            "params": [{ "name": "weatherType", "type": "char*" }],
            "results": "void",
            "description": "```\n// timecycle_keyframe_data\nBLIZZARD = 0x27EA2814\nCLEAR = 0x36A83D84\nCLEARING = 0x6DB1A50D\nCLOUDS = 0x30FDAF5C\nEXTRASUNNY = 0x97AA0A79\nFOGGY = 0xAE737644\nHALLOWEEN = 0xC91A3202\nNEUTRAL = 0xA4CA1326\nOVERCAST = 0xBB898D2D\nRAIN = 0x54A69840\nSMOG = 0x10DCF4B5\nSNOW = 0xEFB6EFF6\nSNOWLIGHT = 0x23FB812B\nTHUNDER = 0xB677829F\nXMAS = 0xAAC9C895\n```",
            "examples": [],
            "hash": "0x29B487C359E19889",
            "ns": "MISC",
            "jhash": "0x361E9EAC",
            "manualHash": true
        },
        "0xED712CA327900C8A": {
            "name": "SET_WEATHER_TYPE_NOW_PERSIST",
            "params": [{ "name": "weatherType", "type": "char*" }],
            "results": "void",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW`](#\\_0x29B487C359E19889) for weather types.",
            "examples": [],
            "hash": "0xED712CA327900C8A",
            "ns": "MISC",
            "jhash": "0xC869FE97",
            "manualHash": true
        },
        "0x578C752848ECFA0C": {
            "name": "_SET_WEATHER_TYPE_TRANSITION",
            "params": [
                { "name": "weatherType1", "type": "Hash" },
                { "name": "weatherType2", "type": "Hash" },
                { "name": "percentWeather2", "type": "float" }
            ],
            "results": "void",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.\n\n```\nMixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:  \nexecute \"NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(\"\"RAIN\"\"), Game.GetHashKey(\"\"SMOG\"\"), 0.50f);  \n```",
            "examples": [],
            "hash": "0x578C752848ECFA0C",
            "ns": "MISC",
            "jhash": "0x5CA74040",
            "manualHash": true
        },
        "0xAA391C728106F7AF": {
            "name": "SET_THIS_SCRIPT_CAN_BE_PAUSED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA391C728106F7AF",
            "ns": "MISC",
            "jhash": "0xA0C3CE29",
            "manualHash": true
        },
        "0x704983DF373B198F": {
            "name": "SET_WEATHER_TYPE_PERSIST",
            "params": [{ "name": "weatherType", "type": "char*" }],
            "results": "void",
            "description": "Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\\_0xED712CA327900C8A) for weather types.",
            "examples": [],
            "hash": "0x704983DF373B198F",
            "ns": "MISC",
            "jhash": "0xC6C04C75",
            "manualHash": true
        },
        "0xAC3A74E8384A9919": {
            "name": "SET_WIND",
            "params": [{ "name": "speed", "type": "float" }],
            "results": "void",
            "description": "```\nSets the the raw wind speed value.  \n```",
            "examples": [],
            "hash": "0xAC3A74E8384A9919",
            "ns": "MISC",
            "jhash": "0xC6294698",
            "manualHash": true
        },
        "0xEE09ECEDBABE47FC": {
            "name": "SET_WIND_SPEED",
            "params": [{ "name": "speed", "type": "float" }],
            "results": "void",
            "description": "```\nUsing this native will clamp the wind speed value to a range of 0.0- 12.0. Using SET_WIND sets the same value but without the restriction.  \n```",
            "examples": [],
            "hash": "0xEE09ECEDBABE47FC",
            "ns": "MISC",
            "jhash": "0x45705F94",
            "manualHash": true
        },
        "0xD3D15555431AB793": {
            "name": "SHOULD_USE_METRIC_MEASUREMENTS",
            "params": [],
            "results": "BOOL",
            "description": "Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if (ShouldUseMetricMeasurements()) then\n    print(\"Distance to finish line: 8,04672 km.\")\nelse\n    print(\"Distance to finish line: 5 mi.\")\nend"
                }
            ],
            "hash": "0xD3D15555431AB793",
            "ns": "MISC",
            "aliases": [
                "0xD3D15555431AB793",
                "_IS_GAME_USING_METRIC_MEASUREMENT_SYSTEM"
            ],
            "jhash": "0xBAF17315",
            "manualHash": true,
            "resultsDescription": "Returns true if the game is using the metric measurement system, false if imperial is used."
        },
        "0xBFE5756E7407064A": {
            "name": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "damage", "type": "int" },
                { "name": "p7", "type": "BOOL" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ownerPed", "type": "Ped" },
                { "name": "isAudible", "type": "BOOL" },
                { "name": "isInvisible", "type": "BOOL" },
                { "name": "speed", "type": "float" },
                { "name": "entity", "type": "Entity" },
                { "name": "p14", "type": "BOOL" },
                { "name": "p15", "type": "BOOL" },
                { "name": "p16", "type": "BOOL" },
                { "name": "p17", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 19: Any p18\nNativeDB Added Parameter 20: Any p19\nNativeDB Added Parameter 21: Any p20\n```",
            "examples": [],
            "hash": "0xBFE5756E7407064A",
            "ns": "MISC",
            "aliases": [
                "0xBFE5756E7407064A",
                "_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_WITH_EXTRA_PARAMS"
            ],
            "jhash": "0xCCDC33CC",
            "manualHash": true
        },
        "0x867654CBC7606F2C": {
            "name": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "The X coordinate to start the shot at."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "The Y coordinate to start the shot at."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "The Z coordinate to start the shot at."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "The X coordinate the shot should end up at."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "The Y coordinate the shot should end up at."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "The Z coordinate the shot should end up at."
                },
                {
                    "name": "damage",
                    "type": "int",
                    "description": "The amount of damage the bullet carries."
                },
                {
                    "name": "pureAccuracy",
                    "type": "BOOL",
                    "description": "Whether the bullet should have pinpoint accuracy."
                },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Hash of the weapon the bullet is used as ammunition for."
                },
                {
                    "name": "ownerPed",
                    "type": "Ped",
                    "description": "Owner of the bullet, e.g. if the bullet kills someone the kill feed shows 'X was shot by ownerPed.'"
                },
                {
                    "name": "isAudible",
                    "type": "BOOL",
                    "description": "Whether the bullet should be audible. Optional, defaults to true"
                },
                {
                    "name": "isInvisible",
                    "type": "BOOL",
                    "description": "Whether the bullet should be invisible. Optional, defaults to false"
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "Speed the bullet should fly at. Optional"
                }
            ],
            "results": "void",
            "description": "Shoots a bullet from the first vector to the second vector. The weapon used as weaponHash should already be loaded via REQUEST_WEAPON_ASSET, otherwise the bullet may fail to materialise.",
            "examples": [],
            "hash": "0x867654CBC7606F2C",
            "ns": "MISC",
            "jhash": "0xCB7415AC",
            "manualHash": true
        },
        "0xEB0F4468467B4528": {
            "name": "SET_WIND_DIRECTION",
            "params": [
                {
                    "name": "direction",
                    "type": "float",
                    "description": "the [wind direction](https://en.wikipedia.org/wiki/Wind_direction) in radians"
                }
            ],
            "results": "void",
            "description": "Sets the wind direction.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- 180 degrees, wind will blow from the south\nSetWindDirection(math.rad(180.0))"
                },
                {
                    "lang": "cs",
                    "code": "// 180 degrees, wind will blow from the south\nSetWindDirection(3.1415f);"
                }
            ],
            "hash": "0xEB0F4468467B4528",
            "ns": "MISC",
            "jhash": "0x381AEEE9",
            "manualHash": true
        },
        "0x92790862E36C2ADA": {
            "name": "_START_BENCHMARK_RECORDING",
            "params": [],
            "results": "void",
            "description": "```\nBegins with START_*. Next character in the name is either D or E.\n```",
            "examples": [],
            "hash": "0x92790862E36C2ADA",
            "ns": "MISC",
            "aliases": ["0x92790862E36C2ADA"],
            "manualHash": true
        },
        "0xF2F6A2FA49278625": {
            "name": "SLERP_NEAR_QUATERNION",
            "params": [
                {
                    "name": "t",
                    "type": "float",
                    "description": "acceleration differenzial (am_rollercoaster.c func\\_134)"
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "rotation parameter (maybe X axys)"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "rotation parameter (maybe X axys)"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "rotation parameter (maybe X axys)"
                },
                {
                    "name": "w",
                    "type": "float",
                    "description": "rotation parameter (maybe X axys)"
                },
                {
                    "name": "x1",
                    "type": "float",
                    "description": "rotation parameter (maybe Y axys)"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "rotation parameter (maybe Y axys)"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "rotation parameter (maybe Y axys)"
                },
                {
                    "name": "w1",
                    "type": "float",
                    "description": "rotation parameter (maybe Y axys)"
                },
                {
                    "name": "outX",
                    "type": "float*",
                    "description": "output value calculated (X)"
                },
                {
                    "name": "outY",
                    "type": "float*",
                    "description": "output value calculated (Y)"
                },
                {
                    "name": "outZ",
                    "type": "float*",
                    "description": "output value calculated (Z)"
                },
                {
                    "name": "outW",
                    "type": "float*",
                    "description": "output value calculated (W)"
                }
            ],
            "results": "void",
            "description": "This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12",
            "examples": [
                {
                    "lang": "cs",
                    "code": "// Example from am_rollercoaster.c\n// where func_136 calculates arctan of given values and func_135 calculates both sin and cos\n\nvoid func_134(int iParam0, int iParam1, float fParam2) cippalippo\n{\n\tint iVar0;\n\tint iVar1;\n\tint iVar2;\n\tint iVar3;\n\tfloat fVar4;\n\tvar uVar5[4];\n\tvar uVar6[4];\n\tvar uVar7[4];\n\tfloat fVar8;\n\t\n\tiVar0 = func_47(iParam1);\n\tiVar1 = iParam1;\n\tiVar2 = func_48(iParam1);\n\tiVar3 = func_48(iVar2);\n\tif (fParam2 < 0f)\n\t{\n\t\tfParam2 = (fParam2 + Local_1417[(iLocal_714 - 1) /*5*/].f_3);\n\t}\n\tfVar8 = ((fParam2 - Local_1417[iVar1 /*5*/].f_3) / (Local_1417[iVar2 /*5*/].f_3 - Local_1417[iVar1 /*5*/].f_3));\n\tif (fVar8 < 0.5f)\n\t{\n\t\tfVar4 = (fVar8 + 0.5f);\n\t\tfunc_135(func_136(iVar0, iVar1), &(uVar5[0]), &(uVar5[1]), &(uVar5[2]), &(uVar5[3]));\n\t\tfunc_135(func_136(iVar1, iVar2), &(uVar6[0]), &(uVar6[1]), &(uVar6[2]), &(uVar6[3]));\n\t}\n\telse\n\t{\n\t\tfVar4 = (fVar8 - 0.5f);\n\t\tfunc_135(func_136(iVar1, iVar2), &(uVar5[0]), &(uVar5[1]), &(uVar5[2]), &(uVar5[3]));\n\t\tfunc_135(func_136(iVar2, iVar3), &(uVar6[0]), &(uVar6[1]), &(uVar6[2]), &(uVar6[3]));\n\t}\n\tMISC::_0xF2F6A2FA49278625(fVar4, uVar5[0], uVar5[1], uVar5[2], uVar5[3], uVar6[0], uVar6[1], uVar6[2], uVar6[3], &(uVar7[0]), &(uVar7[1]), &(uVar7[2]), &(uVar7[3]));\n\tENTITY::SET_ENTITY_QUATERNION(iLocal_719[iParam0], uVar7[0], uVar7[1], uVar7[2], uVar7[3]);\n}\n"
                }
            ],
            "hash": "0xF2F6A2FA49278625",
            "ns": "MISC",
            "aliases": ["0xF2F6A2FA49278625"],
            "jhash": "0x87B92190",
            "manualHash": true
        },
        "0x04456F95153C6BE4": {
            "name": "STOP_SAVE_ARRAY",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x04456F95153C6BE4",
            "ns": "MISC",
            "jhash": "0x0CAD8217",
            "manualHash": true
        },
        "0xBF737600CDDBEADD": {
            "name": "START_SAVE_STRUCT_WITH_SIZE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "size", "type": "int" },
                { "name": "structName", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF737600CDDBEADD",
            "ns": "MISC",
            "aliases": ["_START_SAVE_STRUCT"],
            "jhash": "0xFB45728E",
            "manualHash": true
        },
        "0xE3A7742E0B7A2F8B": {
            "name": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "damage", "type": "int" },
                { "name": "p7", "type": "BOOL" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ownerPed", "type": "Ped" },
                { "name": "isAudible", "type": "BOOL" },
                { "name": "isInvisible", "type": "BOOL" },
                { "name": "speed", "type": "float" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "void",
            "description": "```\nentity - entity to ignore  \n```\n\n```\nNativeDB Added Parameter 15: Any p14\n```",
            "examples": [],
            "hash": "0xE3A7742E0B7A2F8B",
            "ns": "MISC",
            "aliases": [
                "0xE3A7742E0B7A2F8B",
                "_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_PRESET_PARAMS"
            ],
            "jhash": "0x52ACCB7B",
            "manualHash": true
        },
        "0xA9575F812C6A7997": {
            "name": "START_SAVE_DATA",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA9575F812C6A7997",
            "ns": "MISC",
            "jhash": "0x881A694D",
            "manualHash": true
        },
        "0xEB1774DF12BB9F12": {
            "name": "STOP_SAVE_STRUCT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEB1774DF12BB9F12",
            "ns": "MISC",
            "jhash": "0xC2624A28",
            "manualHash": true
        },
        "0x60FE567DF1B1AF9D": {
            "name": "START_SAVE_ARRAY_WITH_SIZE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "size", "type": "int" },
                { "name": "arrayName", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x60FE567DF1B1AF9D",
            "ns": "MISC",
            "aliases": ["_START_SAVE_ARRAY"],
            "jhash": "0x893A342C",
            "manualHash": true
        },
        "0xC7DB36C24634F52B": {
            "name": "_STOP_BENCHMARK_RECORDING",
            "params": [],
            "results": "void",
            "description": "```\nBegins with STOP_*. Next character in the name is either D or E.\n```",
            "examples": [],
            "hash": "0xC7DB36C24634F52B",
            "ns": "MISC",
            "aliases": ["0xC7DB36C24634F52B"],
            "manualHash": true
        },
        "0x9DC711BC69C548DF": {
            "name": "TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME",
            "params": [{ "name": "scriptName", "type": "char*" }],
            "results": "void",
            "description": "For a full list, see [here](https://gist.github.com/4mmonium/f76f3ecef649ed275b260b433ea84494).",
            "examples": [],
            "hash": "0x9DC711BC69C548DF",
            "ns": "MISC",
            "jhash": "0x9F861FD4",
            "manualHash": true
        },
        "0x0CF2B696BBF945AE": {
            "name": "UPDATE_ONSCREEN_KEYBOARD",
            "params": [],
            "results": "int",
            "description": "```\nReturns the current status of the onscreen keyboard, and updates the output.\nStatus Codes:\n-1: Keyboard isn't active\n0: User still editing\n1: User has finished editing\n2: User has canceled editing\n```",
            "examples": [],
            "hash": "0x0CF2B696BBF945AE",
            "ns": "MISC",
            "jhash": "0x23D0A1CE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x74E20C9145FB66FD": {
            "name": "STOP_SAVE_DATA",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x74E20C9145FB66FD",
            "ns": "MISC",
            "jhash": "0x3B1C07C8",
            "manualHash": true
        },
        "0x632106CC96E82E91": {
            "name": "TAN",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x632106CC96E82E91",
            "ns": "MISC",
            "jhash": "0xD320CE5E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA74802FB8D0B7814": {
            "name": "UNLOAD_CLOUD_HAT",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nCalled 4 times in the b617d scripts:\nMISC::_A74802FB8D0B7814(\"CONTRAILS\", 0);\n```",
            "examples": [],
            "hash": "0xA74802FB8D0B7814",
            "ns": "MISC",
            "aliases": ["0xA74802FB8D0B7814"],
            "jhash": "0xC9FA6E07",
            "manualHash": true
        },
        "0xF14878FC50BEC6EE": {
            "name": "USING_MISSION_CREATOR",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF14878FC50BEC6EE",
            "ns": "MISC",
            "jhash": "0x20AB0B6B",
            "manualHash": true
        },
        "0x5A5F40FE637EB584": {
            "name": "STRING_TO_INT",
            "params": [
                { "name": "string", "type": "char*" },
                { "name": "outInteger", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\nReturns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.  \nIf all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.  \n```",
            "examples": [],
            "hash": "0x5A5F40FE637EB584",
            "ns": "MISC",
            "jhash": "0x590A8160",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC3C221ADDDE31A11": {
            "name": "WATER_OVERRIDE_FADE_OUT",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC3C221ADDDE31A11",
            "ns": "MISC",
            "aliases": ["0xC3C221ADDDE31A11"],
            "jhash": "0x63A89684",
            "manualHash": true
        },
        "0x405591EC8FD9096D": {
            "name": "WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE",
            "params": [{ "name": "amplitude", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x405591EC8FD9096D",
            "ns": "MISC",
            "aliases": ["0x405591EC8FD9096D"],
            "jhash": "0x584E9C59",
            "manualHash": true
        },
        "0x7C9C0B1EEB1F9072": {
            "name": "WATER_OVERRIDE_SET_RIPPLEBUMPINESS",
            "params": [{ "name": "bumpiness", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7C9C0B1EEB1F9072",
            "ns": "MISC",
            "aliases": ["0x7C9C0B1EEB1F9072"],
            "jhash": "0x98C9138B",
            "manualHash": true
        },
        "0x31727907B2C43C55": {
            "name": "WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE",
            "params": [{ "name": "minAmplitude", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x31727907B2C43C55",
            "ns": "MISC",
            "aliases": ["0x31727907B2C43C55"],
            "jhash": "0xD447439D",
            "manualHash": true
        },
        "0xB3E6360DDE733E82": {
            "name": "WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE",
            "params": [{ "name": "maxAmplitude", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB3E6360DDE733E82",
            "ns": "MISC",
            "aliases": ["0xB3E6360DDE733E82"],
            "jhash": "0x0DE40C28",
            "manualHash": true
        },
        "0xEA2F2061875EED90": {
            "name": "_UI_IS_SINGLEPLAYER_PAUSE_MENU_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE\n\nU*\n```",
            "examples": [],
            "hash": "0xEA2F2061875EED90",
            "ns": "MISC",
            "aliases": ["0xEA2F2061875EED90"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF751B16FB32ABC1D": {
            "name": "WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE",
            "params": [{ "name": "minAmplitude", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF751B16FB32ABC1D",
            "ns": "MISC",
            "aliases": ["0xF751B16FB32ABC1D"],
            "jhash": "0x5656D578",
            "manualHash": true
        },
        "0xB9854DFDE0D833D6": {
            "name": "WATER_OVERRIDE_SET_RIPPLEDISTURB",
            "params": [{ "name": "disturb", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB9854DFDE0D833D6",
            "ns": "MISC",
            "aliases": ["0xB9854DFDE0D833D6"],
            "jhash": "0x4671AC2E",
            "manualHash": true
        },
        "0xB8F87EAD7533B176": {
            "name": "WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE",
            "params": [{ "name": "amplitude", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB8F87EAD7533B176",
            "ns": "MISC",
            "aliases": ["0xB8F87EAD7533B176"],
            "jhash": "0x625181DC",
            "manualHash": true
        },
        "0xA8434F1DFF41D6E7": {
            "name": "WATER_OVERRIDE_FADE_IN",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA8434F1DFF41D6E7",
            "ns": "MISC",
            "aliases": ["0xA8434F1DFF41D6E7"],
            "jhash": "0x5F3DDEC0",
            "manualHash": true
        },
        "0xC54A08C85AE4D410": {
            "name": "WATER_OVERRIDE_SET_STRENGTH",
            "params": [{ "name": "strength", "type": "float" }],
            "results": "void",
            "description": "```\nThis seems to edit the water wave, intensity around your current location.  \n0.0f = Normal  \n1.0f = So Calm and Smooth, a boat will stay still.  \n3.0f = Really Intense.  \n```",
            "examples": [],
            "hash": "0xC54A08C85AE4D410",
            "ns": "MISC",
            "aliases": ["0xC54A08C85AE4D410"],
            "jhash": "0xDA02F415",
            "manualHash": true
        },
        "0x9F5E6BB6B34540DA": {
            "name": "WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS",
            "params": [{ "name": "maxBumpiness", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9F5E6BB6B34540DA",
            "ns": "MISC",
            "aliases": ["0x9F5E6BB6B34540DA"],
            "jhash": "0x1C0CAE89",
            "manualHash": true
        },
        "0x6216B116083A7CB4": {
            "name": "WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS",
            "params": [{ "name": "minBumpiness", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6216B116083A7CB4",
            "ns": "MISC",
            "aliases": ["0x6216B116083A7CB4"],
            "jhash": "0xFB1A9CDE",
            "manualHash": true
        },
        "0xA7A1127490312C36": {
            "name": "WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE",
            "params": [{ "name": "maxAmplitude", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA7A1127490312C36",
            "ns": "MISC",
            "aliases": ["0xA7A1127490312C36"],
            "jhash": "0x6926AB03",
            "manualHash": true
        },
        "0xC3EAD29AB273ECE8": {
            "name": "WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE",
            "params": [{ "name": "minAmplitude", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC3EAD29AB273ECE8",
            "ns": "MISC",
            "aliases": ["0xC3EAD29AB273ECE8"],
            "jhash": "0xBEBBFDC8",
            "manualHash": true
        }
    },
    "NETSHOPPING": {
        "0x357B152EF96C30B6": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x357B152EF96C30B6",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x74A0FD0688F1EE45": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "```\nNET_GAMESERVER_*\n```",
            "examples": [],
            "hash": "0x74A0FD0688F1EE45",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x170910093218C8B9": {
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x170910093218C8B9",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0395CB47B022E62C": {
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0395CB47B022E62C",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x613F125BA3BD2EB9": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x613F125BA3BD2EB9",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x72EB7BA9B69BF6AB": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x72EB7BA9B69BF6AB",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x85F6C9ABA1DE2BCF": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x85F6C9ABA1DE2BCF",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x79EDAC677CA62F81": {
            "params": [{ "name": "transactionId", "type": "int" }],
            "results": "BOOL",
            "description": "```\nNET_GAMESERVER_*\n\nChecks if the transaction status is equal to 3.\n\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x79EDAC677CA62F81",
            "ns": "NETSHOPPING",
            "manualHash": true
        },
        "0xF30980718C8ED876": {
            "name": "_NET_GAMESERVER_BASKET_ADD_ITEM",
            "params": [
                { "name": "itemData", "type": "Any*" },
                { "name": "quantity", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF30980718C8ED876",
            "ns": "NETSHOPPING",
            "aliases": ["0xF30980718C8ED876", "_NETWORK_SHOP_BASKET_ADD_ITEM"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC830417D630A50F9": {
            "params": [{ "name": "transactionId", "type": "int" }],
            "results": "BOOL",
            "description": "```\nNET_GAMESERVER_*\n\nChecks if the transaction status is equal to 1.\n\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0xC830417D630A50F9",
            "ns": "NETSHOPPING",
            "manualHash": true
        },
        "0xC13C38E47EA5DF31": {
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC13C38E47EA5DF31",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE3E5A7C64CA2C6ED": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xE3E5A7C64CA2C6ED",
            "ns": "NETSHOPPING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE1A0450ED46A7812": {
            "name": "_NET_GAMESERVER_BASKET_APPLY_SERVER_DATA",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE1A0450ED46A7812",
            "ns": "NETSHOPPING",
            "aliases": [
                "0xE1A0450ED46A7812",
                "_NETWORK_SHOP_BASKET_APPLY_SERVER_DATA"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x27F76CC6C55AD30E": {
            "name": "_NET_GAMESERVER_BASKET_IS_FULL",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x27F76CC6C55AD30E",
            "ns": "NETSHOPPING",
            "aliases": ["0x27F76CC6C55AD30E", "_NETWORK_SHOP_BASKET_IS_FULL"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFA336E7F40C0A0D0": {
            "name": "_NET_GAMESERVER_BASKET_DELETE",
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v372\n```",
            "examples": [],
            "hash": "0xFA336E7F40C0A0D0",
            "ns": "NETSHOPPING",
            "manualHash": true
        },
        "0x3C4487461E9B0DCB": {
            "name": "_NET_GAMESERVER_CATALOG_IS_READY",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3C4487461E9B0DCB",
            "ns": "NETSHOPPING",
            "aliases": ["0x3C4487461E9B0DCB"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA65568121DF2EA26": {
            "name": "_NET_GAMESERVER_BASKET_END",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA65568121DF2EA26",
            "ns": "NETSHOPPING",
            "aliases": [
                "0xA65568121DF2EA26",
                "0xE547E9114277098F",
                "_NETWORK_SHOP_BASKET_END"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3C5FD37B5499582E": {
            "name": "_NET_GAMESERVER_BEGIN_SERVICE",
            "params": [
                { "name": "transactionId", "type": "int*" },
                { "name": "categoryHash", "type": "Hash" },
                { "name": "itemHash", "type": "Hash" },
                {
                    "name": "actionTypeHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "int" }
                },
                { "name": "value", "type": "int" },
                { "name": "flags", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3C5FD37B5499582E",
            "ns": "NETSHOPPING",
            "aliases": ["0x3C5FD37B5499582E", "_NETWORK_SHOP_BEGIN_SERVICE"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBD4D7EAF8A30F637": {
            "name": "_NET_GAMESERVER_CATALOG_ITEM_EXISTS",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBD4D7EAF8A30F637",
            "ns": "NETSHOPPING",
            "aliases": [
                "0xBD4D7EAF8A30F637",
                "_NETWORK_SHOP_IS_ITEM_UNLOCKED",
                "_NETWORK_SHOP_DOES_ITEM_EXIST"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x279F08B1A4B29B7E": {
            "name": "_NET_GAMESERVER_BASKET_START",
            "params": [
                {
                    "name": "transactionId",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "categoryHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "int" }
                },
                {
                    "name": "actionHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "int" }
                },
                { "name": "flags", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x279F08B1A4B29B7E",
            "ns": "NETSHOPPING",
            "aliases": ["_NETWORK_SHOP_BASKET_START"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x247F0F73A182EA0B": {
            "name": "_NET_GAMESERVER_CATALOG_ITEM_EXISTS_HASH",
            "params": [{ "name": "hash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x247F0F73A182EA0B",
            "ns": "NETSHOPPING",
            "aliases": [
                "0x247F0F73A182EA0B",
                "_NETWORK_SHOP_IS_ITEM_UNLOCKED_HASH",
                "_NETWORK_SHOP_DOES_ITEM_EXIST_HASH"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x35A1B3E1D1315CFA": {
            "name": "_NET_GAMESERVER_GET_BALANCE",
            "params": [
                { "name": "inventory", "type": "BOOL" },
                { "name": "playerbalance", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nNote: only one of the arguments can be set to true at a time\n```",
            "examples": [],
            "hash": "0x35A1B3E1D1315CFA",
            "ns": "NETSHOPPING",
            "aliases": ["0x35A1B3E1D1315CFA"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCF38DAFBB49EDE5E": {
            "name": "_NET_GAMESERVER_GET_CATALOG_STATE",
            "params": [
                {
                    "name": "state",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCF38DAFBB49EDE5E",
            "ns": "NETSHOPPING",
            "aliases": ["0xCF38DAFBB49EDE5E"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x112CEF1615A1139F": {
            "name": "_NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x112CEF1615A1139F",
            "ns": "NETSHOPPING",
            "aliases": [
                "0x112CEF1615A1139F",
                "_NETWORK_SHOP_DELETE_SET_TELEMETRY_NONCE_SEED"
            ],
            "annotations": { "cs_type": "Any" },
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2F41D51BA3BCD1F1": {
            "name": "_NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA",
            "params": [{ "name": "charSlot", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2F41D51BA3BCD1F1",
            "ns": "NETSHOPPING",
            "aliases": [
                "0x2F41D51BA3BCD1F1",
                "_NETWORK_SHOP_SESSION_APPLY_RECEIVED_DATA"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x51F1A8E48C3D2F6D": {
            "name": "_NET_GAMESERVER_DELETE_CHARACTER_SLOT",
            "params": [
                { "name": "slot", "type": "int" },
                { "name": "transfer", "type": "BOOL" },
                {
                    "name": "reason",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x51F1A8E48C3D2F6D",
            "ns": "NETSHOPPING",
            "aliases": ["0x51F1A8E48C3D2F6D"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x39BE7CEA8D9CC8E6": {
            "name": "_NET_GAMESERVER_CHECKOUT_START",
            "params": [{ "name": "transactionId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x39BE7CEA8D9CC8E6",
            "ns": "NETSHOPPING",
            "aliases": ["0x39BE7CEA8D9CC8E6", "_NETWORK_SHOP_CHECKOUT_START"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B949A1E6AEC8F6A": {
            "name": "_NET_GAMESERVER_IS_CATALOG_VALID",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2B949A1E6AEC8F6A",
            "ns": "NETSHOPPING",
            "aliases": ["0x2B949A1E6AEC8F6A"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE2A99A9B524BEFFF": {
            "name": "_NET_GAMESERVER_END_SERVICE",
            "params": [{ "name": "transactionId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE2A99A9B524BEFFF",
            "ns": "NETSHOPPING",
            "aliases": [
                "0xE2A99A9B524BEFFF",
                "_NETWORK_SHOP_END_SERVICE",
                "_NETWORK_SHOP_TERMINATE_SERVICE"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9507D4271988E1AE": {
            "name": "_NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9507D4271988E1AE",
            "ns": "NETSHOPPING",
            "aliases": [
                "0x9507D4271988E1AE",
                "_NETWORK_SHOP_SET_TELEMETRY_NONCE_SEED"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0A6D923DFFC9BD89": {
            "name": "_NET_GAMESERVER_DELETE_CHARACTER_SLOT_GET_STATUS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0A6D923DFFC9BD89",
            "ns": "NETSHOPPING",
            "aliases": ["0x0A6D923DFFC9BD89"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA135AC892A58FC07": {
            "name": "_NET_GAMESERVER_START_SESSION",
            "params": [{ "name": "charSlot", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA135AC892A58FC07",
            "ns": "NETSHOPPING",
            "aliases": ["0xA135AC892A58FC07", "_NETWORK_SHOP_START_SESSION"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x897433D292B44130": {
            "name": "_NET_GAMESERVER_GET_TRANSACTION_MANAGER_DATA",
            "params": [
                {
                    "name": "p0",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                { "name": "p1", "type": "BOOL*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x897433D292B44130",
            "ns": "NETSHOPPING",
            "aliases": ["0x897433D292B44130"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD47A2C1BA117471D": {
            "name": "_NET_GAMESERVER_TRANSFER_BANK_TO_WALLET",
            "params": [
                { "name": "charSlot", "type": "int" },
                { "name": "amount", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD47A2C1BA117471D",
            "ns": "NETSHOPPING",
            "aliases": [
                "0xD47A2C1BA117471D",
                "_NETWORK_TRANSFER_BANK_TO_WALLET"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC27009422FCCA88D": {
            "name": "_NET_GAMESERVER_GET_PRICE",
            "params": [
                { "name": "itemHash", "type": "Hash" },
                { "name": "categoryHash", "type": "Hash" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\nbool is always true in game scripts  \n```",
            "examples": [],
            "hash": "0xC27009422FCCA88D",
            "ns": "NETSHOPPING",
            "aliases": ["_NETWORK_SHOP_GET_PRICE"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x23789E777D14CE44": {
            "name": "_NET_GAMESERVER_TRANSFER_CASH_GET_STATUS",
            "params": [],
            "results": "int",
            "description": "```\nSame as 0x350AA5EBC03D3BD2\n```",
            "examples": [],
            "hash": "0x23789E777D14CE44",
            "ns": "NETSHOPPING",
            "aliases": ["0x23789E777D14CE44"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB24F0944DA203D9E": {
            "name": "_NET_GAMESERVER_IS_SESSION_VALID",
            "params": [{ "name": "charSlot", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB24F0944DA203D9E",
            "ns": "NETSHOPPING",
            "aliases": [
                "0xB24F0944DA203D9E",
                "_NETWORK_SHOP_GET_TRANSACTIONS_ENABLED_FOR_CHARACTER"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x498C1E05CE5F7877": {
            "name": "_NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED",
            "params": [],
            "results": "BOOL",
            "description": "```\nUsed to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED\n```",
            "examples": [],
            "hash": "0x498C1E05CE5F7877",
            "ns": "NETSHOPPING",
            "aliases": [
                "0x498C1E05CE5F7877",
                "_NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x810E8431C0614BF9": {
            "name": "_NET_GAMESERVER_IS_SESSION_REFRESH_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x810E8431C0614BF9",
            "ns": "NETSHOPPING",
            "aliases": [
                "0x810E8431C0614BF9",
                "_NETWORK_SHOP_GET_TRANSACTIONS_DISABLED"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC2F7FE5309181C7D": {
            "name": "_NET_GAMESERVER_TRANSFER_WALLET_TO_BANK",
            "params": [
                { "name": "charSlot", "type": "int" },
                { "name": "amount", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC2F7FE5309181C7D",
            "ns": "NETSHOPPING",
            "aliases": [
                "0xC2F7FE5309181C7D",
                "_NETWORK_TRANSFER_WALLET_TO_BANK"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7D2708796355B20B": {
            "name": "_NET_GAMESERVER_USE_SERVER_TRANSACTIONS",
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x7D2708796355B20B",
            "ns": "NETSHOPPING",
            "manualHash": true
        },
        "0x350AA5EBC03D3BD2": {
            "name": "_NET_GAMESERVER_TRANSFER_CASH_GET_STATUS_2",
            "params": [],
            "results": "int",
            "description": "```\nSame as 0x23789E777D14CE44\n```",
            "examples": [],
            "hash": "0x350AA5EBC03D3BD2",
            "ns": "NETSHOPPING",
            "aliases": ["0x350AA5EBC03D3BD2"],
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "MONEY": {
        "0xE260E0BB9CD995AC": {
            "name": "DEPOSIT_VC",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "BOOL",
            "description": "```\nDoes nothing and always returns false.\n```",
            "examples": [],
            "hash": "0xE260E0BB9CD995AC",
            "ns": "MONEY",
            "aliases": ["0xE260E0BB9CD995AC"],
            "jhash": "0x8F266745",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x08E8EEADFD0DC4A0": {
            "params": [{ "name": "amount", "type": "int" }],
            "results": "BOOL",
            "description": "```\nReturns false if amount > wallet balance or daily transfer limit has been hit.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x08E8EEADFD0DC4A0",
            "ns": "MONEY",
            "jhash": "0x03461981",
            "manualHash": true
        },
        "0x9777734DAD16992F": {
            "name": "_CAN_PAY_GOON",
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: int p0\nNativeDB Added Parameter 2: int p1\nNativeDB Added Parameter 3: int amount\nNativeDB Added Parameter 4: int* p3\n```",
            "examples": [],
            "hash": "0x9777734DAD16992F",
            "ns": "MONEY",
            "aliases": ["0x9777734DAD16992F"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0D30EB83668E63C5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0D30EB83668E63C5",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x0DD362F14F18942A": {
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x0DD362F14F18942A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x1DC9B749E7AE282B": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x1DC9B749E7AE282B",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x226C284C830D0CA8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x226C284C830D0CA8",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x112209CE0290C03A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x112209CE0290C03A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x2A7CEC72C3443BCC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x2A7CEC72C3443BCC",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x2FAB6614CE22E196": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2FAB6614CE22E196",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x2AFC2D19B50797F2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2AFC2D19B50797F2",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x31BA138F6304FB9F": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x31BA138F6304FB9F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x2A93C46AAB1EACC9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x2A93C46AAB1EACC9",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x4128464231E3CA0B": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4128464231E3CA0B",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x5574637681911FDA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x5574637681911FDA",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x5F456788B05FAEAC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F456788B05FAEAC",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x55A1E095DB052FA5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x55A1E095DB052FA5",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x4C3B75694F7E0D9C": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x4C3B75694F7E0D9C",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x6FD97159FE3C971A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6FD97159FE3C971A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x8E243837643D9583": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8E243837643D9583",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x65482BFD0923C8A1": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x65482BFD0923C8A1",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x675D19C6067CAE08": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x675D19C6067CAE08",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xA51338E0DCCD4065": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xA51338E0DCCD4065",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x7C4FCCD2E4DEB394": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7C4FCCD2E4DEB394",
            "ns": "MONEY",
            "jhash": "0x468CC978",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6B7E4FB50D5F3D65": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x6B7E4FB50D5F3D65",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x69EF772B192614C1": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x69EF772B192614C1",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x998E18CEB44487FC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x998E18CEB44487FC",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x6FCF8DDEA146C45B": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "```\nThis function is hard-coded to always return 1.\n```",
            "examples": [],
            "hash": "0x6FCF8DDEA146C45B",
            "ns": "MONEY",
            "jhash": "0xB96C7ABE",
            "manualHash": true
        },
        "0xA95CFB4E02390842": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xA95CFB4E02390842",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x870289A558348378": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x870289A558348378",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB4C2EC463672474E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB4C2EC463672474E",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x9B5016A6433A68C5": {
            "params": [],
            "results": "Any",
            "description": "```\nHardcoded to return 0.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x9B5016A6433A68C5",
            "ns": "MONEY",
            "jhash": "0xBD64F1B7",
            "manualHash": true
        },
        "0x90CD7C6871FBF1B4": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x90CD7C6871FBF1B4",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xCD0F5B5D932AE473": {
            "params": [],
            "results": "void",
            "description": "```\nDoes nothing (it's a nullsub).\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xCD0F5B5D932AE473",
            "ns": "MONEY",
            "jhash": "0xC4CD928D",
            "manualHash": true
        },
        "0xA95F667A755725DA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA95F667A755725DA",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xA51B086B0B2C0F7A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA51B086B0B2C0F7A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB5B58E24868CB09E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xB5B58E24868CB09E",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xBD0EFB25CCA8F97A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBD0EFB25CCA8F97A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xCD4D66B43B1DD28D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xCD4D66B43B1DD28D",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xD29334ED1A256DBF": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xD29334ED1A256DBF",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB4DEAE67F35E2ACD": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xB4DEAE67F35E2ACD",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE154B48B68EF72BC": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "```\nThis function is hard-coded to always return 1.  \n```",
            "examples": [],
            "hash": "0xE154B48B68EF72BC",
            "ns": "MONEY",
            "jhash": "0x531E4892",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC6E74CF8C884C880": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xC6E74CF8C884C880",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xDE68E30D89F97132": {
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xDE68E30D89F97132",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE2BB399D90942091": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xE2BB399D90942091",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE23ADC6FCB1F29AE": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE23ADC6FCB1F29AE",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE0F82D68C7039158": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xE0F82D68C7039158",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xFA07759E6FDDD7CF": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFA07759E6FDDD7CF",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE2E244AB823B4483": {
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xE2E244AB823B4483",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xED76D195E6E3BF7F": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xED76D195E6E3BF7F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x7B718E197453F2D9": {
            "name": "NETWORK_BUY_BOUNTY",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "victim", "type": "Player" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 is just an assumption. p2 was false and p3 was true.  \n```",
            "examples": [],
            "hash": "0x7B718E197453F2D9",
            "ns": "MONEY",
            "jhash": "0xCB89CBE0",
            "manualHash": true
        },
        "0x30FD873ECE50E9F6": {
            "name": "_NETWORK_BUY_CONTRABAND",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                {
                    "name": "p2",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x30FD873ECE50E9F6",
            "ns": "MONEY",
            "aliases": ["0x30FD873ECE50E9F6"],
            "manualHash": true
        },
        "0xED5FD7AF10F5E262": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED5FD7AF10F5E262",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xA3EDDAA42411D3B9": {
            "name": "NETWORK_BUY_BACKUP_GANG",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xA3EDDAA42411D3B9",
            "ns": "MONEY",
            "jhash": "0x2AD2EC51",
            "manualHash": true
        },
        "0xD9B067E55253E3DD": {
            "name": "NETWORK_BUY_HEALTHCARE",
            "params": [
                { "name": "cost", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD9B067E55253E3DD",
            "ns": "MONEY",
            "jhash": "0x832150E5",
            "manualHash": true
        },
        "0x81AA4610E3FD3A69": {
            "name": "NETWORK_BUY_HELI_STRIKE",
            "params": [
                { "name": "cost", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 = 0 (always)  \np2 = 1 (always)  \n```",
            "examples": [],
            "hash": "0x81AA4610E3FD3A69",
            "ns": "MONEY",
            "jhash": "0x047547D4",
            "manualHash": true
        },
        "0x75AF80E61248EEBD": {
            "name": "NETWORK_BUY_SMOKES",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x75AF80E61248EEBD",
            "ns": "MONEY",
            "jhash": "0xC0AB03EB",
            "manualHash": true
        },
        "0x763B4BD305338F19": {
            "name": "NETWORK_BUY_AIRSTRIKE",
            "params": [
                { "name": "cost", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 = 0 (always)  \np2 = 1 (always)  \n```",
            "examples": [],
            "hash": "0x763B4BD305338F19",
            "ns": "MONEY",
            "jhash": "0x40470683",
            "manualHash": true
        },
        "0xF0077C797F66A355": {
            "name": "NETWORK_BUY_ITEM",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "item", "type": "Hash" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "BOOL" },
                { "name": "item_name", "type": "char*" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF0077C797F66A355",
            "ns": "MONEY",
            "jhash": "0xA07B6368",
            "manualHash": true
        },
        "0x1C2473301B1C66BA": {
            "name": "NETWORK_CAN_SHARE_JOB_CASH",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1C2473301B1C66BA",
            "ns": "MONEY",
            "aliases": ["0x1C2473301B1C66BA"],
            "jhash": "0xA27B9FE8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A7B3952DD64D2B5": {
            "name": "NETWORK_BUY_FAIRGROUND_RIDE",
            "params": [
                { "name": "amountSpent", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThe first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.  \nThe last 3 parameters are,   \n2,0,1 in the am_ferriswheel.c  \n1,0,1 in the am_rollercoaster.c  \n```",
            "examples": [],
            "hash": "0x8A7B3952DD64D2B5",
            "ns": "MONEY",
            "aliases": ["0x8A7B3952DD64D2B5"],
            "jhash": "0xD9622D64",
            "manualHash": true
        },
        "0xD987F2489969668C": {
            "name": "NETWORK_BUY_LOTTERY_TICKET",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xD987F2489969668C",
            "ns": "MONEY",
            "jhash": "0xF64DF4CF",
            "manualHash": true
        },
        "0x7303E27CC6532080": {
            "name": "_NETWORK_CAN_SPEND_MONEY_2",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "Any*" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nNETWORK_CAN_R??? or NETWORK_CAN_S???  \n```\n\n```\nNativeDB Added Parameter 7: Any p6\n```",
            "examples": [],
            "hash": "0x7303E27CC6532080",
            "ns": "MONEY",
            "aliases": ["0x7303E27CC6532080"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC62DD18375C99130": {
            "name": "NETWORK_CAN_BUY_LOTTERY_TICKET",
            "params": [{ "name": "cost", "type": "int" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xC62DD18375C99130",
            "ns": "MONEY",
            "jhash": "0x334B9364",
            "manualHash": true
        },
        "0x3A54E33660DED67F": {
            "name": "NETWORK_CAN_BET",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3A54E33660DED67F",
            "ns": "MONEY",
            "aliases": ["0x3A54E33660DED67F"],
            "jhash": "0xE3802533",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x158C16F5E4CF41F8": {
            "name": "_NETWORK_CASINO_CAN_USE_GAMBLING_TYPE",
            "params": [{ "name": "hash", "type": "Hash" }],
            "results": "BOOL",
            "description": "GTAO_CASINO_HOUSE\nGTAO_CASINO_INSIDETRACK\nGTAO_CASINO_LUCKYWHEEL\nGTAO_CASINO_BLACKJACK\nGTAO_CASINO_ROULETTE\nGTAO_CASINO_SLOTS\nGTAO_CASINO_PURCHASE_CHIPS\nNETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x158C16F5E4CF41F8",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x650A08A280870AF6": {
            "name": "NETWORK_BUY_PROPERTY",
            "params": [
                {
                    "name": "propertyCost",
                    "type": "int",
                    "annotations": { "cs_type": "float" }
                },
                { "name": "propertyName", "type": "Hash" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x650A08A280870AF6",
            "ns": "MONEY",
            "jhash": "0x7D479AAB",
            "manualHash": true
        },
        "0xA921DED15FDF28F5": {
            "name": "NETWORK_CLEAR_CHARACTER_WALLET",
            "params": [{ "name": "characterSlot", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA921DED15FDF28F5",
            "ns": "MONEY",
            "aliases": ["0xA921DED15FDF28F5"],
            "jhash": "0x19F0C471",
            "manualHash": true
        },
        "0x5D17BE59D2123284": {
            "name": "NETWORK_CAN_RECEIVE_PLAYER_CASH",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5D17BE59D2123284",
            "ns": "MONEY",
            "jhash": "0x41F5F10E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8968D4D8C6C40C11": {
            "name": "_NETWORK_CASINO_CAN_PURCHASE_CHIPS_WITH_PVC_2",
            "params": [],
            "results": "BOOL",
            "description": "Same as 0x394DCDB9E836B7A9.\nNETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x8968D4D8C6C40C11",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xAB3CAA6B422164DA": {
            "name": "NETWORK_CAN_SPEND_MONEY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 6: Any p5\n```",
            "examples": [],
            "hash": "0xAB3CAA6B422164DA",
            "ns": "MONEY",
            "aliases": ["0xAB3CAA6B422164DA"],
            "jhash": "0x5AA379D9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x394DCDB9E836B7A9": {
            "name": "_NETWORK_CASINO_CAN_PURCHASE_CHIPS_WITH_PVC",
            "params": [],
            "results": "BOOL",
            "description": "Same as 0x8968D4D8C6C40C11.\nNETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x394DCDB9E836B7A9",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xED44897CB336F480": {
            "name": "_NETWORK_CASINO_SELL_CHIPS",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "BOOL",
            "description": "NETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xED44897CB336F480",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xF62F6D9528358FE4": {
            "name": "_NETWORK_CASINO_CAN_GAMBLE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "NETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xF62F6D9528358FE4",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x08B0CA7A6AB3AC32": {
            "name": "_NETWORK_EARN_BOSS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x08B0CA7A6AB3AC32",
            "ns": "MONEY",
            "aliases": ["0x08B0CA7A6AB3AC32"],
            "manualHash": true
        },
        "0xF6B170F9A02E9E87": {
            "name": "_NETWORK_EARN_BOUNTY_HUNTER_REWARD",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xF6B170F9A02E9E87",
            "ns": "MONEY",
            "aliases": ["0xF6B170F9A02E9E87"],
            "manualHash": true
        },
        "0x05A50AF38947EB8D": {
            "name": "NETWORK_DELETE_CHARACTER",
            "params": [
                { "name": "characterSlot", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNote the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);  \n```",
            "examples": [],
            "hash": "0x05A50AF38947EB8D",
            "ns": "MONEY",
            "jhash": "0xA9F7E9C3",
            "manualHash": true
        },
        "0x3BD101471C7F9EEC": {
            "name": "_NETWORK_CASINO_PURCHASE_CHIPS",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "BOOL",
            "description": "NETWORK_C\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x3BD101471C7F9EEC",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x5C9B198AF5A54FA6": {
            "name": "_NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x5C9B198AF5A54FA6",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x0CB1BE0633C024A8": {
            "name": "_NETWORK_EARN_BOSS_AGENCY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0CB1BE0633C024A8",
            "ns": "MONEY",
            "aliases": ["0x0CB1BE0633C024A8"],
            "manualHash": true
        },
        "0x18B7AE224B087E26": {
            "name": "_NETWORK_DEDUCT_CASH",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "char*" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x18B7AE224B087E26",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x515B4A22E4D3C6D7": {
            "name": "NETWORK_EARN_FROM_AI_TARGET_KILL",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nDSPORT  \n```",
            "examples": [],
            "hash": "0x515B4A22E4D3C6D7",
            "ns": "MONEY",
            "aliases": ["0x515B4A22E4D3C6D7"],
            "jhash": "0x866004A8",
            "manualHash": true
        },
        "0xFB6DB092FBAE29E6": {
            "name": "NETWORK_EARN_FROM_AMBIENT_JOB",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nExample for p1: \"AM_DISTRACT_COPS\"  \n```",
            "examples": [],
            "hash": "0xFB6DB092FBAE29E6",
            "ns": "MONEY",
            "aliases": ["0xFB6DB092FBAE29E6", "_NETWORK_EARN_FROM_AMBIENT_JOB"],
            "jhash": "0xA14CC95D",
            "manualHash": true
        },
        "0x3EC7471E6909798A": {
            "name": "_NETWORK_EARN_CASINO_HEIST_BONUS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x3EC7471E6909798A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE08256F972C7BB2C": {
            "name": "_NETWORK_EARN_FROM_ARENA_SKILL_LEVEL_PROGRESSION",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xE08256F972C7BB2C",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xF514621E8EA463D0": {
            "name": "_NETWORK_EARN_FROM_ARMOUR_TRUCK",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nFor the money bags that drop a max of $40,000. Often called 40k bags.\nMost likely NETWORK_EARN_FROM_ROB***\n```",
            "examples": [],
            "hash": "0xF514621E8EA463D0",
            "ns": "MONEY",
            "aliases": ["0xF514621E8EA463D0"],
            "jhash": "0x30B3EC0A",
            "manualHash": true
        },
        "0x72E7C7B9615FA3C3": {
            "name": "_NETWORK_EARN_CASINO_HEIST",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x72E7C7B9615FA3C3",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xFA700D8A9905F78A": {
            "name": "_NETWORK_EARN_FROM_ASSASSINATE_TARGET_KILLED",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xFA700D8A9905F78A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x0F99F70C61F14619": {
            "name": "_NETWORK_EARN_FROM_ARENA_CAREER_PROGRESSION",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x0F99F70C61F14619",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x5E7AE8AABE8B7C0D": {
            "name": "_NETWORK_EARN_FROM_ASSASSINATE_TARGET_KILLED_2",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x5E7AE8AABE8B7C0D",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xC66D1CF99ED7FE25": {
            "name": "_NETWORK_EARN_FROM_AUTOSHOP_INCOME",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xC66D1CF99ED7FE25",
            "ns": "MONEY",
            "aliases": ["0xC66D1CF99ED7FE25"],
            "manualHash": true
        },
        "0xFFFBA1B1F7C0B6F4": {
            "name": "_NETWORK_EARN_FMBB_WAGE_BONUS",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xFFFBA1B1F7C0B6F4",
            "ns": "MONEY",
            "aliases": ["0xFFFBA1B1F7C0B6F4"],
            "manualHash": true
        },
        "0x631F1CB8FB4130AA": {
            "name": "_NETWORK_EARN_FROM_ARENA_WAR",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x631F1CB8FB4130AA",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xFDD8D2440DAF1590": {
            "name": "_NETWORK_EARN_FROM_BB_EVENT_BONUS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xFDD8D2440DAF1590",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x61326EE6DF15B0CA": {
            "name": "NETWORK_EARN_FROM_BEND_JOB",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "heistHash", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x61326EE6DF15B0CA",
            "ns": "MONEY",
            "aliases": ["0x61326EE6DF15B0CA", "NETWORK_EARN_FROM_MISSION_H"],
            "jhash": "0xBB293400",
            "manualHash": true
        },
        "0xA82959062361B259": {
            "name": "_NETWORK_EARN_FROM_BB_EVENT_CARGO",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xA82959062361B259",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x36A7FD5A7194B03E": {
            "name": "_NETWORK_EARN_FROM_AUTOSHOP_BUSINESS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x36A7FD5A7194B03E",
            "ns": "MONEY",
            "aliases": ["0x36A7FD5A7194B03E"],
            "manualHash": true
        },
        "0x2C5809EB9DF57257": {
            "name": "_NETWORK_EARN_FROM_BIKE_SHOP_BUSINESS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x2C5809EB9DF57257",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x71BEC32FA466E105": {
            "name": "_NETWORK_EARN_FROM_BIKER_INCOME",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x71BEC32FA466E105",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x827A5BA1A44ACA6D": {
            "name": "NETWORK_EARN_FROM_BETTING",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x827A5BA1A44ACA6D",
            "ns": "MONEY",
            "jhash": "0xA0F7F07C",
            "manualHash": true
        },
        "0x42FCE14F50F27291": {
            "name": "_NETWORK_EARN_FROM_BUSINESS_BATTLE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x42FCE14F50F27291",
            "ns": "MONEY",
            "aliases": ["0x42FCE14F50F27291"],
            "manualHash": true
        },
        "0x131BB5DA15453ACF": {
            "name": "NETWORK_EARN_FROM_BOUNTY",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "networkHandle", "type": "int*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x131BB5DA15453ACF",
            "ns": "MONEY",
            "jhash": "0x127F2DAE",
            "manualHash": true
        },
        "0x0B39CF0D53F1C883": {
            "name": "_NETWORK_EARN_FROM_BUSINESS_HUB_SELL",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x0B39CF0D53F1C883",
            "ns": "MONEY",
            "aliases": ["0x0B39CF0D53F1C883"],
            "manualHash": true
        },
        "0x8586789730B10CAF": {
            "name": "_NETWORK_EARN_FROM_BUSINESS_PRODUCT",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8586789730B10CAF",
            "ns": "MONEY",
            "aliases": ["0x8586789730B10CAF"],
            "manualHash": true
        },
        "0xBC6227792A188E2E": {
            "name": "_NETWORK_EARN_FROM_CARCLUB_MEMBERSHIP",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xBC6227792A188E2E",
            "ns": "MONEY",
            "aliases": ["0xBC6227792A188E2E"],
            "manualHash": true
        },
        "0x59498BC8B1C8B15C": {
            "name": "_NETWORK_EARN_FROM_BUSINESS_HUB_SOURCE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x59498BC8B1C8B15C",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xAC95ED552157E092": {
            "name": "_NETWORK_EARN_FROM_CASINO_STORY_MISSION_REWARD",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xAC95ED552157E092",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x973A9781A34F8DEB": {
            "name": "_NETWORK_EARN_FROM_CASINO_AWARD",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "hash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x973A9781A34F8DEB",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xEFE9C9A1651B81E6": {
            "name": "_NETWORK_EARN_FROM_CASHING_OUT",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xEFE9C9A1651B81E6",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x09E8F18641BE2575": {
            "name": "_NETWORK_EARN_FROM_CASINO_MISSION_PARTICIPATION",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x09E8F18641BE2575",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x5517F90043466049": {
            "name": "_NETWORK_EARN_FROM_COLLECTABLES_ACTION_FIGURES",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x5517F90043466049",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xA75EAC69F59E96E7": {
            "name": "_NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xA75EAC69F59E96E7",
            "ns": "MONEY",
            "aliases": ["0xA75EAC69F59E96E7"],
            "manualHash": true
        },
        "0x84FF63BD4966F33D": {
            "name": "_NETWORK_EARN_FROM_COLLECTION_ITEM",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x84FF63BD4966F33D",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x566FD402B25787DE": {
            "name": "_NETWORK_EARN_FROM_CASINO_MISSION_REWARD",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x566FD402B25787DE",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x83AD64F53F4E9483": {
            "name": "_NETWORK_EARN_FROM_COMPLETE_COLLECTION",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x83AD64F53F4E9483",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x2B171E6B2F64D8DF": {
            "name": "NETWORK_EARN_FROM_CHALLENGE_WIN",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B171E6B2F64D8DF",
            "ns": "MONEY",
            "aliases": ["0x2B171E6B2F64D8DF"],
            "jhash": "0x2BEFB6C4",
            "manualHash": true
        },
        "0xB1CC1B9EC3007A2A": {
            "name": "NETWORK_EARN_FROM_CRATE_DROP",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB1CC1B9EC3007A2A",
            "ns": "MONEY",
            "aliases": ["0xB1CC1B9EC3007A2A"],
            "jhash": "0xEAF04923",
            "manualHash": true
        },
        "0x6EA318C91C1A8786": {
            "name": "NETWORK_EARN_FROM_DAILY_OBJECTIVES",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6EA318C91C1A8786",
            "ns": "MONEY",
            "aliases": [
                "0x6EA318C91C1A8786",
                "_NETWORK_EARN_FROM_DAILY_OBJECTIVE"
            ],
            "jhash": "0xAB6BD72F",
            "manualHash": true
        },
        "0xECA658CE2A4E5A72": {
            "name": "_NETWORK_EARN_FROM_CONTRABAND",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xECA658CE2A4E5A72",
            "ns": "MONEY",
            "aliases": ["0xECA658CE2A4E5A72"],
            "manualHash": true
        },
        "0xA03D4ACE0A3284CE": {
            "name": "_NETWORK_EARN_FROM_GANG_PICKUP",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA03D4ACE0A3284CE",
            "ns": "MONEY",
            "aliases": ["0xA03D4ACE0A3284CE"],
            "jhash": "0x33C20BC4",
            "manualHash": true
        },
        "0x5128DF14A5BB86FC": {
            "name": "_NETWORK_EARN_FROM_DAILY_OBJECTIVE_EVENT",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x5128DF14A5BB86FC",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x84C0116D012E8FC2": {
            "name": "_NETWORK_EARN_FROM_DESTROYING_CONTRABAND",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x84C0116D012E8FC2",
            "ns": "MONEY",
            "aliases": ["0x84C0116D012E8FC2"],
            "manualHash": true
        },
        "0xA9160796D47A2CF8": {
            "name": "_NETWORK_EARN_FROM_GANGOPS_JOBS_SETUP",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "unk", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xA9160796D47A2CF8",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xFA009A62990671D4": {
            "name": "_NETWORK_EARN_FROM_CRIMINAL_MASTERMIND_BONUS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xFA009A62990671D4",
            "ns": "MONEY",
            "aliases": ["0xD20D79671A598594"],
            "manualHash": true
        },
        "0x128A747F4A230952": {
            "name": "_NETWORK_EARN_FROM_DOOMSDAY_FINALE_BONUS",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "vehicleHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x128A747F4A230952",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xCAC672087B4A24AB": {
            "name": "_NETWORK_EARN_FROM_DAR_CHALLENGE",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xCAC672087B4A24AB",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xC5156361F26E2212": {
            "name": "_NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xC5156361F26E2212",
            "ns": "MONEY",
            "aliases": ["0xC5156361F26E2212"],
            "manualHash": true
        },
        "0x2597A0D4A4FC2C77": {
            "name": "_NETWORK_EARN_FROM_GANGOPS_ELITE",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "unk", "type": "char*" },
                { "name": "actIndex", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x2597A0D4A4FC2C77",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x1C121FC9545E0D52": {
            "name": "_NETWORK_EARN_FROM_GANGOPS_JOBS_FINALE",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "unk", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x1C121FC9545E0D52",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x1FDA0AA679C9919B": {
            "name": "_NETWORK_EARN_FROM_FMBB_BOSS_WORK",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x1FDA0AA679C9919B",
            "ns": "MONEY",
            "aliases": ["0x1FDA0AA679C9919B"],
            "manualHash": true
        },
        "0xA9A31475F530DFDA": {
            "name": "_NETWORK_EARN_FROM_GANGOPS_AWARDS",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "unk", "type": "char*" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xA9A31475F530DFDA",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xF92A014A634442D6": {
            "name": "NETWORK_EARN_FROM_IMPORT_EXPORT",
            "params": [
                { "name": "amount", "type": "int" },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF92A014A634442D6",
            "ns": "MONEY",
            "jhash": "0xF11FC458",
            "manualHash": true
        },
        "0x2DCB19ABAB0380A8": {
            "name": "_NETWORK_EARN_FROM_GANGOPS_WAGES",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x2DCB19ABAB0380A8",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xED26584F6BDCBBFD": {
            "name": "_NETWORK_EARN_FROM_GANGOPS_JOBS_PREP_PARTICIPATION",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xED26584F6BDCBBFD",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x15BB2A5C757EB91F": {
            "name": "_NETWORK_EARN_FROM_GANGOPS_WAGES_BONUS",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x15BB2A5C757EB91F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x4337511FA8221D36": {
            "name": "NETWORK_EARN_FROM_NOT_BADSPORT",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4337511FA8221D36",
            "ns": "MONEY",
            "aliases": ["0x4337511FA8221D36"],
            "jhash": "0xCC068380",
            "manualHash": true
        },
        "0x45B8154E077D9E4D": {
            "name": "NETWORK_EARN_FROM_HOLDUPS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x45B8154E077D9E4D",
            "ns": "MONEY",
            "jhash": "0xE6B90E9C",
            "manualHash": true
        },
        "0x3F4D00167E41E0AD": {
            "name": "NETWORK_EARN_FROM_PERSONAL_VEHICLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3F4D00167E41E0AD",
            "ns": "MONEY",
            "aliases": ["0x3F4D00167E41E0AD"],
            "jhash": "0x96B8BEE8",
            "manualHash": true
        },
        "0x6816FB4416760775": {
            "name": "NETWORK_EARN_FROM_JOB_BONUS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x6816FB4416760775",
            "ns": "MONEY",
            "aliases": ["0x6816FB4416760775", "_NETWORK_EARN_FROM_JOB_BONUS"],
            "jhash": "0xBEE23713",
            "manualHash": true
        },
        "0xE8815FE993896AD3": {
            "name": "_NETWORK_EARN_FROM_HACKER_TRUCK_MISSION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "amount", "type": "int" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xE8815FE993896AD3",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x0E1E2FF3F4EC11AA": {
            "name": "_NETWORK_EARN_FROM_SELL_BASE",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "baseNameHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x0E1E2FF3F4EC11AA",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB2CC4836834E8A98": {
            "name": "NETWORK_EARN_FROM_JOB",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB2CC4836834E8A98",
            "ns": "MONEY",
            "jhash": "0x0B6997FC",
            "manualHash": true
        },
        "0xED1517D3AF17C698": {
            "name": "NETWORK_EARN_FROM_PICKUP",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED1517D3AF17C698",
            "ns": "MONEY",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x70A0ED62",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9251B6ABF2D0A5B4": {
            "name": "_NETWORK_EARN_FROM_SELL_BUNKER",
            "params": [
                { "name": "amount", "type": "int" },
                {
                    "name": "bunkerHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9251B6ABF2D0A5B4",
            "ns": "MONEY",
            "aliases": ["0x9251B6ABF2D0A5B4"],
            "manualHash": true
        },
        "0x849648349D77F5C5": {
            "name": "NETWORK_EARN_FROM_PROPERTY",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "propertyName", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x849648349D77F5C5",
            "ns": "MONEY",
            "jhash": "0x9BE4F7E1",
            "manualHash": true
        },
        "0xDEBBF584665411D0": {
            "name": "_NETWORK_EARN_FROM_JOB_X2",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xDEBBF584665411D0",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x45087AE480B233AC": {
            "name": "_NETWORK_EARN_FROM_SIGHTSEEING",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x45087AE480B233AC",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x02CE1D6AC0FC73EA": {
            "name": "NETWORK_EARN_FROM_ROCKSTAR",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x02CE1D6AC0FC73EA",
            "ns": "MONEY",
            "jhash": "0x5A3733CC",
            "manualHash": true
        },
        "0xC8407624CEF2354B": {
            "name": "_NETWORK_EARN_FROM_PREMIUM_JOB",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC8407624CEF2354B",
            "ns": "MONEY",
            "aliases": ["0xC8407624CEF2354B"],
            "manualHash": true
        },
        "0xDFF49EE984E7AAE8": {
            "name": "_NETWORK_EARN_FROM_RC_TIME_TRIAL",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xDFF49EE984E7AAE8",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB846F547D3792DF6": {
            "name": "_NETWORK_EARN_FROM_TUNER_AWARD",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xB846F547D3792DF6",
            "ns": "MONEY",
            "aliases": ["0xB846F547D3792DF6"],
            "manualHash": true
        },
        "0xDEE612F2D71B0308": {
            "name": "_NETWORK_EARN_FROM_SMUGGLING",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xDEE612F2D71B0308",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x676C48776CACBB5A": {
            "name": "_NETWORK_EARN_FROM_SPIN_THE_WHEEL_CASH",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x676C48776CACBB5A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xC10322A8D3E061EE": {
            "name": "_NETWORK_EARN_FROM_UPGRADE_AUTOSHOP_LOCATION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xC10322A8D3E061EE",
            "ns": "MONEY",
            "aliases": ["0xC10322A8D3E061EE"],
            "manualHash": true
        },
        "0xB539BD8A4C1EECF8": {
            "name": "NETWORK_EARN_FROM_VEHICLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB539BD8A4C1EECF8",
            "ns": "MONEY",
            "jhash": "0xF803589D",
            "manualHash": true
        },
        "0x7A5349B773584675": {
            "name": "_NETWORK_EARN_FROM_RDR_BONUS",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x7A5349B773584675",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x0819DB99FD2FBBD8": {
            "name": "_NETWORK_EARN_FROM_TIME_TRIAL_WIN",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x0819DB99FD2FBBD8",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x8BCB27A057DF7B7F": {
            "name": "_NETWORK_EARN_FROM_SELLING_VEHICLE",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\nNativeDB Added Parameter 3: Any p2\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x8BCB27A057DF7B7F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xEDEAD9A91EC768B3": {
            "name": "_NETWORK_EARN_FROM_VEHICLE_EXPORT",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEDEAD9A91EC768B3",
            "ns": "MONEY",
            "aliases": ["0xEDEAD9A91EC768B3"],
            "manualHash": true
        },
        "0xBCB266247193AC61": {
            "name": "_NETWORK_EARN_FROM_TUNER_FINALE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xBCB266247193AC61",
            "ns": "MONEY",
            "aliases": ["0xBCB266247193AC61"],
            "manualHash": true
        },
        "0x5B669CF2299A271F": {
            "name": "_NETWORK_EARN_FROM_TARGET_REFUND",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x5B669CF2299A271F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xFE65AFE7308E32B2": {
            "name": "_NETWORK_EARN_FROM_VEHICLE_AUTOSHOP_BONUS",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xFE65AFE7308E32B2",
            "ns": "MONEY",
            "aliases": ["0xFE65AFE7308E32B2"],
            "manualHash": true
        },
        "0x35F8DA0E8A31EF1B": {
            "name": "_NETWORK_EARN_FROM_WAGE_PAYMENT",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x35F8DA0E8A31EF1B",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xCDA1C62BE2777802": {
            "name": "_NETWORK_EARN_GOON",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCDA1C62BE2777802",
            "ns": "MONEY",
            "aliases": ["0xCDA1C62BE2777802"],
            "manualHash": true
        },
        "0x3E4ADAFF1830F146": {
            "name": "_NETWORK_EARN_FROM_WAREHOUSE",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 1: int amount\nNativeDB Added Parameter 2: int id\n```",
            "examples": [],
            "hash": "0x3E4ADAFF1830F146",
            "ns": "MONEY",
            "aliases": ["0x3E4ADAFF1830F146"],
            "manualHash": true
        },
        "0x533073E8A596008C": {
            "name": "_NETWORK_EARN_FROM_VEHICLE_AUTOSHOP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x533073E8A596008C",
            "ns": "MONEY",
            "aliases": ["0x533073E8A596008C"],
            "manualHash": true
        },
        "0x5D1E75F91C07DEE5": {
            "name": "NETWORK_GET_EVC_BALANCE",
            "params": [],
            "results": "int",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x5D1E75F91C07DEE5",
            "ns": "MONEY",
            "jhash": "0xF1EDB7F4",
            "manualHash": true
        },
        "0xD21D111C46BA9F15": {
            "name": "_NETWORK_EARN_ISLAND_HEIST",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xD21D111C46BA9F15",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x9D4FDBB035229669": {
            "name": "_NETWORK_EARN_JOB_BONUS_HEIST_AWARD",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x9D4FDBB035229669",
            "ns": "MONEY",
            "aliases": ["0x9D4FDBB035229669"],
            "manualHash": true
        },
        "0x005ACA7100BD101D": {
            "name": "_NETWORK_EARN_FROM_WAGE_PAYMENT_BONUS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x005ACA7100BD101D",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x700AF71AE615E6DD": {
            "name": "NETWORK_GET_STRING_BANK_WALLET_BALANCE",
            "params": [],
            "results": "char*",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x700AF71AE615E6DD",
            "ns": "MONEY",
            "jhash": "0x7D4FD28C",
            "manualHash": true
        },
        "0xF9B10B529DCFB33B": {
            "name": "NETWORK_GET_STRING_WALLET_BALANCE",
            "params": [{ "name": "characterSlot", "type": "int" }],
            "results": "char*",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xF9B10B529DCFB33B",
            "ns": "MONEY",
            "jhash": "0xC1A11435",
            "manualHash": true
        },
        "0x13A8DE2FD77D04F3": {
            "name": "NETWORK_GET_PVC_TRANSFER_BALANCE",
            "params": [],
            "results": "int",
            "description": "```\nSame as 0xEA560AC9EEB1E19B.\n```\n\n```\nSame as 0xEA560AC9EEB1E19B.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x13A8DE2FD77D04F3",
            "ns": "MONEY",
            "aliases": ["_NETWORK_GET_REMAINING_VC_DAILY_TRANSFERS"],
            "jhash": "0xC670C814",
            "manualHash": true
        },
        "0xFB2456B2040A6A67": {
            "name": "_NETWORK_GET_IS_HIGH_EARNER",
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xFB2456B2040A6A67",
            "ns": "MONEY",
            "jhash": "0x63F093A6",
            "manualHash": true
        },
        "0xA31FD6A0865B6D14": {
            "name": "_NETWORK_GET_VC_BANK_BALANCE_IS_NOT_LESS_THAN",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "BOOL",
            "description": "```\nReturns true if bank balance >= amount.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xA31FD6A0865B6D14",
            "ns": "MONEY",
            "jhash": "0xABED6020",
            "manualHash": true
        },
        "0x11B0A20C493F7E36": {
            "name": "_NETWORK_EARN_JOB_BONUS_FIRST_TIME_BONUS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x11B0A20C493F7E36",
            "ns": "MONEY",
            "aliases": ["0x11B0A20C493F7E36"],
            "manualHash": true
        },
        "0xA6FA3979BED01B81": {
            "name": "NETWORK_GET_STRING_BANK_BALANCE",
            "params": [],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xA6FA3979BED01B81",
            "ns": "MONEY",
            "aliases": [
                "0xA6FA3979BED01B81",
                "_NETWORK_GET_BANK_BALANCE_STRING"
            ],
            "jhash": "0xAA7EA3BD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4F54F3B6C202FB4E": {
            "name": "NETWORK_GET_PVC_BALANCE",
            "params": [],
            "results": "int",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x4F54F3B6C202FB4E",
            "ns": "MONEY",
            "jhash": "0x56485B56",
            "manualHash": true
        },
        "0xEA560AC9EEB1E19B": {
            "name": "NETWORK_GET_REMAINING_TRANSFER_BALANCE",
            "params": [],
            "results": "int",
            "description": "```\nSame as 0x13A8DE2FD77D04F3.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xEA560AC9EEB1E19B",
            "ns": "MONEY",
            "aliases": ["_NETWORK_GET_REMAINING_VC_DAILY_TRANSFERS_2"],
            "jhash": "0xA9021211",
            "manualHash": true
        },
        "0x76EF28DA05EA395A": {
            "name": "NETWORK_GET_VC_BANK_BALANCE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x76EF28DA05EA395A",
            "ns": "MONEY",
            "aliases": ["0x76EF28DA05EA395A"],
            "jhash": "0x16184FB5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5CBAD97E059E1B94": {
            "name": "NETWORK_GET_VC_BALANCE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5CBAD97E059E1B94",
            "ns": "MONEY",
            "aliases": ["0x5CBAD97E059E1B94"],
            "jhash": "0xADF8F882",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC18531D7019A535": {
            "name": "_NETWORK_GET_VC_BANK_WALLET_BALANCE_IS_NOT_LESS_THAN",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "characterSlot", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nReturns true if bank balance + wallet balance >= amount.\n```",
            "examples": [],
            "hash": "0xDC18531D7019A535",
            "ns": "MONEY",
            "aliases": ["0xDC18531D7019A535"],
            "jhash": "0xCA23FD25",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xED5AB8860415BABA": {
            "name": "_NETWORK_GET_VC_WALLET_BALANCE_IS_NOT_LESS_THAN",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "characterSlot", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nReturns true if wallet balance >= amount.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xED5AB8860415BABA",
            "ns": "MONEY",
            "jhash": "0x0EA2188C",
            "manualHash": true
        },
        "0xA40F9C2623F6A8B5": {
            "name": "NETWORK_GET_VC_WALLET_BALANCE",
            "params": [{ "name": "characterSlot", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA40F9C2623F6A8B5",
            "ns": "MONEY",
            "aliases": ["0xA40F9C2623F6A8B5"],
            "jhash": "0x4F5B781C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3DA5ECD1A56CBA6D": {
            "name": "NETWORK_INITIALIZE_CASH",
            "params": [
                { "name": "wallet", "type": "int" },
                { "name": "bank", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3DA5ECD1A56CBA6D",
            "ns": "MONEY",
            "aliases": ["0x3DA5ECD1A56CBA6D"],
            "jhash": "0x66DA9935",
            "manualHash": true
        },
        "0x81404F3DC124FE5B": {
            "name": "NETWORK_MONEY_CAN_BET",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x81404F3DC124FE5B",
            "ns": "MONEY",
            "aliases": ["0x81404F3DC124FE5B"],
            "jhash": "0x8474E6F0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFB18DF9CB95E0105": {
            "name": "NETWORK_GIVE_PLAYER_JOBSHARE_CASH",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "networkHandle", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFB18DF9CB95E0105",
            "ns": "MONEY",
            "jhash": "0xC6047FDB",
            "manualHash": true
        },
        "0x5FD5ED82CBBE9989": {
            "name": "NETWORK_PAY_EMPLOYEE_WAGE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5FD5ED82CBBE9989",
            "ns": "MONEY",
            "aliases": ["0x5FD5ED82CBBE9989"],
            "jhash": "0xBE70849B",
            "manualHash": true
        },
        "0x56A3B51944C50598": {
            "name": "NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH",
            "params": [
                { "name": "value", "type": "int" },
                { "name": "networkHandle", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x56A3B51944C50598",
            "ns": "MONEY",
            "jhash": "0x4ED71C1A",
            "manualHash": true
        },
        "0x821418C727FCACD7": {
            "name": "_NETWORK_MANUAL_DELETE_CHARACTER",
            "params": [{ "name": "characterSlot", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x821418C727FCACD7",
            "ns": "MONEY",
            "aliases": ["0x821418C727FCACD7"],
            "manualHash": true
        },
        "0x9346E14F2AF74D46": {
            "name": "NETWORK_PAY_MATCH_ENTRY_FEE",
            "params": [
                { "name": "amount", "type": "int" },
                {
                    "name": "matchId",
                    "type": "char*",
                    "annotations": { "cs_type": "intPtr" }
                },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9346E14F2AF74D46",
            "ns": "MONEY",
            "aliases": ["0x9346E14F2AF74D46"],
            "jhash": "0x224A3488",
            "manualHash": true
        },
        "0x1B882107C23A9022": {
            "name": "_NETWORK_RIVAL_DELIVERY_COMPLETED",
            "params": [{ "name": "earnedMoney", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x1B882107C23A9022",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xAFE08B35EC0C9EAE": {
            "name": "NETWORK_PAY_UTILITY_BILL",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAFE08B35EC0C9EAE",
            "ns": "MONEY",
            "aliases": ["0xAFE08B35EC0C9EAE"],
            "jhash": "0x451A2644",
            "manualHash": true
        },
        "0xF9C812CD7C46E817": {
            "name": "NETWORK_REFUND_CASH",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "context", "type": "char*" },
                { "name": "reason", "type": "char*" },
                { "name": "unk", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nindex  \n-------  \nSee function sub_1005 in am_boat_taxi.ysc  \ncontext  \n----------  \n\"BACKUP_VAGOS\"  \n\"BACKUP_LOST\"  \n\"BACKUP_FAMILIES\"  \n\"HIRE_MUGGER\"  \n\"HIRE_MERCENARY\"  \n\"BUY_CARDROPOFF\"  \n\"HELI_PICKUP\"  \n\"BOAT_PICKUP\"  \n\"CLEAR_WANTED\"  \n\"HEAD_2_HEAD\"  \n\"CHALLENGE\"  \n\"SHARE_LAST_JOB\"  \n\"DEFAULT\"  \nreason  \n---------  \n\"NOTREACHTARGET\"  \n\"TARGET_ESCAPE\"  \n\"DELIVERY_FAIL\"  \n\"NOT_USED\"  \n\"TEAM_QUIT\"  \n\"SERVER_ERROR\"  \n\"RECEIVE_LJ_L\"  \n\"CHALLENGE_PLAYER_LEFT\"  \n\"DEFAULT\"  \nunk  \n-----  \nUnknown bool value  \n```",
            "examples": [],
            "hash": "0xF9C812CD7C46E817",
            "ns": "MONEY",
            "aliases": ["0xF9C812CD7C46E817"],
            "jhash": "0x07C92F21",
            "manualHash": true
        },
        "0xEAD3D81F2C3A1458": {
            "name": "_NETWORK_SPENT_ARCADE_GAME",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xEAD3D81F2C3A1458",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB162DC95C0A3317B": {
            "name": "NETWORK_SPENT_AMMO_DROP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB162DC95C0A3317B",
            "ns": "MONEY",
            "jhash": "0x4B643076",
            "manualHash": true
        },
        "0x43AA7FAC4E6D6687": {
            "name": "_NETWORK_SPENT_ARCADE_GENERIC",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x43AA7FAC4E6D6687",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x14EAEA58F93B55AF": {
            "name": "_NETWORK_SPENT_ARENA_JOIN_SPECTATOR",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x14EAEA58F93B55AF",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x619496D837EFD920": {
            "name": "_NETWORK_SPENT_ARENA_PREMIUM",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x619496D837EFD920",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x7049BF858601DC0F": {
            "name": "_NETWORK_SPENT_ARENA_SPECTATOR_BOX",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x7049BF858601DC0F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x9BEA350D7C48061B": {
            "name": "_NETWORK_SPENT_AUTOSHOP_MODIFICATIONS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x9BEA350D7C48061B",
            "ns": "MONEY",
            "aliases": ["0x9BEA350D7C48061B"],
            "manualHash": true
        },
        "0xB40F96D6D252839B": {
            "name": "_NETWORK_SPENT_AUTOSHOP_PROPERTY_UTILITY_FEE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xB40F96D6D252839B",
            "ns": "MONEY",
            "aliases": ["0xB40F96D6D252839B"],
            "manualHash": true
        },
        "0x812F5488B1B2A299": {
            "name": "NETWORK_SPENT_ARREST_BAIL",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x812F5488B1B2A299",
            "ns": "MONEY",
            "jhash": "0x5AEE2FC1",
            "manualHash": true
        },
        "0x5D97630A8A0EF123": {
            "name": "_NETWORK_SPENT_BALLISTIC_EQUIPMENT",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5D97630A8A0EF123",
            "ns": "MONEY",
            "aliases": ["0x5D97630A8A0EF123"],
            "manualHash": true
        },
        "0xD7CCCBA28C4ECAF0": {
            "name": "_NETWORK_SPENT_BA_SERVICE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD7CCCBA28C4ECAF0",
            "ns": "MONEY",
            "aliases": ["0xD7CCCBA28C4ECAF0"],
            "manualHash": true
        },
        "0xCA230C9682556CF1": {
            "name": "NETWORK_SPENT_BANK_INTEREST",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xCA230C9682556CF1",
            "ns": "MONEY",
            "jhash": "0xF02E92D7",
            "manualHash": true
        },
        "0x54ABA22FA6371249": {
            "name": "_NETWORK_SPENT_BEACH_PARTY_GENERIC",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x54ABA22FA6371249",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x1C436FD11FFA692F": {
            "name": "NETWORK_SPENT_BETTING",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "int" },
                {
                    "name": "matchId",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1C436FD11FFA692F",
            "ns": "MONEY",
            "jhash": "0xF8A07513",
            "manualHash": true
        },
        "0x524EE43A37232C00": {
            "name": "NETWORK_SPENT_BOAT_PICKUP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x524EE43A37232C00",
            "ns": "MONEY",
            "jhash": "0xB241CABD",
            "manualHash": true
        },
        "0xA6DD8458CE24012C": {
            "name": "NETWORK_SPENT_BULL_SHARK",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA6DD8458CE24012C",
            "ns": "MONEY",
            "jhash": "0xDE7D398C",
            "manualHash": true
        },
        "0xFFBE02CD385356BD": {
            "name": "_NETWORK_SPENT_BOSS",
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: int amount\nNativeDB Added Parameter 2: BOOL p1\nNativeDB Added Parameter 3: BOOL p2\n```",
            "examples": [],
            "hash": "0xFFBE02CD385356BD",
            "ns": "MONEY",
            "aliases": ["0xFFBE02CD385356BD"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x923AEA8E78F8DF0B": {
            "name": "_NETWORK_SPENT_BIKE_SHOP_MODIFY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x923AEA8E78F8DF0B",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x40D5DA9550B7CB46": {
            "name": "_NETWORK_SPENT_BUY_ARENA",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x40D5DA9550B7CB46",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x29B260B84947DFCC": {
            "name": "NETWORK_SPENT_BOUNTY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x29B260B84947DFCC",
            "ns": "MONEY",
            "jhash": "0x3401FC96",
            "manualHash": true
        },
        "0x1BEA0CD93470BB1F": {
            "name": "_NETWORK_SPENT_BOUNTY_HUNTER_MISSION",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x1BEA0CD93470BB1F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x4EA3F425C7744D21": {
            "name": "_NETWORK_SPENT_BUY_BASE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x4EA3F425C7744D21",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x0035BB914316F1E3": {
            "name": "_NETWORK_SPENT_BUSINESS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0035BB914316F1E3",
            "ns": "MONEY",
            "aliases": ["0x0035BB914316F1E3"],
            "manualHash": true
        },
        "0xEEB7E5D1FEB20869": {
            "name": "_NETWORK_SPENT_BUY_AUTOSHOP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xEEB7E5D1FEB20869",
            "ns": "MONEY",
            "aliases": ["0xEEB7E5D1FEB20869"],
            "manualHash": true
        },
        "0x12D148D26538D0F9": {
            "name": "_NETWORK_SPENT_BUY_BUNKER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x12D148D26538D0F9",
            "ns": "MONEY",
            "aliases": ["0x12D148D26538D0F9"],
            "manualHash": true
        },
        "0x34A6FC4D06C4DA0F": {
            "name": "_NETWORK_SPENT_BUY_CASINO",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "data", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x34A6FC4D06C4DA0F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x6E176F1B18BC0637": {
            "name": "NETWORK_SPENT_BUY_REVEAL_PLAYERS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6E176F1B18BC0637",
            "ns": "MONEY",
            "jhash": "0x2F7836E2",
            "manualHash": true
        },
        "0x0CCE73BC7A11E885": {
            "name": "_NETWORK_SPENT_BUY_TILTROTOR",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x0CCE73BC7A11E885",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x6D3A430D1A809179": {
            "name": "NETWORK_SPENT_BUY_PASSIVE_MODE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6D3A430D1A809179",
            "ns": "MONEY",
            "jhash": "0x7E97C92C",
            "manualHash": true
        },
        "0xAC272C0AE01B4BD8": {
            "name": "_NETWORK_SPENT_BUY_TRUCK",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAC272C0AE01B4BD8",
            "ns": "MONEY",
            "aliases": ["0xAC272C0AE01B4BD8"],
            "manualHash": true
        },
        "0xACDE7185B374177C": {
            "name": "NETWORK_SPENT_CALL_PLAYER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xACDE7185B374177C",
            "ns": "MONEY",
            "jhash": "0x1A89B5FC",
            "manualHash": true
        },
        "0xA628A745E2275C5D": {
            "name": "NETWORK_SPENT_BUY_OFFTHERADAR",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA628A745E2275C5D",
            "ns": "MONEY",
            "jhash": "0x20DDCF2F",
            "manualHash": true
        },
        "0xD1E46824E6FB92B5": {
            "name": "_NETWORK_SPENT_CARCLUB_TAKEOVER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xD1E46824E6FB92B5",
            "ns": "MONEY",
            "aliases": ["0xD1E46824E6FB92B5"],
            "manualHash": true
        },
        "0x925227803A0EAA1B": {
            "name": "_NETWORK_SPENT_CARCLUB",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x925227803A0EAA1B",
            "ns": "MONEY",
            "aliases": ["0x925227803A0EAA1B"],
            "manualHash": true
        },
        "0xE1B13771A843C4F6": {
            "name": "NETWORK_SPENT_BUY_WANTEDLEVEL",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE1B13771A843C4F6",
            "ns": "MONEY",
            "jhash": "0xE7CB4F95",
            "manualHash": true
        },
        "0xEC03C719DB2F4306": {
            "name": "NETWORK_SPENT_CARWASH",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEC03C719DB2F4306",
            "ns": "MONEY",
            "jhash": "0x8283E028",
            "manualHash": true
        },
        "0x289016EC778D60E0": {
            "name": "NETWORK_SPENT_CASH_DROP",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x289016EC778D60E0",
            "ns": "MONEY",
            "jhash": "0x87BD1D11",
            "manualHash": true
        },
        "0x1464E17207CD36E2": {
            "name": "_NETWORK_SPENT_CARCLUB_MEMBERSHIP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x1464E17207CD36E2",
            "ns": "MONEY",
            "aliases": ["0x1464E17207CD36E2"],
            "manualHash": true
        },
        "0xD30E8392F407C328": {
            "name": "_NETWORK_SPENT_CASINO_HEIST",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xD30E8392F407C328",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x948705F6F9C50824": {
            "name": "_NETWORK_SPENT_CARGO_SOURCING",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x948705F6F9C50824",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xC991C255AA6D90B2": {
            "name": "_NETWORK_SPENT_CASINO_CLUB_GENERIC",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xC991C255AA6D90B2",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x6B38ECB05A63A685": {
            "name": "NETWORK_SPENT_CINEMA",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6B38ECB05A63A685",
            "ns": "MONEY",
            "jhash": "0x1100CAF5",
            "manualHash": true
        },
        "0x88BF9B612B84D3C3": {
            "name": "_NETWORK_SPENT_CASINO_GENERIC",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x88BF9B612B84D3C3",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x487009DD91D93429": {
            "name": "_NETWORK_SPENT_CASINO_HEIST_SKIP_MISSION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x487009DD91D93429",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xFBBE0570EDF39D46": {
            "name": "_NETWORK_SPENT_CASINO_MEMBERSHIP",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xFBBE0570EDF39D46",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x5BBBD92186E1F1C5": {
            "name": "_NETWORK_SPENT_EMPLOY_ASSASSINS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x5BBBD92186E1F1C5",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB9F7A469460E7A4A": {
            "name": "_NETWORK_SPENT_FROM_BANK",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xB9F7A469460E7A4A",
            "ns": "MONEY",
            "aliases": ["0xB9F7A469460E7A4A"],
            "manualHash": true
        },
        "0x771ADB0E7635B7BF": {
            "name": "_NETWORK_SPENT_GANGOPS_CANNON",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x771ADB0E7635B7BF",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xA19EC0786E326E06": {
            "name": "_NETWORK_SPENT_GANGOPS_START_STRAND",
            "params": [
                { "name": "type", "type": "int" },
                { "name": "amount", "type": "int" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xA19EC0786E326E06",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x2CEB0E0BC2A77C05": {
            "name": "_NETWORK_SPENT_GUNRUNNING_CONTACT_SERVICE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x2CEB0E0BC2A77C05",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x6A445B64ED7ABEB5": {
            "name": "NETWORK_SPENT_FROM_ROCKSTAR",
            "params": [
                { "name": "bank", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6A445B64ED7ABEB5",
            "ns": "MONEY",
            "aliases": ["0x6A445B64ED7ABEB5"],
            "jhash": "0x54198922",
            "manualHash": true
        },
        "0x5ECE6FD7B4EC8D6A": {
            "name": "_NETWORK_SPENT_GANGOPS_TRIP_SKIP",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x5ECE6FD7B4EC8D6A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE7B80E2BF9D80BD6": {
            "name": "NETWORK_SPENT_HIRE_MERCENARY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE7B80E2BF9D80BD6",
            "ns": "MONEY",
            "jhash": "0x99CF02C4",
            "manualHash": true
        },
        "0xDA947AE8880D5C18": {
            "name": "_NETWORK_SPENT_GANGOPS_START_MISSION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xDA947AE8880D5C18",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB1F1346FD57685D7": {
            "name": "_NETWORK_SPENT_HANGAR_STAFF_CHARGES",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xB1F1346FD57685D7",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x93AA4165CB67E925": {
            "name": "_NETWORK_SPENT_IM_ABILITY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x93AA4165CB67E925",
            "ns": "MONEY",
            "aliases": ["0x93AA4165CB67E925"],
            "manualHash": true
        },
        "0xB18AC2ECBB15CB6A": {
            "name": "_NETWORK_SPENT_HANGAR_UTILITY_CHARGES",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xB18AC2ECBB15CB6A",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE404BFB981665BF0": {
            "name": "NETWORK_SPENT_HIRE_MUGGER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOnly used once in a script (am_contact_requests)  \np1 = 0  \np2 = 1  \n```",
            "examples": [],
            "hash": "0xE404BFB981665BF0",
            "ns": "MONEY",
            "jhash": "0xE792C4A5",
            "manualHash": true
        },
        "0xD9B86B9872039763": {
            "name": "NETWORK_SPENT_HOLDUPS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD9B86B9872039763",
            "ns": "MONEY",
            "jhash": "0x1B3803B1",
            "manualHash": true
        },
        "0xC1952F3773BA18FE": {
            "name": "_NETWORK_SPENT_IMPORT_EXPORT_REPAIR",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC1952F3773BA18FE",
            "ns": "MONEY",
            "aliases": ["0xC1952F3773BA18FE"],
            "manualHash": true
        },
        "0xEE99784E4467689C": {
            "name": "NETWORK_SPENT_IN_STRIPCLUB",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEE99784E4467689C",
            "ns": "MONEY",
            "aliases": ["0xEE99784E4467689C"],
            "jhash": "0x8957038E",
            "manualHash": true
        },
        "0x28F174A67B8D0C2F": {
            "name": "_NETWORK_SPENT_JOB_SKIP",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "matchId", "type": "char*" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x28F174A67B8D0C2F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x7BF1D73DB2ECA492": {
            "name": "NETWORK_SPENT_HELI_PICKUP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7BF1D73DB2ECA492",
            "ns": "MONEY",
            "jhash": "0x27EEBCAB",
            "manualHash": true
        },
        "0x5BCDE0F640C773D2": {
            "name": "_NETWORK_SPENT_JUKEBOX",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5BCDE0F640C773D2",
            "ns": "MONEY",
            "aliases": ["0x5BCDE0F640C773D2"],
            "manualHash": true
        },
        "0xE7DF4E0545DFB56E": {
            "name": "_NETWORK_SPENT_MOVE_YACHT",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE7DF4E0545DFB56E",
            "ns": "MONEY",
            "aliases": ["0xE7DF4E0545DFB56E"],
            "manualHash": true
        },
        "0xD5BB406F4E04019F": {
            "name": "NETWORK_SPENT_NO_COPS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD5BB406F4E04019F",
            "ns": "MONEY",
            "aliases": ["0xD5BB406F4E04019F"],
            "jhash": "0x2E51C61C",
            "manualHash": true
        },
        "0xE86689E5F82DE429": {
            "name": "_NETWORK_SPENT_ISLAND_HEIST",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xE86689E5F82DE429",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x05F04155A226FBBF": {
            "name": "_NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x05F04155A226FBBF",
            "ns": "MONEY",
            "aliases": ["0x05F04155A226FBBF"],
            "manualHash": true
        },
        "0x876056684281655D": {
            "name": "_NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x876056684281655D",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x08A1B82B91900682": {
            "name": "_NETWORK_SPENT_PAY_GOON",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "amount", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x08A1B82B91900682",
            "ns": "MONEY",
            "aliases": ["0x08A1B82B91900682"],
            "manualHash": true
        },
        "0x0FE8E1FCD2B86B33": {
            "name": "_NETWORK_SPENT_PA_SERVICE_HELI_PICKUP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0FE8E1FCD2B86B33",
            "ns": "MONEY",
            "aliases": ["0x0FE8E1FCD2B86B33"],
            "manualHash": true
        },
        "0xCCB339CC970452DA": {
            "name": "_NETWORK_SPENT_PURCHASE_HANGAR",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xCCB339CC970452DA",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xE5F5A060439C2F5D": {
            "name": "_NETWORK_SPENT_MAKE_IT_RAIN",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xE5F5A060439C2F5D",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xF6C8A544E4CF14FC": {
            "name": "_NETWORK_SPENT_REHIRE_DJ",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xF6C8A544E4CF14FC",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xDD21B016E4289465": {
            "name": "_NETWORK_SPENT_NIGHTCLUB_BAR_DRINK",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xDD21B016E4289465",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xDBC966A01C02BCA7": {
            "name": "_NETWORK_SPENT_PAY_BOSS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDBC966A01C02BCA7",
            "ns": "MONEY",
            "aliases": ["0xDBC966A01C02BCA7"],
            "manualHash": true
        },
        "0x7C99101F7FCE2EE5": {
            "name": "NETWORK_SPENT_PLAYER_HEALTHCARE",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7C99101F7FCE2EE5",
            "ns": "MONEY",
            "aliases": ["0x7C99101F7FCE2EE5"],
            "jhash": "0x3D96A21C",
            "manualHash": true
        },
        "0x9D26502BB97BFE62": {
            "name": "NETWORK_SPENT_REQUEST_HEIST",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9D26502BB97BFE62",
            "ns": "MONEY",
            "aliases": ["0x9D26502BB97BFE62", "_NETWORK_SPENT_REQUEST_HEIST"],
            "jhash": "0xF4287778",
            "manualHash": true
        },
        "0xE8B0B270B6E7C76E": {
            "name": "_NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE8B0B270B6E7C76E",
            "ns": "MONEY",
            "aliases": ["0xE8B0B270B6E7C76E"],
            "manualHash": true
        },
        "0xB21B89501CFAC79E": {
            "name": "NETWORK_SPENT_PROSTITUTES",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB21B89501CFAC79E",
            "ns": "MONEY",
            "jhash": "0x78436D07",
            "manualHash": true
        },
        "0xE284D46FFDB82E36": {
            "name": "_NETWORK_SPENT_RDRHATCHET_BONUS",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xE284D46FFDB82E36",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xB49ECA122467D05F": {
            "name": "_NETWORK_SPENT_PA_SERVICE_DANCER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB49ECA122467D05F",
            "ns": "MONEY",
            "aliases": ["0xB49ECA122467D05F"],
            "manualHash": true
        },
        "0x7E2F4E8F44CAF4E0": {
            "name": "_NETWORK_SPENT_SALES_DISPLAY",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x7E2F4E8F44CAF4E0",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x33981D6804E62F49": {
            "name": "_NETWORK_SPENT_PURCHASE_WAREHOUSE",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "data", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x33981D6804E62F49",
            "ns": "MONEY",
            "aliases": ["0x33981D6804E62F49"],
            "manualHash": true
        },
        "0x9FF28D88C766E3E8": {
            "name": "NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "vehicleModel", "type": "Hash" },
                { "name": "networkHandle", "type": "int*" },
                { "name": "notBankrupt", "type": "BOOL" },
                { "name": "hasTheMoney", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAccording to how I understood this in the freemode script alone,\nThe first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.\nThe second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.\nThe third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, \"Previous_Owner\").\nThe fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.\nThe fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,\nbool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.\n```",
            "examples": [],
            "hash": "0x9FF28D88C766E3E8",
            "ns": "MONEY",
            "jhash": "0x4E665BB2",
            "manualHash": true
        },
        "0x7FE61782AD94CC09": {
            "name": "NETWORK_SPENT_TELESCOPE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7FE61782AD94CC09",
            "ns": "MONEY",
            "jhash": "0xAE7FF044",
            "manualHash": true
        },
        "0xFC4EE00A7B3BFB76": {
            "name": "_NETWORK_SPENT_RENAME_ORGANIZATION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFC4EE00A7B3BFB76",
            "ns": "MONEY",
            "aliases": ["0xFC4EE00A7B3BFB76"],
            "manualHash": true
        },
        "0x4740D62BC1B4EBEA": {
            "name": "_NETWORK_SPENT_UPGRADE_CASINO",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "data", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x4740D62BC1B4EBEA",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x8204DA7934DF3155": {
            "name": "NETWORK_SPENT_REQUEST_JOB",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8204DA7934DF3155",
            "ns": "MONEY",
            "aliases": ["0x8204DA7934DF3155"],
            "jhash": "0xD57A5125",
            "manualHash": true
        },
        "0x6C8BC1488527AAAB": {
            "name": "_NETWORK_SPENT_SUBMARINE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x6C8BC1488527AAAB",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x89049A84065CE68E": {
            "name": "_NETWORK_SPENT_UPGRADE_SUB",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x89049A84065CE68E",
            "ns": "MONEY",
            "aliases": ["0x89049A84065CE68E"],
            "manualHash": true
        },
        "0x17C3A7D31EAE39F9": {
            "name": "NETWORK_SPENT_TAXI",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x17C3A7D31EAE39F9",
            "ns": "MONEY",
            "jhash": "0x1F3DB3E3",
            "manualHash": true
        },
        "0x365E877C61D6988B": {
            "name": "_NETWORK_SPENT_UPGRADE_TRUCK",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x365E877C61D6988B",
            "ns": "MONEY",
            "aliases": ["0x365E877C61D6988B"],
            "manualHash": true
        },
        "0x995A65F15F581359": {
            "name": "NETWORK_SPENT_ROBBED_BY_MUGGER",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x995A65F15F581359",
            "ns": "MONEY",
            "aliases": ["0x995A65F15F581359"],
            "jhash": "0xE6AAA0D5",
            "manualHash": true
        },
        "0x037ABB06825D7AB1": {
            "name": "_NETWORK_SPENT_UPGRADE_ARENA",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x037ABB06825D7AB1",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xDD829AA198FDC46C": {
            "name": "_NETWORK_SPENT_UPGRADE_AUTOSHOP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xDD829AA198FDC46C",
            "ns": "MONEY",
            "aliases": ["0xDD829AA198FDC46C"],
            "manualHash": true
        },
        "0x9A5BD1D0000B339C": {
            "name": "_NETWORK_SPENT_SPIN_THE_WHEEL_PAYMENT",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n\nNativeDB Removed Parameter 4: BOOL p3\n```",
            "examples": [],
            "hash": "0x9A5BD1D0000B339C",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x5182A339A3474510": {
            "name": "_NETWORK_SPENT_VIP_UTILITY_CHARGES",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5182A339A3474510",
            "ns": "MONEY",
            "aliases": ["0x5182A339A3474510"],
            "manualHash": true
        },
        "0x0C82D21A77C22D49": {
            "name": "_NETWORK_SPENT_UPGRADE_BUNKER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0C82D21A77C22D49",
            "ns": "MONEY",
            "aliases": ["0x0C82D21A77C22D49"],
            "manualHash": true
        },
        "0x615EB504B0788DAF": {
            "name": "_NETWORK_SPENT_UPGRADE_HANGAR",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x615EB504B0788DAF",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x3DD3F33A5D55EA6F": {
            "name": "_NETWORK_SPENT_UPGRADE_BASE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x3DD3F33A5D55EA6F",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xA75CCF58A60A5FD1": {
            "name": "_NETWORK_SPENT_VEHICLE_EXPORT_MODS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA75CCF58A60A5FD1",
            "ns": "MONEY",
            "aliases": ["0xA75CCF58A60A5FD1"],
            "manualHash": true
        },
        "0x165E135D6DFA2907": {
            "name": "_NETWORK_SPENT_UPGRADE_TILTROTOR",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x165E135D6DFA2907",
            "ns": "MONEY",
            "manualHash": true
        },
        "0xD99DB210089617FE": {
            "name": "_NETWORK_SPENT_WAGER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "amount", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD99DB210089617FE",
            "ns": "MONEY",
            "aliases": ["0xD99DB210089617FE"],
            "manualHash": true
        },
        "0x02D24A35A9CC3503": {
            "name": "_NETWORK_SPENT_VEHICLE_REQUESTED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x02D24A35A9CC3503",
            "ns": "MONEY",
            "manualHash": true
        },
        "0x20194D48EAEC9A41": {
            "name": "PROCESS_CASH_GIFT",
            "params": [
                { "name": "p0", "type": "int*" },
                { "name": "p1", "type": "int*" },
                { "name": "p2", "type": "char*" }
            ],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x20194D48EAEC9A41",
            "ns": "MONEY",
            "aliases": ["0x20194D48EAEC9A41"],
            "jhash": "0xC5D8B1E9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF70EFA14FE091429": {
            "name": "WITHDRAW_VC",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "int",
            "description": "```\nDoes nothing and always returns 0.\n```",
            "examples": [],
            "hash": "0xF70EFA14FE091429",
            "ns": "MONEY",
            "aliases": ["0xF70EFA14FE091429"],
            "jhash": "0x8B755993",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "OBJECT": {
        "0xDA05194260CDCDF9": {
            "name": "_CLEAR_GARAGE_AREA",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "isNetwork", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDA05194260CDCDF9",
            "ns": "OBJECT",
            "aliases": ["0xDA05194260CDCDF9"],
            "manualHash": true
        },
        "0x190428512B240692": {
            "name": "CLEAR_OBJECTS_INSIDE_GARAGE",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "vehicles", "type": "BOOL" },
                { "name": "peds", "type": "BOOL" },
                { "name": "objects", "type": "BOOL" },
                { "name": "isNetwork", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x190428512B240692",
            "ns": "OBJECT",
            "aliases": ["0x190428512B240692"],
            "jhash": "0xA565E27E",
            "manualHash": true
        },
        "0x85B6C850546FDDE2": {
            "name": "ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x85B6C850546FDDE2",
            "ns": "OBJECT",
            "aliases": ["0x85B6C850546FDDE2"],
            "jhash": "0x4BD59750",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0589B5E791CE9B2B": {
            "name": "CREATE_MONEY_PICKUPS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "value", "type": "int" },
                { "name": "amount", "type": "int" },
                { "name": "model", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nSpawns one or more money pickups.  \nx: The X-component of the world position to spawn the money pickups at.  \ny: The Y-component of the world position to spawn the money pickups at.  \nz: The Z-component of the world position to spawn the money pickups at.  \nvalue: The combined value of the pickups (in dollars).  \namount: The number of pickups to spawn.  \nmodel: The model to use, or 0 for default money model.  \nExample:  \nCREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);  \nSpawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).  \n==============================================  \nMax is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000  \n```",
            "examples": [],
            "hash": "0x0589B5E791CE9B2B",
            "ns": "OBJECT",
            "jhash": "0x36C9A5EA",
            "manualHash": true
        },
        "0xE7E4C198B0185900": {
            "name": "BREAK_OBJECT_FRAGMENT_CHILD",
            "params": [
                { "name": "p0", "type": "Object" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE7E4C198B0185900",
            "ns": "OBJECT",
            "aliases": ["0xE7E4C198B0185900"],
            "jhash": "0x1E82C2AE",
            "manualHash": true
        },
        "0x6F8838D03D1DC226": {
            "name": "ADD_DOOR_TO_SYSTEM",
            "params": [
                {
                    "name": "doorHash",
                    "type": "Hash",
                    "description": "A (unique) door system identifier"
                },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Entity model hash"
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate of the door object"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate of the door object"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate of the door object"
                },
                { "name": "p5", "type": "BOOL" },
                {
                    "name": "scriptDoor",
                    "type": "BOOL",
                    "description": "false; relies upon getNetworkGameScriptHandler."
                },
                {
                    "name": "isLocal",
                    "type": "BOOL",
                    "description": "On true disables the creation `CRequestDoorEvent's` in [DOOR_SYSTEM_SET_DOOR_STATE](#\\_0x6BAB9442830C7F53)."
                }
            ],
            "results": "void",
            "description": "p5 only set to true in single player native scripts. Door hashes normally look like `PROP_[int]_DOOR_[int]` for interior doors and `PROP_BUILDING_[int]_DOOR_[int]` exterior doors but you can just make up your own hash if you want.\n\nIf scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a \"Persists w/o netobj\" state.\n\nA simple \"localized\" door-system (with hundreds/thousands of doors) can be created by setting p5, p6, and p7 to false and using EventHandlers to synchronize the states to: [DOOR_SYSTEM_SET_DOOR_STATE](#\\_0x6BAB9442830C7F53), [DOOR_SYSTEM_SET_OPEN_RATIO](#\\_0xB6E6FBA95C7324AC), [DOOR_SYSTEM_SET_HOLD_OPEN](#\\_0xD9B71952F78A2640), etc.",
            "examples": [],
            "hash": "0x6F8838D03D1DC226",
            "ns": "OBJECT",
            "jhash": "0x9D2D778D",
            "manualHash": true
        },
        "0x673966A0C0FD7171": {
            "name": "CREATE_AMBIENT_PICKUP",
            "params": [
                { "name": "pickupHash", "type": "Hash" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "flags", "type": "int" },
                { "name": "value", "type": "int" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "returnHandle", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "Pickup",
            "description": "Creates an ambient pickup given the hash. Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).",
            "examples": [],
            "hash": "0x673966A0C0FD7171",
            "ns": "OBJECT",
            "jhash": "0x17B99CE7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9C93764223E29C50": {
            "name": "_CREATE_NON_NETWORKED_AMBIENT_PICKUP",
            "params": [
                { "name": "pickupHash", "type": "Any" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "flags", "type": "int" },
                { "name": "value", "type": "int" },
                { "name": "modelHash", "type": "Any" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x9C93764223E29C50",
            "ns": "OBJECT",
            "aliases": ["0x9C93764223E29C50"],
            "manualHash": true
        },
        "0x8DC39368BDD57755": {
            "name": "ATTACH_PORTABLE_PICKUP_TO_PED",
            "params": [
                { "name": "pickupObject", "type": "Object" },
                { "name": "ped", "type": "Ped" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8DC39368BDD57755",
            "ns": "OBJECT",
            "jhash": "0x184F6AB3",
            "manualHash": true
        },
        "0x9A294B2138ABB884": {
            "name": "CREATE_OBJECT_NO_OFFSET",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the object. If false, the object exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the object as pinned to the script host in the R\\* network model."
                },
                {
                    "name": "doorFlag",
                    "type": "BOOL",
                    "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
                }
            ],
            "results": "Object",
            "description": "Creates an object (prop) with the specified model centered at the specified position.\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).",
            "examples": [],
            "hash": "0x9A294B2138ABB884",
            "ns": "OBJECT",
            "jhash": "0x58040420",
            "manualHash": true,
            "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
        },
        "0x509D5878EB39E842": {
            "name": "CREATE_OBJECT",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "int" },
                    "description": "The model to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component, 'ground level'."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the object. If false, the object exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the object as pinned to the script host in the R\\* network model."
                },
                {
                    "name": "doorFlag",
                    "type": "BOOL",
                    "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
                }
            ],
            "results": "Object",
            "description": "Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modelHash = `prop_weed_01` -- The ` return the jenkins hash of a string. see more at: https://cookbook.fivem.net/2019/06/23/lua-support-for-compile-time-jenkins-hashes/\n\nif not HasModelLoaded(modelHash) then\n    -- If the model isnt loaded we request the loading of the model and wait that the model is loaded\n    RequestModel(modelHash)\n\n    while not HasModelLoaded(modelHash) do\n        Citizen.Wait(1)\n    end\nend\n\n-- At this moment the model its loaded, so now we can create the object\nlocal obj = CreateObject(modelHash, vector3(0.0, 0.0, 0.0), true)"
                },
                {
                    "lang": "js",
                    "code": "async function Main() {\n    const modelHash = GetHashKey(\"prop_weed_01\");\n\n    if (!HasModelLoaded(modelHash)) {\n        // If the model isnt loaded we request the loading of the model and wait that the model is loaded\n        RequestModel(modelHash);\n        do {\n            new Promise(resolve => setTimeout(resolve, 100));\n        } while (!HasModelLoaded(modelHash));\n    }\n\n    // At this moment the model its loaded, so now we can create the object\n    let [x, y, z] = GetEntityCoords(PlayerPedId());\n    const obj = CreateObject(modelHash, x, y, z, true);\n}\n\nMain();"
                }
            ],
            "hash": "0x509D5878EB39E842",
            "ns": "OBJECT",
            "jhash": "0x2F7AA05C",
            "manualHash": true,
            "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
        },
        "0xFBA08C503DD5FA58": {
            "name": "CREATE_PICKUP",
            "params": [
                { "name": "pickupHash", "type": "Hash" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "p4", "type": "int" },
                { "name": "value", "type": "int" },
                { "name": "p6", "type": "BOOL" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "Pickup",
            "description": "Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).",
            "examples": [],
            "hash": "0xFBA08C503DD5FA58",
            "ns": "OBJECT",
            "jhash": "0x5E14DF68",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x125494B98A21AAF7": {
            "name": "CREATE_NON_NETWORKED_PORTABLE_PICKUP",
            "params": [
                { "name": "pickupHash", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "placeOnGround", "type": "BOOL" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "Object",
            "description": "",
            "examples": [],
            "hash": "0x125494B98A21AAF7",
            "ns": "OBJECT",
            "aliases": ["0x125494B98A21AAF7", "_CREATE_PORTABLE_PICKUP_2"],
            "jhash": "0x56A02502",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x539E0AE3E6634B9F": {
            "name": "DELETE_OBJECT",
            "params": [{ "name": "object", "type": "Object*" }],
            "results": "void",
            "description": "```\nDeletes the specified object, then sets the handle pointed to by the pointer to NULL.\n```",
            "examples": [],
            "hash": "0x539E0AE3E6634B9F",
            "ns": "OBJECT",
            "jhash": "0xD6EF9DA7",
            "manualHash": true
        },
        "0x2EAF1FDB2FB55698": {
            "name": "CREATE_PORTABLE_PICKUP",
            "params": [
                { "name": "pickupHash", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "placeOnGround", "type": "BOOL" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "Object",
            "description": "Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).",
            "examples": [],
            "hash": "0x2EAF1FDB2FB55698",
            "ns": "OBJECT",
            "jhash": "0x8C886BE5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCF463D1E9A0AECB1": {
            "name": "DETACH_PORTABLE_PICKUP_FROM_PED",
            "params": [{ "name": "pickupObject", "type": "Object" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCF463D1E9A0AECB1",
            "ns": "OBJECT",
            "jhash": "0x1D094562",
            "manualHash": true
        },
        "0x891804727E0A98B7": {
            "name": "CREATE_PICKUP_ROTATE",
            "params": [
                { "name": "pickupHash", "type": "Hash" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                { "name": "flag", "type": "int" },
                { "name": "amount", "type": "int" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "BOOL" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "Pickup",
            "description": "```\nPickup hashes: pastebin.com/8EuSv2r1  \nflags:  \n8 (1 << 3): place on ground  \n512 (1 << 9): spin around  \n```",
            "examples": [],
            "hash": "0x891804727E0A98B7",
            "ns": "OBJECT",
            "jhash": "0xF015BFE2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAFC1CA75AD4074D1": {
            "name": "DOES_PICKUP_EXIST",
            "params": [{ "name": "pickup", "type": "Pickup" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAFC1CA75AD4074D1",
            "ns": "OBJECT",
            "jhash": "0x9C6DA0B3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD9EFB6DBF7DAAEA3": {
            "name": "DOES_PICKUP_OBJECT_EXIST",
            "params": [{ "name": "pickupObject", "type": "Object" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD9EFB6DBF7DAAEA3",
            "ns": "OBJECT",
            "jhash": "0xE0B32108",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBFA48E2FF417213F": {
            "name": "DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "hash", "type": "Hash" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np5 is usually 0.  \n```",
            "examples": [],
            "hash": "0xBFA48E2FF417213F",
            "ns": "OBJECT",
            "jhash": "0x23FF2BA4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x52AF537A0C5B8AAD": {
            "name": "DOES_RAYFIRE_MAP_OBJECT_EXIST",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "```\nReturns true if a destructible object with this handle exists, false otherwise.  \n```",
            "examples": [],
            "hash": "0x52AF537A0C5B8AAD",
            "ns": "OBJECT",
            "aliases": ["0x52AF537A0C5B8AAD", "_DOES_DES_OBJECT_EXIST"],
            "jhash": "0xE08C834D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF9C36251F6E48E33": {
            "name": "DOES_PICKUP_OF_TYPE_EXIST_IN_AREA",
            "params": [
                { "name": "pickupHash", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "BOOL",
            "description": "Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).",
            "examples": [],
            "hash": "0xF9C36251F6E48E33",
            "ns": "OBJECT",
            "aliases": ["_IS_PICKUP_WITHIN_RADIUS"],
            "jhash": "0xF139681B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x589F80B325CC82C5": {
            "name": "DOOR_SYSTEM_FIND_EXISTING_DOOR",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate of the door object"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate of the door object"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate of the door object"
                },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" },
                    "description": "Entity model hash"
                },
                {
                    "name": "doorOutPointer",
                    "type": "Hash*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "Search radius: 0.5",
            "examples": [],
            "hash": "0x589F80B325CC82C5",
            "ns": "OBJECT",
            "aliases": ["0x589F80B325CC82C5"],
            "jhash": "0xE9AE494F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE851471AEFC3374F": {
            "name": "_DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "float",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xE851471AEFC3374F",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x160AA1B32F6139B8": {
            "name": "DOOR_SYSTEM_GET_DOOR_STATE",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x160AA1B32F6139B8",
            "ns": "OBJECT",
            "aliases": ["0x160AA1B32F6139B8"],
            "jhash": "0xD42A41C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4BC2854478F3A749": {
            "name": "DOOR_SYSTEM_GET_DOOR_PENDING_STATE",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x4BC2854478F3A749",
            "ns": "OBJECT",
            "aliases": ["0x4BC2854478F3A749"],
            "jhash": "0xD649B7E1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9B12F9A24FABEDB0": {
            "name": "_DOOR_CONTROL",
            "params": [
                { "name": "modelHash", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                {
                    "name": "locked",
                    "type": "BOOL",
                    "description": "tells the game whether or not the door is locked"
                },
                {
                    "name": "xRotMult",
                    "type": "float",
                    "description": "multiplier that specifies how fast the door/gate will rotate in degrees per second."
                },
                {
                    "name": "yRotMult",
                    "type": "float",
                    "description": "multiplier that specifies how fast the door/gate will rotate in degrees per second."
                },
                {
                    "name": "zRotMult",
                    "type": "float",
                    "description": "multiplier that specifies how fast the door/gate will rotate in degrees per second."
                }
            ],
            "results": "void",
            "description": "Hardcoded not to work in multiplayer environments.\nNative name between `SET_LOCAL_PLAYER_VISIBLE_LOCALLY` & `SET_MAX_WANTED_LEVEL`.\n\n```\nOBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door unlocked\nOBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door locked\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "DoorControl(`prop_gate_prison_01`, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0) -- door unlocked\nDoorControl(`prop_gate_prison_01`, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0) -- door locked"
                }
            ],
            "hash": "0x9B12F9A24FABEDB0",
            "ns": "OBJECT",
            "jhash": "0x4E0A260B",
            "manualHash": true
        },
        "0x65499865FCA6E5EC": {
            "name": "DOOR_SYSTEM_GET_OPEN_RATIO",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x65499865FCA6E5EC",
            "ns": "OBJECT",
            "aliases": ["0x65499865FCA6E5EC"],
            "jhash": "0xB74C3BD7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9BA001CB45CBF627": {
            "name": "DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE",
            "params": [
                {
                    "name": "doorHash",
                    "type": "Hash",
                    "description": "Door system identifier"
                },
                { "name": "distance", "type": "float" },
                { "name": "requestDoor", "type": "BOOL" },
                {
                    "name": "forceUpdate",
                    "type": "BOOL",
                    "description": "On true invokes [DOOR_SYSTEM_SET_DOOR_STATE](#\\_0x6BAB9442830C7F53); otherwise requestDoor is unused."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9BA001CB45CBF627",
            "ns": "OBJECT",
            "aliases": ["0x9BA001CB45CBF627"],
            "jhash": "0x47531446",
            "manualHash": true
        },
        "0xDF97CDD4FC08FD34": {
            "name": "DOOR_SYSTEM_GET_IS_PHYSICS_LOADED",
            "params": [
                {
                    "name": "doorHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDF97CDD4FC08FD34",
            "ns": "OBJECT",
            "aliases": ["0xDF97CDD4FC08FD34"],
            "jhash": "0x17FF9393",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB6E6FBA95C7324AC": {
            "name": "DOOR_SYSTEM_SET_OPEN_RATIO",
            "params": [
                {
                    "name": "doorHash",
                    "type": "Hash",
                    "description": "Door system identifier"
                },
                { "name": "ajar", "type": "float" },
                { "name": "requestDoor", "type": "BOOL" },
                {
                    "name": "forceUpdate",
                    "type": "BOOL",
                    "description": "On true invokes [DOOR_SYSTEM_SET_DOOR_STATE](#\\_0x6BAB9442830C7F53); otherwise requestDoor is unused."
                }
            ],
            "results": "void",
            "description": "```\nSets the ajar angle of a door.\nRanges from -1.0 to 1.0, and 0.0 is closed / default.\n```",
            "examples": [],
            "hash": "0xB6E6FBA95C7324AC",
            "ns": "OBJECT",
            "aliases": ["0xB6E6FBA95C7324AC", "_SET_DOOR_AJAR_ANGLE"],
            "jhash": "0x34883DE3",
            "manualHash": true
        },
        "0xD9B71952F78A2640": {
            "name": "DOOR_SYSTEM_SET_HOLD_OPEN",
            "params": [
                {
                    "name": "doorHash",
                    "type": "Hash",
                    "description": "Door system identifier"
                },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Includes networking check: ownership vs. or the door itself **isn't** networked.",
            "examples": [],
            "hash": "0xD9B71952F78A2640",
            "ns": "OBJECT",
            "aliases": ["0xD9B71952F78A2640"],
            "jhash": "0xECE58AE0",
            "manualHash": true
        },
        "0x6BAB9442830C7F53": {
            "name": "DOOR_SYSTEM_SET_DOOR_STATE",
            "params": [
                { "name": "doorHash", "type": "Hash" },
                { "name": "state", "type": "int" },
                {
                    "name": "requestDoor",
                    "type": "BOOL",
                    "description": "On true, and when door system is configured to, i.e., \"persists w/o netobj\", generate a CRequestDoorEvent."
                },
                {
                    "name": "forceUpdate",
                    "type": "BOOL",
                    "description": "On true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)"
                }
            ],
            "results": "void",
            "description": "Lockstates not applied and CNetObjDoor's not created until [DOOR_SYSTEM_GET_IS_PHYSICS_LOADED](#\\_0xDF97CDD4FC08FD34) returns true.\n\n### Door lock states: (v323)\n\n*   **0**: UNLOCKED\n*   **1**: LOCKED\n*   **2**: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA\n*   **3**: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME\n*   **4**: DOORSTATE_FORCE_LOCKED_THIS_FRAME\n*   **5**: DOORSTATE_FORCE_OPEN_THIS_FRAME\n*   **6**: DOORSTATE_FORCE_CLOSED_THIS_FRAME",
            "examples": [],
            "hash": "0x6BAB9442830C7F53",
            "ns": "OBJECT",
            "aliases": ["0x6BAB9442830C7F53", "_SET_DOOR_ACCELERATION_LIMIT"],
            "jhash": "0xDF83DB47",
            "manualHash": true
        },
        "0x03C27E13B42A0E82": {
            "name": "DOOR_SYSTEM_SET_AUTOMATIC_RATE",
            "params": [
                {
                    "name": "doorHash",
                    "type": "Hash",
                    "description": "Door system identifier"
                },
                { "name": "rate", "type": "float" },
                { "name": "requestDoor", "type": "BOOL" },
                {
                    "name": "forceUpdate",
                    "type": "BOOL",
                    "description": "On true invokes [DOOR_SYSTEM_SET_DOOR_STATE](#\\_0x6BAB9442830C7F53); otherwise requestDoor is unused."
                }
            ],
            "results": "void",
            "description": "Includes networking check: ownership vs. or the door itself **isn't** networked.",
            "examples": [],
            "hash": "0x03C27E13B42A0E82",
            "ns": "OBJECT",
            "aliases": ["0x03C27E13B42A0E82"],
            "jhash": "0x4F44AF21",
            "manualHash": true
        },
        "0xF2E1A7133DD356A6": {
            "name": "ENABLE_SAVING_IN_GARAGE",
            "params": [
                { "name": "garageHash", "type": "Hash" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF2E1A7133DD356A6",
            "ns": "OBJECT",
            "aliases": ["0xF2E1A7133DD356A6"],
            "jhash": "0x43BB7E48",
            "manualHash": true
        },
        "0x163F8B586BC95F2A": {
            "name": "GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "outRotation", "type": "Vector3*" },
                { "name": "rotationOrder", "type": "int" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x163F8B586BC95F2A",
            "ns": "OBJECT",
            "aliases": ["0x163F8B586BC95F2A"],
            "jhash": "0x65213FC3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC485E07E4F0B7958": {
            "name": "DOOR_SYSTEM_SET_SPRING_REMOVED",
            "params": [
                {
                    "name": "doorHash",
                    "type": "Hash",
                    "description": "Door system identifier"
                },
                { "name": "removed", "type": "BOOL" },
                { "name": "requestDoor", "type": "BOOL" },
                {
                    "name": "forceUpdate",
                    "type": "BOOL",
                    "description": "On true invokes [DOOR_SYSTEM_SET_DOOR_STATE](#\\_0x6BAB9442830C7F53); otherwise requestDoor is unused."
                }
            ],
            "results": "void",
            "description": "Includes networking check: ownership vs. or the door itself **isn't** networked.",
            "examples": [],
            "hash": "0xC485E07E4F0B7958",
            "ns": "OBJECT",
            "aliases": ["0xC485E07E4F0B7958"],
            "jhash": "0xB4A9A558",
            "manualHash": true
        },
        "0x758A5C1B3B1E1990": {
            "name": "_FORCE_PICKUP_REGENERATE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x758A5C1B3B1E1990",
            "ns": "OBJECT",
            "aliases": ["0x758A5C1B3B1E1990"],
            "manualHash": true
        },
        "0x43C677F1E1158005": {
            "name": "_GET_IS_ARENA_PROP_PHYSICS_DISABLED",
            "params": [
                { "name": "entity", "type": "Object" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x43C677F1E1158005",
            "ns": "OBJECT",
            "aliases": ["0x43C677F1E1158005"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true
        },
        "0xB3ECA65C7317F174": {
            "name": "_GET_PICKUP_GENERATION_RANGE_MULTIPLIER",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xB3ECA65C7317F174",
            "ns": "OBJECT",
            "aliases": ["0xB3ECA65C7317F174"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF9C1681347C8BD15": {
            "name": "FIX_OBJECT_FRAGMENT",
            "params": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "The object to fix fragments for (a handle should be passed)."
                }
            ],
            "results": "void",
            "description": "Resets and brings back all the children of a fragment based object.\nThis should be used when attaching or detaching an object from another entity, especially when the object being detached consists of multiple fragments.\n\nAttempting to teleport a fragment-based object using [`SET_ENTITY_COORDS`](#\\_0x06843DA7060A026B) such as a flag object, will result in it remaining in place and failing to teleport, given the condition mentioned in the preceding statement.\n\nThe native should be executed after detaching the object from its parent entity and before calling [`SET_ENTITY_COORDS`](#\\_0x06843DA7060A026B).\n\nExample given down below.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterCommand(\"fixobject\", function(source, args, rawCommand)\n    -- prop_flag_ls does not get teleported after being attached to the player\n    -- prop_beachflag_01 only the pole gets teleported after being attached to the player\n    local modelHash = `prop_beachflag_01`\n    if not HasModelLoaded(modelHash) then\n        RequestModel(modelHash)\n        while not HasModelLoaded(modelHash) do\n            Citizen.Wait(1)\n        end\n    end\n\n    -- Set argument 1 to 0 if you wish to see what occurs when fragments aren't fixed.\n    -- i.e. /fixobject 0\n    local shouldFixFragments = tonumber(args[1]) or true\n    \n    local entity = CreateObject(modelHash, GetEntityCoords(PlayerPedId()), true, false, false)\n    AttachEntityToEntity(\n        entity,\n        PlayerPedId(),\n        GetPedBoneIndex(PlayerPedId(), 0x796E), --0x796E\n        0.0, 0.0, 0.1, -- offset attachment for the first entity\n        0.0, 0.0, 0.0, \n        false, \n        false, \n        false, \n        false, \n        1, -- rotation order\n        true, \n        false\n    )\n    \n    Citizen.SetTimeout(5000, function()\n        DetachEntity(entity, true, true)\n        Citizen.Trace(\"Detaching entity...\")\n    end)\n\n    Citizen.SetTimeout(8000, function()\n        local coords = GetEntityCoords(PlayerPedId())\n        Citizen.Trace(\n            string.format(\"Setting coords to %f %f %f...\", coords.x, coords.y, coords.z)\n        )\n        if shouldFixFragments then\n            Citizen.Trace(\"Fixing fragments for entity...\")\n            FixObjectFragment(entity)\n        end\n        SetEntityCoords(entity, coords, false, false, false, true)\n        FreezeEntityPosition(entity, true)\n    end)\nend, false)"
                }
            ],
            "hash": "0xF9C1681347C8BD15",
            "ns": "OBJECT",
            "aliases": ["0xF9C1681347C8BD15"],
            "manualHash": true
        },
        "0xE143FA2249364369": {
            "name": "GET_CLOSEST_OBJECT_OF_TYPE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "isMission", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "Object",
            "description": "```\nHas 8 params in the latest patches.  \nisMission - if true doesn't return mission objects  \n```",
            "examples": [],
            "hash": "0xE143FA2249364369",
            "ns": "OBJECT",
            "jhash": "0x45619B33",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5EAAD83F8CFB4575": {
            "name": "_GET_PICKUP_HASH",
            "params": [
                {
                    "name": "pickupHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Pickup" }
                }
            ],
            "results": "Hash",
            "description": "```\nreturns pickup hash.\n```",
            "examples": [],
            "hash": "0x5EAAD83F8CFB4575",
            "ns": "OBJECT",
            "aliases": ["0x5EAAD83F8CFB4575"],
            "jhash": "0x6AE36192",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5099BC55630B25AE": {
            "name": "GET_PICKUP_OBJECT",
            "params": [{ "name": "pickup", "type": "Pickup" }],
            "results": "Object",
            "description": "",
            "examples": [],
            "hash": "0x5099BC55630B25AE",
            "ns": "OBJECT",
            "aliases": ["0x5099BC55630B25AE"],
            "jhash": "0x6052E62E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x163E252DE035A133": {
            "name": "_GET_OBJECT_OFFSET_FROM_COORDS",
            "params": [
                { "name": "xPos", "type": "float" },
                { "name": "yPos", "type": "float" },
                { "name": "zPos", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x163E252DE035A133",
            "ns": "OBJECT",
            "jhash": "0x87A42A12",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB6FBFD079B8D0596": {
            "name": "GET_OBJECT_FRAGMENT_DAMAGE_HEALTH",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xB6FBFD079B8D0596",
            "ns": "OBJECT",
            "jhash": "0xF0B330AD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEDC1A5B84AEF33FF": {
            "name": "GET_STATE_OF_CLOSEST_DOOR_OF_TYPE",
            "params": [
                { "name": "type", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "locked", "type": "BOOL*" },
                { "name": "heading", "type": "float*" }
            ],
            "results": "void",
            "description": "```\nlocked is 0 if no door is found  \nlocked is 0 if door is unlocked  \nlocked is 1 if door is found and unlocked.  \n-------------  \nthe locked bool is either 0(unlocked)(false) or 1(locked)(true)  \n```",
            "examples": [],
            "hash": "0xEDC1A5B84AEF33FF",
            "ns": "OBJECT",
            "jhash": "0x4B44A83D",
            "manualHash": true
        },
        "0x225B8B35C88029B3": {
            "name": "GET_PICKUP_COORDS",
            "params": [{ "name": "pickup", "type": "Pickup" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x225B8B35C88029B3",
            "ns": "OBJECT",
            "jhash": "0xC2E1E2C5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE84EB93729C5F36A": {
            "name": "_GET_OBJECT_TEXTURE_VARIATION",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xE84EB93729C5F36A",
            "ns": "OBJECT",
            "aliases": ["0xE84EB93729C5F36A"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD6429A016084F1A5": {
            "name": "_GET_PICKUP_HASH_FROM_WEAPON",
            "params": [{ "name": "weapon", "type": "Hash" }],
            "results": "Hash",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xD6429A016084F1A5",
            "ns": "OBJECT",
            "aliases": ["0xD6429A016084F1A5"],
            "manualHash": true
        },
        "0x260EE4FDBDF4DB01": {
            "name": "GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE",
            "params": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "The des-object handle to get the animation progress from."
                }
            ],
            "results": "float",
            "description": "```\n`object`: The des-object handle to get the animation progress from.\nReturn value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local handle = GetRayfireMapObject(7.25, -656.98, 17.14, 50.0, \"des_finale_tunnel\")\nlocal handle2 = GetRayfireMapObject(7.25, -656.98, 17.14, 50.0, \"des_finale_vault\")\n\nSetStateOfRayfireMapObject(handle, 4) -- set to pre-start state\nSetStateOfRayfireMapObject(handle2, 4) -- set to pre-start state\n\nCitizen.Wait(100)\n\nSetStateOfRayfireMapObject(handle, 6) -- set to start animation state.\nSetStateOfRayfireMapObject(handle2, 6) -- set to start animation state.\n\nCitizen.CreateThread(function()\n    Citizen.Wait(10)\n    while GetRayfireMapObjectAnimPhase(handle) > 0.0 do\n        Citizen.Wait(0)\n    end\n    print(\"Animation 1 is done!\")\n    while GetRayfireMapObjectAnimPhase(handle2) > 0.0 do\n        Citizen.Wait(0)\n    end\n    print(\"Animation 2 is done!\")\nend)\n"
                }
            ],
            "hash": "0x260EE4FDBDF4DB01",
            "ns": "OBJECT",
            "aliases": ["0x260EE4FDBDF4DB01", "_GET_DES_OBJECT_ANIM_PROGRESS"],
            "jhash": "0x020497DE",
            "manualHash": true,
            "resultsDescription": "A float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0."
        },
        "0xB48FCED898292E52": {
            "name": "GET_RAYFIRE_MAP_OBJECT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "name", "type": "char*" }
            ],
            "results": "Object",
            "description": "```\nExample:\nOBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, \"des_tvsmash\");\n```",
            "examples": [],
            "hash": "0xB48FCED898292E52",
            "ns": "OBJECT",
            "aliases": ["0xB48FCED898292E52", "_GET_DES_OBJECT"],
            "jhash": "0xA286DE96",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6E16BC2503FF1FF0": {
            "name": "GET_SAFE_PICKUP_COORDS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                {
                    "name": "p3",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "p4",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x6E16BC2503FF1FF0",
            "ns": "OBJECT",
            "jhash": "0x618B5F67",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x899BA936634A322E": {
            "name": "GET_STATE_OF_RAYFIRE_MAP_OBJECT",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "int",
            "description": "See [`SET_STATE_OF_RAYFIRE_MAP_OBJECT`](#\\_0x5C29F698D404C5E1) to see the different states\n\nGet a destructible object's state. Substract 1 to get the real state. For example, if the object just spawned (state 2), the native will return 3.",
            "examples": [],
            "hash": "0x899BA936634A322E",
            "ns": "OBJECT",
            "aliases": ["0x899BA936634A322E", "_GET_DES_OBJECT_STATE"],
            "jhash": "0xF1B8817A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x761B0E69AC4D007E": {
            "name": "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x761B0E69AC4D007E",
            "ns": "OBJECT",
            "jhash": "0x6FC0353D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x46494A2475701343": {
            "name": "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x46494A2475701343",
            "ns": "OBJECT",
            "aliases": ["0x46494A2475701343"],
            "jhash": "0x7DB578DD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x08F96CA6C551AD51": {
            "name": "GET_WEAPON_TYPE_FROM_PICKUP_TYPE",
            "params": [
                {
                    "name": "pickupHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Pickup" }
                }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x08F96CA6C551AD51",
            "ns": "OBJECT",
            "aliases": ["0x08F96CA6C551AD51", "_GET_WEAPON_HASH_FROM_PICKUP"],
            "jhash": "0xEDD01937",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x867458251D47CCB2": {
            "name": "HIDE_PORTABLE_PICKUP_WHEN_DETACHED",
            "params": [
                { "name": "pickup", "type": "Pickup" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x867458251D47CCB2",
            "ns": "OBJECT",
            "aliases": ["0x867458251D47CCB2", "_HIDE_PICKUP"],
            "jhash": "0x1F63B042",
            "manualHash": true
        },
        "0x8ABFB70C49CC43E2": {
            "name": "HAS_OBJECT_BEEN_BROKEN",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x8ABFB70C49CC43E2",
            "ns": "OBJECT",
            "jhash": "0xFE21F891",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x80EC48E6679313F9": {
            "name": "HAS_PICKUP_BEEN_COLLECTED",
            "params": [{ "name": "pickup", "type": "Pickup" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x80EC48E6679313F9",
            "ns": "OBJECT",
            "jhash": "0x0BE5CCED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x397DC58FF00298D1": {
            "name": "IS_ANY_OBJECT_NEAR_POINT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "range", "type": "float" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x397DC58FF00298D1",
            "ns": "OBJECT",
            "jhash": "0xE9E46941",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x673ED815D6E323B7": {
            "name": "IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x673ED815D6E323B7",
            "ns": "OBJECT",
            "aliases": ["0x673ED815D6E323B7"],
            "jhash": "0x7B44D659",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC153C43EA202C8C1": {
            "name": "IS_DOOR_REGISTERED_WITH_SYSTEM",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nif (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))\n{\n    OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);\n}\n```",
            "examples": [],
            "hash": "0xC153C43EA202C8C1",
            "ns": "OBJECT",
            "aliases": ["0xC153C43EA202C8C1", "_DOES_DOOR_EXIST"],
            "jhash": "0x5AFCD8A1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0378C08504160D0D": {
            "name": "IS_OBJECT_A_PORTABLE_PICKUP",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x0378C08504160D0D",
            "ns": "OBJECT",
            "aliases": ["0x0378C08504160D0D"],
            "jhash": "0x0F0E94FF",
            "manualHash": true
        },
        "0xC531EE8A1145A149": {
            "name": "IS_DOOR_CLOSED",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC531EE8A1145A149",
            "ns": "OBJECT",
            "jhash": "0x48659CD7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x90E47239EA1980B8": {
            "name": "IS_GARAGE_EMPTY",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x90E47239EA1980B8",
            "ns": "OBJECT",
            "jhash": "0xA8B37DEA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF0EED5A6BC7B237A": {
            "name": "IS_OBJECT_PARTIALLY_INSIDE_GARAGE",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "entity", "type": "Entity" },
                { "name": "p2", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF0EED5A6BC7B237A",
            "ns": "OBJECT",
            "aliases": ["0xF0EED5A6BC7B237A"],
            "jhash": "0x95A9AB2B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFC481C641EBBD27D": {
            "name": "IS_OBJECT_A_PICKUP",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFC481C641EBBD27D",
            "ns": "OBJECT",
            "aliases": ["0xFC481C641EBBD27D"],
            "jhash": "0x93D23399",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x372EF6699146A1E4": {
            "name": "IS_OBJECT_ENTIRELY_INSIDE_GARAGE",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "entity", "type": "Entity" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x372EF6699146A1E4",
            "ns": "OBJECT",
            "aliases": ["0x372EF6699146A1E4"],
            "jhash": "0x142C8F76",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1761DC5D8471CBAA": {
            "name": "IS_PLAYER_PARTIALLY_INSIDE_GARAGE",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "player", "type": "Player" },
                { "name": "p2", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1761DC5D8471CBAA",
            "ns": "OBJECT",
            "aliases": ["0x1761DC5D8471CBAA"],
            "jhash": "0x41924877",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8C90FE4B381BA60A": {
            "name": "IS_OBJECT_NEAR_POINT",
            "params": [
                { "name": "objectHash", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "range", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8C90FE4B381BA60A",
            "ns": "OBJECT",
            "jhash": "0x50A62C43",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x024A60DEB0EA69F0": {
            "name": "IS_PLAYER_ENTIRELY_INSIDE_GARAGE",
            "params": [
                {
                    "name": "garageHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "player", "type": "Player" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x024A60DEB0EA69F0",
            "ns": "OBJECT",
            "aliases": ["0x024A60DEB0EA69F0"],
            "jhash": "0xC33ED360",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x11D1E53A726891FE": {
            "name": "IS_PICKUP_WEAPON_OBJECT_VALID",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x11D1E53A726891FE",
            "ns": "OBJECT",
            "aliases": ["0x11D1E53A726891FE"],
            "jhash": "0x883DAB2D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8B32ACE6326A7546": {
            "name": "IS_OBJECT_VISIBLE",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8B32ACE6326A7546",
            "ns": "OBJECT",
            "jhash": "0xF4FD8AE4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x006E4B040ED37EC3": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x006E4B040ED37EC3",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x1E3F1B1B891A2AAA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E3F1B1B891A2AAA",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x2A70BAE8883E4C81": {
            "name": "IS_POINT_IN_ANGLED_AREA",
            "params": [
                {
                    "name": "xPos",
                    "type": "float",
                    "description": "The x coordinate."
                },
                {
                    "name": "yPos",
                    "type": "float",
                    "description": "The y coordinate."
                },
                {
                    "name": "zPos",
                    "type": "float",
                    "description": "The z coordinate."
                },
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                },
                {
                    "name": "p10",
                    "type": "BOOL",
                    "description": "a debug flag invoking functions in the same path as `DRAW_MARKER`"
                },
                {
                    "name": "includez",
                    "type": "BOOL",
                    "description": "If true, include the Z dimension when doing the height check; otherwise the query becomes two-dimensional"
                }
            ],
            "results": "BOOL",
            "description": "An **angled area** is an X-Z oriented rectangle with three parameters:\n\n1.  **origin**: the mid-point along a base edge of the rectangle;\n2.  **extent**: the mid-point of opposite base edge on the other Z;\n3.  **width**: the length of the base edge; (named derived from logging strings `CNetworkRoadNodeWorldStateData`).\n\nThe oriented rectangle can then be derived from the direction of the two points (`norm(origin - extent)`), its orthonormal, and the width, e.g:\n\n1.  [golf_mp](https://i.imgur.com/JhsQAK9.png)\n2.  [am_taxi](https://i.imgur.com/TJWCZaT.jpg)",
            "examples": [],
            "hash": "0x2A70BAE8883E4C81",
            "ns": "OBJECT",
            "jhash": "0x73BCFFDC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0596843B34B95CE5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0596843B34B95CE5",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x31F924B53EADDF65": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x31F924B53EADDF65",
            "ns": "OBJECT",
            "jhash": "0xDB18FA01",
            "manualHash": true
        },
        "0x2542269291C6AC84": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x2542269291C6AC84",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xADBE4809F19F927A": {
            "name": "_MARK_OBJECT_FOR_DELETION",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "void",
            "description": "```\nis this like setting is as no longer needed?  \n```",
            "examples": [],
            "hash": "0xADBE4809F19F927A",
            "ns": "OBJECT",
            "jhash": "0x2048A7DD",
            "manualHash": true
        },
        "0x394CD08E31313C28": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x394CD08E31313C28",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x1C57C94A6446492A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x1C57C94A6446492A",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x39A5FB7EAF150840": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x39A5FB7EAF150840",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x3BD770D281982DB5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x3BD770D281982DB5",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x46F3ADD1E2D5BAF2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x46F3ADD1E2D5BAF2",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x27F248C3FEBFAAD3": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x27F248C3FEBFAAD3",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x62454A641B41F3C5": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x62454A641B41F3C5",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x701FDA1E82076BA4": {
            "params": [],
            "results": "void",
            "description": "Clears the fields sets by [N\\_0xc7f29ca00f46350e](#\\_0xC7F29CA00F46350E) (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.\n\nRelated to its \"Pre-networked state\"?",
            "examples": [],
            "hash": "0x701FDA1E82076BA4",
            "ns": "OBJECT",
            "jhash": "0xF592AD10",
            "manualHash": true
        },
        "0x4C134B4DF76025D0": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x4C134B4DF76025D0",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x63ECF581BC70E363": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x63ECF581BC70E363",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x1A6CBB06E2D0D79D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x1A6CBB06E2D0D79D",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x66A49D021870FE88": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x66A49D021870FE88",
            "ns": "OBJECT",
            "jhash": "0x6158959E",
            "manualHash": true
        },
        "0x734E1714D077DA9A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x734E1714D077DA9A",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x641F272B52E2F0F8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x641F272B52E2F0F8",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x31574B1B41268673": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x31574B1B41268673",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x7813E8B8C4AE4799": {
            "params": [{ "name": "pickup", "type": "Pickup" }],
            "results": "void",
            "description": "SET_PICKUP_\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x7813E8B8C4AE4799",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x3B2FD68DB5F8331C": {
            "params": [
                { "name": "object", "type": "Object" },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "R", "type": "int" },
                { "name": "G", "type": "int" },
                { "name": "B", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Removed Parameter 3: int R\nNativeDB Removed Parameter 4: int G\nNativeDB Removed Parameter 5: int B\nNativeDB Introduced: v757\n```",
            "examples": [],
            "hash": "0x3B2FD68DB5F8331C",
            "ns": "OBJECT",
            "aliases": ["_SET_OBJECT_COLOUR"],
            "manualHash": true
        },
        "0x826D1EE4D1CAFC78": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x826D1EE4D1CAFC78",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x8CAAB2BD3EA58BD4": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8CAAB2BD3EA58BD4",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x659F9D71F52843F8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x659F9D71F52843F8",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x8881C98A31117998": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x8881C98A31117998",
            "ns": "OBJECT",
            "aliases": ["0xA90E7227A9303FA9"],
            "manualHash": true
        },
        "0x858EC9FD25DE04AA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x858EC9FD25DE04AA",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xAA059C615DE9DD03": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xAA059C615DE9DD03",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x8DCA505A5C196F05": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x8DCA505A5C196F05",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x762DB2D380B48D04": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x762DB2D380B48D04",
            "ns": "OBJECT",
            "jhash": "0xD1BAAFB7",
            "manualHash": true
        },
        "0xA08FE5E49BDC39DD": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA08FE5E49BDC39DD",
            "ns": "OBJECT",
            "jhash": "0x276A7807",
            "manualHash": true
        },
        "0xADF084FB8F075D06": {
            "params": [{ "name": "p0", "type": "Object" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xADF084FB8F075D06",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xAFE24E4D29249E4A": {
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xAFE24E4D29249E4A",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x834344A414C7C85D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x834344A414C7C85D",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xB5B7742424BD4445": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xB5B7742424BD4445",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xA85A21582451E951": {
            "params": [
                { "name": "doorHash", "type": "Hash" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Some property related to gates. Native name between `DOOR_SYSTEM_SET_AUTOMATIC_RATE` and `DOOR_SYSTEM_SET_DOOR_STATE`.",
            "examples": [],
            "hash": "0xA85A21582451E951",
            "ns": "OBJECT",
            "jhash": "0xF736227C",
            "manualHash": true
        },
        "0x8CFF648FBD7330F1": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v757\n```",
            "examples": [],
            "hash": "0x8CFF648FBD7330F1",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xA2C1F5E92AFE49ED": {
            "params": [],
            "results": "void",
            "description": "```\nCLEAR_*\n```",
            "examples": [],
            "hash": "0xA2C1F5E92AFE49ED",
            "ns": "OBJECT",
            "jhash": "0xB241806C",
            "manualHash": true
        },
        "0xB7C6D80FB371659A": {
            "params": [],
            "results": "void",
            "description": "```\nClears all areas created by 0xD4A7A435B3710D05\n\nCLEAR_*\n\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xB7C6D80FB371659A",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xC7F29CA00F46350E": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "See [`N_0x701fda1e82076ba4`](#\\_0x701FDA1E82076BA4).",
            "examples": [],
            "hash": "0xC7F29CA00F46350E",
            "ns": "OBJECT",
            "jhash": "0x9BF33E41",
            "manualHash": true
        },
        "0xD4A7A435B3710D05": {
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "```\nAdds an area that seems to be related to pickup physics behavior.\nMax amount of areas is 10. Only works in multiplayer.\n\nADD_*\n\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xD4A7A435B3710D05",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xB2D0BDE54F0E8E5A": {
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB2D0BDE54F0E8E5A",
            "ns": "OBJECT",
            "jhash": "0x132B6D92",
            "manualHash": true
        },
        "0xC6033D32241F6FB5": {
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC6033D32241F6FB5",
            "ns": "OBJECT",
            "jhash": "0xF4A1A14A",
            "manualHash": true
        },
        "0xEB6F1A9B5510A5D2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEB6F1A9B5510A5D2",
            "ns": "OBJECT",
            "jhash": "0xAF016CC1",
            "manualHash": true
        },
        "0xBFFE53AE7E67FCDC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xBFFE53AE7E67FCDC",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xD05A3241B9A86F19": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xD05A3241B9A86F19",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x58A850EAEE20FAA3": {
            "name": "PLACE_OBJECT_ON_GROUND_PROPERLY",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x58A850EAEE20FAA3",
            "ns": "OBJECT",
            "jhash": "0x8F95A20B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDB41D07A45A6D4B7": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xDB41D07A45A6D4B7",
            "ns": "OBJECT",
            "jhash": "0x000E92DC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x27F9D613092159CF": {
            "name": "REMOVE_ALL_PICKUPS_OF_TYPE",
            "params": [{ "name": "pickupHash", "type": "Hash" }],
            "results": "void",
            "description": "Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).",
            "examples": [],
            "hash": "0x27F9D613092159CF",
            "ns": "OBJECT",
            "jhash": "0x40062C53",
            "manualHash": true
        },
        "0xF92099527DB8E2A7": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF92099527DB8E2A7",
            "ns": "OBJECT",
            "jhash": "0xA7E936FD",
            "manualHash": true
        },
        "0xFDC07C58E8AAB715": {
            "params": [{ "name": "pickupHash", "type": "Hash" }],
            "results": "void",
            "description": "A\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xFDC07C58E8AAB715",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xE05F6AEEFEB0BB02": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xE05F6AEEFEB0BB02",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x464D8E1427156FE4": {
            "name": "REMOVE_DOOR_FROM_SYSTEM",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "void",
            "description": "CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).\n\nOnly its NetObj removed and flag `*(v2 + 192) |= 8u` (1604 retail) toggled.",
            "examples": [],
            "hash": "0x464D8E1427156FE4",
            "ns": "OBJECT",
            "jhash": "0x00253286",
            "manualHash": true
        },
        "0x3288D8ACAECD2AB2": {
            "name": "REMOVE_PICKUP",
            "params": [{ "name": "pickup", "type": "Pickup" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3288D8ACAECD2AB2",
            "ns": "OBJECT",
            "jhash": "0x64A7A0E0",
            "manualHash": true
        },
        "0xD76EEEF746057FD6": {
            "name": "_PLACE_OBJECT_ON_GROUND_PROPERLY_2",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD76EEEF746057FD6",
            "ns": "OBJECT",
            "aliases": ["0xD76EEEF746057FD6"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBCE595371A5FBAAF": {
            "name": "_SET_CREATE_WEAPON_OBJECT_LIGHT_SOURCE",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nRequires a component_at_*_flsh to be attached to the weapon object\n```",
            "examples": [],
            "hash": "0xBCE595371A5FBAAF",
            "ns": "OBJECT",
            "aliases": ["0xBCE595371A5FBAAF"],
            "jhash": "0x3A68AA46",
            "manualHash": true
        },
        "0x406137F8EF90EAF5": {
            "name": "SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x406137F8EF90EAF5",
            "ns": "OBJECT",
            "jhash": "0x3E263AE1",
            "manualHash": true
        },
        "0x4A39DB43E47CF3AA": {
            "name": "REMOVE_OBJECT_HIGH_DETAIL_MODEL",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4A39DB43E47CF3AA",
            "ns": "OBJECT",
            "aliases": ["0x4A39DB43E47CF3AA"],
            "jhash": "0xE3261B35",
            "manualHash": true
        },
        "0x92AEFB5F6E294023": {
            "name": "PREVENT_COLLECTION_OF_PORTABLE_PICKUP",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x92AEFB5F6E294023",
            "ns": "OBJECT",
            "aliases": ["0x92AEFB5F6E294023"],
            "jhash": "0xCBB5F9B6",
            "manualHash": true
        },
        "0x911024442F4898F0": {
            "name": "_SET_ENABLE_ARENA_PROP_PHYSICS",
            "params": [
                { "name": "entity", "type": "Object" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nActivate the physics to: \"xs_prop_arena_{flipper,wall,bollard,turntable,pit}\"\n```\n\n```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x911024442F4898F0",
            "ns": "OBJECT",
            "aliases": ["0x911024442F4898F0"],
            "manualHash": true
        },
        "0xB20834A7DD3D8896": {
            "name": "_SET_ENABLE_ARENA_PROP_PHYSICS_ON_PED",
            "params": [
                { "name": "entity", "type": "Object" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "p2", "type": "int" },
                { "name": "ped", "type": "Ped" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xB20834A7DD3D8896",
            "ns": "OBJECT",
            "aliases": ["0xB20834A7DD3D8896"],
            "manualHash": true
        },
        "0xF538081986E49E9D": {
            "name": "SET_FORCE_OBJECT_THIS_FRAME",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "y",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "z",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "p3",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF538081986E49E9D",
            "ns": "OBJECT",
            "jhash": "0x3DA41C1A",
            "manualHash": true
        },
        "0x3430676B11CDF21D": {
            "name": "RENDER_FAKE_PICKUP_GLOW",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "colorIndex", "type": "int" }
            ],
            "results": "void",
            "description": "```\ndraws circular marker at pos\n-1 = none\n0 = red\n1 = green\n2 = blue\n3 = green larger\n4 = nothing\n5 = green small\n```",
            "examples": [],
            "hash": "0x3430676B11CDF21D",
            "ns": "OBJECT",
            "aliases": ["0x3430676B11CDF21D", "_HIGHLIGHT_PLACEMENT_COORDS"],
            "jhash": "0x63B02FAD",
            "manualHash": true
        },
        "0x88EAEC617CD26926": {
            "name": "_SET_LOCAL_PLAYER_CAN_USE_PICKUPS_WITH_THIS_MODEL",
            "params": [
                { "name": "modelHash", "type": "Hash" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMaximum amount of pickup models that can be disallowed is 30.\nSET_LOCAL_PLAYER_*\n```",
            "examples": [],
            "hash": "0x88EAEC617CD26926",
            "ns": "OBJECT",
            "aliases": ["0x88EAEC617CD26926"],
            "jhash": "0x3A8F1BF7",
            "manualHash": true
        },
        "0x0BF3B3BD47D79C08": {
            "name": "SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER",
            "params": [
                { "name": "modelHash", "type": "Hash" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0BF3B3BD47D79C08",
            "ns": "OBJECT",
            "aliases": ["0x0BF3B3BD47D79C08"],
            "jhash": "0x7EFBA039",
            "manualHash": true
        },
        "0x77F33F2CCF64B3AA": {
            "name": "SET_OBJECT_FORCE_VEHICLES_TO_AVOID",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Overrides a flag on the object which determines if the object should be avoided by a vehicle in task: CTaskVehicleGoToPointWithAvoidanceAutomobile.\nTested on vehicles that were created by the vehicle generators.",
            "examples": [],
            "hash": "0x77F33F2CCF64B3AA",
            "ns": "OBJECT",
            "aliases": ["0x77F33F2CCF64B3AA", "_SET_OBJECT_SOMETHING"],
            "jhash": "0x483C5C88",
            "manualHash": true
        },
        "0xF6DF6E90DE7DF90F": {
            "name": "SET_OBJECT_PHYSICS_PARAMS",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "mass", "type": "float" },
                { "name": "gravityFactor", "type": "float" },
                { "name": "linearC", "type": "float" },
                { "name": "linearV", "type": "float" },
                { "name": "linearV2", "type": "float" },
                { "name": "angularC", "type": "float" },
                { "name": "angularV", "type": "float" },
                { "name": "angularV2", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "maxAngSpeed", "type": "float" },
                { "name": "buoyancyFactor", "type": "float" }
            ],
            "results": "void",
            "description": "```\nrage::phArchetypeDamp\np9: Some phBoundGeometry margin value, limited to (0.0, 0.1) exclusive.\n```",
            "examples": [],
            "hash": "0xF6DF6E90DE7DF90F",
            "ns": "OBJECT",
            "jhash": "0xE8D11C58",
            "manualHash": true
        },
        "0x4D89D607CB3DD1D2": {
            "name": "SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOverrides the climbing/blocking flags of the object, used in the native scripts mostly for \"prop_dock_bouy_*\"\n```",
            "examples": [],
            "hash": "0x4D89D607CB3DD1D2",
            "ns": "OBJECT",
            "aliases": ["0x4D89D607CB3DD1D2", "_SET_OBJECT_CAN_CLIMB_ON"],
            "jhash": "0x19B17769",
            "manualHash": true
        },
        "0xDF6CA0330F2E737B": {
            "name": "_SET_OBJECT_STUNT_PROP_DURATION",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "duration", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDF6CA0330F2E737B",
            "ns": "OBJECT",
            "aliases": ["0xDF6CA0330F2E737B"],
            "manualHash": true
        },
        "0x78857FC65CADB909": {
            "name": "SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x78857FC65CADB909",
            "ns": "OBJECT",
            "aliases": ["0x78857FC65CADB909"],
            "jhash": "0xA3CDF152",
            "manualHash": true
        },
        "0x8A7391690F5AFD81": {
            "name": "SET_OBJECT_TARGETTABLE",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "targettable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8A7391690F5AFD81",
            "ns": "OBJECT",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x3F88CD86",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3ED2B83AB2E82799": {
            "name": "_SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3ED2B83AB2E82799",
            "ns": "OBJECT",
            "aliases": ["0x3ED2B83AB2E82799"],
            "manualHash": true
        },
        "0x96EE0EBA0163DF80": {
            "name": "_SET_OBJECT_STUNT_PROP_SPEEDUP",
            "params": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "A Speed Boost or Slow Down prop"
                },
                {
                    "name": "intensity",
                    "type": "int",
                    "description": "Ranges from `1`-`254`, other values are ignored. Higher values will increase the effect of Speed Boosts and decrease the effect of Slow Downs."
                }
            ],
            "results": "void",
            "description": "Sets the intensity of Speed Boost and Slow Down props.\n\nThe corresponding values for Speed Boosts in the Creator are:\\\nWeak: `15`\\\nNormal: `25`\\\nStrong: `35`\\\nExtra Strong: `45`\\\nUltra Strong: `100`\n\nFor Slow Downs:\\\nWeak: `44`\\\nNormal: `30`\\\nStrong: `16`",
            "examples": [],
            "hash": "0x96EE0EBA0163DF80",
            "ns": "OBJECT",
            "aliases": ["0x96EE0EBA0163DF80"],
            "manualHash": true
        },
        "0x318516E02DE3ECE2": {
            "name": "SET_PICKUP_GENERATION_RANGE_MULTIPLIER",
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x318516E02DE3ECE2",
            "ns": "OBJECT",
            "aliases": ["0x318516E02DE3ECE2"],
            "jhash": "0x9879AC51",
            "manualHash": true
        },
        "0x78015C9B4B3ECC9D": {
            "name": "SET_PICKUP_REGENERATION_TIME",
            "params": [
                { "name": "pickup", "type": "Pickup" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x78015C9B4B3ECC9D",
            "ns": "OBJECT",
            "jhash": "0xAB11267D",
            "manualHash": true
        },
        "0x1C1B69FAE509BA97": {
            "name": "_SET_PICKUP_UNCOLLECTABLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1C1B69FAE509BA97",
            "ns": "OBJECT",
            "aliases": ["0x1C1B69FAE509BA97"],
            "manualHash": true
        },
        "0x5F048334B4A4E774": {
            "name": "_SET_OBJECT_LIGHT_COLOR",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "p1", "type": "BOOL" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "Any",
            "description": "Sets color of embedded light source.\nOnly appears in am_mp_nightclub.c for the nightclub dancefloor.\n\nNot sure what p1 does, seems to only ever be '1' in scripts.\n\n```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x5F048334B4A4E774",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0xF82D8F1926A02C3D": {
            "name": "SET_STATE_OF_CLOSEST_DOOR_OF_TYPE",
            "params": [
                { "name": "type", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "locked", "type": "BOOL" },
                { "name": "heading", "type": "float" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nHardcoded to not work in multiplayer.  \nUsed to lock/unlock doors to interior areas of the game.  \n(Possible) Door Types:  \npastebin.com/9S2m3qA4  \nHeading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.  \nLocked means that the heading is locked.    \np6 is always 0.   \n225 door types, model names and coords found in stripclub.c4:  \npastebin.com/gywnbzsH  \nget door info: pastebin.com/i14rbekD  \n```",
            "examples": [],
            "hash": "0xF82D8F1926A02C3D",
            "ns": "OBJECT",
            "jhash": "0x38C951A4",
            "manualHash": true
        },
        "0x53E0DF1A2A3CF0CA": {
            "name": "SET_TEAM_PICKUP_OBJECT",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x53E0DF1A2A3CF0CA",
            "ns": "OBJECT",
            "jhash": "0x77687DC5",
            "manualHash": true
        },
        "0xF12E33034D887F66": {
            "name": "_SET_TEXTURE_VARIATION_OF_CLOSEST_OBJECT_OF_TYPE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "textureVariation", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF12E33034D887F66",
            "ns": "OBJECT",
            "aliases": ["0xF12E33034D887F66"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x971DA0055324D033": {
            "name": "_SET_OBJECT_TEXTURE_VARIATION",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "textureVariation", "type": "int" }
            ],
            "results": "void",
            "description": "```\nenum ObjectPaintVariants  \n{  \n\tPacific = 0,  \n\tAzure = 1,  \n\tNautical = 2,  \n\tContinental = 3,  \n\tBattleship = 4,  \n\tIntrepid = 5,  \n\tUniform = 6,  \n\tClassico = 7,  \n\tMediterranean = 8,  \n\tCommand = 9,  \n\tMariner = 10,  \n\tRuby = 11,  \n\tVintage = 12,  \n\tPristine = 13,  \n\tMerchant = 14,  \n\tVoyager = 15  \n};  \n```",
            "examples": [],
            "hash": "0x971DA0055324D033",
            "ns": "OBJECT",
            "aliases": ["0x971DA0055324D033", "_SET_OBJECT_TEXTURE_VARIANT"],
            "manualHash": true
        },
        "0xABDABF4E1EDECBFA": {
            "name": "_SET_UNK_GLOBAL_BOOL_RELATED_TO_DAMAGE",
            "params": [{ "name": "value", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0xABDABF4E1EDECBFA",
            "ns": "OBJECT",
            "manualHash": true
        },
        "0x5C29F698D404C5E1": {
            "name": "SET_STATE_OF_RAYFIRE_MAP_OBJECT",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "state", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDefines the state of a destructible object.\nUse the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.\nState 2 == object just spawned\nState 4 == Beginning of the animation\nState 6 == Start animation\nState 9 == End of the animation\n```",
            "examples": [],
            "hash": "0x5C29F698D404C5E1",
            "ns": "OBJECT",
            "aliases": ["0x5C29F698D404C5E1", "_SET_DES_OBJECT_STATE"],
            "jhash": "0x21F51560",
            "manualHash": true
        },
        "0x616093EC6B139DD9": {
            "name": "_TOGGLE_USE_PICKUPS_FOR_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "pickupHash", "type": "Hash" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nDisabling/enabling a player from getting pickups. From the scripts:\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);\nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);\nSET_PLAYER_*\n```",
            "examples": [],
            "hash": "0x616093EC6B139DD9",
            "ns": "OBJECT",
            "aliases": ["0x616093EC6B139DD9"],
            "jhash": "0x7FADB4B9",
            "manualHash": true
        },
        "0x2FDFF4107B8C1147": {
            "name": "SLIDE_OBJECT",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toX", "type": "float" },
                { "name": "toY", "type": "float" },
                { "name": "toZ", "type": "float" },
                { "name": "speedX", "type": "float" },
                { "name": "speedY", "type": "float" },
                { "name": "speedZ", "type": "float" },
                { "name": "collision", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nReturns true if the object has finished moving.  \nIf false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.  \nSee also: https://gtagmodding.com/opcode-database/opcode/034E/\nHas to be looped until it returns true.   \n```",
            "examples": [],
            "hash": "0x2FDFF4107B8C1147",
            "ns": "OBJECT",
            "jhash": "0x63BFA7A0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB252BC036B525623": {
            "name": "TRACK_OBJECT_VISIBILITY",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB252BC036B525623",
            "ns": "OBJECT",
            "jhash": "0x46D06B9A",
            "manualHash": true
        }
    },
    "PAD": {
        "0xA5FFE9B05F199DE7": {
            "name": "ENABLE_ALL_CONTROL_ACTIONS",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use."
                }
            ],
            "results": "void",
            "description": "```\npadIndex: \n0 - PLAYER_CONTROL\n1 - Unknown \n2 - FRONTEND_CONTROL\n```",
            "examples": [],
            "hash": "0xA5FFE9B05F199DE7",
            "ns": "PAD",
            "jhash": "0xFC2F119F",
            "manualHash": true
        },
        "0x5F4B6931816E599B": {
            "name": "DISABLE_ALL_CONTROL_ACTIONS",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F4B6931816E599B",
            "ns": "PAD",
            "jhash": "0x16753CF4",
            "manualHash": true
        },
        "0x351220255D64C155": {
            "name": "ENABLE_CONTROL_ACTION",
            "params": [
                { "name": "padIndex", "type": "int" },
                { "name": "control", "type": "int" },
                { "name": "enable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\ncontrol values and meaning: github.com/crosire/scripthookvdotnet/blob/dev_v3/source/scripting/Control.cs  \nand  \nhttps://docs.fivem.net/game-references/controls/\n0, 1 and 2 used in the scripts.  \nControl values from the decompiled scripts:   \n0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36,  \n37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100  \n,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19  \n0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2  \n20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257,  \n261,262,263,264,286,287,288,289,337,338,339,340,341,342,343  \nINPUTGROUP_MOVE  \nINPUTGROUP_LOOK  \nINPUTGROUP_WHEEL  \nINPUTGROUP_CELLPHONE_NAVIGATE  \nINPUTGROUP_CELLPHONE_NAVIGATE_UD  \nINPUTGROUP_CELLPHONE_NAVIGATE_LR  \nINPUTGROUP_FRONTEND_DPAD_ALL  \nINPUTGROUP_FRONTEND_DPAD_UD  \nINPUTGROUP_FRONTEND_DPAD_LR  \nINPUTGROUP_FRONTEND_LSTICK_ALL  \nINPUTGROUP_FRONTEND_RSTICK_ALL  \nINPUTGROUP_FRONTEND_GENERIC_UD  \nINPUTGROUP_FRONTEND_GENERIC_LR  \nINPUTGROUP_FRONTEND_GENERIC_ALL  \nINPUTGROUP_FRONTEND_BUMPERS  \nINPUTGROUP_FRONTEND_TRIGGERS  \nINPUTGROUP_FRONTEND_STICKS  \nINPUTGROUP_SCRIPT_DPAD_ALL  \nINPUTGROUP_SCRIPT_DPAD_UD  \nINPUTGROUP_SCRIPT_DPAD_LR  \nINPUTGROUP_SCRIPT_LSTICK_ALL  \nINPUTGROUP_SCRIPT_RSTICK_ALL  \nINPUTGROUP_SCRIPT_BUMPERS  \nINPUTGROUP_SCRIPT_TRIGGERS  \nINPUTGROUP_WEAPON_WHEEL_CYCLE  \nINPUTGROUP_FLY  \nINPUTGROUP_SUB  \nINPUTGROUP_VEH_MOVE_ALL  \nINPUTGROUP_CURSOR  \nINPUTGROUP_CURSOR_SCROLL  \nINPUTGROUP_SNIPER_ZOOM_SECONDARY  \nINPUTGROUP_VEH_HYDRAULICS_CONTROL  \nTook those in IDA Pro.Not sure in which order they go  \n```",
            "examples": [],
            "hash": "0x351220255D64C155",
            "ns": "PAD",
            "jhash": "0xD2753551",
            "manualHash": true
        },
        "0x7F4724035FDCA1DD": {
            "name": "_DISABLE_INPUT_GROUP",
            "params": [{ "name": "padIndex", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7F4724035FDCA1DD",
            "ns": "PAD",
            "aliases": ["0x7F4724035FDCA1DD"],
            "jhash": "0x2CEDE6C5",
            "manualHash": true
        },
        "0xFC859E2374407556": {
            "name": "GET_ALLOW_MOVEMENT_WHILE_ZOOMED",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns profile setting 17.\n```",
            "examples": [],
            "hash": "0xFC859E2374407556",
            "ns": "PAD",
            "aliases": ["0xFC859E2374407556"],
            "jhash": "0xC0823820",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFE99B66D079CF6BC": {
            "name": "DISABLE_CONTROL_ACTION",
            "params": [
                { "name": "padIndex", "type": "int" },
                { "name": "control", "type": "int" },
                { "name": "disable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "[Control values and meaning](https://docs.fivem.net/docs/game-references/controls/#controls)\n\nExample: `CONTROLS::DISABLE_CONTROL_ACTION(2, 19, true)` disables the switching UI from appearing both when using a keyboard and Xbox 360 controller. Needs to be executed each frame.\nControl group 1 and 0 gives the same results as 2. Same results for all players.",
            "examples": [],
            "hash": "0xFE99B66D079CF6BC",
            "ns": "PAD",
            "jhash": "0x3800C0DC",
            "manualHash": true
        },
        "0x0499D7B09FC9B407": {
            "name": "GET_CONTROL_INSTRUCTIONAL_BUTTON",
            "params": [
                { "name": "padIndex", "type": "int" },
                { "name": "control", "type": "int" },
                {
                    "name": "p2",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Player" }
                }
            ],
            "results": "char*",
            "description": "```\nformerly called _GET_CONTROL_ACTION_NAME incorrectly  \np2 appears to always be true.  \np2 is unused variable in function.  \nEG:  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) /*INPUT_FRONTEND_ACCEPT (e.g. Enter button)*/  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) /*INPUT_FRONTEND_CANCEL (e.g. ESC button)*/  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) /*INPUT_CONTEXT (e.g. E button)*/  \ngtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n```",
            "examples": [],
            "hash": "0x0499D7B09FC9B407",
            "ns": "PAD",
            "aliases": ["0x0499D7B09FC9B407"],
            "jhash": "0x3551727A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD95E79E8686D2C27": {
            "name": "GET_CONTROL_VALUE",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xD95E79E8686D2C27",
            "ns": "PAD",
            "jhash": "0xC526F3C6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x11E65974A982637C": {
            "name": "GET_DISABLED_CONTROL_NORMAL",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x11E65974A982637C",
            "ns": "PAD",
            "jhash": "0x66FF4FAA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x59B9A7AF4C95133C": {
            "name": "_GET_LOCAL_PLAYER_AIM_STATE_2",
            "params": [],
            "results": "int",
            "description": "```\nSame behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.  \n```",
            "examples": [],
            "hash": "0x59B9A7AF4C95133C",
            "ns": "PAD",
            "aliases": ["0x59B9A7AF4C95133C"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B84D09CEC5209C5": {
            "name": "GET_CONTROL_UNBOUND_NORMAL",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "float",
            "description": "```\nSeems to return values between -1 and 1 for controls like gas and steering.\n```",
            "examples": [],
            "hash": "0x5B84D09CEC5209C5",
            "ns": "PAD",
            "aliases": ["0x5B84D09CEC5209C5"],
            "jhash": "0xC49343BB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x80C2FD58D720C801": {
            "name": "GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTON",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                { "name": "controlGroup", "type": "int" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x80C2FD58D720C801",
            "ns": "PAD",
            "aliases": ["0x80C2FD58D720C801"],
            "jhash": "0x3EE71F6A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBB41AFBBBC0A0287": {
            "name": "GET_LOCAL_PLAYER_AIM_STATE",
            "params": [],
            "results": "int",
            "description": "Returns the local player's targeting mode. See [`SET_PLAYER_TARGETING_MODE`](#\\_0xB1906895227793F3).",
            "examples": [],
            "hash": "0xBB41AFBBBC0A0287",
            "ns": "PAD",
            "jhash": "0x81802053",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD7D22F5592AED8BA": {
            "name": "_GET_TIME_SINCE_LAST_INPUT",
            "params": [{ "name": "padIndex", "type": "int" }],
            "results": "int",
            "description": "```\nThe number of milliseconds since last padIndex registered pressed\n```",
            "examples": [],
            "hash": "0xD7D22F5592AED8BA",
            "ns": "PAD",
            "aliases": ["0xD7D22F5592AED8BA"],
            "jhash": "0x0E8EF929",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEC3C9B8D5327B563": {
            "name": "GET_CONTROL_NORMAL",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xEC3C9B8D5327B563",
            "ns": "PAD",
            "jhash": "0x5DE226A5",
            "manualHash": true,
            "resultsDescription": "Returns the value of [`GET_CONTROL_VALUE`](#\\_0xD95E79E8686D2C27) normalized, i.e. a real number value between -1.0 and 1.0"
        },
        "0x50F940259D3841E6": {
            "name": "IS_CONTROL_JUST_RELEASED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "Returns whether a control was newly released since the last check.",
            "examples": [],
            "hash": "0x50F940259D3841E6",
            "ns": "PAD",
            "jhash": "0x2314444B",
            "manualHash": true,
            "resultsDescription": "True if the control was recently released."
        },
        "0x580417101DDB492F": {
            "name": "IS_CONTROL_JUST_PRESSED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "Returns whether a control was newly pressed since the last check.",
            "examples": [],
            "hash": "0x580417101DDB492F",
            "ns": "PAD",
            "jhash": "0x4487F579",
            "manualHash": true,
            "resultsDescription": "True if the control was pressed."
        },
        "0x4F8A26A890FD62FB": {
            "name": "GET_DISABLED_CONTROL_UNBOUND_NORMAL",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x4F8A26A890FD62FB",
            "ns": "PAD",
            "aliases": ["0x4F8A26A890FD62FB"],
            "jhash": "0xF2A65A4C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1CEA6BFDF248E5D9": {
            "name": "IS_CONTROL_ENABLED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1CEA6BFDF248E5D9",
            "ns": "PAD",
            "jhash": "0x9174AF84",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x91AEF906BCA88877": {
            "name": "IS_DISABLED_CONTROL_JUST_PRESSED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x91AEF906BCA88877",
            "ns": "PAD",
            "jhash": "0xEE6ABD32",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x648EE3E7F38877DD": {
            "name": "IS_CONTROL_RELEASED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "Returns whether a control is currently *not* pressed.",
            "examples": [],
            "hash": "0x648EE3E7F38877DD",
            "ns": "PAD",
            "jhash": "0x1F91A06E",
            "manualHash": true,
            "resultsDescription": "True if the control is not pressed."
        },
        "0x0F70731BACCFBB96": {
            "name": "GET_IS_USING_ALTERNATE_DRIVEBY",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns profile setting 225.\n```",
            "examples": [],
            "hash": "0x0F70731BACCFBB96",
            "ns": "PAD",
            "aliases": ["0x0F70731BACCFBB96"],
            "jhash": "0xC1AFABD5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE2587F8CBBD87B1D": {
            "name": "IS_DISABLED_CONTROL_PRESSED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE2587F8CBBD87B1D",
            "ns": "PAD",
            "jhash": "0x32A93544",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x77B612531280010D": {
            "name": "IS_LOOK_INVERTED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x77B612531280010D",
            "ns": "PAD",
            "jhash": "0x313434B2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF3A21BCD95725A4A": {
            "name": "IS_CONTROL_PRESSED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "Returns whether a control is currently pressed.",
            "examples": [],
            "hash": "0xF3A21BCD95725A4A",
            "ns": "PAD",
            "jhash": "0x517A4384",
            "manualHash": true,
            "resultsDescription": "True if the control was pressed."
        },
        "0xA571D46727E2B718": {
            "name": "_IS_USING_KEYBOARD",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA571D46727E2B718",
            "ns": "PAD",
            "aliases": ["_GET_LAST_INPUT_METHOD", "_IS_INPUT_DISABLED"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFB6C4072E9A32E92": {
            "name": "_IS_DISABLED_CONTROL_RELEASED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFB6C4072E9A32E92",
            "ns": "PAD",
            "aliases": ["0xFB6C4072E9A32E92"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B73C77D9EB66E24": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5B73C77D9EB66E24",
            "ns": "PAD",
            "manualHash": true
        },
        "0x305C8DCD79DA8B0F": {
            "name": "IS_DISABLED_CONTROL_JUST_RELEASED",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x305C8DCD79DA8B0F",
            "ns": "PAD",
            "jhash": "0xD6A679E1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8290252FFF36ACB5": {
            "name": "_SET_CONTROL_LIGHT_EFFECT_COLOR",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                { "name": "red", "type": "int" },
                { "name": "green", "type": "int" },
                { "name": "blue", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8290252FFF36ACB5",
            "ns": "PAD",
            "aliases": ["0x8290252FFF36ACB5", "_SET_CONTROL_GROUP_COLOR"],
            "manualHash": true
        },
        "0x13337B38DB572509": {
            "name": "_IS_USING_KEYBOARD_2",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x13337B38DB572509",
            "ns": "PAD",
            "aliases": ["0x13337B38DB572509", "_IS_INPUT_JUST_DISABLED"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x25AAA32BDC98F2A3": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x25AAA32BDC98F2A3",
            "ns": "PAD",
            "manualHash": true
        },
        "0x23F09EADC01449D6": {
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                }
            ],
            "results": "BOOL",
            "description": "Hardcoded to return false.",
            "examples": [],
            "hash": "0x23F09EADC01449D6",
            "ns": "PAD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x14D29BB12D47F68C": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x14D29BB12D47F68C",
            "ns": "PAD",
            "manualHash": true
        },
        "0xE8A25867FBA3B05E": {
            "name": "_SET_CONTROL_NORMAL",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                },
                {
                    "name": "amount",
                    "type": "float",
                    "description": "An unbounded normal value."
                }
            ],
            "results": "BOOL",
            "description": "This is for simulating player input.",
            "examples": [],
            "hash": "0xE8A25867FBA3B05E",
            "ns": "PAD",
            "aliases": ["0xE8A25867FBA3B05E"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCB0360EFEFB2580D": {
            "params": [{ "name": "padIndex", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCB0360EFEFB2580D",
            "ns": "PAD",
            "manualHash": true
        },
        "0xA0CEFCEA390AAB9B": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA0CEFCEA390AAB9B",
            "ns": "PAD",
            "manualHash": true
        },
        "0x6CD79468A1E595C6": {
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6CD79468A1E595C6",
            "ns": "PAD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE1615EC03B3BB4FD": {
            "params": [],
            "results": "BOOL",
            "description": "```\nUsed with IS_LOOK_INVERTED() and negates its affect.\n--\nNot sure how the person above got that description, but here's an actual example:\nif (PAD::_GET_LAST_INPUT_METHOD(2)) {\n    if (a_5) {\n        if (PAD::IS_LOOK_INVERTED()) {\n            a_3 *= -1;\n        }\n        if (PAD::_E1615EC03B3BB4FD()) {\n            a_3 *= -1;\n        }\n    }\n}\n```",
            "examples": [],
            "hash": "0xE1615EC03B3BB4FD",
            "ns": "PAD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x643ED62D5EA3BEBD": {
            "name": "_RESET_INPUT_MAPPING_SCHEME",
            "params": [],
            "results": "void",
            "description": "```\nS*\n```",
            "examples": [],
            "hash": "0x643ED62D5EA3BEBD",
            "ns": "PAD",
            "aliases": ["0x643ED62D5EA3BEBD"],
            "jhash": "0x42140FF9",
            "manualHash": true
        },
        "0xFC695459D4D0E219": {
            "name": "_SET_CURSOR_LOCATION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFC695459D4D0E219",
            "ns": "PAD",
            "aliases": ["0xFC695459D4D0E219"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF239400E16C23E08": {
            "params": [
                { "name": "padIndex", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF239400E16C23E08",
            "ns": "PAD",
            "jhash": "0x7D65EB6E",
            "manualHash": true
        },
        "0x48B3886C1358D0D5": {
            "name": "SET_PAD_SHAKE",
            "params": [
                { "name": "padIndex", "type": "int" },
                { "name": "duration", "type": "int" },
                { "name": "frequency", "type": "int" }
            ],
            "results": "void",
            "description": "```\np0 always seems to be 0  \nduration in milliseconds   \nfrequency should range from about 10 (slow vibration) to 255 (very fast)  \nexample:  \nSET_PAD_SHAKE(0, 100, 200);  \n```",
            "examples": [],
            "hash": "0x48B3886C1358D0D5",
            "ns": "PAD",
            "jhash": "0x5D38BD2F",
            "manualHash": true
        },
        "0x38C16A305E8CDC8D": {
            "name": "STOP_PAD_SHAKE",
            "params": [{ "name": "padIndex", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x38C16A305E8CDC8D",
            "ns": "PAD",
            "jhash": "0x8F75657E",
            "manualHash": true
        },
        "0x4683149ED1DDE7A1": {
            "name": "_SWITCH_TO_INPUT_MAPPING_SCHEME_2",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nSame as 0x3D42B92563939375\n\nS*\n```",
            "examples": [],
            "hash": "0x4683149ED1DDE7A1",
            "ns": "PAD",
            "aliases": ["0x4683149ED1DDE7A1"],
            "jhash": "0xBBFC9050",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEDE476E5EE29EDB1": {
            "name": "SET_INPUT_EXCLUSIVE",
            "params": [
                {
                    "name": "padIndex",
                    "type": "int",
                    "description": "The control system instance to use. See [`ENABLE_ALL_CONTROL_ACTIONS`](#\\_0xA5FFE9B05F199DE7)."
                },
                {
                    "name": "control",
                    "type": "int",
                    "description": "The [control ID](https://docs.fivem.net/docs/game-references/controls/#controls) to check."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEDE476E5EE29EDB1",
            "ns": "PAD",
            "jhash": "0x4E8E29E6",
            "manualHash": true
        },
        "0x798FDEB5B1575088": {
            "name": "SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x798FDEB5B1575088",
            "ns": "PAD",
            "jhash": "0xA86BD91F",
            "manualHash": true
        },
        "0x3D42B92563939375": {
            "name": "_SWITCH_TO_INPUT_MAPPING_SCHEME",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nUsed in carsteal3 script with p0 = \"Carsteal4_spycar\".\nS*\n```",
            "examples": [],
            "hash": "0x3D42B92563939375",
            "ns": "PAD",
            "aliases": ["0x3D42B92563939375"],
            "jhash": "0xD2C80B2E",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "PATHFIND": {
        "0xFCD5C8E06E502F5A": {
            "name": "ADD_NAVMESH_BLOCKING_OBJECT",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x coordinate to create the block on."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z coordinate."
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "The width of the block."
                },
                {
                    "name": "length",
                    "type": "float",
                    "description": "The length of the block."
                },
                {
                    "name": "height",
                    "type": "float",
                    "description": "The height of the block."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "The heading of object in degrees."
                },
                {
                    "name": "p7",
                    "type": "BOOL",
                    "description": "Usually false."
                },
                {
                    "name": "p8",
                    "type": "Any",
                    "description": "A bitfield; usually 7."
                }
            ],
            "results": "Any",
            "description": "Creates a navmesh blocking object, vehicles will avoid driving through this area.\n\nOnly 32 blocking objects may exist at a given time and must be manually managed. See [`REMOVE_NAVMESH_BLOCKING_OBJECT`](#\\_0x46399A7895957C0E) and [onResourceStop](https://docs.fivem.net/docs/scripting-reference/events/list/onResourceStop/)",
            "examples": [],
            "hash": "0xFCD5C8E06E502F5A",
            "ns": "PATHFIND",
            "jhash": "0x2952BA56",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x387EAD7EE42F6685": {
            "name": "ADD_NAVMESH_REQUIRED_REGION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x387EAD7EE42F6685",
            "ns": "PATHFIND",
            "jhash": "0x12B086EA",
            "manualHash": true
        },
        "0xF7B79A50B905A30D": {
            "name": "ARE_NODES_LOADED_FOR_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF7B79A50B905A30D",
            "ns": "PATHFIND",
            "aliases": ["0xF7B79A50B905A30D", "_ARE_PATH_NODES_LOADED_IN_AREA"],
            "jhash": "0x86E80A17",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4C8872D8CDBE1B8B": {
            "name": "DISABLE_NAVMESH_IN_AREA",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4C8872D8CDBE1B8B",
            "ns": "PATHFIND",
            "jhash": "0x6E37F132",
            "manualHash": true
        },
        "0x0EAEB0DB4B132399": {
            "name": "DOES_NAVMESH_BLOCKING_OBJECT_EXIST",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0EAEB0DB4B132399",
            "ns": "PATHFIND",
            "aliases": ["0x0EAEB0DB4B132399"],
            "jhash": "0x4B67D7EE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8415D95B194A3AEA": {
            "name": "ARE_ALL_NAVMESH_REGIONS_LOADED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8415D95B194A3AEA",
            "ns": "PATHFIND",
            "jhash": "0x34C4E789",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF90125F1F79ECDF8": {
            "name": "GENERATE_DIRECTIONS_TO_COORD",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "BOOL" },
                { "name": "direction", "type": "int*" },
                { "name": "vehicle", "type": "float*" },
                { "name": "distToNxJunction", "type": "float*" }
            ],
            "results": "int",
            "description": "```\np3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference\ndistToNxJunction seems to be the distance in metres * 10.0f\ndirection:\n0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean \"Next frame, stop whatever's being said and tell the player the direction.\"\n1 = Route is being calculated or the player is going in the wrong direction\n2 = Please Proceed the Highlighted Route\n3 = In (distToNxJunction) Turn Left\n4 = In (distToNxJunction) Turn Right\n5 = In (distToNxJunction) Keep Straight\n6 = In (distToNxJunction) Turn Sharply To The Left\n7 = In (distToNxJunction) Turn Sharply To The Right\n8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of \"right.\" Either way, this seems to be the engine saying \"I don't know the route right now.\"\nreturn value set to 0 always\n```",
            "examples": [],
            "hash": "0xF90125F1F79ECDF8",
            "ns": "PATHFIND",
            "jhash": "0xED35C094",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2801D0012266DF07": {
            "name": "CLEAR_GPS_DISABLED_ZONE_AT_INDEX",
            "params": [
                {
                    "name": "index",
                    "type": "int",
                    "description": "Index of disabled zone."
                }
            ],
            "results": "void",
            "description": "Clears a disabled GPS route area from a certain index previously set using [`SET_GPS_DISABLED_ZONE_AT_INDEX`](#\\_0xD0BC1C6FB18EE154).",
            "examples": [],
            "hash": "0x2801D0012266DF07",
            "ns": "PATHFIND",
            "aliases": [
                "0x2801D0012266DF07",
                "_CLEAR_GPS_DISABLED_ZONE_AT_INDEX"
            ],
            "jhash": "0x59090745",
            "manualHash": true
        },
        "0xADD95C7005C4A197": {
            "name": "CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "float",
            "description": "Calculates the travel distance between a set of points.\nDoesn't seem to correlate with distance on gps sometimes.\n\nThis function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.",
            "examples": [],
            "hash": "0xADD95C7005C4A197",
            "ns": "PATHFIND",
            "jhash": "0xB114489B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2EABE3B06F58C1BE": {
            "name": "GET_CLOSEST_MAJOR_VEHICLE_NODE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "unknown1", "type": "float" },
                { "name": "unknown2", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nGet the closest vehicle node to a given position, unknown1 = 3.0, unknown2 = 0  \n```",
            "examples": [],
            "hash": "0x2EABE3B06F58C1BE",
            "ns": "PATHFIND",
            "jhash": "0x04B5F15B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x240A18690AE96513": {
            "name": "GET_CLOSEST_VEHICLE_NODE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "nodeType", "type": "int" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nFYI: When falling through the map (or however you got under it) you will respawn when your player ped's height is <= -200.0 meters (I think you all know this) and when in a vehicle you will actually respawn at the closest vehicle node.\n----------\nVector3 nodePos;\nGET_CLOSEST_VEHICLE_NODE(x,y,z,&nodePos,...)\np4 is either 0, 1 or 8. 1 means any path/road. 0 means node in the middle of the closest main (asphalt) road.\np5, p6 are always the same:\n0x40400000 (3.0), 0\np5 can also be 100.0 and p6 can be 2.5:\nPATHFIND::GET_CLOSEST_VEHICLE_NODE(a_0, &v_5, v_9, 100.0, 2.5)\nKnown node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.\nThe node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.\nStarting at 2, every fourth node is under the map, always same coords.\nSame with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).\ngtaforums.com/topic/843561-pathfind-node-types\n```",
            "examples": [],
            "hash": "0x240A18690AE96513",
            "ns": "PATHFIND",
            "jhash": "0x6F5F1E6C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x869DAACBBE9FA006": {
            "name": "GET_GPS_BLIP_ROUTE_FOUND",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x869DAACBBE9FA006",
            "ns": "PATHFIND",
            "aliases": ["0x869DAACBBE9FA006"],
            "jhash": "0x286F82CC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFF071FB798B803B0": {
            "name": "GET_CLOSEST_VEHICLE_NODE_WITH_HEADING",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "outHeading", "type": "float*" },
                { "name": "nodeType", "type": "int" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\np5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.  \np5 is either 1 or 12. 1 means any path/road. 12, 8, 0 means node in the middle of the closest main (asphalt) road.  \np6 is always 3.0  \np7 is always 0.  \nKnown node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.   \nThe node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.   \nStarting at 2, every fourth node is under the map, always same coords.  \nSame with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).  \ngtaforums.com/topic/843561-pathfind-node-types  \nExample of usage, moving vehicle to closest path/road:  \nVector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);  \nVector3 closestVehicleNodeCoords;   \nfloat roadHeading;   \nPATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);   \nENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);  \nENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);  \nVEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);  \n------------------------------------------------------------------  \nC# Example (ins1de) : pastebin.com/fxtMWAHD  \n```",
            "examples": [],
            "hash": "0xFF071FB798B803B0",
            "ns": "PATHFIND",
            "jhash": "0x8BD5759B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBBB45C3CF5C8AA85": {
            "name": "GET_GPS_BLIP_ROUTE_LENGTH",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xBBB45C3CF5C8AA85",
            "ns": "PATHFIND",
            "aliases": ["0xBBB45C3CF5C8AA85"],
            "jhash": "0x4B770634",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x132F52BBA570FE92": {
            "name": "GET_CLOSEST_ROAD",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "int" },
                { "name": "p5", "type": "Vector3*" },
                { "name": "p6", "type": "Vector3*" },
                { "name": "p7", "type": "Any*" },
                { "name": "p8", "type": "Any*" },
                { "name": "p9", "type": "float*" },
                { "name": "p10", "type": "BOOL" }
            ],
            "results": "Any",
            "description": "```\np1 seems to be always 1.0f in the scripts  \n```",
            "examples": [],
            "hash": "0x132F52BBA570FE92",
            "ns": "PATHFIND",
            "jhash": "0x567B0E11",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF3162836C28F9DA5": {
            "name": "GET_GPS_WAYPOINT_ROUTE_END",
            "params": [
                { "name": "result", "type": "Vector3*" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "int" }
            ],
            "results": "BOOL",
            "description": "p3 can be 0, 1 or 2.",
            "examples": [],
            "hash": "0xF3162836C28F9DA5",
            "ns": "PATHFIND",
            "aliases": ["0xF3162836C28F9DA5"],
            "jhash": "0x40BB1149",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3599D741C9AC6310": {
            "name": "_GET_HEIGHTMAP_BOTTOM_Z_FOR_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" }
            ],
            "results": "float",
            "description": "```\nReturns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.\n```",
            "examples": [],
            "hash": "0x3599D741C9AC6310",
            "ns": "PATHFIND",
            "aliases": ["0x3599D741C9AC6310"],
            "jhash": "0x76751DD4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x29C24BFBED8AB8FB": {
            "name": "_GET_HEIGHTMAP_TOP_Z_FOR_POSITION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "float",
            "description": "```\nReturns CGameWorldHeightMap's maximum Z value at specified point (grid node).\n```",
            "examples": [],
            "hash": "0x29C24BFBED8AB8FB",
            "ns": "PATHFIND",
            "aliases": ["0x29C24BFBED8AB8FB"],
            "jhash": "0x3FE8C5A0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x336511A34F2E5185": {
            "name": "_GET_HEIGHTMAP_BOTTOM_Z_FOR_POSITION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "float",
            "description": "```\nReturns CGameWorldHeightMap's minimum Z value at specified point (grid node).\n```",
            "examples": [],
            "hash": "0x336511A34F2E5185",
            "ns": "PATHFIND",
            "aliases": ["0x336511A34F2E5185"],
            "jhash": "0xA07C5B7D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8ABE8608576D9CE3": {
            "name": "_GET_HEIGHTMAP_TOP_Z_FOR_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" }
            ],
            "results": "float",
            "description": "```\nReturns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.\n```",
            "examples": [],
            "hash": "0x8ABE8608576D9CE3",
            "ns": "PATHFIND",
            "aliases": ["0x8ABE8608576D9CE3"],
            "jhash": "0x3ED21C90",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x45905BE8654AE067": {
            "name": "GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "desiredX", "type": "float" },
                { "name": "desiredY", "type": "float" },
                { "name": "desiredZ", "type": "float" },
                { "name": "nthClosest", "type": "int" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "outHeading", "type": "float*" },
                { "name": "nodetype", "type": "int" },
                {
                    "name": "p10",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p11", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nSee gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water  \np10 always equal 0x40400000  \np11 always equal 0  \n```",
            "examples": [],
            "hash": "0x45905BE8654AE067",
            "ns": "PATHFIND",
            "jhash": "0x928A4DEC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6448050E9C2A7207": {
            "name": "GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "nthClosest", "type": "int" },
                { "name": "outPosition", "type": "Vector3*" },
                {
                    "name": "outHeading",
                    "type": "float*",
                    "annotations": { "cs_type": "float" }
                },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x6448050E9C2A7207",
            "ns": "PATHFIND",
            "jhash": "0xC1AEB88D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x22D7275A79FE8215": {
            "name": "GET_NTH_CLOSEST_VEHICLE_NODE_ID",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "nth", "type": "int" },
                { "name": "nodetype", "type": "int" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" }
            ],
            "results": "int",
            "description": "```\nReturns the id.  \n```",
            "examples": [],
            "hash": "0x22D7275A79FE8215",
            "ns": "PATHFIND",
            "jhash": "0x3F358BEA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD3A6A0EF48823A8C": {
            "name": "GET_NEXT_GPS_DISABLED_ZONE_INDEX",
            "params": [{ "name": "index", "type": "int" }],
            "results": "int",
            "description": "Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.\n\n```\nNativeDB Removed Parameter 1: int index\n```",
            "examples": [],
            "hash": "0xD3A6A0EF48823A8C",
            "ns": "PATHFIND",
            "aliases": ["0xD3A6A0EF48823A8C"],
            "jhash": "0xBE92551F",
            "manualHash": true,
            "resultsDescription": "The disabled zone index"
        },
        "0x16F46FB18C8009E4": {
            "name": "_GET_POINT_ON_ROAD_SIDE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "int" },
                { "name": "outPosition", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x16F46FB18C8009E4",
            "ns": "PATHFIND",
            "aliases": ["0x16F46FB18C8009E4"],
            "jhash": "0xF6422F9A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x93E0DB8440B73A7D": {
            "name": "GET_RANDOM_VEHICLE_NODE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "nodeId", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x93E0DB8440B73A7D",
            "ns": "PATHFIND",
            "jhash": "0xAD1476EA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE50E52416CCF948B": {
            "name": "GET_NTH_CLOSEST_VEHICLE_NODE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "nthClosest", "type": "int" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "unknown1", "type": "Any" },
                { "name": "unknown2", "type": "Any" },
                { "name": "unknown3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE50E52416CCF948B",
            "ns": "PATHFIND",
            "jhash": "0xF125BFCC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x80CA6A8B6C094CC4": {
            "name": "GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "nthClosest", "type": "int" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "heading", "type": "float*" },
                { "name": "unknown1", "type": "Any*" },
                { "name": "unknown2", "type": "int" },
                { "name": "unknown3", "type": "float" },
                { "name": "unknown4", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nGet the nth closest vehicle node and its heading. (unknown2 = 9, unknown3 = 3.0, unknown4 = 2.5)  \n```",
            "examples": [],
            "hash": "0x80CA6A8B6C094CC4",
            "ns": "PATHFIND",
            "jhash": "0x7349C856",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2EB41072B4C1E4C0": {
            "name": "GET_STREET_NAME_AT_COORD",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "streetName", "type": "Hash*" },
                { "name": "crossingRoad", "type": "Hash*" }
            ],
            "results": "void",
            "description": "```\nDetermines the name of the street which is the closest to the given coordinates.\nx,y,z - the coordinates of the street\nstreetName - returns a hash to the name of the street the coords are on\ncrossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road\nNote: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.\n```",
            "examples": [],
            "hash": "0x2EB41072B4C1E4C0",
            "ns": "PATHFIND",
            "jhash": "0xDEBEEFCF",
            "manualHash": true
        },
        "0xB61C8E878A4199CA": {
            "name": "GET_SAFE_COORD_FOR_PED",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "onGround", "type": "BOOL" },
                { "name": "outPosition", "type": "Vector3*" },
                { "name": "flags", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nFlags are:\n1 = 1 = B02_IsFootpath\n2 = 4 = !B15_InteractionUnk\n4 = 0x20 = !B14_IsInterior\n8 = 0x40 = !B07_IsWater\n16 = 0x200 = B17_IsFlatGround\nWhen onGround == true outPosition is a position located on the nearest pavement.\nWhen a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.\nIn the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.\n16 works for me, 0 crashed the script.\n```",
            "examples": [],
            "hash": "0xB61C8E878A4199CA",
            "ns": "PATHFIND",
            "jhash": "0xB370270A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x01708E8DD3FF8C65": {
            "name": "GET_NUM_NAVMESHES_EXISTING_IN_AREA",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x01708E8DD3FF8C65",
            "ns": "PATHFIND",
            "aliases": ["0x01708E8DD3FF8C65"],
            "jhash": "0x76AFFBB5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0F8A7517A273C05": {
            "name": "GET_ROAD_BOUNDARY_USING_HEADING",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "outPosition", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA0F8A7517A273C05",
            "ns": "PATHFIND",
            "aliases": [
                "0xA0F8A7517A273C05",
                "_GET_ROAD_SIDE_POINT_WITH_HEADING"
            ],
            "jhash": "0x5E440AC7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA2AE5C478B96E3B6": {
            "name": "GET_VEHICLE_NODE_IS_GPS_ALLOWED",
            "params": [{ "name": "nodeID", "type": "int" }],
            "results": "BOOL",
            "description": "```\nReturns false for nodes that aren't used for GPS routes.\nExample:\nNodes in Fort Zancudo and LSIA are false\n```",
            "examples": [],
            "hash": "0xA2AE5C478B96E3B6",
            "ns": "PATHFIND",
            "aliases": ["0xA2AE5C478B96E3B6", "_GET_SUPPORTS_GPS_ROUTE_FLAG"],
            "jhash": "0xEE4B1219",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x705A844002B39DC0": {
            "name": "_IS_NAVMESH_REQUIRED_REGION_OWNED_BY_ANY_THREAD",
            "params": [],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0x705A844002B39DC0",
            "ns": "PATHFIND",
            "aliases": ["0x705A844002B39DC0"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4F5070AA58F69279": {
            "name": "GET_VEHICLE_NODE_IS_SWITCHED_OFF",
            "params": [{ "name": "nodeID", "type": "int" }],
            "results": "BOOL",
            "description": "```\nReturns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.\nNormal roads where plenty of Peds spawn will return false\n```",
            "examples": [],
            "hash": "0x4F5070AA58F69279",
            "ns": "PATHFIND",
            "aliases": ["0x4F5070AA58F69279", "_GET_IS_SLOW_ROAD_FLAG"],
            "jhash": "0x56737A3C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x703123E5E7D429C2": {
            "name": "GET_VEHICLE_NODE_POSITION",
            "params": [
                { "name": "nodeId", "type": "int" },
                { "name": "outPosition", "type": "Vector3*" }
            ],
            "results": "void",
            "description": "```\nCalling this with an invalid node id, will crash the game.\nNote that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.\nEg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().\n```",
            "examples": [],
            "hash": "0x703123E5E7D429C2",
            "ns": "PATHFIND",
            "jhash": "0xE38E252D",
            "manualHash": true
        },
        "0x1EAF30FCFBF5AF74": {
            "name": "IS_VEHICLE_NODE_ID_VALID",
            "params": [{ "name": "vehicleNodeId", "type": "int" }],
            "results": "BOOL",
            "description": "```\nReturns true if the id is non zero.  \n```",
            "examples": [],
            "hash": "0x1EAF30FCFBF5AF74",
            "ns": "PATHFIND",
            "jhash": "0x57DFB1EF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF813C7E63F9062A5": {
            "name": "IS_NAVMESH_LOADED_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nReturns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.  \nIf you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...  \n```",
            "examples": [],
            "hash": "0xF813C7E63F9062A5",
            "ns": "PATHFIND",
            "jhash": "0x4C2BA99E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0568566ACBB5DEDC": {
            "name": "GET_VEHICLE_NODE_PROPERTIES",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "density", "type": "int*" },
                { "name": "flags", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\nGets the density and flags of the closest node to the specified position.  \nDensity is a value between 0 and 15, indicating how busy the road is.  \nFlags is a bit field.  \n```",
            "examples": [],
            "hash": "0x0568566ACBB5DEDC",
            "ns": "PATHFIND",
            "jhash": "0xCC90110B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x80E4A6EDDB0BE8D9": {
            "name": "LOAD_ALL_PATH_NODES",
            "params": [
                {
                    "name": "keepInMemory",
                    "type": "BOOL",
                    "description": "if true, all path nodes will be loaded and be kept in memory; otherwise, all path nodes will be loaded, but unloaded as the game sees fit."
                }
            ],
            "results": "BOOL",
            "description": "```\nThis native has been removed in v1180.  \n```",
            "examples": [],
            "hash": "0x80E4A6EDDB0BE8D9",
            "ns": "PATHFIND",
            "jhash": "0xC66E28C3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x125BF4ABFC536B09": {
            "name": "IS_POINT_ON_ROAD",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "BOOL",
            "description": "```\nGets a value indicating whether the specified position is on a road.  \nThe vehicle parameter is not implemented (ignored).  \n```",
            "examples": [],
            "hash": "0x125BF4ABFC536B09",
            "ns": "PATHFIND",
            "jhash": "0xCF198055",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x46399A7895957C0E": {
            "name": "REMOVE_NAVMESH_BLOCKING_OBJECT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x46399A7895957C0E",
            "ns": "PATHFIND",
            "jhash": "0x098602B0",
            "manualHash": true
        },
        "0x916F0A3CDEC3445E": {
            "name": "REMOVE_NAVMESH_REQUIRED_REGIONS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x916F0A3CDEC3445E",
            "ns": "PATHFIND",
            "jhash": "0x637BB680",
            "manualHash": true
        },
        "0x07FB139B592FA687": {
            "name": "_REQUEST_PATHS_PREFER_ACCURATE_BOUNDINGSTRUCT",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nUsed internally for long range tasks\n```",
            "examples": [],
            "hash": "0x07FB139B592FA687",
            "ns": "PATHFIND",
            "aliases": ["0x07FB139B592FA687"],
            "jhash": "0x2CDA5012",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA76052DDA9BFC3E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA76052DDA9BFC3E",
            "ns": "PATHFIND",
            "jhash": "0xD0F51299",
            "manualHash": true
        },
        "0x228E5C6AD4D74BFD": {
            "name": "_SET_ALL_PATHS_CACHE_BOUNDINGSTRUCT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nToggles a global boolean, name is probably a hash collision but describes its functionality.\n```",
            "examples": [],
            "hash": "0x228E5C6AD4D74BFD",
            "ns": "PATHFIND",
            "aliases": ["0x228E5C6AD4D74BFD"],
            "jhash": "0xD6A3B458",
            "manualHash": true
        },
        "0x0B919E1FB47CC4E0": {
            "name": "SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME",
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0B919E1FB47CC4E0",
            "ns": "PATHFIND",
            "aliases": ["0x0B919E1FB47CC4E0"],
            "jhash": "0x3C5085E4",
            "manualHash": true
        },
        "0x1FC289A0C3FF470F": {
            "name": "_SET_IGNORE_SECONDARY_ROUTE_NODES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSee: SET_BLIP_ROUTE\n```",
            "examples": [],
            "hash": "0x1FC289A0C3FF470F",
            "ns": "PATHFIND",
            "aliases": ["0x1FC289A0C3FF470F"],
            "jhash": "0x90DF7A4C",
            "manualHash": true
        },
        "0xF74B1FFA4A15FBEA": {
            "name": "_SET_AI_GLOBAL_PATH_NODES_TYPE",
            "params": [{ "name": "type", "type": "int" }],
            "results": "void",
            "description": "Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xF74B1FFA4A15FBEA",
            "ns": "PATHFIND",
            "manualHash": true
        },
        "0xD0BC1C6FB18EE154": {
            "name": "SET_GPS_DISABLED_ZONE_AT_INDEX",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X coordinate of first vector."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y coordinate of first vector."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z coordinate of first vector."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X coordinate of second vector."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y coordinate of second vector."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z coordinate of second vector."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "Index of zone."
                }
            ],
            "results": "void",
            "description": "Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.\n\nYou can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.\n\n**Setting a waypoint at the same coordinate:**\n\nDisabled Zone: <https://i.imgur.com/P9VUuxM.png>\n\nEnabled Zone (normal): <https://i.imgur.com/BPi24aw.png>",
            "examples": [],
            "hash": "0xD0BC1C6FB18EE154",
            "ns": "PATHFIND",
            "aliases": ["0xD0BC1C6FB18EE154"],
            "jhash": "0x98BDB311",
            "manualHash": true
        },
        "0x72751156E7678833": {
            "name": "SET_IGNORE_NO_GPS_FLAG",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x72751156E7678833",
            "ns": "PATHFIND",
            "jhash": "0xB72CF194",
            "manualHash": true
        },
        "0x0027501B9F3B407E": {
            "name": "SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                }
            ],
            "results": "void",
            "description": "See [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.\n\n```\nNativeDB Added Parameter 8: Any p7\n\nbool p7 - always 1  \n```",
            "examples": [],
            "hash": "0x0027501B9F3B407E",
            "ns": "PATHFIND",
            "jhash": "0x9DB5D209",
            "manualHash": true
        },
        "0xE04B48F2CC926253": {
            "name": "SET_PED_PATHS_BACK_TO_ORIGINAL",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 7: Any p6\n```",
            "examples": [],
            "hash": "0xE04B48F2CC926253",
            "ns": "PATHFIND",
            "jhash": "0x3F1ABDA4",
            "manualHash": true
        },
        "0xDC20483CD3DD5201": {
            "name": "SET_GPS_DISABLED_ZONE",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "y1",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "z1",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "x2",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "y2",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "z2",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC20483CD3DD5201",
            "ns": "PATHFIND",
            "jhash": "0x720B8073",
            "manualHash": true
        },
        "0x34F060F4BF92E018": {
            "name": "SET_PED_PATHS_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "unknown", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 8: Any p7\n```",
            "examples": [],
            "hash": "0x34F060F4BF92E018",
            "ns": "PATHFIND",
            "jhash": "0x2148EA84",
            "manualHash": true
        },
        "0x109E99373F290687": {
            "name": "UPDATE_NAVMESH_BLOCKING_OBJECT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x109E99373F290687",
            "ns": "PATHFIND",
            "jhash": "0x4E9776D0",
            "manualHash": true
        },
        "0x1EE7063B80FFC77C": {
            "name": "SET_ROADS_BACK_TO_ORIGINAL",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "void",
            "description": "```\nmissing a last parameter int p6  \n```\n\n```\nNativeDB Added Parameter 7: Any p6\n```",
            "examples": [],
            "hash": "0x1EE7063B80FFC77C",
            "ns": "PATHFIND",
            "jhash": "0x86AC4A85",
            "manualHash": true
        },
        "0xBF1A602B5BA52FEE": {
            "name": "SET_ROADS_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "nodeEnabled", "type": "BOOL" },
                { "name": "unknown2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "When this is set to false, all nodes in the area get disabled.\n\n`GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.\n\nIf it's true,\n\n`GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.",
            "examples": [],
            "hash": "0xBF1A602B5BA52FEE",
            "ns": "PATHFIND",
            "jhash": "0xEBC7B918",
            "manualHash": true
        },
        "0x1A5AA1208AF5DB59": {
            "name": "SET_ROADS_IN_ANGLED_AREA",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                },
                { "name": "unknown1", "type": "BOOL" },
                { "name": "unknown2", "type": "BOOL" },
                { "name": "unknown3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.\n\nSee [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.",
            "examples": [],
            "hash": "0x1A5AA1208AF5DB59",
            "ns": "PATHFIND",
            "jhash": "0xBD088F4B",
            "manualHash": true
        }
    },
    "NETWORK": {
        "0xBEC0816FF5ACBCDA": {
            "name": "_ACTIVATE_DAMAGE_TRACKER_ON_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBEC0816FF5ACBCDA",
            "ns": "NETWORK",
            "aliases": ["0xBEC0816FF5ACBCDA"],
            "manualHash": true
        },
        "0xEC5E3AF5289DCA81": {
            "name": "BAD_SPORT_PLAYER_LEFT_DETECTED",
            "params": [
                { "name": "networkHandle", "type": "int*" },
                { "name": "event", "type": "int" },
                { "name": "amountReceived", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEC5E3AF5289DCA81",
            "ns": "NETWORK",
            "aliases": ["0xEC5E3AF5289DCA81"],
            "jhash": "0x4C2C6B6A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x800DD4721A8B008B": {
            "name": "CAN_REGISTER_MISSION_OBJECTS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x800DD4721A8B008B",
            "ns": "NETWORK",
            "jhash": "0x7F85DFDE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBCBF4FEF9FA5D781": {
            "name": "CAN_REGISTER_MISSION_PEDS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBCBF4FEF9FA5D781",
            "ns": "NETWORK",
            "jhash": "0xCCAA5CE9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0A49D1CB6E34AF72": {
            "name": "_CAN_REGISTER_MISSION_PICKUPS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0A49D1CB6E34AF72",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD45B1FFCCD52FF19": {
            "name": "ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID",
            "params": [
                { "name": "netID", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD45B1FFCCD52FF19",
            "ns": "NETWORK",
            "jhash": "0x95D07BA5",
            "manualHash": true
        },
        "0x7277F1F2E085EE74": {
            "name": "CAN_REGISTER_MISSION_VEHICLES",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7277F1F2E085EE74",
            "ns": "NETWORK",
            "jhash": "0x818B6830",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4F18196C8D38768D": {
            "name": "CLOUD_CHECK_AVAILABILITY",
            "params": [],
            "results": "void",
            "description": "```\nDownloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json\n```",
            "examples": [],
            "hash": "0x4F18196C8D38768D",
            "ns": "NETWORK",
            "aliases": ["0x4F18196C8D38768D", "_DOWNLOAD_CHECK"],
            "jhash": "0xC38E9DB0",
            "manualHash": true
        },
        "0x69778E7564BADE6D": {
            "name": "CAN_REGISTER_MISSION_ENTITIES",
            "params": [
                { "name": "ped_amt", "type": "int" },
                { "name": "vehicle_amt", "type": "int" },
                { "name": "object_amt", "type": "int" },
                { "name": "pickup_amt", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x69778E7564BADE6D",
            "ns": "NETWORK",
            "jhash": "0x83794008",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A3D5568AF297CD5": {
            "name": "CLOUD_DID_REQUEST_SUCCEED",
            "params": [{ "name": "handle", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3A3D5568AF297CD5",
            "ns": "NETWORK",
            "aliases": ["0x3A3D5568AF297CD5"],
            "jhash": "0x9B9AFFF1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7ABAC5DE675EE3B": {
            "name": "CLOUD_IS_CHECKING_AVAILABILITY",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC7ABAC5DE675EE3B",
            "ns": "NETWORK",
            "aliases": ["0xC7ABAC5DE675EE3B"],
            "jhash": "0x32A4EB22",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x966DD84FB6A46017": {
            "name": "_CLEAR_LAUNCH_PARAMS",
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x966DD84FB6A46017",
            "ns": "NETWORK",
            "aliases": ["0x966DD84FB6A46017"],
            "manualHash": true
        },
        "0xA75E2B6733DA5142": {
            "name": "_FACEBOOK_DO_UNK_CHECK",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA75E2B6733DA5142",
            "ns": "NETWORK",
            "aliases": ["0xA75E2B6733DA5142"],
            "jhash": "0x11E8B5CD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC64DED7EF0D2FE37": {
            "name": "CLOUD_DELETE_MEMBER_FILE",
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC64DED7EF0D2FE37",
            "ns": "NETWORK",
            "aliases": ["0xC64DED7EF0D2FE37"],
            "jhash": "0x2B7B57B3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x098AB65B9ED9A9EC": {
            "name": "_FACEBOOK_SET_HEIST_COMPLETE",
            "params": [
                { "name": "heistName", "type": "char*" },
                { "name": "cashEarned", "type": "int" },
                { "name": "xpEarned", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x098AB65B9ED9A9EC",
            "ns": "NETWORK",
            "aliases": ["0x098AB65B9ED9A9EC"],
            "jhash": "0x30B51753",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4C61B39930D045DA": {
            "name": "CLOUD_HAS_REQUEST_COMPLETED",
            "params": [{ "name": "handle", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4C61B39930D045DA",
            "ns": "NETWORK",
            "aliases": ["0x4C61B39930D045DA"],
            "jhash": "0xBAF52DD8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0B0CC10720653F3B": {
            "name": "CLOUD_GET_AVAILABILITY_CHECK_RESULT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0B0CC10720653F3B",
            "ns": "NETWORK",
            "aliases": ["NETWORK_ENABLE_MOTION_DRUGGED", "0x0B0CC10720653F3B"],
            "annotations": { "cs_type": "int" },
            "jhash": "0x9262744C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x416DBD4CD6ED8DD2": {
            "name": "FADE_OUT_LOCAL_PLAYER",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nHardcoded to not work in SP.  \n```",
            "examples": [],
            "hash": "0x416DBD4CD6ED8DD2",
            "ns": "NETWORK",
            "jhash": "0x8FA7CEBD",
            "manualHash": true
        },
        "0xAC97AF97FA68E5D5": {
            "name": "CONVERT_POSIX_TIME",
            "params": [
                { "name": "posixTime", "type": "int" },
                { "name": "timeStructure", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nTakes the specified time and writes it to the structure specified in the second argument.  \nstruct date_time  \n{ \n    alignas(8) int year;  \n    alignas(8) int month;  \n    alignas(8) int day;  \n    alignas(8) int hour;  \n    alignas(8) int minute;  \n    alignas(8) int second;  \n};\n```",
            "examples": [],
            "hash": "0xAC97AF97FA68E5D5",
            "ns": "NETWORK",
            "aliases": ["_GET_DATE_AND_TIME_FROM_UNIX_EPOCH"],
            "jhash": "0xBB7CCE49",
            "manualHash": true
        },
        "0x62B9FEC9A11F10EF": {
            "name": "_FACEBOOK_IS_SENDING_DATA",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x62B9FEC9A11F10EF",
            "ns": "NETWORK",
            "aliases": ["0x62B9FEC9A11F10EF"],
            "jhash": "0x37A28C26",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC48473142545431": {
            "name": "_FACEBOOK_SET_CREATE_CHARACTER_COMPLETE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDC48473142545431",
            "ns": "NETWORK",
            "aliases": ["0xDC48473142545431"],
            "jhash": "0x02DAD93F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x43865688AE10F0D7": {
            "name": "_FACEBOOK_IS_AVAILABLE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x43865688AE10F0D7",
            "ns": "NETWORK",
            "aliases": ["0x43865688AE10F0D7"],
            "jhash": "0x429AEAB3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0AE1F1653B554AB9": {
            "name": "_FACEBOOK_SET_MILESTONE_COMPLETE",
            "params": [{ "name": "milestoneId", "type": "int" }],
            "results": "BOOL",
            "description": "```\nmilestoneId:  \n0 = \"percentcomplete\"  \n1 = \"storycomplete\"  \n2 = \"vehicles\"  \n3 = \"properties\"  \n4 = \"psych\"  \n5 = \"mapreveal\"  \n6 = \"prologue\"  \n```",
            "examples": [],
            "hash": "0x0AE1F1653B554AB9",
            "ns": "NETWORK",
            "aliases": ["0x0AE1F1653B554AB9"],
            "jhash": "0x2D947814",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x716B6DB9D1886106": {
            "name": "FILLOUT_PM_PLAYER_LIST_WITH_NAMES",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x716B6DB9D1886106",
            "ns": "NETWORK",
            "jhash": "0xB8DF604E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9A73240B49945C76": {
            "name": "GET_CLOUD_TIME_AS_INT",
            "params": [],
            "results": "int",
            "description": "Returns POSIX timestamp.\n\nRenamed from `_GET_POSIX_TIME` to `GET_CLOUD_TIME_AS_INT` because of conflicting native names ([`0xDA488F299A5B164E`](#\\_0xDA488F299A5B164E))",
            "examples": [],
            "hash": "0x9A73240B49945C76",
            "ns": "NETWORK",
            "aliases": ["0x9A73240B49945C76"],
            "jhash": "0xF2FDF2E0",
            "manualHash": true,
            "resultsDescription": "An int representing the cloud time."
        },
        "0xF12E6CD06C73D69E": {
            "name": "_GET_CLOUD_TIME_AS_STRING",
            "params": [],
            "results": "char*",
            "description": "```\nSame as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).\n```",
            "examples": [],
            "hash": "0xF12E6CD06C73D69E",
            "ns": "NETWORK",
            "aliases": ["0xF12E6CD06C73D69E"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x662635855957C411": {
            "name": "GET_COMMERCE_ITEM_ID",
            "params": [{ "name": "index", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x662635855957C411",
            "ns": "NETWORK",
            "aliases": ["0x662635855957C411"],
            "jhash": "0x4ACF110C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCBBD7C4991B64809": {
            "name": "FILLOUT_PM_PLAYER_LIST",
            "params": [
                { "name": "networkHandle", "type": "int*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCBBD7C4991B64809",
            "ns": "NETWORK",
            "jhash": "0xCE40F423",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB4271092CA7EDF48": {
            "name": "GET_COMMERCE_ITEM_NAME",
            "params": [{ "name": "index", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xB4271092CA7EDF48",
            "ns": "NETWORK",
            "aliases": ["0xB4271092CA7EDF48"],
            "jhash": "0x1AA3A0D5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2A7776C709904AB0": {
            "name": "GET_COMMERCE_ITEM_NUM_CATS",
            "params": [{ "name": "index", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2A7776C709904AB0",
            "ns": "NETWORK",
            "aliases": ["0x2A7776C709904AB0"],
            "jhash": "0x1CF89DA5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6F44CBF56D79FAC0": {
            "name": "GET_COMMERCE_ITEM_CAT",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "index2", "type": "int" }
            ],
            "results": "char*",
            "description": "```\nindex2 is unused\n```",
            "examples": [],
            "hash": "0x6F44CBF56D79FAC0",
            "ns": "NETWORK",
            "aliases": ["0x6F44CBF56D79FAC0"],
            "jhash": "0x16E53875",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA94551B50B4932C": {
            "name": "GET_COMMERCE_PRODUCT_PRICE",
            "params": [{ "name": "index", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xCA94551B50B4932C",
            "ns": "NETWORK",
            "aliases": ["0xCA94551B50B4932C"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x37877757",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA72835064DD63E4C": {
            "name": "GET_MAX_NUM_NETWORK_PICKUPS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA72835064DD63E4C",
            "ns": "NETWORK",
            "aliases": ["0xA72835064DD63E4C"],
            "jhash": "0x6A036061",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7BE335216B5EC7C": {
            "name": "GET_MAX_NUM_NETWORK_OBJECTS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC7BE335216B5EC7C",
            "ns": "NETWORK",
            "aliases": ["0xC7BE335216B5EC7C"],
            "jhash": "0x8687E285",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x722F5D28B61C5EA8": {
            "name": "GET_COMMERCE_ITEM_TEXTURENAME",
            "params": [{ "name": "index", "type": "int" }],
            "results": "char*",
            "description": "```\nNativeDB Added Parameter 3: int p2\n```",
            "examples": [],
            "hash": "0x722F5D28B61C5EA8",
            "ns": "NETWORK",
            "aliases": ["0x722F5D28B61C5EA8"],
            "jhash": "0x44A58B0A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF2EAC213D5EA0623": {
            "name": "GET_NUM_COMMERCE_ITEMS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF2EAC213D5EA0623",
            "ns": "NETWORK",
            "aliases": ["0xF2EAC213D5EA0623"],
            "jhash": "0x965EA007",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7A5487FE9FAA6B48": {
            "name": "GET_NETWORK_TIME",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x7A5487FE9FAA6B48",
            "ns": "NETWORK",
            "jhash": "0x998103C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0AFCE529F69B21FF": {
            "name": "GET_MAX_NUM_NETWORK_VEHICLES",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0AFCE529F69B21FF",
            "ns": "NETWORK",
            "aliases": ["0x0AFCE529F69B21FF"],
            "jhash": "0xC3A12135",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x12B6281B6C6706C0": {
            "name": "GET_NUM_CREATED_MISSION_OBJECTS",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x12B6281B6C6706C0",
            "ns": "NETWORK",
            "aliases": ["0x12B6281B6C6706C0"],
            "jhash": "0x603FA104",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x89023FBBF9200E9F": {
            "name": "GET_NETWORK_TIME_ACCURATE",
            "params": [],
            "results": "int",
            "description": "Returns the same value as [`GetNetworkTime`](#\\_0x7A5487FE9FAA6B48) in freemode, but as opposed to `GetNetworkTime` it always gets the most recent time, instead of once per tick.\n\nCould be used for benchmarking since it can return times in ticks.",
            "examples": [],
            "hash": "0x89023FBBF9200E9F",
            "ns": "NETWORK",
            "aliases": ["0x89023FBBF9200E9F"],
            "jhash": "0x98AA48E5",
            "manualHash": true,
            "resultsDescription": "Returns the network time as an integer"
        },
        "0x1F13D5AE5CB17E17": {
            "name": "GET_NUM_RESERVED_MISSION_PEDS",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "```\np0 appears to be for MP  \n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x1F13D5AE5CB17E17",
            "ns": "NETWORK",
            "jhash": "0x6C25975C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0CD9AB83489430EA": {
            "name": "GET_NUM_CREATED_MISSION_VEHICLES",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0CD9AB83489430EA",
            "ns": "NETWORK",
            "aliases": ["0x0CD9AB83489430EA"],
            "jhash": "0x20527695",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCB215C4B56A7FAE7": {
            "name": "GET_NUM_CREATED_MISSION_PEDS",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xCB215C4B56A7FAE7",
            "ns": "NETWORK",
            "aliases": ["0xCB215C4B56A7FAE7"],
            "jhash": "0xD8FEC4F8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0C1F7D49C39D2289": {
            "name": "GET_MAX_NUM_NETWORK_PEDS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0C1F7D49C39D2289",
            "ns": "NETWORK",
            "aliases": ["0x0C1F7D49C39D2289"],
            "jhash": "0x744AC008",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8BD6C6DEA20E82C6": {
            "name": "GET_STATUS_OF_TEXTURE_DOWNLOAD",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "```\n0 = succeeded\n1 = pending\n2 = failed\n```",
            "examples": [],
            "hash": "0x8BD6C6DEA20E82C6",
            "ns": "NETWORK",
            "aliases": [
                "0x8BD6C6DEA20E82C6",
                "_GET_STATUS_OF_TEXTURE_DOWNLOAD"
            ],
            "jhash": "0x03225BA3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x017008CCDAD48503": {
            "name": "GET_TIME_OFFSET",
            "params": [
                { "name": "timeA", "type": "int" },
                { "name": "timeB", "type": "int" }
            ],
            "results": "int",
            "description": "```\nAdds the first argument to the second.  \n```",
            "examples": [],
            "hash": "0x017008CCDAD48503",
            "ns": "NETWORK",
            "jhash": "0x2E079AE6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFCA9373EF340AC0A": {
            "name": "_GET_ONLINE_VERSION",
            "params": [],
            "results": "char*",
            "description": "```\nOnline version is defined here: update\\update.rpf\\common\\data\\version.txt\nExample:\n[ONLINE_VERSION_NUMBER]\n1.33\n_GET_ONLINE_VERSION() will return \"1.33\"\n```",
            "examples": [],
            "hash": "0xFCA9373EF340AC0A",
            "ns": "NETWORK",
            "aliases": ["_GET_GAME_VERSION"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCF3A965906452031": {
            "name": "GET_NUM_RESERVED_MISSION_VEHICLES",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "```\np0 appears to be for MP  \n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xCF3A965906452031",
            "ns": "NETWORK",
            "jhash": "0xA9A308F3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA81B5F10BC43AC2": {
            "name": "GET_NUM_RESERVED_MISSION_OBJECTS",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "```\np0 appears to be for MP  \n```\n\n```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xAA81B5F10BC43AC2",
            "ns": "NETWORK",
            "jhash": "0x16A80CD6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6E192E33AD436366": {
            "name": "IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID",
            "params": [{ "name": "netID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6E192E33AD436366",
            "ns": "NETWORK",
            "jhash": "0x597063BA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA2C6FC031D46FFF0": {
            "name": "GET_TIME_DIFFERENCE",
            "params": [
                { "name": "timeA", "type": "int" },
                { "name": "timeB", "type": "int" }
            ],
            "results": "int",
            "description": "```\nSubtracts the second argument from the first.  \n```",
            "examples": [],
            "hash": "0xA2C6FC031D46FFF0",
            "ns": "NETWORK",
            "jhash": "0x5666A837",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2EAC52B4019E2782": {
            "name": "IS_COMMERCE_STORE_OPEN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2EAC52B4019E2782",
            "ns": "NETWORK",
            "aliases": ["0x2EAC52B4019E2782"],
            "jhash": "0x25E2DBA9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9E23B1777A927DAD": {
            "name": "GET_TIME_AS_STRING",
            "params": [{ "name": "time", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x9E23B1777A927DAD",
            "ns": "NETWORK",
            "aliases": ["_FORMAT_TIME"],
            "jhash": "0x8218944E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x46718ACEEDEAFC84": {
            "name": "HAS_NETWORK_TIME_STARTED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x46718ACEEDEAFC84",
            "ns": "NETWORK",
            "aliases": ["0x46718ACEEDEAFC84"],
            "jhash": "0x4538C4A2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEA14EEF5B7CD2C30": {
            "name": "IS_COMMERCE_DATA_VALID",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEA14EEF5B7CD2C30",
            "ns": "NETWORK",
            "aliases": ["0xEA14EEF5B7CD2C30"],
            "jhash": "0xEEFC8A55",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE73092F4157CD126": {
            "name": "IS_PLAYER_IN_CUTSCENE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE73092F4157CD126",
            "ns": "NETWORK",
            "jhash": "0xE0A619BD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x21D04D7BC538C146": {
            "name": "_IS_ENTITY_GHOSTED_TO_LOCAL_PLAYER",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x21D04D7BC538C146",
            "ns": "NETWORK",
            "aliases": ["0x21D04D7BC538C146", "_IS_ENTITY_A_GHOST"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x883D79C4071E18B3": {
            "name": "IS_STORE_AVAILABLE_TO_USER",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x883D79C4071E18B3",
            "ns": "NETWORK",
            "aliases": ["0x883D79C4071E18B3"],
            "jhash": "0xD32FA11F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB2092A1EAA7FD45F": {
            "name": "_IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB2092A1EAA7FD45F",
            "ns": "NETWORK",
            "aliases": ["0xB2092A1EAA7FD45F"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD82CF8E64C8729D8": {
            "name": "IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD82CF8E64C8729D8",
            "ns": "NETWORK",
            "jhash": "0x23C5274E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF5BC95857BD6D512": {
            "name": "IS_TIME_EQUAL_TO",
            "params": [
                { "name": "timeA", "type": "int" },
                { "name": "timeB", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nReturns true if the two times are equal; otherwise returns false.  \n```",
            "examples": [],
            "hash": "0xF5BC95857BD6D512",
            "ns": "NETWORK",
            "aliases": ["_ARE_INTEGERS_EQUAL"],
            "jhash": "0x8B4D1C06",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDE350F8651E4346C": {
            "name": "IS_TIME_MORE_THAN",
            "params": [
                { "name": "timeA", "type": "int" },
                { "name": "timeB", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nSubtracts the first argument from the second, then returns whether the result is negative.  \n```",
            "examples": [],
            "hash": "0xDE350F8651E4346C",
            "ns": "NETWORK",
            "aliases": ["_SUBTRACT_A_FROM_B_AND_CHECK_IF_NEGATIVE"],
            "jhash": "0xBBB6DF61",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x041C7F2A6C9894E6": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x041C7F2A6C9894E6",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA1607996431332DF": {
            "name": "IS_NETWORK_ID_OWNED_BY_PARTICIPANT",
            "params": [{ "name": "netId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA1607996431332DF",
            "ns": "NETWORK",
            "aliases": [
                "0xA1607996431332DF",
                "_NETWORK_CAN_NETWORK_ID_BE_SEEN"
            ],
            "jhash": "0xEA5176C0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC3A310219E5DA62": {
            "name": "IS_SPHERE_VISIBLE_TO_PLAYER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDC3A310219E5DA62",
            "ns": "NETWORK",
            "jhash": "0xE9FCFB32",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x04918A41BC9B8157": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x04918A41BC9B8157",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0D77A82DC2D0DA59": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "void",
            "description": "```\nNETWORK_SET_*\n```",
            "examples": [],
            "hash": "0x0D77A82DC2D0DA59",
            "ns": "NETWORK",
            "jhash": "0x0808D4CC",
            "manualHash": true
        },
        "0xCB2CF5148012C8D0": {
            "name": "IS_TIME_LESS_THAN",
            "params": [
                { "name": "timeA", "type": "int" },
                { "name": "timeB", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nSubtracts the second argument from the first, then returns whether the result is negative.  \n```",
            "examples": [],
            "hash": "0xCB2CF5148012C8D0",
            "ns": "NETWORK",
            "aliases": ["_SUBTRACT_B_FROM_A_AND_CHECK_IF_NEGATIVE"],
            "jhash": "0x50EF8FC6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0EDE326D47CD0F3E": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "player", "type": "Player" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0EDE326D47CD0F3E",
            "ns": "NETWORK",
            "jhash": "0xBEB7281A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1171A97A3D3981B6": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1171A97A3D3981B6",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0CF6CC51AA18F0F8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x0CF6CC51AA18F0F8",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x023ACAB2DC9DC4A4": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x023ACAB2DC9DC4A4",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x140E6A44870A11CE": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x140E6A44870A11CE",
            "ns": "NETWORK",
            "jhash": "0x50507BED",
            "manualHash": true
        },
        "0x1153FA02A659051C": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1153FA02A659051C",
            "ns": "NETWORK",
            "jhash": "0x57F9BC83",
            "manualHash": true
        },
        "0x07EAB372C8841D99": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x07EAB372C8841D99",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x13F1FCB111B820B0": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSET_NETWORK_*\n```",
            "examples": [],
            "hash": "0x13F1FCB111B820B0",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x0F1A4B45B7693B95": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x0F1A4B45B7693B95",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x14922ED3E38761F0": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNETWORK_IS_*\n```",
            "examples": [],
            "hash": "0x14922ED3E38761F0",
            "ns": "NETWORK",
            "jhash": "0x8FA6EE0E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x155467ACA0F55705": {
            "params": [],
            "results": "int",
            "description": "```\nChecks some commerce stuff\n\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x155467ACA0F55705",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x1398582B7F72B3ED": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1398582B7F72B3ED",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x144DA052257AE7D8": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x144DA052257AE7D8",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x1D610EB0FEA716D9": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1D610EB0FEA716D9",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1D4DC17C38FEAFF0": {
            "params": [],
            "results": "BOOL",
            "description": "```\nIS_COMMERCE_*\n```",
            "examples": [],
            "hash": "0x1D4DC17C38FEAFF0",
            "ns": "NETWORK",
            "jhash": "0xED4A272F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x162C23CA83ED0A62": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x162C23CA83ED0A62",
            "ns": "NETWORK",
            "jhash": "0xB3BBD241",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x17C9E241111A674D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x17C9E241111A674D",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x24E4E51FC16305F9": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x24E4E51FC16305F9",
            "ns": "NETWORK",
            "jhash": "0x742075FE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1F7BC3539F9E0224": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x1F7BC3539F9E0224",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x2302C0264EA58D31": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2302C0264EA58D31",
            "ns": "NETWORK",
            "jhash": "0x8DCFE77D",
            "manualHash": true
        },
        "0x261E97AD7BCF3D40": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x261E97AD7BCF3D40",
            "ns": "NETWORK",
            "jhash": "0x7EF353E1",
            "manualHash": true
        },
        "0x1F8E00FB18239600": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1F8E00FB18239600",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x25D990F8E0E3F13C": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x25D990F8E0E3F13C",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x2555CF7DA5473794": {
            "params": [],
            "results": "Any",
            "description": "```\nDoes nothing (it's a nullsub).\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x2555CF7DA5473794",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x265559DA40B3F327": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x265559DA40B3F327",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x283B6062A2C01E9B": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x283B6062A2C01E9B",
            "ns": "NETWORK",
            "jhash": "0x96E28FE2",
            "manualHash": true
        },
        "0x265635150FB0D82E": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x265635150FB0D82E",
            "ns": "NETWORK",
            "jhash": "0xA7FA70AE",
            "manualHash": true
        },
        "0x26F07DD83A5F7F98": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x26F07DD83A5F7F98",
            "ns": "NETWORK",
            "jhash": "0x9A176B6E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2BF66D2E7414F686": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x2BF66D2E7414F686",
            "ns": "NETWORK",
            "jhash": "0x9156EFC0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B1C623823DB0D9D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x2B1C623823DB0D9D",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2E4C123D1C8A710E": {
            "params": [
                { "name": "retPlayerIds", "type": "int*" },
                { "name": "retNumber", "type": "int*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x2E4C123D1C8A710E",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2CE9D95E4051AECD": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2CE9D95E4051AECD",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x2B51EDBEFC301339": {
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2B51EDBEFC301339",
            "ns": "NETWORK",
            "jhash": "0x8E952B12",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x32EBD154CB6B8B99": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x32EBD154CB6B8B99",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x2E0BF682CC778D49": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2E0BF682CC778D49",
            "ns": "NETWORK",
            "jhash": "0xBFAA349B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2D5DC831176D0114": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2D5DC831176D0114",
            "ns": "NETWORK",
            "jhash": "0xA69AE16C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3C5C1E2C2FF814B1": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets some voice chat related value.\n\nNETWORK_SET_*\n```",
            "examples": [],
            "hash": "0x3C5C1E2C2FF814B1",
            "ns": "NETWORK",
            "jhash": "0xC9DDA85B",
            "manualHash": true
        },
        "0x367EF5E2F439B4C6": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x367EF5E2F439B4C6",
            "ns": "NETWORK",
            "jhash": "0x53C9563C",
            "manualHash": true
        },
        "0x4237E822315D8BA9": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4237E822315D8BA9",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x39917E1B4CB0F911": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x39917E1B4CB0F911",
            "ns": "NETWORK",
            "jhash": "0xF60986FC",
            "manualHash": true
        },
        "0x2DA41ED6E1FCD7A5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "TypeOfWeapon", "type": "int*" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x2DA41ED6E1FCD7A5",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4348BFDA56023A2F": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x4348BFDA56023A2F",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x36391F397731595D": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x36391F397731595D",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3FC795691834481D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "nullsub, doesn't do anything\n\n```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x3FC795691834481D",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x3855FB5EB2C5E8B2": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x3855FB5EB2C5E8B2",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x37D5F739FD494675": {
            "params": [
                { "name": "p0", "type": "Any", "description": "unknown." }
            ],
            "results": "int",
            "description": "I've had this return the player's ped handle sometimes, but also other random entities.\n\nWhatever p0 is, it's at least not synced to other players.\nAt least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).\nBut another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).",
            "examples": [],
            "hash": "0x37D5F739FD494675",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Returns an entity handle or -1, value changes based on p0's value."
        },
        "0x444C4525ECE0A4B9": {
            "params": [],
            "results": "void",
            "description": "```\nrelated to: \nNETWORK_BAIL  \nNETWORK_BAIL_TRANSITION  \nNETWORK_JOIN_GROUP_ACTIVITY  \nNETWORK_JOIN_TRANSITION  \nNETWORK_LAUNCH_TRANSITION  \nNETWORK_SESSION_HOST  \nNETWORK_SESSION_HOST_CLOSED  \nNETWORK_SESSION_HOST_FRIENDS_ONLY  \nNETWORK_SESSION_HOST_SINGLE_PLAYER  \nNETWORK_SESSION_VOICE_LEAVE  \n```",
            "examples": [],
            "hash": "0x444C4525ECE0A4B9",
            "ns": "NETWORK",
            "jhash": "0xCC7DCE24",
            "manualHash": true
        },
        "0x38B7C51AB1EDC7D8": {
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x38B7C51AB1EDC7D8",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x45F35C0EDC33B03B": {
            "params": [
                { "name": "netScene", "type": "int" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "char*" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "NETWORK_A\\*\nSimilar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.\nIn casino_slots it is used one time in a synced scene involving a ped and the slot machine?\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x45F35C0EDC33B03B",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x4C9034162368E206": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x4C9034162368E206",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x45A83257ED02D9BC": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x45A83257ED02D9BC",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x3FA36981311FA4FF": {
            "params": [
                { "name": "netId", "type": "int" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3FA36981311FA4FF",
            "ns": "NETWORK",
            "jhash": "0x00AE4E17",
            "manualHash": true
        },
        "0x4811BBAC21C5FCD5": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4811BBAC21C5FCD5",
            "ns": "NETWORK",
            "jhash": "0xE5961511",
            "manualHash": true
        },
        "0x5539C3EBF104A53A": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5539C3EBF104A53A",
            "ns": "NETWORK",
            "jhash": "0xAE396263",
            "manualHash": true
        },
        "0x45E816772E93A9DB": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x45E816772E93A9DB",
            "ns": "NETWORK",
            "jhash": "0x8E664EFD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x584770794D758C18": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x584770794D758C18",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4AD490AE1536933B": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x4AD490AE1536933B",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4A9FDE3A5A6D0437": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x4A9FDE3A5A6D0437",
            "ns": "NETWORK",
            "jhash": "0x18F03AFD",
            "manualHash": true
        },
        "0x4C2A9FDC22377075": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4C2A9FDC22377075",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x4D02279C83BE69FE": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x4D02279C83BE69FE",
            "ns": "NETWORK",
            "jhash": "0xA7F3F82B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5A34CD9C3C5BEC44": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5A34CD9C3C5BEC44",
            "ns": "NETWORK",
            "jhash": "0x346B506C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5C497525F803486B": {
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x5C497525F803486B",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x53C10C8BD774F2C9": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x53C10C8BD774F2C9",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5324A0E3E4CE3570": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5324A0E3E4CE3570",
            "ns": "NETWORK",
            "jhash": "0x87D1E6BD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5ECD378EE64450AB": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5ECD378EE64450AB",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x4DF7CFFF471A7FB1": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4DF7CFFF471A7FB1",
            "ns": "NETWORK",
            "jhash": "0xCB1CD6D3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5E3AA4CA2B6FB0EE": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5E3AA4CA2B6FB0EE",
            "ns": "NETWORK",
            "jhash": "0x7BBEA8CF",
            "manualHash": true
        },
        "0x560B423D73015E77": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x560B423D73015E77",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x559EBF901A8C68E0": {
            "params": [{ "name": "gamerHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "```\n_NETWORK_CAN_VIEW_* - _NETWORK_CAN_SESSION*\n\nNETWORK_CAN_PLAY_GAMER_USER_CONTENT?\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x559EBF901A8C68E0",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x59D421683D31835A": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x59D421683D31835A",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x600F8CB31C7AAB6E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x600F8CB31C7AAB6E",
            "ns": "NETWORK",
            "jhash": "0x959E43A3",
            "manualHash": true
        },
        "0x59328EB08C5CEB2B": {
            "params": [],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0x59328EB08C5CEB2B",
            "ns": "NETWORK",
            "jhash": "0x70F6D3AD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x64E5C4CC82847B73": {
            "params": [],
            "results": "BOOL",
            "description": "Hardcoded to return false.\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x64E5C4CC82847B73",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x617F49C2668E6155": {
            "params": [],
            "results": "int",
            "description": "```\nNETWORK_GET_NUM_*\n```",
            "examples": [],
            "hash": "0x617F49C2668E6155",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x60EDD13EB3AC1FF3": {
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if profile setting 901 is set to true and sets it to false.\n\nNETWORK_C*\n```",
            "examples": [],
            "hash": "0x60EDD13EB3AC1FF3",
            "ns": "NETWORK",
            "jhash": "0x4DEBC227",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x64D779659BC37B19": {
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Vector3",
            "description": "```\nNETWORK_GET_*\n```",
            "examples": [],
            "hash": "0x64D779659BC37B19",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x692D58DF40657E8C": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x692D58DF40657E8C",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x67FC09BC554A75E5": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x67FC09BC554A75E5",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0x6A5D89D7769A40D8": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets some voice chat related value.\nNETWORK_SET_*\n```",
            "examples": [],
            "hash": "0x6A5D89D7769A40D8",
            "ns": "NETWORK",
            "jhash": "0x4FFEFE43",
            "manualHash": true
        },
        "0x6CE50E47F5543D0C": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6CE50E47F5543D0C",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x68103E2247887242": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x68103E2247887242",
            "ns": "NETWORK",
            "jhash": "0x0095DB71",
            "manualHash": true
        },
        "0x63B406D7884BFA95": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x63B406D7884BFA95",
            "ns": "NETWORK",
            "jhash": "0xF79FFF3C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6FD992C4A1C1B986": {
            "params": [],
            "results": "Any",
            "description": "```\nDoes nothing (it's a nullsub).\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x6FD992C4A1C1B986",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x6BFF5F84102DF80A": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x6BFF5F84102DF80A",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x741A3D8380319A81": {
            "params": [],
            "results": "void",
            "description": "```\nHas something to do with a host request.\n\nNETWORK_RE*\n```",
            "examples": [],
            "hash": "0x741A3D8380319A81",
            "ns": "NETWORK",
            "jhash": "0x331D9A27",
            "manualHash": true
        },
        "0x74FB3E29E6D10FA9": {
            "params": [],
            "results": "int",
            "description": "```\nHardcoded to return zero.\n==== PS4 specific info ====\nReturns some sort of unavailable reason:\n-1 = REASON_INVALID\n 0 = REASON_OTHER\n 1 = REASON_SYSTEM_UPDATE\n 2 = REASON_GAME_UPDATE\n 3 = REASON_SIGNED_OUT\n 4 = REASON_AGE\n 5 = REASON_CONNECTION\n=================================\n```",
            "examples": [],
            "hash": "0x74FB3E29E6D10FA9",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0x742B58F723233ED9": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x742B58F723233ED9",
            "ns": "NETWORK",
            "jhash": "0x5E832444",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x702BC4D605522539": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x702BC4D605522539",
            "ns": "NETWORK",
            "jhash": "0x913FD7D6",
            "manualHash": true
        },
        "0x76B3F29D3F967692": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x76B3F29D3F967692",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x6FB7BB3607D27FA2": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x6FB7BB3607D27FA2",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0x793FF272D5B365F4": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x793FF272D5B365F4",
            "ns": "NETWORK",
            "jhash": "0xF0211AC1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x77FADDCBE3499DF7": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x77FADDCBE3499DF7",
            "ns": "NETWORK",
            "jhash": "0x8179C48A",
            "manualHash": true
        },
        "0x7808619F31FF22DB": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x7808619F31FF22DB",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 1."
        },
        "0x7D395EA61622E116": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7D395EA61622E116",
            "ns": "NETWORK",
            "jhash": "0x5C05B7E1",
            "manualHash": true
        },
        "0x7DB53B37A2F211A0": {
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x7DB53B37A2F211A0",
            "ns": "NETWORK",
            "jhash": "0x053BB329",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x83660B734994124D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "damageDealt", "type": "int*" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x83660B734994124D",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x83FE8D7229593017": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x83FE8D7229593017",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x754615490A029508": {
            "params": [],
            "results": "int",
            "description": "```\nChecks some commerce stuff\n\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x754615490A029508",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x88B588B41FF7868E": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x88B588B41FF7868E",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0x8B0C2964BA471961": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x8B0C2964BA471961",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0x7FCC39C46C3C03BD": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7FCC39C46C3C03BD",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x78321BEA235FD8CD": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x78321BEA235FD8CD",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8B4FFC790CA131EF": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x8B4FFC790CA131EF",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8C8D2739BA44AF0F": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8C8D2739BA44AF0F",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9465E683B12D3F6B": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9465E683B12D3F6B",
            "ns": "NETWORK",
            "jhash": "0x273C6180",
            "manualHash": true
        },
        "0x7EF7649B64D7FF10": {
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0x7EF7649B64D7FF10",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8EF52ACAECC51D9C": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "NETWORK_SET_\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x8EF52ACAECC51D9C",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x95BAF97C82464629": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x95BAF97C82464629",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x906CA41A4B74ECA4": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x906CA41A4B74ECA4",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x94538037EE44F5CF": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x94538037EE44F5CF",
            "ns": "NETWORK",
            "jhash": "0x6B97075B",
            "manualHash": true
        },
        "0x9D724B400A7E8FFC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x9D724B400A7E8FFC",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x973D76AA760A6CB6": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x973D76AA760A6CB6",
            "ns": "NETWORK",
            "jhash": "0x0532DDD2",
            "manualHash": true
        },
        "0xA2E9C1AB8A92E8CD": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nAppears to set whether a transition should be started when the session is migrating.\n\nNETWORK_SET_*\n```",
            "examples": [],
            "hash": "0xA2E9C1AB8A92E8CD",
            "ns": "NETWORK",
            "jhash": "0x8D014B23",
            "manualHash": true
        },
        "0x9D7AFCBF21C51712": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets some voice chat related value.\n\nNETWORK_SET_*\n```",
            "examples": [],
            "hash": "0x9D7AFCBF21C51712",
            "ns": "NETWORK",
            "jhash": "0xE5219410",
            "manualHash": true
        },
        "0x9FEDF86898F100E9": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x9FEDF86898F100E9",
            "ns": "NETWORK",
            "jhash": "0x798D6C27",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0FA4EC6A05DA44E": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xA0FA4EC6A05DA44E",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0xA7862BC5ED1DFD7E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA7862BC5ED1DFD7E",
            "ns": "NETWORK",
            "jhash": "0x37F5BD93",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA306F470D1660581": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xA306F470D1660581",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA12D3A5A3753CC23": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xA12D3A5A3753CC23",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAEDF1BC1C133D6E3": {
            "params": [],
            "results": "Any",
            "description": "```\nDoes nothing (it's a nullsub).\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xAEDF1BC1C133D6E3",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xA6FCECCF4721D679": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xA6FCECCF4721D679",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xA8ACB6459542A8C8": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xA8ACB6459542A8C8",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA5FAFCD2C5F5E47": {
            "params": [],
            "results": "Vector3",
            "description": "```\nNativeDB Added Parameter 1: Entity entity\n```",
            "examples": [],
            "hash": "0xAA5FAFCD2C5F5E47",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA5EAFE473E45C442": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xA5EAFE473E45C442",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xB37E4E6A2388CA7B": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB37E4E6A2388CA7B",
            "ns": "NETWORK",
            "jhash": "0x755A2B3E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAEAB987727C5A8A4": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAEAB987727C5A8A4",
            "ns": "NETWORK",
            "jhash": "0x9FEEAA9C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB606E6CC59664972": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xB606E6CC59664972",
            "ns": "NETWORK",
            "jhash": "0x866D1B67",
            "manualHash": true
        },
        "0xADB57E5B663CCA8B": {
            "params": [
                { "name": "p0", "type": "Player" },
                { "name": "p1", "type": "float*" },
                { "name": "p2", "type": "float*" }
            ],
            "results": "void",
            "description": "```\ngets 2 floats from the CNetGamePlayer of p0 and stores them in p1 and p2.  \nPossibly waypoint?  \n```",
            "examples": [],
            "hash": "0xADB57E5B663CCA8B",
            "ns": "NETWORK",
            "jhash": "0x92268BB5",
            "manualHash": true
        },
        "0xB13E88E655E5A3BC": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB13E88E655E5A3BC",
            "ns": "NETWORK",
            "jhash": "0x36A5F2DA",
            "manualHash": true
        },
        "0xB309EBEA797E001F": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xB309EBEA797E001F",
            "ns": "NETWORK",
            "jhash": "0x5C0AB2A9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA7F0B77D80A4EB7": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA7F0B77D80A4EB7",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xB9351A07A0D458B1": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xB9351A07A0D458B1",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xB5D3453C98456528": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xB5D3453C98456528",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB746D20B17F2A229": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB746D20B17F2A229",
            "ns": "NETWORK",
            "jhash": "0x9567392B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC32EA7A2F6CA7557": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC32EA7A2F6CA7557",
            "ns": "NETWORK",
            "jhash": "0x966C90FD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC42DD763159F3461": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC42DD763159F3461",
            "ns": "NETWORK",
            "jhash": "0xFBBAC350",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBDB6F89C729CF388": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNETWORK_SESSION_IS_*\n```",
            "examples": [],
            "hash": "0xBDB6F89C729CF388",
            "ns": "NETWORK",
            "jhash": "0x9374523F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBF22E0F32968E967": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF22E0F32968E967",
            "ns": "NETWORK",
            "jhash": "0x22E03AD0",
            "manualHash": true
        },
        "0xBD545D44CCE70597": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBD545D44CCE70597",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 1."
        },
        "0xC87E740D9F3872CC": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC87E740D9F3872CC",
            "ns": "NETWORK",
            "jhash": "0xC1487110",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA59CCAE5D01E4CE": {
            "params": [],
            "results": "void",
            "description": "NETWORK_S\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xCA59CCAE5D01E4CE",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xC571D0E77D8BBC29": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNETWORK_IS_TRANSITION_*\n```",
            "examples": [],
            "hash": "0xC571D0E77D8BBC29",
            "ns": "NETWORK",
            "jhash": "0x4F4BB300",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC434133D9BA52777": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "TypeOfWeapon", "type": "int*" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC434133D9BA52777",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCFEB8AF24FC1D0BB": {
            "name": "NETWORK_BLOCK_JOIN_QUEUE_INVITES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCFEB8AF24FC1D0BB",
            "ns": "NETWORK",
            "aliases": ["0xCFEB8AF24FC1D0BB", "_NETWORK_BLOCK_INVITES_2"],
            "jhash": "0x8AB4890B",
            "manualHash": true
        },
        "0xD313DE83394AF134": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNETWORK_SESSION_IS_*\n```",
            "examples": [],
            "hash": "0xD313DE83394AF134",
            "ns": "NETWORK",
            "jhash": "0x3EA9D44C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA575C391FEA25CC": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCA575C391FEA25CC",
            "ns": "NETWORK",
            "jhash": "0xE797A4B6",
            "manualHash": true
        },
        "0xD7B6C73CAD419BCF": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD7B6C73CAD419BCF",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xE42D626EEC94E5D9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "numReservedPeds", "type": "int*" },
                { "name": "numReservedVehicles", "type": "int*" },
                { "name": "numReservedObjects", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xE42D626EEC94E5D9",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xDB663CC9FF3407A9": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xDB663CC9FF3407A9",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xCFEB46DCD7D8D5EB": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCFEB46DCD7D8D5EB",
            "ns": "NETWORK",
            "jhash": "0x1A3EA6CD",
            "manualHash": true
        },
        "0xE16AA70CE9BEEDC3": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xE16AA70CE9BEEDC3",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEBCAB9E5048434F4": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xEBCAB9E5048434F4",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 1."
        },
        "0xE6717E652B8C8D8A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE6717E652B8C8D8A",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xD6D7478CA62B8D41": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xD6D7478CA62B8D41",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xEA8C0DDB10E2822A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xEA8C0DDB10E2822A",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xF083835B70BA9BFE": {
            "params": [],
            "results": "void",
            "description": "```\nNETWORK_RE*\n```",
            "examples": [],
            "hash": "0xF083835B70BA9BFE",
            "ns": "NETWORK",
            "jhash": "0xC47352E7",
            "manualHash": true
        },
        "0xEBF8284D8CADEB53": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEBF8284D8CADEB53",
            "ns": "NETWORK",
            "jhash": "0x9773F36A",
            "manualHash": true
        },
        "0xEBFA8D50ADDC54C4": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEBFA8D50ADDC54C4",
            "ns": "NETWORK",
            "jhash": "0xF50BC67A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF814FEC6A19FD6E0": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF814FEC6A19FD6E0",
            "ns": "NETWORK",
            "jhash": "0x32B7A076",
            "manualHash": true
        },
        "0xF287F506767CC8A9": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xF287F506767CC8A9",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF6F4383B7C92F11A": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF6F4383B7C92F11A",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xF49ABC20D8552257": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF49ABC20D8552257",
            "ns": "NETWORK",
            "jhash": "0x454C7B67",
            "manualHash": true
        },
        "0xFA2888E3833C8E96": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFA2888E3833C8E96",
            "ns": "NETWORK",
            "jhash": "0x7F70C15A",
            "manualHash": true
        },
        "0xFAC18E7356BD3210": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xFAC18E7356BD3210",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xFD75DABC0957BF33": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFD75DABC0957BF33",
            "ns": "NETWORK",
            "jhash": "0x511E6F50",
            "manualHash": true
        },
        "0xFAE628F1E9ADB239": {
            "params": [
                {
                    "name": "p0",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p1", "type": "int" },
                {
                    "name": "p2",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFAE628F1E9ADB239",
            "ns": "NETWORK",
            "jhash": "0xD59A822B",
            "manualHash": true
        },
        "0xFB1F9381E80FA13F": {
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "Any",
            "description": "```\np0 is always 0. p1 is pointing to a global.  \n```",
            "examples": [],
            "hash": "0xFB1F9381E80FA13F",
            "ns": "NETWORK",
            "jhash": "0x0679CE71",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFB680D403909DC70": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFB680D403909DC70",
            "ns": "NETWORK",
            "jhash": "0xFFB2ADA1",
            "manualHash": true
        },
        "0xD8515F5FEA14CB3F": {
            "name": "NET_TO_OBJ",
            "params": [{ "name": "netHandle", "type": "int" }],
            "results": "Object",
            "description": "```\ngets the object id of a network id  \n```",
            "examples": [],
            "hash": "0xD8515F5FEA14CB3F",
            "ns": "NETWORK",
            "jhash": "0x27AA14D8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBFFEAB45A9A9094A": {
            "name": "NET_TO_ENT",
            "params": [{ "name": "netHandle", "type": "int" }],
            "results": "Entity",
            "description": "```\ngets the entity id of a network id  \n```",
            "examples": [],
            "hash": "0xBFFEAB45A9A9094A",
            "ns": "NETWORK",
            "jhash": "0x5E149683",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x367B936610BA360C": {
            "name": "NET_TO_VEH",
            "params": [{ "name": "netHandle", "type": "int" }],
            "results": "Vehicle",
            "description": "",
            "examples": [],
            "hash": "0x367B936610BA360C",
            "ns": "NETWORK",
            "jhash": "0x7E02FAEA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x62A0296C1BB1CEB3": {
            "name": "_NETWORK_ACCEPT_INVITE",
            "params": [],
            "results": "BOOL",
            "description": "```\nNETWORK_RE*\n\nTriggers a CEventNetworkInviteConfirmed event\n```",
            "examples": [],
            "hash": "0x62A0296C1BB1CEB3",
            "ns": "NETWORK",
            "aliases": ["0x62A0296C1BB1CEB3"],
            "jhash": "0x0907A6BF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBDCD95FC216A8B3E": {
            "name": "NET_TO_PED",
            "params": [{ "name": "netHandle", "type": "int" }],
            "results": "Ped",
            "description": "```\ngets the ped id of a network id  \n```",
            "examples": [],
            "hash": "0xBDCD95FC216A8B3E",
            "ns": "NETWORK",
            "jhash": "0x87717DD4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA6A47A573ABB75A": {
            "name": "NETWORK_ACCESS_TUNABLE_BOOL",
            "params": [
                { "name": "tunableContext", "type": "char*" },
                { "name": "tunableName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAA6A47A573ABB75A",
            "ns": "NETWORK",
            "aliases": ["0xAA6A47A573ABB75A"],
            "jhash": "0x8A04E1FE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFA91550DF9318B22": {
            "name": "NETWORK_ACCEPT_PRESENCE_INVITE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFA91550DF9318B22",
            "ns": "NETWORK",
            "jhash": "0xE5DA4CED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE5608CA7BC163A5F": {
            "name": "NETWORK_ACCESS_TUNABLE_FLOAT",
            "params": [
                { "name": "tunableContext", "type": "char*" },
                { "name": "tunableName", "type": "char*" },
                { "name": "value", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE5608CA7BC163A5F",
            "ns": "NETWORK",
            "aliases": ["0xE5608CA7BC163A5F"],
            "jhash": "0x41E8912A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEA16B69D93D71A45": {
            "name": "NETWORK_ACCESS_TUNABLE_BOOL_HASH",
            "params": [
                { "name": "tunableContext", "type": "Hash" },
                { "name": "tunableName", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEA16B69D93D71A45",
            "ns": "NETWORK",
            "aliases": [
                "0xEA16B69D93D71A45",
                "_NETWORK_ACCESS_TUNABLE_BOOL_HASH"
            ],
            "jhash": "0x18867C61",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8BE1146DFD5D4468": {
            "name": "NETWORK_ACCESS_TUNABLE_INT",
            "params": [
                { "name": "tunableContext", "type": "char*" },
                { "name": "tunableName", "type": "char*" },
                { "name": "value", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8BE1146DFD5D4468",
            "ns": "NETWORK",
            "aliases": ["0x8BE1146DFD5D4468"],
            "jhash": "0xE4B3726A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC88156EBB786F8D5": {
            "name": "NETWORK_ACTION_FOLLOW_INVITE",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC88156EBB786F8D5",
            "ns": "NETWORK",
            "aliases": ["0xC88156EBB786F8D5"],
            "jhash": "0xAB969F00",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x972BC203BBC4C4D5": {
            "name": "NETWORK_ACCESS_TUNABLE_FLOAT_HASH",
            "params": [
                { "name": "tunableContext", "type": "Hash" },
                { "name": "tunableName", "type": "Hash" },
                { "name": "value", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x972BC203BBC4C4D5",
            "ns": "NETWORK",
            "aliases": [
                "0x972BC203BBC4C4D5",
                "_NETWORK_ACCESS_TUNABLE_FLOAT_HASH"
            ],
            "jhash": "0x3972551F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x25B99872D588A101": {
            "name": "NETWORK_ADD_ENTITY_DISPLAYED_BOUNDARIES",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x25B99872D588A101",
            "ns": "NETWORK",
            "aliases": ["0x25B99872D588A101"],
            "jhash": "0x4C2C2B12",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x40FCE03E50E8DBE8": {
            "name": "NETWORK_ACCESS_TUNABLE_INT_HASH",
            "params": [
                { "name": "tunableContext", "type": "Hash" },
                { "name": "tunableName", "type": "Hash" },
                { "name": "value", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x40FCE03E50E8DBE8",
            "ns": "NETWORK",
            "aliases": [
                "0x40FCE03E50E8DBE8",
                "_NETWORK_ACCESS_TUNABLE_INT_HASH"
            ],
            "jhash": "0xB2E83B75",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x376C6375BA60293A": {
            "name": "NETWORK_ADD_ENTITY_ANGLED_AREA",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                }
            ],
            "results": "Any",
            "description": "To remove, see: [`NETWORK_REMOVE_ENTITY_AREA`](#\\_0x93CF869BAA0C4874).\n\nSee [`IS_POINT_IN_ANGLED_AREA`](#\\_0x2A70BAE8883E4C81) for the definition of an angled area.",
            "examples": [],
            "hash": "0x376C6375BA60293A",
            "ns": "NETWORK",
            "aliases": [
                "0x376C6375BA60293A",
                "_NETWORK_ADD_ENTITY_ANGLED_AREA"
            ],
            "jhash": "0xCD69BEA1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x267C78C60E806B9A": {
            "name": "_NETWORK_ALLOW_LOCAL_ENTITY_ATTACHMENT",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x267C78C60E806B9A",
            "ns": "NETWORK",
            "aliases": ["0x267C78C60E806B9A"],
            "jhash": "0xBB2D33D3",
            "manualHash": true
        },
        "0x8E02D73914064223": {
            "name": "NETWORK_ADD_FRIEND",
            "params": [
                { "name": "networkHandle", "type": "int*" },
                { "name": "message", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8E02D73914064223",
            "ns": "NETWORK",
            "jhash": "0x20E5B3EE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x236406F60CF216D6": {
            "name": "NETWORK_ADD_FOLLOWERS",
            "params": [
                { "name": "p0", "type": "int*" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\n..  \n```",
            "examples": [],
            "hash": "0x236406F60CF216D6",
            "ns": "NETWORK",
            "aliases": ["0x236406F60CF216D6"],
            "jhash": "0x0EC62629",
            "manualHash": true
        },
        "0x494C8FB299290269": {
            "name": "NETWORK_ADD_ENTITY_AREA",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x494C8FB299290269",
            "ns": "NETWORK",
            "jhash": "0x51030E5B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D6981DFC91A8604": {
            "name": "NETWORK_AM_I_MUTED_BY_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9D6981DFC91A8604",
            "ns": "NETWORK",
            "jhash": "0xE128F2B0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFAFC23AEE23868DB": {
            "name": "_NETWORK_ALLOCATE_TUNABLES_REGISTRATION_DATA_MAP",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFAFC23AEE23868DB",
            "ns": "NETWORK",
            "aliases": ["0xFAFC23AEE23868DB"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x742A637471BCECD9": {
            "name": "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "netScene", "type": "int" },
                { "name": "animDict", "type": "char*" },
                { "name": "animnName", "type": "char*" },
                { "name": "blendInSpeed", "type": "float" },
                { "name": "blendOutSpeed", "type": "float" },
                { "name": "duration", "type": "int" },
                { "name": "flag", "type": "int" },
                { "name": "playbackRate", "type": "float" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x742A637471BCECD9",
            "ns": "NETWORK",
            "jhash": "0xB386713E",
            "manualHash": true
        },
        "0x521638ADA1BA0D18": {
            "name": "NETWORK_APPLY_TRANSITION_PARAMETER",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x521638ADA1BA0D18",
            "ns": "NETWORK",
            "aliases": ["0x521638ADA1BA0D18"],
            "jhash": "0xCEE79711",
            "manualHash": true
        },
        "0xF2404D68CBC855FA": {
            "name": "NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "netScene", "type": "int" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "speed", "type": "float" },
                { "name": "speedMulitiplier", "type": "float" },
                { "name": "flag", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF2404D68CBC855FA",
            "ns": "NETWORK",
            "jhash": "0x10DD636C",
            "manualHash": true
        },
        "0x66D6A5E9C511214A": {
            "name": "_NETWORK_ARE_CUTSCENE_ENTITIES",
            "params": [],
            "results": "BOOL",
            "description": "```\nGetter for SET_NETWORK_CUTSCENE_ENTITIES.\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x66D6A5E9C511214A",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x87F395D957D4353D": {
            "name": "NETWORK_AM_I_BLOCKED_BY_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x87F395D957D4353D",
            "ns": "NETWORK",
            "jhash": "0x953EF45E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x99B72C7ABDE5C910": {
            "name": "NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "player", "type": "Player" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x99B72C7ABDE5C910",
            "ns": "NETWORK",
            "aliases": ["0x99B72C7ABDE5C910", "_NETWORK_COPY_PED_BLEND_DATA"],
            "jhash": "0x99F58A07",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCF8BD3B0BD6D42D7": {
            "name": "NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA",
            "params": [
                { "name": "netScene", "type": "int" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCF8BD3B0BD6D42D7",
            "ns": "NETWORK",
            "aliases": ["0xCF8BD3B0BD6D42D7"],
            "jhash": "0xBFFE8B5C",
            "manualHash": true
        },
        "0xDF02A2C93F1F26DA": {
            "name": "NETWORK_AM_I_MUTED_BY_GAMER",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDF02A2C93F1F26DA",
            "ns": "NETWORK",
            "jhash": "0x7685B333",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x15337C7C268A27B2": {
            "name": "NETWORK_AM_I_BLOCKED_BY_GAMER",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x15337C7C268A27B2",
            "ns": "NETWORK",
            "jhash": "0xD19B312C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE66C690248F11150": {
            "name": "NETWORK_APPLY_PED_SCAR_DATA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE66C690248F11150",
            "ns": "NETWORK",
            "aliases": ["0xE66C690248F11150"],
            "jhash": "0x4818ACD0",
            "manualHash": true
        },
        "0x95914459A87EBA28": {
            "name": "NETWORK_BAIL",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 1: int p0\nNativeDB Added Parameter 2: int p1\nNativeDB Added Parameter 3: int p2\n```",
            "examples": [],
            "hash": "0x95914459A87EBA28",
            "ns": "NETWORK",
            "jhash": "0x87D79A04",
            "manualHash": true
        },
        "0xEBEFC2E77084F599": {
            "name": "NETWORK_APPLY_TRANSITION_PARAMETER_STRING",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "string", "type": "char*" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEBEFC2E77084F599",
            "ns": "NETWORK",
            "aliases": ["0xEBEFC2E77084F599"],
            "jhash": "0xE0C28DB5",
            "manualHash": true
        },
        "0x023782EFC70585EE": {
            "name": "_NETWORK_BAIL_TRANSITION_QUICKMATCH",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x023782EFC70585EE",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xBA9775570DB788CF": {
            "name": "NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBA9775570DB788CF",
            "ns": "NETWORK",
            "aliases": ["0xBA9775570DB788CF"],
            "jhash": "0x358D1D77",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57DBA049E110F217": {
            "name": "NETWORK_ARE_HANDLES_THE_SAME",
            "params": [
                { "name": "netHandle1", "type": "int*" },
                { "name": "netHandle2", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x57DBA049E110F217",
            "ns": "NETWORK",
            "jhash": "0x45975AE3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDBD2056652689917": {
            "name": "NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDBD2056652689917",
            "ns": "NETWORK",
            "aliases": ["IS_NETWORK_VEHICLE_BEEN_DAMAGED_BY_ANY_OBJECT"],
            "annotations": { "cs_type": "BOOL" },
            "jhash": "0xF1E84832",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6B07B9CE4D390375": {
            "name": "_NETWORK_BLOCK_KICKED_PLAYERS",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6B07B9CE4D390375",
            "ns": "NETWORK",
            "aliases": ["0x6B07B9CE4D390375"],
            "jhash": "0x0FCE995D",
            "manualHash": true
        },
        "0x2615AA2A695930C1": {
            "name": "NETWORK_ARE_TRANSITION_DETAILS_VALID",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2615AA2A695930C1",
            "ns": "NETWORK",
            "aliases": ["0x2615AA2A695930C1"],
            "jhash": "0xCDEBCCE7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x580CE4438479CC61": {
            "name": "NETWORK_CAN_BAIL",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x580CE4438479CC61",
            "ns": "NETWORK",
            "jhash": "0x60E1FEDF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEAA572036990CD1B": {
            "name": "NETWORK_BAIL_TRANSITION",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 1: int p0\nNativeDB Added Parameter 2: int p1\nNativeDB Added Parameter 3: int p2\n```",
            "examples": [],
            "hash": "0xEAA572036990CD1B",
            "ns": "NETWORK",
            "jhash": "0xB59D74CA",
            "manualHash": true
        },
        "0x7E782A910C362C25": {
            "name": "NETWORK_CAN_ENTER_MULTIPLAYER",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7E782A910C362C25",
            "ns": "NETWORK",
            "jhash": "0x4A23B9C9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x478DCBD2A98B705A": {
            "name": "NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY",
            "params": [
                { "name": "netScene", "type": "int" },
                { "name": "entity", "type": "Entity" },
                { "name": "bone", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x478DCBD2A98B705A",
            "ns": "NETWORK",
            "jhash": "0x3FE5B222",
            "manualHash": true
        },
        "0xAF50DA1A3F8B1BA4": {
            "name": "NETWORK_CAN_ACCESS_MULTIPLAYER",
            "params": [{ "name": "loadingState", "type": "int*" }],
            "results": "BOOL",
            "description": "```\n11 - Need to download tunables.  \n12 - Need to download background script.  \nReturns 1 if the multiplayer is loaded, otherwhise 0.  \n```",
            "examples": [],
            "hash": "0xAF50DA1A3F8B1BA4",
            "ns": "NETWORK",
            "aliases": ["0xAF50DA1A3F8B1BA4"],
            "jhash": "0xA520B982",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x34F9E9049454A7A0": {
            "name": "NETWORK_BLOCK_INVITES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x34F9E9049454A7A0",
            "ns": "NETWORK",
            "jhash": "0xD156FD1A",
            "manualHash": true
        },
        "0x07DD29D5E22763F1": {
            "name": "_NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x07DD29D5E22763F1",
            "ns": "NETWORK",
            "aliases": ["0x07DD29D5E22763F1"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA150A4F065806B1F": {
            "name": "NETWORK_CAN_COMMUNICATE_WITH_GAMER",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA150A4F065806B1F",
            "ns": "NETWORK",
            "jhash": "0xD05EB7F6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8F5D1AD832AEB06C": {
            "name": "_NETWORK_CAN_COMMUNICATE_WITH_GAMER_2",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "```\nSame as NETWORK_CAN_COMMUNICATE_WITH_GAMER\n\nNETWORK_CAN_*\n```",
            "examples": [],
            "hash": "0x8F5D1AD832AEB06C",
            "ns": "NETWORK",
            "aliases": ["0x8F5D1AD832AEB06C"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBD0BE0BFC927EAC1": {
            "name": "NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBD0BE0BFC927EAC1",
            "ns": "NETWORK",
            "aliases": ["0xBD0BE0BFC927EAC1"],
            "jhash": "0x94AB35A9",
            "manualHash": true
        },
        "0x135F9B7B7ADD2185": {
            "name": "_NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x135F9B7B7ADD2185",
            "ns": "NETWORK",
            "aliases": ["0x135F9B7B7ADD2185"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4EEBC3694E49C572": {
            "name": "NETWORK_CAN_SESSION_END",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4EEBC3694E49C572",
            "ns": "NETWORK",
            "jhash": "0xE1FCCDBA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC927EC229934AF60": {
            "name": "NETWORK_CAN_SET_WAYPOINT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC927EC229934AF60",
            "ns": "NETWORK",
            "jhash": "0x009E68F3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEEEDA5E6D7080987": {
            "name": "NETWORK_CHANGE_TRANSITION_SLOTS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEEEDA5E6D7080987",
            "ns": "NETWORK",
            "aliases": ["0xEEEDA5E6D7080987"],
            "jhash": "0x1E5F6AEF",
            "manualHash": true
        },
        "0xFB8F2A6F3DF08CBE": {
            "name": "NETWORK_CANCEL_RESPAWN_SEARCH",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFB8F2A6F3DF08CBE",
            "ns": "NETWORK",
            "aliases": ["0xFB8F2A6F3DF08CBE"],
            "jhash": "0x44BFB619",
            "manualHash": true
        },
        "0xB57A49545BA53CE7": {
            "name": "_NETWORK_CAN_VIEW_GAMER_USER_CONTENT",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB57A49545BA53CE7",
            "ns": "NETWORK",
            "aliases": ["0xB57A49545BA53CE7"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x83F28CE49FBBFFBA": {
            "name": "NETWORK_CHECK_COMMUNICATION_PRIVILEGES",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x83F28CE49FBBFFBA",
            "ns": "NETWORK",
            "aliases": ["0x83F28CE49FBBFFBA"],
            "jhash": "0xA79E5B05",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x729E3401F0430686": {
            "name": "_NETWORK_CLAN_ANIMATION",
            "params": [
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nOnly documented...  \n```",
            "examples": [],
            "hash": "0x729E3401F0430686",
            "ns": "NETWORK",
            "aliases": ["0x729E3401F0430686"],
            "jhash": "0xBDA90BAC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA989044E70010ABE": {
            "name": "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA989044E70010ABE",
            "ns": "NETWORK",
            "jhash": "0x8E8CB520",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x595F028698072DD9": {
            "name": "NETWORK_CHECK_USER_CONTENT_PRIVILEGES",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x595F028698072DD9",
            "ns": "NETWORK",
            "aliases": ["0x595F028698072DD9"],
            "jhash": "0xBB54AA3D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44B37CDCAE765AAE": {
            "name": "NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE",
            "params": [
                { "name": "friendDataIndex", "type": "int" },
                { "name": "networkHandle", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "Checks if the friendDataIndex in the friend data manager contains the data for the specified networkHandle",
            "examples": [],
            "hash": "0x44B37CDCAE765AAE",
            "ns": "NETWORK",
            "aliases": ["0x44B37CDCAE765AAE"],
            "jhash": "0x13301529",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B9E023DC6EBEDC0": {
            "name": "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5B9E023DC6EBEDC0",
            "ns": "NETWORK",
            "jhash": "0x1FDB590F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5835D9CD92E83184": {
            "name": "NETWORK_CLAN_GET_EMBLEM_TXD_NAME",
            "params": [
                { "name": "netHandle", "type": "Any*" },
                {
                    "name": "txdName",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5835D9CD92E83184",
            "ns": "NETWORK",
            "aliases": [
                "0x5835D9CD92E83184",
                "_NETWORK_GET_PLAYER_CREW_EMBLEM_TXD_NAME"
            ],
            "jhash": "0xBA672146",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB3F64A6A91432477": {
            "name": "NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB3F64A6A91432477",
            "ns": "NETWORK",
            "aliases": [
                "0xB3F64A6A91432477",
                "_NETWORK_IS_CLAN_MEMBERSHIP_FINISHED_DOWNLOADING"
            ],
            "jhash": "0x83ED8E08",
            "manualHash": true,
            "resultsDescription": "True if there are any pending downloads, false otherwise."
        },
        "0x1F471B79ACC90BEF": {
            "name": "NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x1F471B79ACC90BEF",
            "ns": "NETWORK",
            "aliases": [
                "0x1F471B79ACC90BEF",
                "_GET_NUM_MEMBERSHIP_DESC",
                "_NETWORK_CLAN_GET_NUM_MEMBERSHIP_DESC"
            ],
            "jhash": "0x807B3450",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAAB11F6C4ADBC2C1": {
            "name": "NETWORK_CLAN_GET_MEMBERSHIP_COUNT",
            "params": [{ "name": "p0", "type": "int*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xAAB11F6C4ADBC2C1",
            "ns": "NETWORK",
            "jhash": "0x25924010",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x48DE78AF2C8885B8": {
            "name": "NETWORK_CLAN_GET_MEMBERSHIP_DESC",
            "params": [
                { "name": "memberDesc", "type": "int*" },
                { "name": "p1", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x48DE78AF2C8885B8",
            "ns": "NETWORK",
            "jhash": "0x3369DD1F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x48A59CF88D43DF0E": {
            "name": "NETWORK_CLAN_GET_MEMBERSHIP_VALID",
            "params": [
                {
                    "name": "networkHandle",
                    "type": "int*",
                    "description": "A player network handle."
                },
                {
                    "name": "membershipIndex",
                    "type": "int",
                    "description": "If the player has multiple crews/memberships, use \\[0-9], or -1 to get the active crew/membership."
                }
            ],
            "results": "BOOL",
            "description": "Checks if a crew/membership for a player, from the cache (i.e. downloaded via NETWORK_CLAN_DOWNLOAD_MEMBERSHIP) is valid.",
            "examples": [],
            "hash": "0x48A59CF88D43DF0E",
            "ns": "NETWORK",
            "jhash": "0x48914F6A",
            "manualHash": true,
            "resultsDescription": "Returns true if valid, false otherwise."
        },
        "0xC8BC2011F67B3411": {
            "name": "NETWORK_CLAN_GET_MEMBERSHIP",
            "params": [
                {
                    "name": "networkHandle",
                    "type": "int*",
                    "description": "A player network handle."
                },
                {
                    "name": "clanMembership",
                    "type": "int*",
                    "description": "Output buffer for the membership data. Also known as \"desc\"."
                },
                {
                    "name": "membershipIndex",
                    "type": "int",
                    "description": "If the player has multiple crews/memberships, use \\[0-9], or -1 to get the active crew/membership."
                }
            ],
            "results": "BOOL",
            "description": "Retrieves a membership for a player, from the cache (i.e. downloaded via NETWORK_CLAN_DOWNLOAD_MEMBERSHIP).\n\nTest C++ code:\nhttps://pastebin.com/CD8wni4C",
            "examples": [],
            "hash": "0xC8BC2011F67B3411",
            "ns": "NETWORK",
            "jhash": "0xCDC4A590",
            "manualHash": true,
            "resultsDescription": "Returns true on success, false otherwise."
        },
        "0x9FAAA4F4FC71F87F": {
            "name": "NETWORK_CLAN_JOIN",
            "params": [{ "name": "clanDesc", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9FAAA4F4FC71F87F",
            "ns": "NETWORK",
            "jhash": "0x79C916C5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA134777FF7F33331": {
            "name": "NETWORK_CLAN_IS_EMBLEM_READY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA134777FF7F33331",
            "ns": "NETWORK",
            "aliases": ["0xA134777FF7F33331"],
            "jhash": "0x88B13CDC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF45352426FF3A4F0": {
            "name": "NETWORK_CLAN_GET_UI_FORMATTED_TAG",
            "params": [
                { "name": "clanDesc", "type": "int*" },
                { "name": "bufferSize", "type": "int" },
                {
                    "name": "formattedTag",
                    "type": "char*",
                    "annotations": { "cs_type": "intPtr" }
                }
            ],
            "results": "void",
            "description": "```\nbufferSize is 35 in the scripts.\n```",
            "examples": [],
            "hash": "0xF45352426FF3A4F0",
            "ns": "NETWORK",
            "aliases": ["0xF45352426FF3A4F0"],
            "jhash": "0xF633805A",
            "manualHash": true
        },
        "0x7543BB439F63792B": {
            "name": "NETWORK_CLAN_IS_ROCKSTAR_CLAN",
            "params": [
                { "name": "clanDesc", "type": "int*" },
                { "name": "bufferSize", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nbufferSize is 35 in the scripts.  \n```",
            "examples": [],
            "hash": "0x7543BB439F63792B",
            "ns": "NETWORK",
            "aliases": ["0x7543BB439F63792B"],
            "jhash": "0x54E79E9C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEEE6EACBE8874FBA": {
            "name": "NETWORK_CLAN_PLAYER_GET_DESC",
            "params": [
                { "name": "clanDesc", "type": "int*" },
                { "name": "bufferSize", "type": "int" },
                { "name": "networkHandle", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\nbufferSize is 35 in the scripts.  \nbufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.  \nthe answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]  \npastebin.com/cSZniHak  \n```",
            "examples": [],
            "hash": "0xEEE6EACBE8874FBA",
            "ns": "NETWORK",
            "jhash": "0x6EE4A282",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x13518FF1C6B28938": {
            "name": "NETWORK_CLAN_REQUEST_EMBLEM",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x13518FF1C6B28938",
            "ns": "NETWORK",
            "aliases": ["0x13518FF1C6B28938"],
            "jhash": "0x7963FA4D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB124B57F571D8F18": {
            "name": "NETWORK_CLAN_PLAYER_IS_ACTIVE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB124B57F571D8F18",
            "ns": "NETWORK",
            "jhash": "0xAB8319A3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBB6E6FEE99D866B2": {
            "name": "NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE",
            "params": [{ "name": "p0", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBB6E6FEE99D866B2",
            "ns": "NETWORK",
            "jhash": "0x40202867",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x113E6E3E50E286B0": {
            "name": "NETWORK_CLAN_RELEASE_EMBLEM",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x113E6E3E50E286B0",
            "ns": "NETWORK",
            "aliases": ["0x113E6E3E50E286B0"],
            "jhash": "0xD6E3D5EA",
            "manualHash": true
        },
        "0x579CCED0265D4896": {
            "name": "NETWORK_CLAN_SERVICE_IS_VALID",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x579CCED0265D4896",
            "ns": "NETWORK",
            "aliases": ["_NETWORK_PLAYER_IS_IN_CLAN"],
            "jhash": "0xF5F4BD95",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD972DF67326F966E": {
            "name": "NETWORK_CLEAR_CLOCK_TIME_OVERRIDE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD972DF67326F966E",
            "ns": "NETWORK",
            "aliases": ["0xD972DF67326F966E"],
            "jhash": "0xC4AEAF49",
            "manualHash": true
        },
        "0x6D14CCEE1B40381A": {
            "name": "NETWORK_CLEAR_FOUND_GAMERS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6D14CCEE1B40381A",
            "ns": "NETWORK",
            "jhash": "0x6AA9A154",
            "manualHash": true
        },
        "0xC2B82527CA77053E": {
            "name": "NETWORK_CLEAR_PROPERTY_ID",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC2B82527CA77053E",
            "ns": "NETWORK",
            "aliases": ["0xC2B82527CA77053E"],
            "jhash": "0x38BC35C8",
            "manualHash": true
        },
        "0x439BFDE3CD0610F6": {
            "name": "NETWORK_CLEAR_FOLLOW_INVITE",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x439BFDE3CD0610F6",
            "ns": "NETWORK",
            "aliases": ["0x439BFDE3CD0610F6"],
            "jhash": "0x3242F952",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x058F43EC59A8631A": {
            "name": "NETWORK_CLEAR_FOLLOWERS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x058F43EC59A8631A",
            "ns": "NETWORK",
            "aliases": ["0x058F43EC59A8631A"],
            "jhash": "0x5E557307",
            "manualHash": true
        },
        "0x43F4DBA69710E01E": {
            "name": "NETWORK_CLOSE_TRANSITION_MATCHMAKING",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x43F4DBA69710E01E",
            "ns": "NETWORK",
            "aliases": ["0x43F4DBA69710E01E"],
            "jhash": "0x82D32D07",
            "manualHash": true
        },
        "0xFB3272229A82C759": {
            "name": "NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFB3272229A82C759",
            "ns": "NETWORK",
            "jhash": "0x8BB336F7",
            "manualHash": true
        },
        "0x1888694923EF4591": {
            "name": "NETWORK_CLEAR_GROUP_ACTIVITY",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1888694923EF4591",
            "ns": "NETWORK",
            "aliases": ["0x1888694923EF4591"],
            "jhash": "0x157D44D3",
            "manualHash": true
        },
        "0x86E0660E4F5C956D": {
            "name": "NETWORK_CLEAR_GET_GAMER_STATUS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x86E0660E4F5C956D",
            "ns": "NETWORK",
            "aliases": ["0x86E0660E4F5C956D"],
            "jhash": "0x3F7EDBBD",
            "manualHash": true
        },
        "0xE036A705F989E049": {
            "name": "NETWORK_CLEAR_VOICE_CHANNEL",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE036A705F989E049",
            "ns": "NETWORK",
            "aliases": ["0xE036A705F989E049"],
            "jhash": "0x9ECF722A",
            "manualHash": true
        },
        "0xF03755696450470C": {
            "name": "NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF03755696450470C",
            "ns": "NETWORK",
            "aliases": ["0xF03755696450470C"],
            "jhash": "0x7F9B9052",
            "manualHash": true
        },
        "0xF9B83B77929D8863": {
            "name": "NETWORK_DID_FIND_GAMERS_SUCCEED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF9B83B77929D8863",
            "ns": "NETWORK",
            "aliases": ["0xF9B83B77929D8863"],
            "jhash": "0xBEDC4503",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1632BE0AC1E62876": {
            "name": "_NETWORK_CONCEAL_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1632BE0AC1E62876",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x7CD6BC4C2BBDD526": {
            "name": "NETWORK_CREATE_SYNCHRONISED_SCENE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "rotationOrder", "type": "int" },
                { "name": "holdLastFrame", "type": "BOOL" },
                { "name": "looped", "type": "BOOL" },
                { "name": "p9", "type": "float" },
                { "name": "animTime", "type": "float" },
                { "name": "animSpeed", "type": "float" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x7CD6BC4C2BBDD526",
            "ns": "NETWORK",
            "jhash": "0xB06FE3FE",
            "manualHash": true,
            "resultsDescription": "netScene id"
        },
        "0xBBDF066252829606": {
            "name": "NETWORK_CONCEAL_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "This is what R\\* uses to hide players in MP interiors.",
            "examples": [],
            "hash": "0xBBDF066252829606",
            "ns": "NETWORK",
            "jhash": "0x72052DB3",
            "manualHash": true
        },
        "0x5AE17C6B0134B7F1": {
            "name": "NETWORK_DID_GET_GAMER_STATUS_SUCCEED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5AE17C6B0134B7F1",
            "ns": "NETWORK",
            "aliases": ["0x5AE17C6B0134B7F1"],
            "jhash": "0xC871E745",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC505036A35AFD01B": {
            "name": "NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC505036A35AFD01B",
            "ns": "NETWORK",
            "aliases": ["0xC505036A35AFD01B"],
            "jhash": "0xA100CC97",
            "manualHash": true
        },
        "0x9DD368BF06983221": {
            "name": "NETWORK_DISABLE_INVINCIBLE_FLASHING",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9DD368BF06983221",
            "ns": "NETWORK",
            "aliases": ["0x9DD368BF06983221"],
            "jhash": "0x8D27280E",
            "manualHash": true
        },
        "0x71FB0EBCD4915D56": {
            "name": "NETWORK_DO_TRANSITION_QUICKMATCH",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 5: Any p4\nNativeDB Added Parameter 6: Any p5\n```",
            "examples": [],
            "hash": "0x71FB0EBCD4915D56",
            "ns": "NETWORK",
            "aliases": ["0x71FB0EBCD4915D56"],
            "jhash": "0x2FF65C0B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA091A5E44F0072E5": {
            "name": "NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 5: Any p4\nNativeDB Added Parameter 6: Any p5\n```",
            "examples": [],
            "hash": "0xA091A5E44F0072E5",
            "ns": "NETWORK",
            "aliases": ["0xA091A5E44F0072E5"],
            "jhash": "0x47D61C99",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9C4AB58491FDC98A": {
            "name": "NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any*" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 7: Any p6\nNativeDB Added Parameter 8: Any p7\n```",
            "examples": [],
            "hash": "0x9C4AB58491FDC98A",
            "ns": "NETWORK",
            "jhash": "0x5CE60A11",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3AAD8B2FCA1E289F": {
            "name": "NETWORK_DO_TRANSITION_TO_FREEMODE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "players", "type": "int" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np2 is true 3/4 of the occurrences I found.  \n'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.  \n```",
            "examples": [],
            "hash": "0x3AAD8B2FCA1E289F",
            "ns": "NETWORK",
            "jhash": "0xC7CB8ADF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x407091CF6037118E": {
            "name": "NETWORK_DISABLE_PROXIMITY_MIGRATION",
            "params": [{ "name": "netID", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x407091CF6037118E",
            "ns": "NETWORK",
            "aliases": ["0x407091CF6037118E"],
            "jhash": "0x9F82917F",
            "manualHash": true
        },
        "0x3E9BB38102A589B0": {
            "name": "NETWORK_DO_TRANSITION_TO_GAME",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "maxPlayers", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3E9BB38102A589B0",
            "ns": "NETWORK",
            "jhash": "0x1B2114D2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x18A47D074708FD68": {
            "name": "NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID",
            "params": [{ "name": "netId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x18A47D074708FD68",
            "ns": "NETWORK",
            "jhash": "0x1E2E3177",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD66C9E72B3CC4982": {
            "name": "_NETWORK_DISPLAYNAMES_FROM_HANDLES_START",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "int",
            "description": "```\nHardcoded to return -1.\n```",
            "examples": [],
            "hash": "0xD66C9E72B3CC4982",
            "ns": "NETWORK",
            "aliases": ["0xD66C9E72B3CC4982"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9E80A5BA8109F974": {
            "name": "NETWORK_DO_TRANSITION_TO_NEW_FREEMODE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "players", "type": "int" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9E80A5BA8109F974",
            "ns": "NETWORK",
            "jhash": "0xAD13375E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE4E53E1419D81127": {
            "name": "NETWORK_DOES_TUNABLE_EXIST_HASH",
            "params": [
                { "name": "tunableContext", "type": "Hash" },
                { "name": "tunableName", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE4E53E1419D81127",
            "ns": "NETWORK",
            "aliases": [
                "0xE4E53E1419D81127",
                "_NETWORK_DOES_TUNABLE_EXIST_HASH"
            ],
            "jhash": "0x25915CB9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4665F51EFED00034": {
            "name": "NETWORK_DO_TRANSITION_TO_NEW_GAME",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "maxPlayers", "type": "int" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4665F51EFED00034",
            "ns": "NETWORK",
            "jhash": "0x58AFBE63",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x38CE16C96BD11344": {
            "name": "NETWORK_DOES_NETWORK_ID_EXIST",
            "params": [{ "name": "netId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x38CE16C96BD11344",
            "ns": "NETWORK",
            "jhash": "0xB8D2C99E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD0AFAFF5A51D72F7": {
            "name": "NETWORK_END_TUTORIAL_SESSION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD0AFAFF5A51D72F7",
            "ns": "NETWORK",
            "jhash": "0xBA57E53E",
            "manualHash": true
        },
        "0x85E5F8B9B898B20A": {
            "name": "NETWORK_DOES_TUNABLE_EXIST",
            "params": [
                { "name": "tunableContext", "type": "char*" },
                { "name": "tunableName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x85E5F8B9B898B20A",
            "ns": "NETWORK",
            "jhash": "0x9FCE9C9A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4A2D4E8BF4265B0F": {
            "name": "NETWORK_ENTITY_AREA_IS_OCCUPIED",
            "params": [{ "name": "areaHandle", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4A2D4E8BF4265B0F",
            "ns": "NETWORK",
            "aliases": ["0x4A2D4E8BF4265B0F"],
            "jhash": "0xC6D53AA0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE64A3CA08DFA37A9": {
            "name": "NETWORK_ENTITY_AREA_DOES_EXIST",
            "params": [{ "name": "areaHandle", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE64A3CA08DFA37A9",
            "ns": "NETWORK",
            "aliases": ["0xE64A3CA08DFA37A9"],
            "jhash": "0x69956127",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2A5E0621DD815A9A": {
            "name": "NETWORK_EXPLODE_HELI",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "Heli to explode"
                },
                { "name": "isAudible", "type": "BOOL" },
                { "name": "isInvisible", "type": "BOOL" },
                { "name": "netScriptEntityId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A5E0621DD815A9A",
            "ns": "NETWORK",
            "aliases": ["0x2A5E0621DD815A9A"],
            "jhash": "0x955B31BF",
            "manualHash": true
        },
        "0xE532D6811B3A4D2A": {
            "name": "NETWORK_FIND_GAMERS_IN_CREW",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE532D6811B3A4D2A",
            "ns": "NETWORK",
            "aliases": ["0xE532D6811B3A4D2A", "NETWORK_X_AFFECTS_GAMERS"],
            "jhash": "0x7771AB83",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDE564951F95E09ED": {
            "name": "NETWORK_FADE_OUT_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "normal", "type": "BOOL" },
                { "name": "slow", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nnormal - transition like when your coming out of LSC  \nslow - transition like when you walk into a mission  \n```",
            "examples": [],
            "hash": "0xDE564951F95E09ED",
            "ns": "NETWORK",
            "jhash": "0x47EDEE56",
            "manualHash": true
        },
        "0x301A42153C9AD707": {
            "name": "NETWORK_EXPLODE_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "isAudible", "type": "BOOL" },
                { "name": "isInvisible", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nIn the console script dumps, this is only referenced once.   \nNETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);  \n^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.  \nWhich as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?  \nam_plane_takedown.c   \nnetwork_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);  \narmenian2.c   \nnetwork_explode_vehicle(Local_80[6 <2>], 1, 0, 0);  \nfm_horde_controler.c  \nnetwork_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);  \nfm_mission_controller.c, has 6 hits so not going to list them.  \nSide note, setting the first parameter to 0 seems to mute sound or so?  \nSeems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.  \n```",
            "examples": [],
            "hash": "0x301A42153C9AD707",
            "ns": "NETWORK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x0E1B38AE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1F4ED342ACEFE62D": {
            "name": "NETWORK_FADE_IN_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nstate - 0 does 5 fades  \nstate - 1 does 6 fades  \nnative is missing third argument, also boolean, setting to 1 made vehicle fade in slower, probably \"slow\" as per NETWORK_FADE_OUT_ENTITY  \n```\n\n```\nNativeDB Added Parameter 3: BOOL slow\n```",
            "examples": [],
            "hash": "0x1F4ED342ACEFE62D",
            "ns": "NETWORK",
            "jhash": "0x9B9FCD02",
            "manualHash": true
        },
        "0x64F62AFB081E260D": {
            "name": "NETWORK_FINISH_BROADCASTING_DATA",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x64F62AFB081E260D",
            "ns": "NETWORK",
            "aliases": ["0x64F62AFB081E260D"],
            "jhash": "0xA71A1D2A",
            "manualHash": true
        },
        "0xF7B2CFDE5C9F700D": {
            "name": "NETWORK_FIND_MATCHED_GAMERS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF7B2CFDE5C9F700D",
            "ns": "NETWORK",
            "aliases": ["0xF7B2CFDE5C9F700D"],
            "jhash": "0xA13045D4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC9B43A33D09CADA7": {
            "name": "NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA",
            "params": [{ "name": "sceneId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC9B43A33D09CADA7",
            "ns": "NETWORK",
            "aliases": ["0xC9B43A33D09CADA7"],
            "jhash": "0xC3AA2EC7",
            "manualHash": true
        },
        "0xF2FD55CB574BCC55": {
            "name": "NETWORK_GAMER_HAS_HEADSET",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF2FD55CB574BCC55",
            "ns": "NETWORK",
            "jhash": "0xD036DA4A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9F0C0A981D73FA56": {
            "name": "NETWORK_GAMERTAG_FROM_HANDLE_START",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9F0C0A981D73FA56",
            "ns": "NETWORK",
            "jhash": "0xEBA00C2A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD414BE129BB81B32": {
            "name": "_NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xD414BE129BB81B32",
            "ns": "NETWORK",
            "aliases": ["0xD414BE129BB81B32"],
            "manualHash": true
        },
        "0xFD00798DBA7523DD": {
            "name": "NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFD00798DBA7523DD",
            "ns": "NETWORK",
            "jhash": "0x89C2B5EA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB071E27958EF4CF0": {
            "name": "NETWORK_GAMERTAG_FROM_HANDLE_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB071E27958EF4CF0",
            "ns": "NETWORK",
            "jhash": "0xF000828E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9614B71F8ADB982B": {
            "name": "NETWORK_GET_AGE_GROUP",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9614B71F8ADB982B",
            "ns": "NETWORK",
            "aliases": ["0x9614B71F8ADB982B"],
            "jhash": "0xAB07CBBE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x73E2B500410DA5A2": {
            "name": "NETWORK_GET_ACTIVITY_PLAYER_NUM",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x73E2B500410DA5A2",
            "ns": "NETWORK",
            "jhash": "0x31F951FD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x350C23949E43686C": {
            "name": "_NETWORK_GET_AVERAGE_PACKET_LOSS_FOR_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "```\nNETWORK_GET_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x350C23949E43686C",
            "ns": "NETWORK",
            "aliases": ["0x350C23949E43686C"],
            "manualHash": true
        },
        "0x97A770BEEF227E2B": {
            "name": "NETWORK_GET_BACKGROUND_LOADING_RECIPIENTS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x97A770BEEF227E2B",
            "ns": "NETWORK",
            "aliases": ["0x97A770BEEF227E2B"],
            "jhash": "0x1CFB3F51",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0E3A041ED6AC2B45": {
            "name": "_NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER_2",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "```\nSame as _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER (0xD414BE129BB81B32)\n```\n\n```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x0E3A041ED6AC2B45",
            "ns": "NETWORK",
            "aliases": ["0x0E3A041ED6AC2B45"],
            "manualHash": true
        },
        "0x187382F8A3E0A6C3": {
            "name": "NETWORK_GET_CONTENT_MODIFIER_LIST_ID",
            "params": [{ "name": "contentHash", "type": "Hash" }],
            "results": "int",
            "description": "```\nReturn the content modifier id (the tunables context if you want) of a specific content.  \nIt takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.  \nThe mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'  \n'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.  \n```",
            "examples": [],
            "hash": "0x187382F8A3E0A6C3",
            "ns": "NETWORK",
            "aliases": [
                "0x187382F8A3E0A6C3",
                "_GET_TUNABLES_CONTENT_MODIFIER_ID"
            ],
            "jhash": "0xA78571CA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x58CC181719256197": {
            "name": "_NETWORK_GET_DISPLAYNAMES_FROM_HANDLES",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x58CC181719256197",
            "ns": "NETWORK",
            "aliases": ["0x58CC181719256197"],
            "manualHash": true,
            "resultsDescription": "Hard-coded to always return 0."
        },
        "0x4CACA84440FA26F6": {
            "name": "_NETWORK_GET_DESTROYER_OF_ENTITY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "weaponHash", "type": "Hash*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4CACA84440FA26F6",
            "ns": "NETWORK",
            "aliases": [
                "0x4CACA84440FA26F6",
                "_NETWORK_GET_DESROYER_OF_ENTITY"
            ],
            "jhash": "0x28A45454",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x74881E6BCAE2327C": {
            "name": "NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x74881E6BCAE2327C",
            "ns": "NETWORK",
            "jhash": "0x72BA00CE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0991549DE4D64762": {
            "name": "NETWORK_GET_ENTITY_IS_LOCAL",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0991549DE4D64762",
            "ns": "NETWORK",
            "jhash": "0x813353ED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9DCFF2AFB68B3476": {
            "name": "NETWORK_GET_FOUND_GAMER",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9DCFF2AFB68B3476",
            "ns": "NETWORK",
            "jhash": "0xA08C9141",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCE4E5D9B0A4FF560": {
            "name": "NETWORK_GET_ENTITY_FROM_NETWORK_ID",
            "params": [
                {
                    "name": "netId",
                    "type": "int",
                    "description": "the network id of the entity"
                }
            ],
            "results": "Entity",
            "description": "Get the local entity handle of the given network id\n\nThrough this native you can get back the entity that you previously converted to netid with [NetworkGetNetworkIdFromEntity](#\\_0x9E35DAB6) or with the `ToNet` natives",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local entity = NetworkGetEntityFromNetworkId(netId)"
                },
                {
                    "lang": "js",
                    "code": "const entity = NetworkGetEntityFromNetworkId(netId);"
                },
                {
                    "lang": "cs",
                    "code": "int entity = NetworkGetEntityFromNetworkId(netId);"
                }
            ],
            "hash": "0xCE4E5D9B0A4FF560",
            "ns": "NETWORK",
            "jhash": "0x5B912C3F",
            "manualHash": true,
            "resultsDescription": "The local entity handle of the network id"
        },
        "0x815F18AD865F057F": {
            "name": "_NETWORK_GET_ENTITY_NET_SCRIPT_ID",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x815F18AD865F057F",
            "ns": "NETWORK",
            "aliases": ["0x815F18AD865F057F"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4164F227D052E293": {
            "name": "_NETWORK_GET_FRIEND_NAME_FROM_INDEX",
            "params": [{ "name": "friendIndex", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x4164F227D052E293",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7A1ADEEF01740A24": {
            "name": "NETWORK_GET_DESTROYER_OF_NETWORK_ID",
            "params": [
                { "name": "netId", "type": "int" },
                { "name": "weaponHash", "type": "Hash*" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x7A1ADEEF01740A24",
            "ns": "NETWORK",
            "jhash": "0x4FCA6436",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x42B2DAA6B596F5F8": {
            "name": "NETWORK_GET_ENTITY_KILLER_OF_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "weaponHash", "type": "Hash*" }
            ],
            "results": "Entity",
            "description": "",
            "examples": [],
            "hash": "0x42B2DAA6B596F5F8",
            "ns": "NETWORK",
            "jhash": "0xA7E7E04F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE11EBBB2A783FE8B": {
            "name": "NETWORK_GET_FRIEND_NAME",
            "params": [{ "name": "friendIndex", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xE11EBBB2A783FE8B",
            "ns": "NETWORK",
            "jhash": "0x97420B6D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x426141162EBE5CDB": {
            "name": "NETWORK_GET_GAMERTAG_FROM_HANDLE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x426141162EBE5CDB",
            "ns": "NETWORK",
            "jhash": "0xA18A1B26",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7827959479DCC78": {
            "name": "NETWORK_GET_ENTITY_IS_NETWORKED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC7827959479DCC78",
            "ns": "NETWORK",
            "aliases": ["0xC7827959479DCC78"],
            "jhash": "0xD7F934F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2CC848A861D01493": {
            "name": "NETWORK_GET_GAMER_STATUS_FROM_QUEUE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2CC848A861D01493",
            "ns": "NETWORK",
            "aliases": ["0x2CC848A861D01493"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0xBEB98840",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7B4D79B01FA7A5C": {
            "name": "NETWORK_GET_HOST_OF_THIS_SCRIPT",
            "params": [],
            "results": "Player",
            "description": "",
            "examples": [],
            "hash": "0xC7B4D79B01FA7A5C",
            "ns": "NETWORK",
            "jhash": "0x89EA7B54",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1D6A14F1F9A736FC": {
            "name": "NETWORK_GET_HOST_OF_SCRIPT",
            "params": [
                { "name": "scriptName", "type": "char*" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "Player",
            "description": "```\nscriptName examples:  \n\"freemode\", \"AM_CR_SecurityVan\", ...  \nMost of the time, these values are used:  \np1 = -1  \np2 = 0  \n```",
            "examples": [],
            "hash": "0x1D6A14F1F9A736FC",
            "ns": "NETWORK",
            "jhash": "0x9C95D0BB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x203F1CFD823B27A4": {
            "name": "NETWORK_GET_FRIEND_COUNT",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x203F1CFD823B27A4",
            "ns": "NETWORK",
            "jhash": "0xA396ACDE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x02A8BEC6FD9AF660": {
            "name": "NETWORK_GET_GAMER_STATUS_RESULT",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x02A8BEC6FD9AF660",
            "ns": "NETWORK",
            "aliases": ["0x02A8BEC6FD9AF660"],
            "jhash": "0xB5ABC4B4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x638A3A81733086DB": {
            "name": "NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x638A3A81733086DB",
            "ns": "NETWORK",
            "aliases": ["0x638A3A81733086DB"],
            "jhash": "0xDB8B5D71",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE86051786B66CD8E": {
            "name": "NETWORK_GET_LOCAL_HANDLE",
            "params": [
                { "name": "networkHandle", "type": "int*" },
                { "name": "bufferSize", "type": "int" }
            ],
            "results": "void",
            "description": "```\nRetrieves the local player's NetworkHandle* and stores it in the given buffer.  \n* Currently unknown struct  \n```",
            "examples": [],
            "hash": "0xE86051786B66CD8E",
            "ns": "NETWORK",
            "jhash": "0x08023B16",
            "manualHash": true
        },
        "0x6D03BFBD643B2A02": {
            "name": "NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK",
            "params": [
                { "name": "hours", "type": "int*" },
                { "name": "minutes", "type": "int*" },
                { "name": "seconds", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6D03BFBD643B2A02",
            "ns": "NETWORK",
            "aliases": ["0x6D03BFBD643B2A02", "_NETWORK_GET_SERVER_TIME"],
            "jhash": "0x74E8C53E",
            "manualHash": true
        },
        "0xAFEBB0D5D8F687D2": {
            "name": "NETWORK_GET_MAX_FRIENDS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xAFEBB0D5D8F687D2",
            "ns": "NETWORK",
            "jhash": "0x048171BC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA6C90FBC38E395EE": {
            "name": "NETWORK_GET_MAX_NUM_PARTICIPANTS",
            "params": [],
            "results": "int",
            "description": "```\nSeems to always return 0, but it's used in quite a few loops.\nfor (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)\n    {\n        if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)\n        {\n            var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));\n```",
            "examples": [],
            "hash": "0xA6C90FBC38E395EE",
            "ns": "NETWORK",
            "aliases": ["_NETWORK_GET_NUM_PARTICIPANTS_HOST"],
            "jhash": "0xCCD8C02D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x02C40BF885C567B6": {
            "name": "NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID",
            "params": [{ "name": "netId", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x02C40BF885C567B6",
            "ns": "NETWORK",
            "aliases": [
                "0x02C40BF885C567B6",
                "_NETWORK_UNLINK_NETWORKED_SYNCHRONISED_SCENE",
                "_NETWORK_CONVERT_SYNCHRONISED_SCENE_TO_SYNCHRONIZED_SCENE"
            ],
            "jhash": "0x16AED87B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x33DE49EDF4DDE77A": {
            "name": "_NETWORK_GET_LAST_VELOCITY_RECEIVED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Vector3",
            "description": "```\nUsed by NetBlender\n```",
            "examples": [],
            "hash": "0x33DE49EDF4DDE77A",
            "ns": "NETWORK",
            "aliases": ["0x33DE49EDF4DDE77A"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA1B043EE79A916FB": {
            "name": "NETWORK_GET_NUM_FOUND_GAMERS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA1B043EE79A916FB",
            "ns": "NETWORK",
            "jhash": "0xF4B80C7E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA4A79DD2D9600654": {
            "name": "NETWORK_GET_NUM_CONNECTED_PLAYERS",
            "params": [],
            "results": "int",
            "description": "```\nReturns the amount of players connected in the current session. Only works when connected to a session/server.  \n```",
            "examples": [],
            "hash": "0xA4A79DD2D9600654",
            "ns": "NETWORK",
            "jhash": "0xF7952E62",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA11700682F3AD45C": {
            "name": "NETWORK_GET_NETWORK_ID_FROM_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "the handle of the entity from which the network id should be taken"
                }
            ],
            "results": "int",
            "description": "Get the network id of the given entity\n\nAn entity network id represents a given entity for other clients, it's a handle shared between clients, can be reconverted to a client entity handle.\\\nThese (entity network IDs) can and will be reused, the network id will not change.\nIf you need to refer to an entity across machines (clients, or the server), you should use its network id.\n\nRead more at [Network and local IDs](https://docs.fivem.net/docs/scripting-manual/networking/ids/)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local obj = CreateObject(`prop_weed_01`, vector3(0.0, 0.0, 0.0), true)\nlocal netId = NetworkGetNetworkIdFromEntity(obj)"
                },
                {
                    "lang": "js",
                    "code": "let [x, y, z] = GetEntityCoords(PlayerPedId());\nlet obj = CreateObject(GetHashKey('prop_weed_01'), x, y, z, true);\nlet netId = NetworkGetNetworkIdFromEntity(obj);"
                },
                {
                    "lang": "cs",
                    "code": "var obj = CreateObject(GetHashKey('prop_weed_01'), new Vector3(0.0f, 0.0f, 0.0f), true);\nvar netId = NetworkGetNetworkIdFromEntity(obj);"
                }
            ],
            "hash": "0xA11700682F3AD45C",
            "ns": "NETWORK",
            "jhash": "0x9E35DAB6",
            "manualHash": true,
            "resultsDescription": "The network id of the given entity"
        },
        "0x18D0456E86604654": {
            "name": "NETWORK_GET_NUM_PARTICIPANTS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x18D0456E86604654",
            "ns": "NETWORK",
            "jhash": "0x3E25A3C5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3658E8CD94FC121A": {
            "name": "NETWORK_GET_NUM_SCRIPT_PARTICIPANTS",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x3658E8CD94FC121A",
            "ns": "NETWORK",
            "aliases": ["0x3658E8CD94FC121A"],
            "jhash": "0x8F7D9F46",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x52C1EADAF7B10302": {
            "name": "_NETWORK_GET_OLDEST_RESEND_COUNT_FOR_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "```\nNETWORK_GET_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x52C1EADAF7B10302",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xFF8FCF9FFC458A1C": {
            "name": "_NETWORK_GET_NUM_UNACKED_FOR_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xFF8FCF9FFC458A1C",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xD38C4A6D047C019D": {
            "name": "_NETWORK_GET_NUM_BODY_TRACKERS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xD38C4A6D047C019D",
            "ns": "NETWORK",
            "aliases": ["0xD38C4A6D047C019D"],
            "jhash": "0x17CBC608",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x01ABCE5E7CBDA196": {
            "name": "_NETWORK_GET_PLATFORM_PARTY_UNK",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x01ABCE5E7CBDA196",
            "ns": "NETWORK",
            "aliases": ["0x01ABCE5E7CBDA196"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCEFA968912D0F78D": {
            "name": "NETWORK_GET_NUM_PRESENCE_INVITES",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xCEFA968912D0F78D",
            "ns": "NETWORK",
            "aliases": ["0xCEFA968912D0F78D"],
            "jhash": "0x3FDA00F3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x120364DE2845DAF8": {
            "name": "NETWORK_GET_PLATFORM_PARTY_MEMBERS",
            "params": [
                { "name": "data", "type": "Any*" },
                { "name": "dataSize", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x120364DE2845DAF8",
            "ns": "NETWORK",
            "aliases": ["0x120364DE2845DAF8"],
            "jhash": "0xF30E5814",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x24FB80D107371267": {
            "name": "NETWORK_GET_PLAYER_INDEX",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x24FB80D107371267",
            "ns": "NETWORK",
            "jhash": "0xBE1C1506",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1B84DF6AF2A46938": {
            "name": "NETWORK_GET_PARTICIPANT_INDEX",
            "params": [{ "name": "index", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x1B84DF6AF2A46938",
            "ns": "NETWORK",
            "jhash": "0xC4D91094",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x21A1684A25C2867F": {
            "name": "NETWORK_GET_PLAYER_LOUDNESS",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x21A1684A25C2867F",
            "ns": "NETWORK",
            "jhash": "0xF2F67014",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCE5F689CF5A0A49D": {
            "name": "NETWORK_GET_PLAYER_FROM_GAMER_HANDLE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "Player",
            "description": "",
            "examples": [],
            "hash": "0xCE5F689CF5A0A49D",
            "ns": "NETWORK",
            "jhash": "0x2E96EF1E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x125E6D638B8605D4": {
            "name": "_NETWORK_GET_PLAYER_COORDS",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player id, MUST be another player."
                }
            ],
            "results": "Vector3",
            "description": "Returns the coordinates of another player.\n\nDoes not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).",
            "examples": [],
            "hash": "0x125E6D638B8605D4",
            "ns": "NETWORK",
            "aliases": ["0x125E6D638B8605D4"],
            "manualHash": true,
            "resultsDescription": "A Vector3 containing the coordinates of another player."
        },
        "0x6C0E2E0125610278": {
            "name": "NETWORK_GET_PLAYER_INDEX_FROM_PED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Player",
            "description": "```\nReturns the Player associated to a given Ped when in an online session.  \n```",
            "examples": [],
            "hash": "0x6C0E2E0125610278",
            "ns": "NETWORK",
            "aliases": ["0x6C0E2E0125610278"],
            "jhash": "0x40DBF464",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x257ED0FADF750BCF": {
            "name": "_NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT",
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x257ED0FADF750BCF",
            "ns": "NETWORK",
            "aliases": ["0x257ED0FADF750BCF"],
            "manualHash": true
        },
        "0x82377B65E943F72D": {
            "name": "NETWORK_GET_PLAYER_OWNS_WAYPOINT",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x82377B65E943F72D",
            "ns": "NETWORK",
            "aliases": ["0x82377B65E943F72D"],
            "jhash": "0xB802B671",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3B39236746714134": {
            "name": "NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x3B39236746714134",
            "ns": "NETWORK",
            "aliases": ["0x3B39236746714134"],
            "jhash": "0x5E1020CC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x38D5B0FEBB086F75": {
            "name": "NETWORK_GET_PRESENCE_INVITE_HANDLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x38D5B0FEBB086F75",
            "ns": "NETWORK",
            "jhash": "0xB2451429",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x24409FC4C55CB22D": {
            "name": "NETWORK_GET_PRESENCE_INVITE_CONTENT_ID",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x24409FC4C55CB22D",
            "ns": "NETWORK",
            "aliases": ["0x24409FC4C55CB22D"],
            "jhash": "0xA4302183",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDFF09646E12EC386": {
            "name": "NETWORK_GET_PRESENCE_INVITE_ID",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xDFF09646E12EC386",
            "ns": "NETWORK",
            "aliases": ["0xDFF09646E12EC386"],
            "jhash": "0xD50DF46C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3DBF2DF0AEB7D289": {
            "name": "NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3DBF2DF0AEB7D289",
            "ns": "NETWORK",
            "aliases": ["0x3DBF2DF0AEB7D289"],
            "jhash": "0xF5E3401C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8806CEBFABD3CE05": {
            "name": "NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8806CEBFABD3CE05",
            "ns": "NETWORK",
            "aliases": ["0x8806CEBFABD3CE05"],
            "jhash": "0x7D593B4C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4962CC4AA2F345B7": {
            "name": "NETWORK_GET_PRESENCE_INVITE_INVITER",
            "params": [{ "name": "inviteIndex", "type": "int" }],
            "results": "char*",
            "description": "Returns the Name of the inviter of the specific selected Invite.",
            "examples": [],
            "hash": "0x4962CC4AA2F345B7",
            "ns": "NETWORK",
            "aliases": ["0x4962CC4AA2F345B7"],
            "jhash": "0x19EC65D9",
            "manualHash": true,
            "resultsDescription": "The Name of the inviter."
        },
        "0xD39B3FFF8FFDD5BF": {
            "name": "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xD39B3FFF8FFDD5BF",
            "ns": "NETWORK",
            "aliases": ["0xD39B3FFF8FFDD5BF"],
            "jhash": "0x51B2D848",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x728C4CC7920CD102": {
            "name": "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x728C4CC7920CD102",
            "ns": "NETWORK",
            "aliases": ["0x728C4CC7920CD102"],
            "jhash": "0x4677C656",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x26E1CD96B0903D60": {
            "name": "NETWORK_GET_PRESENCE_INVITE_SESSION_ID",
            "params": [{ "name": "inviteIndex", "type": "int" }],
            "results": "Hash",
            "description": "The Native returns a hash of the session id as string from the specific invite index!",
            "examples": [],
            "hash": "0x26E1CD96B0903D60",
            "ns": "NETWORK",
            "aliases": ["0x26E1CD96B0903D60"],
            "jhash": "0xC5E0C989",
            "manualHash": true,
            "resultsDescription": "A hash of the session id."
        },
        "0xC080FF658B2E41DA": {
            "name": "NETWORK_GET_PRIMARY_CLAN_DATA_NEW",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC080FF658B2E41DA",
            "ns": "NETWORK",
            "jhash": "0x9B8631EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB5074DB804E28CE7": {
            "name": "NETWORK_GET_PRIMARY_CLAN_DATA_PENDING",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xB5074DB804E28CE7",
            "ns": "NETWORK",
            "aliases": ["0xB5074DB804E28CE7"],
            "jhash": "0xA4EF02F3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x042E4B70B93E6054": {
            "name": "NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x042E4B70B93E6054",
            "ns": "NETWORK",
            "aliases": ["0x042E4B70B93E6054"],
            "jhash": "0x455DDF5C",
            "manualHash": true
        },
        "0xE30CF56F1EFA5F43": {
            "name": "NETWORK_GET_RANDOM_INT_RANGED",
            "params": [
                { "name": "rangeStart", "type": "int" },
                { "name": "rangeEnd", "type": "int" }
            ],
            "results": "int",
            "description": "```\nSame as GET_RANDOM_INT_IN_RANGE\n```",
            "examples": [],
            "hash": "0xE30CF56F1EFA5F43",
            "ns": "NETWORK",
            "aliases": [
                "0xE30CF56F1EFA5F43",
                "_NETWORK_GET_RANDOM_INT_IN_RANGE"
            ],
            "jhash": "0xF9B6426D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCE86D8191B762107": {
            "name": "NETWORK_GET_PRIMARY_CLAN_DATA_START",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCE86D8191B762107",
            "ns": "NETWORK",
            "jhash": "0x89DB0EC7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x599E4FA1F87EB5FF": {
            "name": "NETWORK_GET_RANDOM_INT",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x599E4FA1F87EB5FF",
            "ns": "NETWORK",
            "aliases": ["0x599E4FA1F87EB5FF"],
            "jhash": "0x208DD848",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9AA46BADAD0E27ED": {
            "name": "NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x9AA46BADAD0E27ED",
            "ns": "NETWORK",
            "aliases": ["0x9AA46BADAD0E27ED"],
            "jhash": "0xE22445DA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6C34F1208B8923FD": {
            "name": "NETWORK_GET_RESPAWN_RESULT_FLAGS",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x6C34F1208B8923FD",
            "ns": "NETWORK",
            "aliases": ["0x6C34F1208B8923FD"],
            "jhash": "0x03287FD2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x593570C289A77688": {
            "name": "_NETWORK_GET_ROS_PRIVILEGE_24",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x593570C289A77688",
            "ns": "NETWORK",
            "aliases": ["0x593570C289A77688"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B4F04F19376A0BA": {
            "name": "NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x5B4F04F19376A0BA",
            "ns": "NETWORK",
            "aliases": ["0x5B4F04F19376A0BA"],
            "jhash": "0x068A054E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x91B87C55093DE351": {
            "name": "_NETWORK_GET_ROS_PRIVILEGE_25",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x91B87C55093DE351",
            "ns": "NETWORK",
            "aliases": ["0x91B87C55093DE351"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57D158647A6BFABF": {
            "name": "NETWORK_GET_SCRIPT_STATUS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x57D158647A6BFABF",
            "ns": "NETWORK",
            "jhash": "0x2BE9235A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x84F0F13120B4E098": {
            "name": "NETWORK_GET_TALKER_PROXIMITY",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x84F0F13120B4E098",
            "ns": "NETWORK",
            "jhash": "0x19991ADD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x371EA43692861CF1": {
            "name": "NETWORK_GET_RESPAWN_RESULT",
            "params": [
                { "name": "randomInt", "type": "int" },
                { "name": "coordinates", "type": "Vector3*" },
                { "name": "heading", "type": "float*" }
            ],
            "results": "void",
            "description": "```\nBased on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..  \n```",
            "examples": [],
            "hash": "0x371EA43692861CF1",
            "ns": "NETWORK",
            "jhash": "0xDDFE9FBC",
            "manualHash": true
        },
        "0xDFFA5BE8381C3314": {
            "name": "_NETWORK_GET_TARGETING_MODE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xDFFA5BE8381C3314",
            "ns": "NETWORK",
            "aliases": ["0xDFFA5BE8381C3314"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5ED0356A0CE3A34F": {
            "name": "NETWORK_GET_TIMEOUT_TIME",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5ED0356A0CE3A34F",
            "ns": "NETWORK",
            "aliases": ["0x5ED0356A0CE3A34F"],
            "jhash": "0xE1F86C6A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCF61D4B4702EE9EB": {
            "name": "NETWORK_GET_TOTAL_NUM_PLAYERS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xCF61D4B4702EE9EB",
            "ns": "NETWORK",
            "aliases": ["0xCF61D4B4702EE9EB"],
            "jhash": "0xF4F13B06",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x66B59CFFD78467AF": {
            "name": "_NETWORK_GET_ROS_PRIVILEGE_9",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x66B59CFFD78467AF",
            "ns": "NETWORK",
            "aliases": ["0x66B59CFFD78467AF"],
            "jhash": "0x0CA1167F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x73B000F7FBC55829": {
            "name": "NETWORK_GET_TRANSITION_MEMBERS",
            "params": [
                { "name": "data", "type": "Any*" },
                { "name": "dataCount", "type": "int" }
            ],
            "results": "int",
            "description": "```\nReturns count.\n```",
            "examples": [],
            "hash": "0x73B000F7FBC55829",
            "ns": "NETWORK",
            "jhash": "0x31F19263",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x388EB2B86C73B6B3": {
            "name": "NETWORK_HANDLE_FROM_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "networkHandle", "type": "int*" },
                { "name": "bufferSize", "type": "int" }
            ],
            "results": "void",
            "description": "```\nReturns a handle to networkHandle* from the specified player handle and stores it in a given buffer.  \n* Currently unknown struct  \nExample:  \nstd::vector<UINT64> GetPlayerNetworkHandle(Player player) {  \n    const int size = 13;  \n    uint64_t *buffer = std::make_unique<uint64_t[]>(size).get();  \n    NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, reinterpret_cast<int *>(buffer), 13);  \n    for (int i = 0; i < size; i++) {  \n        Log::Msg(\"networkhandle[%i]: %llx\", i, buffer[i]);  \n    }  \n    std::vector<UINT64> result(buffer, buffer + sizeof(buffer));  \n    return result;  \n}  \n```",
            "examples": [],
            "hash": "0x388EB2B86C73B6B3",
            "ns": "NETWORK",
            "jhash": "0xD3498917",
            "manualHash": true
        },
        "0x65042B9774C4435E": {
            "name": "NETWORK_GET_TRANSITION_HOST",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x65042B9774C4435E",
            "ns": "NETWORK",
            "jhash": "0x73098D40",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2910669969E9535E": {
            "name": "NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2910669969E9535E",
            "ns": "NETWORK",
            "jhash": "0xD9BF6549",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1353F87E89946207": {
            "name": "_NETWORK_HAS_AGE_RESTRICTED_PROFILE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1353F87E89946207",
            "ns": "NETWORK",
            "aliases": ["0x1353F87E89946207"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3765C3A3E8192E10": {
            "name": "_NETWORK_GET_UNRELIABLE_RESEND_COUNT_FOR_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "```\nNETWORK_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x3765C3A3E8192E10",
            "ns": "NETWORK",
            "aliases": ["0x3765C3A3E8192E10"],
            "manualHash": true
        },
        "0xD45CB817D7E177D2": {
            "name": "NETWORK_HANDLE_FROM_FRIEND",
            "params": [
                { "name": "friendIndex", "type": "int" },
                { "name": "networkHandle", "type": "int*" },
                { "name": "bufferSize", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD45CB817D7E177D2",
            "ns": "NETWORK",
            "jhash": "0x3B0BB3A3",
            "manualHash": true
        },
        "0x10BD227A753B0D84": {
            "name": "NETWORK_GET_TUNABLE_CLOUD_CRC",
            "params": [],
            "results": "int",
            "description": "```\nActually returns the version (TUNABLE_VERSION)\n```",
            "examples": [],
            "hash": "0x10BD227A753B0D84",
            "ns": "NETWORK",
            "aliases": ["0x10BD227A753B0D84", "_NETWORK_GET_TUNABLES_VERSION"],
            "jhash": "0x231CFD12",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0FD21BED61E5C4C": {
            "name": "NETWORK_HANDLE_FROM_MEMBER_ID",
            "params": [
                { "name": "memberId", "type": "char*" },
                { "name": "networkHandle", "type": "int*" },
                { "name": "bufferSize", "type": "int" }
            ],
            "results": "void",
            "description": "```\nReturns a NetworkHandle* from the specified member ID and stores it in a given buffer.  \n* Currently unknown struct  \n```",
            "examples": [],
            "hash": "0xA0FD21BED61E5C4C",
            "ns": "NETWORK",
            "jhash": "0x9BFC9FE2",
            "manualHash": true
        },
        "0x01BF60A500E28887": {
            "name": "NETWORK_HAS_CONTROL_OF_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x01BF60A500E28887",
            "ns": "NETWORK",
            "jhash": "0x005FD797",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDCD51DD8F87AEC5C": {
            "name": "NETWORK_HANDLE_FROM_USER_ID",
            "params": [
                { "name": "userId", "type": "char*" },
                { "name": "networkHandle", "type": "int*" },
                { "name": "bufferSize", "type": "int" }
            ],
            "results": "void",
            "description": "```\nReturns a NetworkHandle* from the specified user ID and stores it in a given buffer.  \n* Currently unknown struct  \n```",
            "examples": [],
            "hash": "0xDCD51DD8F87AEC5C",
            "ns": "NETWORK",
            "jhash": "0x74C2C1B7",
            "manualHash": true
        },
        "0x237D5336A9A54108": {
            "name": "NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x237D5336A9A54108",
            "ns": "NETWORK",
            "aliases": ["0x237D5336A9A54108"],
            "jhash": "0x7B2A0337",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x76D9B976C4C09FDE": {
            "name": "NETWORK_HAS_FOLLOW_INVITE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x76D9B976C4C09FDE",
            "ns": "NETWORK",
            "aliases": ["0x76D9B976C4C09FDE"],
            "jhash": "0xE96CFE7D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4D36070FE0215186": {
            "name": "NETWORK_HAS_CONTROL_OF_NETWORK_ID",
            "params": [{ "name": "netId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4D36070FE0215186",
            "ns": "NETWORK",
            "jhash": "0x92E77D21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x659CF2EF7F550C4F": {
            "name": "_NETWORK_HAS_GAME_BEEN_ALTERED",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if dinput8.dll is present in the game directory.\nYou will get following error message if that is true: \"You are attempting to access GTA Online servers with an altered version of the game.\"\n```",
            "examples": [],
            "hash": "0x659CF2EF7F550C4F",
            "ns": "NETWORK",
            "aliases": ["0x659CF2EF7F550C4F"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCB3C68ADB06195DF": {
            "name": "NETWORK_HAS_CONTROL_OF_DOOR",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCB3C68ADB06195DF",
            "ns": "NETWORK",
            "jhash": "0x136326EC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4D86CD31E8976ECE": {
            "name": "NETWORK_HAS_INVITED_GAMER",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4D86CD31E8976ECE",
            "ns": "NETWORK",
            "jhash": "0xEC651BC0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9AC9CCBFA8C29795": {
            "name": "NETWORK_HAS_PLAYER_STARTED_TRANSITION",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9AC9CCBFA8C29795",
            "ns": "NETWORK",
            "jhash": "0x4ABD1E59",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB07D3185E11657A5": {
            "name": "NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB07D3185E11657A5",
            "ns": "NETWORK",
            "aliases": ["0xB07D3185E11657A5"],
            "jhash": "0xEDA68956",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5BC9495F0B3B6FA6": {
            "name": "NETWORK_HAS_CONTROL_OF_PICKUP",
            "params": [{ "name": "pickup", "type": "Pickup" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5BC9495F0B3B6FA6",
            "ns": "NETWORK",
            "jhash": "0xF7784FC8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x71DC455F5CD1C2B1": {
            "name": "NETWORK_HAS_INVITE_BEEN_ACKED",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x71DC455F5CD1C2B1",
            "ns": "NETWORK",
            "aliases": ["0x71DC455F5CD1C2B1"],
            "jhash": "0xF6F9D1B9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5D10B3795F3FC886": {
            "name": "NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5D10B3795F3FC886",
            "ns": "NETWORK",
            "aliases": ["0x5D10B3795F3FC886"],
            "jhash": "0x0B739F53",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE870F9F1F7B4F1FA": {
            "name": "NETWORK_HAS_HEADSET",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE870F9F1F7B4F1FA",
            "ns": "NETWORK",
            "jhash": "0xA7DC5657",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7284A47B3540E6CF": {
            "name": "NETWORK_HAS_INVITED_GAMER_TO_TRANSITION",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7284A47B3540E6CF",
            "ns": "NETWORK",
            "jhash": "0x4F41DF6B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC22912B1D85F26B1": {
            "name": "NETWORK_HAS_ROS_PRIVILEGE_END_DATE",
            "params": [
                { "name": "privilege", "type": "int" },
                { "name": "banType", "type": "int*" },
                { "name": "timeData", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC22912B1D85F26B1",
            "ns": "NETWORK",
            "aliases": ["0xC22912B1D85F26B1", "_NETWORK_GET_BAN_DATA"],
            "jhash": "0x8570DD34",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAC8C7B9B88C4A668": {
            "name": "NETWORK_HAS_PENDING_INVITE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAC8C7B9B88C4A668",
            "ns": "NETWORK",
            "jhash": "0x0C207D6E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA699957E60D80214": {
            "name": "NETWORK_HAS_ROS_PRIVILEGE",
            "params": [{ "name": "index", "type": "int" }],
            "results": "BOOL",
            "description": "```\nindex is always 18 in scripts\n```",
            "examples": [],
            "hash": "0xA699957E60D80214",
            "ns": "NETWORK",
            "aliases": ["0xA699957E60D80214"],
            "jhash": "0xFD261E30",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x67A5589628E0CFF6": {
            "name": "NETWORK_HAS_SOCIAL_CLUB_ACCOUNT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x67A5589628E0CFF6",
            "ns": "NETWORK",
            "aliases": ["0x67A5589628E0CFF6"],
            "jhash": "0x66EC713F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3F9990BF5F22759C": {
            "name": "NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3F9990BF5F22759C",
            "ns": "NETWORK",
            "aliases": ["0x3F9990BF5F22759C"],
            "jhash": "0x00F26CDC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x76BF03FADBF154F5": {
            "name": "NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x76BF03FADBF154F5",
            "ns": "NETWORK",
            "aliases": ["0x76BF03FADBF154F5"],
            "jhash": "0xEB864288",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x85443FF4C328F53B": {
            "name": "NETWORK_HAS_VALID_ROS_CREDENTIALS",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.\n```",
            "examples": [],
            "hash": "0x85443FF4C328F53B",
            "ns": "NETWORK",
            "aliases": [
                "0x85443FF4C328F53B",
                "_NETWORK_ARE_ROS_AVAILABLE",
                "NETWORK_HAVE_JUST_UPLOAD_LATER"
            ],
            "jhash": "0x3FB40673",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x58575AC3CF2CA8EC": {
            "name": "NETWORK_HASH_FROM_GAMER_HANDLE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x58575AC3CF2CA8EC",
            "ns": "NETWORK",
            "aliases": [
                "0x58575AC3CF2CA8EC",
                "_NETWORK_HASH_FROM_GAMER_HANDLE"
            ],
            "jhash": "0x5AC9F04D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCCA4318E1AB03F1F": {
            "name": "_NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCCA4318E1AB03F1F",
            "ns": "NETWORK",
            "aliases": ["0xCCA4318E1AB03F1F"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBC1D768F2F5D6C05": {
            "name": "NETWORK_HASH_FROM_PLAYER_HANDLE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xBC1D768F2F5D6C05",
            "ns": "NETWORK",
            "aliases": [
                "0xBC1D768F2F5D6C05",
                "_NETWORK_HASH_FROM_PLAYER_HANDLE"
            ],
            "jhash": "0xF8D7AF3B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAEEF48CDF5B6CE7C": {
            "name": "NETWORK_HAVE_COMMUNICATION_PRIVILEGES",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "player", "type": "Player" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAEEF48CDF5B6CE7C",
            "ns": "NETWORK",
            "aliases": ["0xAEEF48CDF5B6CE7C"],
            "jhash": "0x2D817A5E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5EA784D197556507": {
            "name": "_NETWORK_HAVE_ONLINE_PRIVILEGE_2",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5EA784D197556507",
            "ns": "NETWORK",
            "aliases": ["0x5EA784D197556507"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x25CB5A9F37BFD063": {
            "name": "NETWORK_HAVE_ONLINE_PRIVILEGES",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x25CB5A9F37BFD063",
            "ns": "NETWORK",
            "jhash": "0xEF63BFDF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0AD7E2AF5349F61": {
            "name": "NETWORK_HAVE_ROS_CREATE_TICKET_PRIV",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA0AD7E2AF5349F61",
            "ns": "NETWORK",
            "aliases": [
                "_IS_SOCIALCLUB_BANNED",
                "_NETWORK_HAVE_SOCIAL_CLUB_PRIVILEGE"
            ],
            "jhash": "0xBDBB5948",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8020A73847E0CA7D": {
            "name": "NETWORK_HAVE_ROS_BANNED_PRIV",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8020A73847E0CA7D",
            "ns": "NETWORK",
            "aliases": [
                "_IS_ROCKSTAR_BANNED",
                "_NETWORK_HAS_PLAYER_BEEN_BANNED"
            ],
            "jhash": "0xD3BBE42F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x606E4D3E3CCCF3EB": {
            "name": "NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x606E4D3E3CCCF3EB",
            "ns": "NETWORK",
            "aliases": ["0x606E4D3E3CCCF3EB", "_NETWORK_GET_ROS_PRIVILEGE_10"],
            "jhash": "0x424C6E27",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x422D396F80A96547": {
            "name": "NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x422D396F80A96547",
            "ns": "NETWORK",
            "aliases": ["0x422D396F80A96547", "_NETWORK_GET_ROS_PRIVILEGE_4"],
            "jhash": "0xC6EA802E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5F91D5D0B36AA310": {
            "name": "NETWORK_HAVE_ROS_MULTIPLAYER_PRIV",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5F91D5D0B36AA310",
            "ns": "NETWORK",
            "aliases": [
                "_IS_PLAYER_BANNED",
                "_CAN_PLAY_ONLINE",
                "_NETWORK_GET_ROS_PRIVILEGE_3"
            ],
            "jhash": "0x97287D68",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x05095437424397FA": {
            "name": "NETWORK_IS_ACTIVITY_SESSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x05095437424397FA",
            "ns": "NETWORK",
            "jhash": "0x577DAA8A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4A595C32F77DFF76": {
            "name": "NETWORK_INVITE_GAMERS_TO_TRANSITION",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4A595C32F77DFF76",
            "ns": "NETWORK",
            "jhash": "0x5332E645",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA60BB5CE242BB254": {
            "name": "NETWORK_HOST_TRANSITION",
            "params": [
                { "name": "p0", "type": "int", "description": "Unknown int" },
                { "name": "p1", "type": "int", "description": "Unknown int" },
                { "name": "p2", "type": "int", "description": "Unknown int" },
                { "name": "p3", "type": "int", "description": "Unknown int" },
                {
                    "name": "p4",
                    "type": "Any",
                    "description": "Unknown always 0 in decompiled scripts"
                },
                {
                    "name": "p5",
                    "type": "BOOL",
                    "description": "BOOL purpose unknown, both 0 and 1 are used in decompiled scripts."
                },
                {
                    "name": "p6",
                    "type": "BOOL",
                    "description": "BOOL purpose unknown, both 0 and 1 are used in decompiled scripts."
                },
                {
                    "name": "p7",
                    "type": "int",
                    "description": "Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1."
                },
                {
                    "name": "p8",
                    "type": "Any",
                    "description": "Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1."
                },
                {
                    "name": "p9",
                    "type": "int",
                    "description": "Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?"
                }
            ],
            "results": "BOOL",
            "description": "From what I can tell it looks like it does the following:\n\nCreates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.\n\nYou also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.",
            "examples": [],
            "hash": "0xA60BB5CE242BB254",
            "ns": "NETWORK",
            "jhash": "0x146764FB",
            "manualHash": true,
            "resultsDescription": "Probably a bool indicating if the transition was created."
        },
        "0x2763BBAA72A7BCB9": {
            "name": "NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2763BBAA72A7BCB9",
            "ns": "NETWORK",
            "jhash": "0x58F1DF7D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x72D918C99BCACC54": {
            "name": "NETWORK_HAVE_USER_CONTENT_PRIVILEGES",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x72D918C99BCACC54",
            "ns": "NETWORK",
            "aliases": ["0x72D918C99BCACC54"],
            "jhash": "0x1F88819D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEFFB25453D8600F9": {
            "name": "NETWORK_IS_CABLE_CONNECTED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEFFB25453D8600F9",
            "ns": "NETWORK",
            "aliases": ["0xEFFB25453D8600F9"],
            "jhash": "0x5C065D55",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x12103B9E0C9F92FB": {
            "name": "NETWORK_IS_ACTIVITY_SPECTATOR",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x12103B9E0C9F92FB",
            "ns": "NETWORK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xAF329720",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D80CD1D0E6327DE": {
            "name": "NETWORK_INVITE_GAMERS",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9D80CD1D0E6327DE",
            "ns": "NETWORK",
            "jhash": "0x52FB8074",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6EA101606F6E4D81": {
            "name": "NETWORK_IS_ADDING_FRIEND",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x6EA101606F6E4D81",
            "ns": "NETWORK",
            "annotations": { "cs_type": "BOOL" },
            "jhash": "0xBB7EC8C4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8DE9945BCC9AEC52": {
            "name": "NETWORK_IS_CHATTING_IN_PLATFORM_PARTY",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "```\nThis would be nice to see if someone is in party chat, but 2 sad notes.  \n1) It only becomes true if said person is speaking in that party at the time.  \n2) It will never, become true unless you are in that party with said person.  \n```",
            "examples": [],
            "hash": "0x8DE9945BCC9AEC52",
            "ns": "NETWORK",
            "jhash": "0x51367B34",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDDDF64C91BFCF0AA": {
            "name": "NETWORK_IS_FINDING_GAMERS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDDDF64C91BFCF0AA",
            "ns": "NETWORK",
            "jhash": "0xA6DAA79F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD7C95D322FF57522": {
            "name": "NETWORK_IS_CLOCK_TIME_OVERRIDDEN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD7C95D322FF57522",
            "ns": "NETWORK",
            "aliases": ["0xD7C95D322FF57522"],
            "jhash": "0x2465296D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x16D3D49902F697BB": {
            "name": "_NETWORK_IS_CONNECTION_ENDPOINT_RELAY_SERVER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nNETWORK_IS_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x16D3D49902F697BB",
            "ns": "NETWORK",
            "aliases": ["0x16D3D49902F697BB"],
            "manualHash": true
        },
        "0x9A4CF4F48AD77302": {
            "name": "NETWORK_IS_CLOUD_AVAILABLE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9A4CF4F48AD77302",
            "ns": "NETWORK",
            "jhash": "0xC7FF5AFC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1A24A179F9B31654": {
            "name": "NETWORK_IS_FRIEND",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1A24A179F9B31654",
            "ns": "NETWORK",
            "jhash": "0x2DA4C282",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x422F32CC7E56ABAD": {
            "name": "NETWORK_IS_ENTITY_FADING",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x422F32CC7E56ABAD",
            "ns": "NETWORK",
            "aliases": ["0x422F32CC7E56ABAD"],
            "jhash": "0xB5087ACF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC01E93FAC20C3346": {
            "name": "NETWORK_IS_DOOR_NETWORKED",
            "params": [{ "name": "doorHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC01E93FAC20C3346",
            "ns": "NETWORK",
            "aliases": [
                "0xC01E93FAC20C3346",
                "_NETWORK_HAS_CONTROL_OF_PAVEMENT_STATS"
            ],
            "jhash": "0xD14D9C07",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2EA9A3BEDF3F17B8": {
            "name": "NETWORK_IS_FRIEND_IN_SAME_TITLE",
            "params": [{ "name": "friendName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nIn scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.  \n```",
            "examples": [],
            "hash": "0x2EA9A3BEDF3F17B8",
            "ns": "NETWORK",
            "jhash": "0xC54365C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57005C18827F3A28": {
            "name": "NETWORK_IS_FRIEND_IN_MULTIPLAYER",
            "params": [{ "name": "friendName", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x57005C18827F3A28",
            "ns": "NETWORK",
            "jhash": "0x400BDDD9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8132C0EB8B2B3293": {
            "name": "NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8132C0EB8B2B3293",
            "ns": "NETWORK",
            "aliases": [
                "0x8132C0EB8B2B3293",
                "_HAS_BG_SCRIPT_BEEN_DOWNLOADED",
                "_NETWORK_IS_CLOUD_BACKGROUND_SCRIPTS_REQUEST_PENDING"
            ],
            "jhash": "0x20AB933A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x87EB7A3FFCB314DB": {
            "name": "_NETWORK_IS_FRIEND_HANDLE_ONLINE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x87EB7A3FFCB314DB",
            "ns": "NETWORK",
            "aliases": ["0x87EB7A3FFCB314DB", "_NETWORK_IS_FRIEND_ONLINE_2"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x10FAB35428CCC9D7": {
            "name": "NETWORK_IS_GAME_IN_PROGRESS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x10FAB35428CCC9D7",
            "ns": "NETWORK",
            "jhash": "0x09B88E3E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x425A44533437B64D": {
            "name": "NETWORK_IS_FRIEND_ONLINE",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x425A44533437B64D",
            "ns": "NETWORK",
            "jhash": "0xE0A42430",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBAD8F2A42B844821": {
            "name": "NETWORK_IS_FRIEND_INDEX_ONLINE",
            "params": [{ "name": "friendIndex", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBAD8F2A42B844821",
            "ns": "NETWORK",
            "aliases": ["0xBAD8F2A42B844821"],
            "jhash": "0x94AE7172",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x71302EC70689052A": {
            "name": "_NETWORK_IS_ENTITY_CONCEALED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "Note: This only works for vehicles, which appears to be a bug (since the setter *does* work for every entity type and the name is 99% correct).",
            "examples": [],
            "hash": "0x71302EC70689052A",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE944C4F5AF1B5883": {
            "name": "NETWORK_IS_GAMER_BLOCKED_BY_ME",
            "params": [{ "name": "networkHandle", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE944C4F5AF1B5883",
            "ns": "NETWORK",
            "jhash": "0x3FDCC8D7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x71C33B22606CD88A": {
            "name": "NETWORK_IS_GAMER_TALKING",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x71C33B22606CD88A",
            "ns": "NETWORK",
            "jhash": "0x99B58DBC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCE60DE011B6C7978": {
            "name": "NETWORK_IS_GAMER_MUTED_BY_ME",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCE60DE011B6C7978",
            "ns": "NETWORK",
            "jhash": "0x001B4046",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8DB296B814EDDA07": {
            "name": "NETWORK_IS_HOST",
            "params": [],
            "results": "BOOL",
            "description": "```\nIf you are host, returns true else returns false.\n```",
            "examples": [],
            "hash": "0x8DB296B814EDDA07",
            "ns": "NETWORK",
            "jhash": "0xE46AC10F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6F79B93B0A8E4133": {
            "name": "NETWORK_IS_HANDLE_VALID",
            "params": [
                { "name": "networkHandle", "type": "int*" },
                { "name": "bufferSize", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6F79B93B0A8E4133",
            "ns": "NETWORK",
            "jhash": "0xF0996C6E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0F10B05DDF8D16E9": {
            "name": "NETWORK_IS_GAMER_IN_MY_SESSION",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0F10B05DDF8D16E9",
            "ns": "NETWORK",
            "jhash": "0x59127716",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2FC5650B0271CB57": {
            "name": "NETWORK_IS_IN_PLATFORM_PARTY",
            "params": [],
            "results": "BOOL",
            "description": "```\nHardcoded to return false.\n```",
            "examples": [],
            "hash": "0x2FC5650B0271CB57",
            "ns": "NETWORK",
            "aliases": ["0x2FC5650B0271CB57"],
            "jhash": "0xA812B6CB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x68049AEFF83D8F0A": {
            "name": "NETWORK_IS_IN_TRANSITION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x68049AEFF83D8F0A",
            "ns": "NETWORK",
            "jhash": "0xC3CDB626",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x94A8394D150B013A": {
            "name": "NETWORK_IS_GETTING_GAMER_STATUS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x94A8394D150B013A",
            "ns": "NETWORK",
            "aliases": ["0x94A8394D150B013A"],
            "jhash": "0x08029970",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6CC27C9FA2040220": {
            "name": "NETWORK_IS_IN_MP_CUTSCENE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6CC27C9FA2040220",
            "ns": "NETWORK",
            "jhash": "0x4BB33316",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x966C2BC2A7FE3F30": {
            "name": "NETWORK_IS_IN_PARTY",
            "params": [],
            "results": "BOOL",
            "description": "```\nNote according to IDA TU27 X360(Console),  \nThis native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.  \nSide note: This location just stops where it's at once jumped to.  \nScreenshot for side note,   \nh t t p ://i.imgur.com/m2ci1mF.png  \nh t t p://i.imgur.com/Z0Wx2B6.png  \n```",
            "examples": [],
            "hash": "0x966C2BC2A7FE3F30",
            "ns": "NETWORK",
            "jhash": "0xF9D7D67D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7E58745504313A2E": {
            "name": "NETWORK_IS_INACTIVE_PROFILE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "Checks if the networkHandle is the same as any other user that is signed in on the local machine.\nFor example, if your console has two or more users signed in (on different controllers), the profile that is not controlling the game would be \"inactive\".",
            "examples": [],
            "hash": "0x7E58745504313A2E",
            "ns": "NETWORK",
            "jhash": "0x95481343",
            "manualHash": true,
            "resultsDescription": "Returns true if the networkHandle is signed in on the same machine, but is not the main player."
        },
        "0x83CD99A1E6061AB5": {
            "name": "NETWORK_IS_HOST_OF_THIS_SCRIPT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x83CD99A1E6061AB5",
            "ns": "NETWORK",
            "jhash": "0x6970BA94",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x048746E388762E11": {
            "name": "NETWORK_IS_IN_SPECTATOR_MODE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x048746E388762E11",
            "ns": "NETWORK",
            "jhash": "0x3EAD9DB8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFD8B834A8BA05048": {
            "name": "NETWORK_IS_IN_PLATFORM_PARTY_CHAT",
            "params": [],
            "results": "BOOL",
            "description": "```\nHardcoded to return false.\n```",
            "examples": [],
            "hash": "0xFD8B834A8BA05048",
            "ns": "NETWORK",
            "aliases": ["0xFD8B834A8BA05048"],
            "jhash": "0xC6609191",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A8694B48715B000": {
            "name": "NETWORK_IS_LOCAL_PLAYER_INVINCIBLE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8A8694B48715B000",
            "ns": "NETWORK",
            "jhash": "0x8DE13B36",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA97246103B63917": {
            "name": "NETWORK_IS_IN_SESSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCA97246103B63917",
            "ns": "NETWORK",
            "jhash": "0x4BC4105E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7242F8B741CE1086": {
            "name": "_NETWORK_IS_NETWORK_ID_A_CLONE",
            "params": [
                {
                    "name": "netId",
                    "type": "int",
                    "description": "The network id for an object or entity."
                }
            ],
            "results": "BOOL",
            "description": "Returns true if the specified network id is controlled by someone else.",
            "examples": [],
            "hash": "0x7242F8B741CE1086",
            "ns": "NETWORK",
            "aliases": ["0x7242F8B741CE1086"],
            "manualHash": true,
            "resultsDescription": "Probably a bool, returns 1 if you don't have control over the netId entity."
        },
        "0xADA24309FE08DACF": {
            "name": "NETWORK_IS_IN_TUTORIAL_SESSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xADA24309FE08DACF",
            "ns": "NETWORK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x34DD7B28",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x74698374C45701D2": {
            "name": "NETWORK_IS_OFFLINE_INVITE_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x74698374C45701D2",
            "ns": "NETWORK",
            "aliases": ["0x74698374C45701D2"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x70ED476A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9747292807126EDA": {
            "name": "NETWORK_IS_MULTIPLAYER_DISABLED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9747292807126EDA",
            "ns": "NETWORK",
            "aliases": ["0x9747292807126EDA"],
            "annotations": { "cs_type": "ScrHandle" },
            "jhash": "0x05518C0F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0D2AF00BCC234CA": {
            "name": "NETWORK_IS_LOCAL_TALKING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC0D2AF00BCC234CA",
            "ns": "NETWORK",
            "aliases": ["0xC0D2AF00BCC234CA"],
            "jhash": "0xAC00A5BE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6FF8FF40B6357D45": {
            "name": "NETWORK_IS_PARTICIPANT_ACTIVE",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6FF8FF40B6357D45",
            "ns": "NETWORK",
            "jhash": "0x4E2C348B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3CA58F6CB7CBD784": {
            "name": "NETWORK_IS_PLAYER_A_PARTICIPANT",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3CA58F6CB7CBD784",
            "ns": "NETWORK",
            "jhash": "0xB08B6992",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x676ED266AADD31E0": {
            "name": "NETWORK_IS_PARTY_MEMBER",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "```\nNote according to IDA TU27 X360(Console),  \nThis native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.  \nSide note: This location just stops where it's at once jumped to.  \nScreenshot for side note,   \nh t t p ://i.imgur.com/m2ci1mF.png  \nh t t p://i.imgur.com/Z0Wx2B6.png  \n```",
            "examples": [],
            "hash": "0x676ED266AADD31E0",
            "ns": "NETWORK",
            "jhash": "0x1D0C929D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0BE73DA6984A6E33": {
            "name": "NETWORK_IS_PENDING_FRIEND",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nThis function is hard-coded to always return 0.\n```",
            "examples": [],
            "hash": "0x0BE73DA6984A6E33",
            "ns": "NETWORK",
            "annotations": { "cs_type": "BOOL" },
            "jhash": "0x5C85FF81",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1AD5B71586B94820": {
            "name": "NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT",
            "params": [
                { "name": "player1", "type": "Player" },
                { "name": "script", "type": "char*" },
                { "name": "player2", "type": "Player" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1AD5B71586B94820",
            "ns": "NETWORK",
            "aliases": ["0x1AD5B71586B94820"],
            "jhash": "0xCEA55F4C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x919B3C98ED8292F9": {
            "name": "NETWORK_IS_PLAYER_CONCEALED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x919B3C98ED8292F9",
            "ns": "NETWORK",
            "jhash": "0xB0313590",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB8DFD30D6973E135": {
            "name": "NETWORK_IS_PLAYER_ACTIVE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB8DFD30D6973E135",
            "ns": "NETWORK",
            "jhash": "0x43657B17",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57AF1F8E27483721": {
            "name": "NETWORK_IS_PLAYER_BLOCKED_BY_ME",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x57AF1F8E27483721",
            "ns": "NETWORK",
            "jhash": "0xAE4F4560",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x93DC1BE4E1ABE9D1": {
            "name": "NETWORK_IS_PLAYER_CONNECTED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x93DC1BE4E1ABE9D1",
            "ns": "NETWORK",
            "jhash": "0x168EE2C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x631DC5DFF4B110E3": {
            "name": "NETWORK_IS_PLAYER_FADING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x631DC5DFF4B110E3",
            "ns": "NETWORK",
            "aliases": ["0x631DC5DFF4B110E3"],
            "jhash": "0x065C597B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8D11E61A4ABF49CC": {
            "name": "_NETWORK_IS_PSN_AVAILABLE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8D11E61A4ABF49CC",
            "ns": "NETWORK",
            "aliases": ["0x8D11E61A4ABF49CC"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8C71288AE68EDE39": {
            "name": "NETWORK_IS_PLAYER_MUTED_BY_ME",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8C71288AE68EDE39",
            "ns": "NETWORK",
            "jhash": "0x7A21050E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9DE986FC9A87C474": {
            "name": "_NETWORK_IS_PLAYER_EQUAL_TO_INDEX",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "index", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nNETWORK_ARE_*  \n```",
            "examples": [],
            "hash": "0x9DE986FC9A87C474",
            "ns": "NETWORK",
            "aliases": ["0x9DE986FC9A87C474"],
            "jhash": "0xE66A0B40",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x031E11F3D447647E": {
            "name": "NETWORK_IS_PLAYER_TALKING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nreturns true if someone is screaming or talking in a microphone  \n```",
            "examples": [],
            "hash": "0x031E11F3D447647E",
            "ns": "NETWORK",
            "jhash": "0xDA9FD9DB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x63F9EE203C3619F2": {
            "name": "NETWORK_IS_PLAYER_IN_MP_CUTSCENE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x63F9EE203C3619F2",
            "ns": "NETWORK",
            "jhash": "0x56F961E4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDA7DE67F5FE5EE13": {
            "name": "_NETWORK_IS_SCRIPT_ACTIVE_BY_HASH",
            "params": [
                { "name": "scriptHash", "type": "Hash" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2245\n```",
            "examples": [],
            "hash": "0xDA7DE67F5FE5EE13",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x9DE624D2FC4B603F": {
            "name": "NETWORK_IS_SESSION_STARTED",
            "params": [],
            "results": "BOOL",
            "description": "```\nThis checks if player is playing on gta online or not.  \nPlease add an if and block your mod if this is \"true\".  \n```",
            "examples": [],
            "hash": "0x9DE624D2FC4B603F",
            "ns": "NETWORK",
            "jhash": "0x9D854A37",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD83C2B94E7508980": {
            "name": "NETWORK_IS_SESSION_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD83C2B94E7508980",
            "ns": "NETWORK",
            "jhash": "0x715CB8C4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D40DF90FAD26098": {
            "name": "NETWORK_IS_SCRIPT_ACTIVE",
            "params": [
                { "name": "scriptName", "type": "char*" },
                { "name": "player", "type": "Player" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9D40DF90FAD26098",
            "ns": "NETWORK",
            "jhash": "0x4A65250C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1077788E268557C2": {
            "name": "NETWORK_IS_SIGNED_ONLINE",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns whether the game is not in offline mode.  \nseemed not to work for some ppl  \n```",
            "examples": [],
            "hash": "0x1077788E268557C2",
            "ns": "NETWORK",
            "jhash": "0x6E5BDCE2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF4435D66A8E2905E": {
            "name": "NETWORK_IS_SESSION_BUSY",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF4435D66A8E2905E",
            "ns": "NETWORK",
            "jhash": "0x8592152D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x520F3282A53D26B7": {
            "name": "NETWORK_IS_TRANSITION_BUSY",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x520F3282A53D26B7",
            "ns": "NETWORK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xA357A2C6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x054354A99211EB96": {
            "name": "NETWORK_IS_SIGNED_IN",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns whether the player is signed into Social Club.  \n```",
            "examples": [],
            "hash": "0x054354A99211EB96",
            "ns": "NETWORK",
            "jhash": "0xADD0B40F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD1110739EEADB592": {
            "name": "_NETWORK_IS_THIS_SCRIPT_MARKED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD1110739EEADB592",
            "ns": "NETWORK",
            "aliases": [
                "0xD1110739EEADB592",
                "_NETWORK_SET_THIS_SCRIPT_MARKED"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0DBD5D7E3C5BEC3B": {
            "name": "NETWORK_IS_TRANSITION_CLOSED_CREW",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0DBD5D7E3C5BEC3B",
            "ns": "NETWORK",
            "aliases": ["0x0DBD5D7E3C5BEC3B"],
            "jhash": "0xB97A966B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5FCF4D7069B09026": {
            "name": "_NETWORK_IS_TEXT_CHAT_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "```\nSame as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.  \n```",
            "examples": [],
            "hash": "0x5FCF4D7069B09026",
            "ns": "NETWORK",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0B824797C9BF2159": {
            "name": "NETWORK_IS_TRANSITION_HOST",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0B824797C9BF2159",
            "ns": "NETWORK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x0C0900BC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x292564C735375EDF": {
            "name": "NETWORK_IS_TRANSITION_MATCHMAKING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x292564C735375EDF",
            "ns": "NETWORK",
            "aliases": ["0x292564C735375EDF"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x8262C70E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6512765E3BE78C50": {
            "name": "NETWORK_IS_TRANSITION_CLOSED_FRIENDS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6512765E3BE78C50",
            "ns": "NETWORK",
            "aliases": ["0x6512765E3BE78C50"],
            "jhash": "0x95FFACF8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6B5C83BA3EFE6A10": {
            "name": "NETWORK_IS_TRANSITION_HOST_FROM_HANDLE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6B5C83BA3EFE6A10",
            "ns": "NETWORK",
            "jhash": "0x0E2854C4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD0A484CB2F829FBE": {
            "name": "NETWORK_IS_TRANSITION_VISIBILITY_LOCKED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD0A484CB2F829FBE",
            "ns": "NETWORK",
            "aliases": ["0xD0A484CB2F829FBE"],
            "jhash": "0xF637166E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5A6AA44FF8E931E6": {
            "name": "NETWORK_IS_TRANSITION_PRIVATE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5A6AA44FF8E931E6",
            "ns": "NETWORK",
            "aliases": ["0x5A6AA44FF8E931E6"],
            "jhash": "0x104DDE8D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x37A4494483B9F5C9": {
            "name": "NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x37A4494483B9F5C9",
            "ns": "NETWORK",
            "aliases": ["0x37A4494483B9F5C9"],
            "jhash": "0xC901AA9F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x53FA83401D9C07FE": {
            "name": "NETWORK_IS_TRANSITION_STARTED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x53FA83401D9C07FE",
            "ns": "NETWORK",
            "jhash": "0x7917E111",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5DC577201723960A": {
            "name": "NETWORK_IS_TRANSITION_SOLO",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5DC577201723960A",
            "ns": "NETWORK",
            "aliases": ["0x5DC577201723960A"],
            "jhash": "0x063DC4A5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D7696D8F4FA6CB7": {
            "name": "NETWORK_IS_TRANSITION_TO_GAME",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9D7696D8F4FA6CB7",
            "ns": "NETWORK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x17146B2B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x35F0B98A8387274D": {
            "name": "NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x35F0B98A8387274D",
            "ns": "NETWORK",
            "aliases": ["0x35F0B98A8387274D"],
            "jhash": "0xA003C40B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0467C11ED88B7D28": {
            "name": "NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0467C11ED88B7D28",
            "ns": "NETWORK",
            "aliases": ["0x0467C11ED88B7D28", "_HAS_TUNABLES_BEEN_DOWNLOADED"],
            "jhash": "0x47978D7F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA06509A691D12BE4": {
            "name": "NETWORK_JOIN_GROUP_ACTIVITY",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xA06509A691D12BE4",
            "ns": "NETWORK",
            "aliases": ["0xA06509A691D12BE4"],
            "jhash": "0x0D7E5CF9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFFE1E5B792D92B34": {
            "name": "NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFFE1E5B792D92B34",
            "ns": "NETWORK",
            "aliases": ["0xFFE1E5B792D92B34"],
            "jhash": "0xBF21818E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC82630132081BB6F": {
            "name": "NETWORK_MEMBER_ID_FROM_GAMER_HANDLE",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xC82630132081BB6F",
            "ns": "NETWORK",
            "jhash": "0x62EF0A63",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x59DF79317F85A7E0": {
            "name": "NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x59DF79317F85A7E0",
            "ns": "NETWORK",
            "aliases": ["0x59DF79317F85A7E0"],
            "jhash": "0x6CDAA7D2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE679E3E06E363892": {
            "name": "NETWORK_OVERRIDE_CLOCK_TIME",
            "params": [
                { "name": "hours", "type": "int" },
                { "name": "minutes", "type": "int" },
                { "name": "seconds", "type": "int" }
            ],
            "results": "void",
            "description": "Works in Singleplayer too.\nPassing wrong data (e.g. hours above 23) will cause the game to crash.",
            "examples": [],
            "hash": "0xE679E3E06E363892",
            "ns": "NETWORK",
            "jhash": "0xC077BCD6",
            "manualHash": true
        },
        "0x9D060B08CD63321A": {
            "name": "NETWORK_JOIN_TRANSITION",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nint handle[76];  \nNETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);  \nPlayer uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);  \nNETWORK_JOIN_TRANSITION(uVar2);  \n\t\tnothing doin.  \n```",
            "examples": [],
            "hash": "0x9D060B08CD63321A",
            "ns": "NETWORK",
            "jhash": "0xB054EC4B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B3A8F7CA3A38FDE": {
            "name": "NETWORK_OPEN_TRANSITION_MATCHMAKING",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B3A8F7CA3A38FDE",
            "ns": "NETWORK",
            "aliases": ["0x2B3A8F7CA3A38FDE"],
            "jhash": "0xC71E607B",
            "manualHash": true
        },
        "0xD23A1A815D21DB19": {
            "name": "NETWORK_LEAVE_TRANSITION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD23A1A815D21DB19",
            "ns": "NETWORK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x3A3599B7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0FF2862B61A58AF9": {
            "name": "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\np0 is always false in scripts.\n```",
            "examples": [],
            "hash": "0x0FF2862B61A58AF9",
            "ns": "NETWORK",
            "aliases": ["0x0FF2862B61A58AF9"],
            "jhash": "0x1BCD3DDF",
            "manualHash": true
        },
        "0x2DCF46CB1A4F0884": {
            "name": "NETWORK_LAUNCH_TRANSITION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2DCF46CB1A4F0884",
            "ns": "NETWORK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xE3570BA2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5728BB6D63E3FF1D": {
            "name": "NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5728BB6D63E3FF1D",
            "ns": "NETWORK",
            "jhash": "0x03383F57",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57B192B4D4AD23D5": {
            "name": "NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x57B192B4D4AD23D5",
            "ns": "NETWORK",
            "aliases": ["0x57B192B4D4AD23D5", "_NETWORK_CHAT_MUTE"],
            "jhash": "0x2F98B405",
            "manualHash": true
        },
        "0xA7E30DE9272B6D49": {
            "name": "NETWORK_OVERRIDE_COORDS_AND_HEADING",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA7E30DE9272B6D49",
            "ns": "NETWORK",
            "aliases": ["0xA7E30DE9272B6D49"],
            "jhash": "0x644141C5",
            "manualHash": true
        },
        "0x3039AE5AD2C9C0C4": {
            "name": "NETWORK_OVERRIDE_CHAT_RESTRICTIONS",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nCould possibly bypass being muted or automatically muted  \n```",
            "examples": [],
            "hash": "0x3039AE5AD2C9C0C4",
            "ns": "NETWORK",
            "aliases": ["0x3039AE5AD2C9C0C4"],
            "jhash": "0x74EE2D8B",
            "manualHash": true
        },
        "0x172F75B6EE2233BA": {
            "name": "NETWORK_PLAYER_GET_CHEATER_REASON",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x172F75B6EE2233BA",
            "ns": "NETWORK",
            "aliases": ["0x172F75B6EE2233BA", "_NETWORK_PLAYER_IS_UNK"],
            "annotations": { "cs_type": "BOOL" },
            "jhash": "0x1720ABA6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAF66059A131AA269": {
            "name": "NETWORK_OVERRIDE_TRANSITION_CHAT",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAF66059A131AA269",
            "ns": "NETWORK",
            "aliases": ["0xAF66059A131AA269"],
            "jhash": "0xCAB21090",
            "manualHash": true
        },
        "0x42BF1D2E723B6D7E": {
            "name": "_NETWORK_OVERRIDE_CLOCK_MILLISECONDS_PER_GAME_MINUTE",
            "params": [{ "name": "ms", "type": "int" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x42BF1D2E723B6D7E",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xDDF73E2B1FEC5AB4": {
            "name": "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nR* uses this to hear all player when spectating.   \nIt allows you to hear other online players when their chat is on none, crew and or friends  \n```",
            "examples": [],
            "hash": "0xDDF73E2B1FEC5AB4",
            "ns": "NETWORK",
            "aliases": ["0xDDF73E2B1FEC5AB4"],
            "jhash": "0x95F1C60D",
            "manualHash": true
        },
        "0x7718D2E2060837D2": {
            "name": "NETWORK_PLAYER_GET_NAME",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "char*",
            "description": "```\nReturns the name of a given player. Returns \"**Invalid**\" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.\n```",
            "examples": [],
            "hash": "0x7718D2E2060837D2",
            "ns": "NETWORK",
            "jhash": "0xCE48F260",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x97DD4C5944CC2E6A": {
            "name": "NETWORK_OVERRIDE_SEND_RESTRICTIONS",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis is used alongside the native,\n'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.\n```",
            "examples": [],
            "hash": "0x97DD4C5944CC2E6A",
            "ns": "NETWORK",
            "aliases": [
                "0x97DD4C5944CC2E6A",
                "_NETWORK_OVERRIDE_SEND_RESTRICTIONS"
            ],
            "jhash": "0x6C344AE3",
            "manualHash": true
        },
        "0xF0BC9BCD24A511D5": {
            "name": "_NETWORK_PED_FORCE_GAME_STATE_UPDATE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xF0BC9BCD24A511D5",
            "ns": "NETWORK",
            "aliases": ["0xF0BC9BCD24A511D5"],
            "manualHash": true
        },
        "0x6F697A66CE78674E": {
            "name": "NETWORK_OVERRIDE_TEAM_RESTRICTIONS",
            "params": [
                { "name": "team", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6F697A66CE78674E",
            "ns": "NETWORK",
            "aliases": ["0x6F697A66CE78674E"],
            "jhash": "0xC8CC9E75",
            "manualHash": true
        },
        "0x4927FC39CD0869A0": {
            "name": "NETWORK_PLAYER_GET_USERID",
            "params": [
                { "name": "player", "type": "Player" },
                {
                    "name": "userID",
                    "type": "int*",
                    "annotations": { "cs_type": "charPtr" }
                }
            ],
            "results": "char*",
            "description": "```\nTakes a 24 char buffer. Returns the buffer or \"**Invalid**\" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.\n```",
            "examples": [],
            "hash": "0x4927FC39CD0869A0",
            "ns": "NETWORK",
            "aliases": ["_NETWORK_PLAYER_GET_USER_ID"],
            "jhash": "0x4EC0D983",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x565E430DB3B05BEC": {
            "name": "NETWORK_PLAYER_INDEX_IS_CHEATER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x565E430DB3B05BEC",
            "ns": "NETWORK",
            "aliases": ["0x565E430DB3B05BEC", "_NETWORK_PLAYER_SOMETHING"],
            "jhash": "0xD265B049",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3FB99A8B08D18FD6": {
            "name": "NETWORK_PLAYER_HAS_HEADSET",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3FB99A8B08D18FD6",
            "ns": "NETWORK",
            "jhash": "0x451FB6B6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x655B91F1495A9090": {
            "name": "NETWORK_PLAYER_IS_CHEATER",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x655B91F1495A9090",
            "ns": "NETWORK",
            "jhash": "0xA51DC214",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x19D8DA0E5A68045A": {
            "name": "NETWORK_PLAYER_IS_BADSPORT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x19D8DA0E5A68045A",
            "ns": "NETWORK",
            "jhash": "0xA19708E3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3C891A251567DFCE": {
            "name": "NETWORK_QUERY_RESPAWN_RESULTS",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x3C891A251567DFCE",
            "ns": "NETWORK",
            "aliases": ["0x3C891A251567DFCE"],
            "jhash": "0x90700C7D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x544ABDDA3B409B6D": {
            "name": "NETWORK_PLAYER_IS_ROCKSTAR_DEV",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nChecks if a specific value (BYTE) in CPlayerInfo is nonzero.  \nReturns always false in Singleplayer.  \nNo longer used for dev checks since first mods were released on PS3 & 360.  \nR* now checks with the is_dlc_present native for the dlc hash 2532323046,  \nif that is present it will unlock dev stuff.  \n```",
            "examples": [],
            "hash": "0x544ABDDA3B409B6D",
            "ns": "NETWORK",
            "jhash": "0xF6659045",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x85A0EF54A500882C": {
            "name": "NETWORK_QUEUE_GAMER_FOR_STATUS",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x85A0EF54A500882C",
            "ns": "NETWORK",
            "aliases": ["0x85A0EF54A500882C", "_NETWORK_GET_GAMER_STATUS"],
            "jhash": "0x42BD0780",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x06FAACD625D80CAA": {
            "name": "NETWORK_REGISTER_ENTITY_AS_NETWORKED",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x06FAACD625D80CAA",
            "ns": "NETWORK",
            "aliases": ["0x06FAACD625D80CAA"],
            "jhash": "0x31A630A4",
            "manualHash": true
        },
        "0x3364AA97340CA215": {
            "name": "NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES",
            "params": [
                { "name": "vars", "type": "int*" },
                { "name": "numVars", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3364AA97340CA215",
            "ns": "NETWORK",
            "jhash": "0xBE3D32B4",
            "manualHash": true
        },
        "0x697F508861875B42": {
            "name": "_NETWORK_REGISTER_TUNABLE_BOOL_HASH",
            "params": [
                {
                    "name": "contextHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "nameHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "value", "type": "BOOL*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x697F508861875B42",
            "ns": "NETWORK",
            "aliases": ["0x697F508861875B42"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3E9B2F01C50DF595": {
            "name": "NETWORK_REGISTER_HOST_BROADCAST_VARIABLES",
            "params": [
                { "name": "vars", "type": "int*" },
                { "name": "numVars", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3E9B2F01C50DF595",
            "ns": "NETWORK",
            "jhash": "0xDAF3B0AE",
            "manualHash": true
        },
        "0x1950DAE9848A4739": {
            "name": "_NETWORK_REGISTER_TUNABLE_FLOAT_HASH",
            "params": [
                {
                    "name": "contextHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "nameHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "value", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1950DAE9848A4739",
            "ns": "NETWORK",
            "aliases": ["0x1950DAE9848A4739"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A8B55FDA4C8DDEF": {
            "name": "_NETWORK_REGISTER_TUNABLE_INT_HASH",
            "params": [
                {
                    "name": "contextHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "nameHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "value", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3A8B55FDA4C8DDEF",
            "ns": "NETWORK",
            "aliases": ["0x3A8B55FDA4C8DDEF"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x726E0375C7A26368": {
            "name": "NETWORK_REMOVE_ALL_TRANSITION_INVITE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x726E0375C7A26368",
            "ns": "NETWORK",
            "aliases": ["0x726E0375C7A26368"],
            "jhash": "0xF7134E73",
            "manualHash": true
        },
        "0xF0210268DB0974B1": {
            "name": "NETWORK_REMOVE_PRESENCE_INVITE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF0210268DB0974B1",
            "ns": "NETWORK",
            "aliases": ["0xF0210268DB0974B1"],
            "jhash": "0x93C665FA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x93CF869BAA0C4874": {
            "name": "NETWORK_REMOVE_ENTITY_AREA",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x93CF869BAA0C4874",
            "ns": "NETWORK",
            "jhash": "0xEAB97F25",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7524B431B2E6F7EE": {
            "name": "NETWORK_REMOVE_TRANSITION_INVITE",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7524B431B2E6F7EE",
            "ns": "NETWORK",
            "jhash": "0xFDE84CB7",
            "manualHash": true
        },
        "0x924426BFFD82E915": {
            "name": "NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x924426BFFD82E915",
            "ns": "NETWORK",
            "aliases": [
                "0x924426BFFD82E915",
                "_NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS"
            ],
            "jhash": "0x98EFB921",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x870DDFD5A4A796E4": {
            "name": "NETWORK_REQUEST_CONTROL_OF_DOOR",
            "params": [{ "name": "doorID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x870DDFD5A4A796E4",
            "ns": "NETWORK",
            "jhash": "0xF60DAAF6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5626D9D6810730D5": {
            "name": "_NETWORK_REPORT_MYSELF",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5626D9D6810730D5",
            "ns": "NETWORK",
            "aliases": ["0x5626D9D6810730D5"],
            "manualHash": true
        },
        "0xA670B3662FAFFBD0": {
            "name": "NETWORK_REQUEST_CONTROL_OF_NETWORK_ID",
            "params": [{ "name": "netId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA670B3662FAFFBD0",
            "ns": "NETWORK",
            "jhash": "0x9262A60A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x72433699B4E6DD64": {
            "name": "NETWORK_RESET_BODY_TRACKER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x72433699B4E6DD64",
            "ns": "NETWORK",
            "jhash": "0x3914463F",
            "manualHash": true
        },
        "0xF1B84178F8674195": {
            "name": "NETWORK_SEED_RANDOM_NUMBER_GENERATOR",
            "params": [{ "name": "seed", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF1B84178F8674195",
            "ns": "NETWORK",
            "aliases": ["0xF1B84178F8674195"],
            "jhash": "0x41702C8A",
            "manualHash": true
        },
        "0x42FB3B532D526E6C": {
            "name": "NETWORK_REQUEST_CLOUD_TUNABLES",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x42FB3B532D526E6C",
            "ns": "NETWORK",
            "aliases": ["0x42FB3B532D526E6C"],
            "jhash": "0xD760CAD5",
            "manualHash": true
        },
        "0x9769F811D1785B03": {
            "name": "_NETWORK_RESPAWN_COORDS",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np4 and p5 are always 0 in scripts  \n```",
            "examples": [],
            "hash": "0x9769F811D1785B03",
            "ns": "NETWORK",
            "aliases": ["0x9769F811D1785B03"],
            "jhash": "0xBE6A30C3",
            "manualHash": true
        },
        "0xB69317BF5E782347": {
            "name": "NETWORK_REQUEST_CONTROL_OF_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB69317BF5E782347",
            "ns": "NETWORK",
            "jhash": "0xA05FEBD7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEA23C49EAA83ACFB": {
            "name": "NETWORK_RESURRECT_LOCAL_PLAYER",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "unk", "type": "BOOL" },
                { "name": "changetime", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 7: Any p6\n```",
            "examples": [],
            "hash": "0xEA23C49EAA83ACFB",
            "ns": "NETWORK",
            "jhash": "0xF1F9D4B4",
            "manualHash": true
        },
        "0x31D1D2B858D25E6B": {
            "name": "NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION",
            "params": [
                { "name": "networkHandle", "type": "int*" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nthe first arg seems to be the network player handle (&handle) and the second var is pretty much always \"\" and the third seems to be a number between 0 and ~10 and the 4th is is something like 0 to 5 and I guess the 5th is a bool cuz it is always 0 or 1  \ndoes this send an invite to a player?  \n```",
            "examples": [],
            "hash": "0x31D1D2B858D25E6B",
            "ns": "NETWORK",
            "jhash": "0x468B0884",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC3C7A6AFDB244624": {
            "name": "NETWORK_SEND_INVITE_VIA_PRESENCE",
            "params": [
                { "name": "networkHandle", "type": "int*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC3C7A6AFDB244624",
            "ns": "NETWORK",
            "aliases": ["0xC3C7A6AFDB244624", "_NETWORK_SEND_PRESENCE_INVITE"],
            "jhash": "0x8B99B72B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A214F2EC889B100": {
            "name": "NETWORK_SEND_TEXT_MESSAGE",
            "params": [
                { "name": "message", "type": "char*" },
                { "name": "networkHandle", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\nMessage is limited to 64 characters.\n```",
            "examples": [],
            "hash": "0x3A214F2EC889B100",
            "ns": "NETWORK",
            "jhash": "0xAFFEA720",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC116FF9B4D488291": {
            "name": "_NETWORK_SEND_PRESENCE_TRANSITION_INVITE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nString \"NETWORK_SEND_PRESENCE_TRANSITION_INVITE\" is contained in the function in ida so this one is correct.  \n```",
            "examples": [],
            "hash": "0xC116FF9B4D488291",
            "ns": "NETWORK",
            "aliases": ["0xC116FF9B4D488291"],
            "jhash": "0x877C0E1C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2FBF47B1B36D36F9": {
            "name": "NETWORK_SESSION_CANCEL_INVITE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2FBF47B1B36D36F9",
            "ns": "NETWORK",
            "jhash": "0x20317535",
            "manualHash": true
        },
        "0xA73667484D7037C3": {
            "name": "NETWORK_SESSION_BLOCK_JOIN_REQUESTS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA73667484D7037C3",
            "ns": "NETWORK",
            "aliases": ["0xA73667484D7037C3"],
            "jhash": "0xE6EEF8AF",
            "manualHash": true
        },
        "0xBE3E347A87ACEB82": {
            "name": "NETWORK_SESSION_ACTIVITY_QUICKMATCH",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBE3E347A87ACEB82",
            "ns": "NETWORK",
            "aliases": ["0xBE3E347A87ACEB82"],
            "jhash": "0x3F75CC38",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCAE55F48D3D7875C": {
            "name": "NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP",
            "params": [
                {
                    "name": "groupId",
                    "type": "int",
                    "description": "An identifier value between zero and four"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCAE55F48D3D7875C",
            "ns": "NETWORK",
            "aliases": ["0xCAE55F48D3D7875C"],
            "jhash": "0x5BE529F7",
            "manualHash": true
        },
        "0xB4AB419E0D86ACAE": {
            "name": "NETWORK_SESSION_CHANGE_SLOTS",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB4AB419E0D86ACAE",
            "ns": "NETWORK",
            "aliases": ["0xB4AB419E0D86ACAE"],
            "jhash": "0x6BB93227",
            "manualHash": true
        },
        "0x2CFC76E0D087C994": {
            "name": "NETWORK_SESSION_FRIEND_MATCHMAKING",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "maxPlayers", "type": "int" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2CFC76E0D087C994",
            "ns": "NETWORK",
            "aliases": ["0x2CFC76E0D087C994"],
            "jhash": "0x4E53202A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x94BC51E9449D917F": {
            "name": "NETWORK_SESSION_CREW_MATCHMAKING",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "maxPlayers", "type": "int" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x94BC51E9449D917F",
            "ns": "NETWORK",
            "aliases": ["0x94BC51E9449D917F"],
            "jhash": "0xD7624E6B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA02E59562D711006": {
            "name": "NETWORK_SESSION_END",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np0 is always false and p1 varies.  \nNETWORK_SESSION_END(0, 1)  \nNETWORK_SESSION_END(0, 0)  \nResults in: \"Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later.\"  \n```",
            "examples": [],
            "hash": "0xA02E59562D711006",
            "ns": "NETWORK",
            "jhash": "0xBCACBEA2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA29177F7703B5644": {
            "name": "NETWORK_SESSION_FORCE_CANCEL_INVITE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA29177F7703B5644",
            "ns": "NETWORK",
            "aliases": ["0xA29177F7703B5644"],
            "jhash": "0x3FD49D3B",
            "manualHash": true
        },
        "0x56CE820830EF040B": {
            "name": "NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x56CE820830EF040B",
            "ns": "NETWORK",
            "aliases": ["0x56CE820830EF040B", "_NETWORK_SESSION_GET_UNK"],
            "jhash": "0x36EAD960",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x330ED4D05491934F": {
            "name": "NETWORK_SESSION_ENTER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "maxPlayers", "type": "int" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nunknown params  \np0 = 0, 2, or 999 (The global is 999 by default.)  \np1 = 0 (Always in every script it's found in atleast.)  \np2 = 0, 3, or 4 (Based on a var that is determined by a function.)  \np3 = maxPlayers (It's obvious in x360 scripts it's always 18)  \np4 = 0 (Always in every script it's found in atleast.)  \np5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)  \np5 is reset to 0 if,  \nGlobal_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed.  \n```",
            "examples": [],
            "hash": "0x330ED4D05491934F",
            "ns": "NETWORK",
            "jhash": "0x543CD2BE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD6D09A6F32F49EF1": {
            "name": "NETWORK_SESSION_GET_KICK_VOTE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD6D09A6F32F49EF1",
            "ns": "NETWORK",
            "aliases": [
                "_NETWORK_SESSION_ARE_PLAYERS_VOTING_TO_KICK",
                "_NETWORK_SESSION_IS_PLAYER_VOTED_TO_KICK"
            ],
            "jhash": "0x8A559D26",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xED34C0C02C098BB7": {
            "name": "NETWORK_SESSION_HOST_CLOSED",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "maxPlayers", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xED34C0C02C098BB7",
            "ns": "NETWORK",
            "aliases": ["0xED34C0C02C098BB7"],
            "jhash": "0x8AC9EA19",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6F3D4ED9BEE4E61D": {
            "name": "NETWORK_SESSION_HOST",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "maxPlayers", "type": "int" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nDoes nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.  \n```",
            "examples": [],
            "hash": "0x6F3D4ED9BEE4E61D",
            "ns": "NETWORK",
            "jhash": "0x6716460F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x53AFD64C6758F2F9": {
            "name": "NETWORK_SESSION_GET_PRIVATE_SLOTS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x53AFD64C6758F2F9",
            "ns": "NETWORK",
            "aliases": ["0x53AFD64C6758F2F9"],
            "jhash": "0xE642F2FD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE57397B4A3429DD0": {
            "name": "NETWORK_SESSION_GET_INVITER",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE57397B4A3429DD0",
            "ns": "NETWORK",
            "jhash": "0xE9C6B3FD",
            "manualHash": true
        },
        "0xFBCFA2EA2E206890": {
            "name": "NETWORK_SESSION_IS_CLOSED_FRIENDS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFBCFA2EA2E206890",
            "ns": "NETWORK",
            "aliases": ["0xFBCFA2EA2E206890"],
            "jhash": "0x56E75FE4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB9CFD27A5D578D83": {
            "name": "NETWORK_SESSION_HOST_FRIENDS_ONLY",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "maxPlayers", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nDoes nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.  \n```",
            "examples": [],
            "hash": "0xB9CFD27A5D578D83",
            "ns": "NETWORK",
            "jhash": "0x26864403",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCEF70AA5B3F89BA1": {
            "name": "NETWORK_SESSION_IS_PRIVATE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCEF70AA5B3F89BA1",
            "ns": "NETWORK",
            "aliases": ["0xCEF70AA5B3F89BA1"],
            "jhash": "0xDB67785D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x855BC38818F6F684": {
            "name": "NETWORK_SESSION_IS_IN_VOICE_SESSION",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x855BC38818F6F684",
            "ns": "NETWORK",
            "aliases": ["0x855BC38818F6F684"],
            "jhash": "0x60AA4AA1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC74C33FCA52856D5": {
            "name": "NETWORK_SESSION_HOST_SINGLE_PLAYER",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "```\nLoads up the map that is loaded when beeing in mission creator  \nPlayer gets placed in a mix between online/offline mode  \np0 is always 2 in R* scripts.  \nAppears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812  \n```",
            "examples": [],
            "hash": "0xC74C33FCA52856D5",
            "ns": "NETWORK",
            "jhash": "0xF3B1CA85",
            "manualHash": true
        },
        "0xEF0912DDF7C4CB4B": {
            "name": "NETWORK_SESSION_IS_VOICE_SESSION_BUSY",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEF0912DDF7C4CB4B",
            "ns": "NETWORK",
            "aliases": ["0xEF0912DDF7C4CB4B"],
            "jhash": "0x132CA01E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF3929C2379B60CCE": {
            "name": "NETWORK_SESSION_IS_SOLO",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF3929C2379B60CCE",
            "ns": "NETWORK",
            "aliases": ["0xF3929C2379B60CCE"],
            "jhash": "0x3D2C1916",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x74732C6CA90DA2B4": {
            "name": "NETWORK_SESSION_IS_CLOSED_CREW",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x74732C6CA90DA2B4",
            "ns": "NETWORK",
            "aliases": ["0x74732C6CA90DA2B4"],
            "jhash": "0xA95299B9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA416D68C631496A": {
            "name": "NETWORK_SESSION_IS_VISIBLE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBA416D68C631496A",
            "ns": "NETWORK",
            "aliases": ["0xBA416D68C631496A"],
            "jhash": "0x4977AC28",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFA8904DC5F304220": {
            "name": "NETWORK_SESSION_KICK_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nOnly works as host.\n```",
            "examples": [],
            "hash": "0xFA8904DC5F304220",
            "ns": "NETWORK",
            "jhash": "0x1E20138A",
            "manualHash": true
        },
        "0x3442775428FD2DAA": {
            "name": "NETWORK_SESSION_LEAVE_SINGLE_PLAYER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3442775428FD2DAA",
            "ns": "NETWORK",
            "jhash": "0xC692F86A",
            "manualHash": true
        },
        "0xC6F8AB8A4189CF3A": {
            "name": "NETWORK_SESSION_JOIN_INVITE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC6F8AB8A4189CF3A",
            "ns": "NETWORK",
            "aliases": ["NETWORK_IS_PLAYER_ANIMATION_DRAWING_SYNCHRONIZED"],
            "jhash": "0x3D6360B5",
            "manualHash": true
        },
        "0x8B6A4DD0AF9CE215": {
            "name": "NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX",
            "params": [
                { "name": "playerType", "type": "int" },
                { "name": "playerCount", "type": "int" }
            ],
            "results": "void",
            "description": "```\nplayerTypes:\n0 = regular joiner\n4 = spectator\n8 = unknown\n```",
            "examples": [],
            "hash": "0x8B6A4DD0AF9CE215",
            "ns": "NETWORK",
            "aliases": [
                "0x8B6A4DD0AF9CE215",
                "_NETWORK_SESSION_SET_MAX_PLAYERS"
            ],
            "jhash": "0x5F29A7E0",
            "manualHash": true
        },
        "0x3F52E880AAF6C8CA": {
            "name": "NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3F52E880AAF6C8CA",
            "ns": "NETWORK",
            "aliases": ["0x3F52E880AAF6C8CA"],
            "jhash": "0xB3D9A67F",
            "manualHash": true
        },
        "0x49EC8030F5015F8B": {
            "name": "NETWORK_SESSION_SET_MATCHMAKING_GROUP",
            "params": [{ "name": "matchmakingGroup", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x49EC8030F5015F8B",
            "ns": "NETWORK",
            "aliases": ["0x49EC8030F5015F8B", "_NETWORK_SCTV_SLOTS"],
            "jhash": "0x3C3E2AB6",
            "manualHash": true
        },
        "0x271CC6AB59EBF9A5": {
            "name": "NETWORK_SESSION_MARK_VISIBLE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x271CC6AB59EBF9A5",
            "ns": "NETWORK",
            "aliases": ["0x271CC6AB59EBF9A5"],
            "jhash": "0x7017257D",
            "manualHash": true
        },
        "0x9C1556705F864230": {
            "name": "NETWORK_SESSION_VOICE_HOST",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9C1556705F864230",
            "ns": "NETWORK",
            "jhash": "0x345C2980",
            "manualHash": true
        },
        "0xABD5E88B8A2D3DB2": {
            "name": "NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER",
            "params": [{ "name": "globalPtr", "type": "Any*" }],
            "results": "void",
            "description": "```\nOnly one occurence in the scripts:\nauto sub_cb43(auto a_0, auto a_1) {\n    if (g_2594CB._f1) {\n        if (NETWORK::_855BC38818F6F684()) {\n            NETWORK::_ABD5E88B8A2D3DB2(&a_0._fB93);\n            g_2594CB._f14/*{13}*/ = a_0._fB93;\n            g_2594CB._f4/*\"64\"*/ = a_1;\n            return 1;\n        }\n    }\n    return 0;\n}\nother:\nlooks like it passes a player in the paramater\nContains string \"NETWORK_VOICE_CONNECT_TO_PLAYER\" in ida\n```",
            "examples": [],
            "hash": "0xABD5E88B8A2D3DB2",
            "ns": "NETWORK",
            "aliases": [
                "0xABD5E88B8A2D3DB2",
                "_NETWORK_VOICE_CONNECT_TO_PLAYER"
            ],
            "jhash": "0x9DFD89E6",
            "manualHash": true
        },
        "0xF1EEA2DDA9FFA69D": {
            "name": "NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF1EEA2DDA9FFA69D",
            "ns": "NETWORK",
            "aliases": ["0xF1EEA2DDA9FFA69D"],
            "jhash": "0x6CC062FC",
            "manualHash": true
        },
        "0x23DFB504655D0CE4": {
            "name": "NETWORK_SESSION_WAS_INVITED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x23DFB504655D0CE4",
            "ns": "NETWORK",
            "aliases": ["0x23DFB504655D0CE4"],
            "jhash": "0x6A0BEA60",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B8ED3DB018927B1": {
            "name": "NETWORK_SESSION_VOICE_SET_TIMEOUT",
            "params": [{ "name": "timeout", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5B8ED3DB018927B1",
            "ns": "NETWORK",
            "aliases": ["_0x5B8ED3DB018927B1"],
            "jhash": "0x6EFC2FD0",
            "manualHash": true
        },
        "0x0E4F77F7B9D74D84": {
            "name": "NETWORK_SET_ACTIVITY_PLAYER_MAX",
            "params": [{ "name": "playerCount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0E4F77F7B9D74D84",
            "ns": "NETWORK",
            "aliases": ["0x0E4F77F7B9D74D84"],
            "jhash": "0x04CB2AB4",
            "manualHash": true
        },
        "0x6793E42BE02B575D": {
            "name": "NETWORK_SESSION_VOICE_LEAVE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6793E42BE02B575D",
            "ns": "NETWORK",
            "jhash": "0xE566C7DA",
            "manualHash": true
        },
        "0xC19F6C8E7865A6FF": {
            "name": "NETWORK_SESSION_VALIDATE_JOIN",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC19F6C8E7865A6FF",
            "ns": "NETWORK",
            "aliases": ["0xC19F6C8E7865A6FF", "_NETWORK_SESSION_HOSTED"],
            "jhash": "0xF3768F90",
            "manualHash": true
        },
        "0x7F8413B7FC2AA6B9": {
            "name": "NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7F8413B7FC2AA6B9",
            "ns": "NETWORK",
            "aliases": ["NETWORK_SET_KEEP_FOCUSPOINT"],
            "jhash": "0x075321B5",
            "manualHash": true
        },
        "0x75138790B4359A74": {
            "name": "NETWORK_SET_ACTIVITY_SPECTATOR",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x75138790B4359A74",
            "ns": "NETWORK",
            "jhash": "0xFC9AD060",
            "manualHash": true
        },
        "0x5C707A667DF8B9FA": {
            "name": "NETWORK_SET_CHOICE_MIGRATE_OPTIONS",
            "params": [
                { "name": "toggle", "type": "BOOL" },
                { "name": "player", "type": "Player" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5C707A667DF8B9FA",
            "ns": "NETWORK",
            "aliases": ["0x5C707A667DF8B9FA"],
            "jhash": "0x64235620",
            "manualHash": true
        },
        "0x2C863ACDCD12B3DB": {
            "name": "_NETWORK_SET_CURRENT_MISSION_ID",
            "params": [{ "name": "missionId", "type": "char*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x2C863ACDCD12B3DB",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x7206F674F2A3B1BB": {
            "name": "NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7206F674F2A3B1BB",
            "ns": "NETWORK",
            "jhash": "0xFD95899E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x796A87B3B68D1F3D": {
            "name": "_NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x796A87B3B68D1F3D",
            "ns": "NETWORK",
            "aliases": [
                "0x796A87B3B68D1F3D",
                "_NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4BA166079D658ED4": {
            "name": "_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4BA166079D658ED4",
            "ns": "NETWORK",
            "aliases": ["0x4BA166079D658ED4"],
            "manualHash": true
        },
        "0x9D277B76D1D12222": {
            "name": "NETWORK_SET_ACTIVITY_SPECTATOR_MAX",
            "params": [{ "name": "maxSpectators", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9D277B76D1D12222",
            "ns": "NETWORK",
            "jhash": "0x74E0BC0A",
            "manualHash": true
        },
        "0xFC18DB55AE19E046": {
            "name": "NETWORK_SET_IN_FREE_CAM_MODE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFC18DB55AE19E046",
            "ns": "NETWORK",
            "aliases": ["0xFC18DB55AE19E046"],
            "jhash": "0xA7E36020",
            "manualHash": true
        },
        "0xAA6D5451DC3448B6": {
            "name": "_NETWORK_SET_CURRENT_SPAWN_SETTING",
            "params": [{ "name": "mpSettingSpawn", "type": "Hash" }],
            "results": "void",
            "description": "```\nmpSettingSpawn:\n\nenum eMpSettingSpawn\n{\n\tMP_SETTING_SPAWN_NULL,\n\tMP_SETTING_SPAWN_PROPERTY,\n\tMP_SETTING_SPAWN_LAST_POSITION,\n\tMP_SETTING_SPAWN_GARAGE,\n\tMP_SETTING_SPAWN_RANDOM,\n\tMP_SETTING_SPAWN_PRIVATE_YACHT,\n\tMP_SETTING_SPAWN_OFFICE,\n\tMP_SETTING_SPAWN_CLUBHOUSE,\n\tMP_SETTING_SPAWN_IE_WAREHOUSE,\n\tMP_SETTING_SPAWN_BUNKER,\n\tMP_SETTING_SPAWN_HANGAR,\n\tMP_SETTING_SPAWN_DEFUNCT_BASE,\n\tMP_SETTING_SPAWN_NIGHTCLUB,\n\tMP_SETTING_SPAWN_ARENA_GARAGE,\n\tMP_SETTING_SPAWN_CASINO_APARTMENT,\n\tMP_SETTING_SPAWN_ARCADE,\n\tMP_SETTING_SPAWN_SUBMARINE,\n\tMP_SETTING_SPAWN_CAR_MEET,\n\tMP_SETTING_SPAWN_AUTO_SHOP,\n\tMP_SETTING_SPAWN_FIXER_HQ,\n\tMP_SETTING_SPAWN_MAX,\n};\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0xAA6D5451DC3448B6",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xD830567D88A1E873": {
            "name": "NETWORK_SET_ENTITY_CAN_BLEND",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD830567D88A1E873",
            "ns": "NETWORK",
            "jhash": "0xDE8C0DB8",
            "manualHash": true
        },
        "0xF1CA12B18AEF5298": {
            "name": "_NETWORK_SET_ENTITY_INVISIBLE_TO_NETWORK",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nif set to true other network players can't see it  \nif set to false other network player can see it  \n=========================================  \n^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.  \npc or last gen?  \n^^ last-gen  \n```",
            "examples": [],
            "hash": "0xF1CA12B18AEF5298",
            "ns": "NETWORK",
            "aliases": [
                "0xF1CA12B18AEF5298",
                "_NETWORK_SET_ENTITY_VISIBLE_TO_NETWORK"
            ],
            "jhash": "0x09CBC4B0",
            "manualHash": true
        },
        "0x419594E137637120": {
            "name": "NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED",
            "params": [
                { "name": "toggle", "type": "BOOL" },
                { "name": "playerPed", "type": "Ped" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x419594E137637120",
            "ns": "NETWORK",
            "aliases": ["0x419594E137637120"],
            "jhash": "0x54058F5F",
            "manualHash": true
        },
        "0xF808475FA571D823": {
            "name": "NETWORK_SET_FRIENDLY_FIRE_OPTION",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF808475FA571D823",
            "ns": "NETWORK",
            "jhash": "0x6BAF95FA",
            "manualHash": true
        },
        "0xCA2C8073411ECDB6": {
            "name": "NETWORK_SET_GAMER_INVITED_TO_TRANSITION",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCA2C8073411ECDB6",
            "ns": "NETWORK",
            "jhash": "0x17F1C69D",
            "manualHash": true
        },
        "0x9CA5DE655269FEC4": {
            "name": "NETWORK_SET_IN_MP_CUTSCENE",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9CA5DE655269FEC4",
            "ns": "NETWORK",
            "jhash": "0x8434CB43",
            "manualHash": true
        },
        "0x2D95C7E2D7E07307": {
            "name": "NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME",
            "params": [{ "name": "time", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2D95C7E2D7E07307",
            "ns": "NETWORK",
            "jhash": "0xFEA9B85C",
            "manualHash": true
        },
        "0x423DE3854BB50894": {
            "name": "NETWORK_SET_IN_SPECTATOR_MODE",
            "params": [
                { "name": "toggle", "type": "BOOL" },
                { "name": "playerPed", "type": "Ped" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x423DE3854BB50894",
            "ns": "NETWORK",
            "jhash": "0x5C4C8458",
            "manualHash": true
        },
        "0x66F010A4B031A331": {
            "name": "NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x66F010A4B031A331",
            "ns": "NETWORK",
            "aliases": ["0x66F010A4B031A331"],
            "jhash": "0x11378777",
            "manualHash": true
        },
        "0xF46A1E03E8755980": {
            "name": "NETWORK_SET_NO_SPECTATOR_CHAT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF46A1E03E8755980",
            "ns": "NETWORK",
            "aliases": ["0xF46A1E03E8755980"],
            "jhash": "0xD33AFF79",
            "manualHash": true
        },
        "0x3B3D11CD9FFCDFC9": {
            "name": "NETWORK_SET_MISSION_FINISHED",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3B3D11CD9FFCDFC9",
            "ns": "NETWORK",
            "jhash": "0x3083FAD7",
            "manualHash": true
        },
        "0x524FF0AEFF9C3973": {
            "name": "NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x524FF0AEFF9C3973",
            "ns": "NETWORK",
            "aliases": ["0x524FF0AEFF9C3973"],
            "jhash": "0xB72F086D",
            "manualHash": true
        },
        "0x0379DAF89BA09AA5": {
            "name": "_NETWORK_SET_OBJECT_FORCE_STATIC_BLEND",
            "params": [
                {
                    "name": "object",
                    "type": "Object",
                    "description": "The object to set forced blending state for."
                },
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "description": "`true` to enable forced blending."
                }
            ],
            "results": "void",
            "description": "Sets whether or not an object (created using `CREATE_OBJECT`, or similar) should have its position/rotation synchronized,\neven if it is a 'static' object (for example, having flag 32 - Static - set in its archetype definition).\n\nThis has to be called during the same frame the object is created/registered for network, as otherwise it may already\nhave a remote clone created.\n\nOnce a remote clone is created, changing this value will not have any effect on said clone.",
            "examples": [],
            "hash": "0x0379DAF89BA09AA5",
            "ns": "NETWORK",
            "aliases": ["0x0379DAF89BA09AA5"],
            "manualHash": true
        },
        "0x70DA3BF8DACD3210": {
            "name": "NETWORK_SET_OVERRIDE_SPECTATOR_MODE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x70DA3BF8DACD3210",
            "ns": "NETWORK",
            "jhash": "0xA0FD42D3",
            "manualHash": true
        },
        "0x1B857666604B1A74": {
            "name": "NETWORK_SET_PLAYER_IS_PASSIVE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1B857666604B1A74",
            "ns": "NETWORK",
            "aliases": ["0x1B857666604B1A74"],
            "jhash": "0x76A9FEB6",
            "manualHash": true
        },
        "0x7AC752103856FB20": {
            "name": "NETWORK_SET_SCRIPT_READY_FOR_EVENTS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7AC752103856FB20",
            "ns": "NETWORK",
            "aliases": ["0x7AC752103856FB20"],
            "jhash": "0xA639DCA2",
            "manualHash": true
        },
        "0x1775961C2FBBCB5C": {
            "name": "NETWORK_SET_PROPERTY_ID",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "```\nvalue must be < 255\n```",
            "examples": [],
            "hash": "0x1775961C2FBBCB5C",
            "ns": "NETWORK",
            "jhash": "0x5A74E873",
            "manualHash": true
        },
        "0x1DCCACDCFC569362": {
            "name": "NETWORK_SET_RICH_PRESENCE",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nOn PC it's a nullsub which means it does absolutely nothing.  \nNow that Discord supports Rich Presence, R* might finally implement this for PC. Or maybe in future games like RDR2, GTA VI...  \n```",
            "examples": [],
            "hash": "0x1DCCACDCFC569362",
            "ns": "NETWORK",
            "jhash": "0x932A6CED",
            "manualHash": true
        },
        "0x3E200C2BCF4164EB": {
            "name": "NETWORK_SET_RICH_PRESENCE_STRING",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "textLabel", "type": "char*" }
            ],
            "results": "void",
            "description": "This native does absolutely nothing, just a nullsub",
            "examples": [],
            "hash": "0x3E200C2BCF4164EB",
            "ns": "NETWORK",
            "aliases": ["0x3E200C2BCF4164EB", "_NETWORK_SET_RICH_PRESENCE_2"],
            "jhash": "0x017E6777",
            "manualHash": true
        },
        "0xD5B4883AC32F24C3": {
            "name": "NETWORK_SET_TEAM_ONLY_CHAT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD5B4883AC32F24C3",
            "ns": "NETWORK",
            "jhash": "0x3813019A",
            "manualHash": true
        },
        "0xCBF12D65F95AD686": {
            "name": "NETWORK_SET_TALKER_PROXIMITY",
            "params": [{ "name": "value", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCBF12D65F95AD686",
            "ns": "NETWORK",
            "jhash": "0x67555C66",
            "manualHash": true
        },
        "0x30DE938B516F0AD2": {
            "name": "NETWORK_SET_TRANSITION_ACTIVITY_ID",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x30DE938B516F0AD2",
            "ns": "NETWORK",
            "aliases": ["0x30DE938B516F0AD2"],
            "jhash": "0xCCA9C022",
            "manualHash": true
        },
        "0x1CA59E306ECB80A5": {
            "name": "NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT",
            "params": [
                { "name": "maxNumMissionParticipants", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "instanceId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1CA59E306ECB80A5",
            "ns": "NETWORK",
            "jhash": "0x470810ED",
            "manualHash": true
        },
        "0xEF26739BCD9907D5": {
            "name": "NETWORK_SET_TRANSITION_CREATOR_HANDLE",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEF26739BCD9907D5",
            "ns": "NETWORK",
            "jhash": "0x1DD01FE7",
            "manualHash": true
        },
        "0x0C978FDA19692C2C": {
            "name": "NETWORK_SET_TRANSITION_VISIBILITY_LOCK",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0C978FDA19692C2C",
            "ns": "NETWORK",
            "aliases": ["0x0C978FDA19692C2C"],
            "jhash": "0x4AF0ADF5",
            "manualHash": true
        },
        "0x8C70252FC40F320B": {
            "name": "_NETWORK_SET_VEHICLE_TEST_DRIVE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nUsed by Metric VEHICLE_DIST_DRIVEN\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x8C70252FC40F320B",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0x890E2C5ABED7236D": {
            "name": "_NETWORK_SET_VEHICLE_WHEELS_DESTRUCTIBLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAllow vehicle wheels to be destructible even when the Vehicle entity is invincible.\n```\n\n```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x890E2C5ABED7236D",
            "ns": "NETWORK",
            "aliases": ["0x890E2C5ABED7236D"],
            "manualHash": true
        },
        "0x82A2B386716608F1": {
            "name": "_NETWORK_SHOULD_SHOW_CONNECTIVITY_TROUBLESHOOTING",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if the NAT type is Strict (3) and a certain number of connections have failed.\n```",
            "examples": [],
            "hash": "0x82A2B386716608F1",
            "ns": "NETWORK",
            "aliases": ["0x82A2B386716608F1"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF6212C2EFEF1A23": {
            "name": "NETWORK_SET_VOICE_CHANNEL",
            "params": [{ "name": "channel", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEF6212C2EFEF1A23",
            "ns": "NETWORK",
            "jhash": "0x3974879F",
            "manualHash": true
        },
        "0xBABEC9E69A91C57B": {
            "name": "NETWORK_SET_VOICE_ACTIVE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBABEC9E69A91C57B",
            "ns": "NETWORK",
            "jhash": "0x8011247F",
            "manualHash": true
        },
        "0x17E0198B3882C2CB": {
            "name": "NETWORK_START_SOLO_TUTORIAL_SESSION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x17E0198B3882C2CB",
            "ns": "NETWORK",
            "aliases": ["0x17E0198B3882C2CB"],
            "jhash": "0x408A9436",
            "manualHash": true
        },
        "0x5A6FFA2433E2F14C": {
            "name": "NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "flags", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nOne of the first things it does is get the players ped.  \nThen it calls a function that is used in some tasks and ped based functions.  \n```\n\np5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS`, in the decompiled scripts.",
            "examples": [],
            "hash": "0x5A6FFA2433E2F14C",
            "ns": "NETWORK",
            "aliases": ["0x5A6FFA2433E2F14C"],
            "jhash": "0xC62E77B3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x859ED1CEA343FCA8": {
            "name": "NETWORK_SHOW_PROFILE_UI",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "void",
            "description": "```\nExample:  \nint playerHandle;\t  \nNETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &playerHandle, 13);  \nNETWORK_SHOW_PROFILE_UI(&playerHandle);  \n```",
            "examples": [],
            "hash": "0x859ED1CEA343FCA8",
            "ns": "NETWORK",
            "jhash": "0xF00A20B0",
            "manualHash": true
        },
        "0xDEB2B99A1AF1A2A6": {
            "name": "_NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK",
            "params": [{ "name": "netHandle", "type": "Any" }],
            "results": "int",
            "description": "```\nAlways returns -1. Seems to be XB1 specific.\n```",
            "examples": [],
            "hash": "0xDEB2B99A1AF1A2A6",
            "ns": "NETWORK",
            "aliases": ["0xDEB2B99A1AF1A2A6"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0682D67EF1FBA3D": {
            "name": "NETWORK_SUPPRESS_INVITE",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA0682D67EF1FBA3D",
            "ns": "NETWORK",
            "jhash": "0x323DC78C",
            "manualHash": true
        },
        "0x9A1B3FCDB36C8697": {
            "name": "NETWORK_START_SYNCHRONISED_SCENE",
            "params": [{ "name": "netScene", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9A1B3FCDB36C8697",
            "ns": "NETWORK",
            "jhash": "0xA9DFDC40",
            "manualHash": true
        },
        "0x4BA92A18502BCA61": {
            "name": "NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X dimension of the angled area 'origin'"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y dimension of the angled area 'origin'"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z dimension of the angled area 'origin'"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "X dimension of the angled area 'extent'"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Y dimension of the angled area 'extent'"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Z dimension of the angled area 'extent'"
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the angled area"
                },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "p10", "type": "float" },
                { "name": "flags", "type": "int" }
            ],
            "results": "BOOL",
            "description": "p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS` in the decompiled scripts.",
            "examples": [],
            "hash": "0x4BA92A18502BCA61",
            "ns": "NETWORK",
            "aliases": ["0x4BA92A18502BCA61"],
            "jhash": "0x74D6B13C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7420099936CE286": {
            "name": "NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH",
            "params": [
                { "name": "tunableContext", "type": "Hash" },
                { "name": "tunableName", "type": "Hash" },
                { "name": "defaultValue", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nReturns defaultValue if the tunable doesn't exist.\n```",
            "examples": [],
            "hash": "0xC7420099936CE286",
            "ns": "NETWORK",
            "aliases": [
                "0xC7420099936CE286",
                "_NETWORK_ACCESS_TUNABLE_BOOL_HASH_FAIL_VAL"
            ],
            "jhash": "0x8AFE3D90",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC254481A4574CB2F": {
            "name": "NETWORK_STOP_SYNCHRONISED_SCENE",
            "params": [{ "name": "netScene", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC254481A4574CB2F",
            "ns": "NETWORK",
            "jhash": "0x97B1CDF6",
            "manualHash": true
        },
        "0xC1447451DDB512F0": {
            "name": "_NETWORK_UGC_NAV",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xC1447451DDB512F0",
            "ns": "NETWORK",
            "aliases": ["0xC1447451DDB512F0"],
            "manualHash": true
        },
        "0x7368E683BB9038D6": {
            "name": "NETWORK_UNREGISTER_NETWORKED_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7368E683BB9038D6",
            "ns": "NETWORK",
            "aliases": ["0x7368E683BB9038D6"],
            "jhash": "0x5C645F64",
            "manualHash": true
        },
        "0xC3BFED92026A2AAD": {
            "name": "_NETWORK_TRANSITION_TRACK",
            "params": [
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "state", "type": "int" },
                { "name": "p4", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC3BFED92026A2AAD",
            "ns": "NETWORK",
            "aliases": ["0xC3BFED92026A2AAD"],
            "manualHash": true
        },
        "0xCD71A4ECAB22709E": {
            "name": "NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD71A4ECAB22709E",
            "ns": "NETWORK",
            "aliases": ["0xCD71A4ECAB22709E"],
            "jhash": "0xBC54371B",
            "manualHash": true
        },
        "0x2B1813ABA29016C5": {
            "name": "NETWORK_USE_HIGH_PRECISION_BLENDING",
            "params": [
                { "name": "netID", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOld name: _NETWORK_SET_NETWORK_ID_DYNAMIC\n```",
            "examples": [],
            "hash": "0x2B1813ABA29016C5",
            "ns": "NETWORK",
            "aliases": [
                "0x2B1813ABA29016C5",
                "_NETWORK_SET_NETWORK_ID_DYNAMIC"
            ],
            "jhash": "0x155465EE",
            "manualHash": true
        },
        "0xB7C7F6AD6424304B": {
            "name": "_NETWORK_UPDATE_PLAYER_SCARS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB7C7F6AD6424304B",
            "ns": "NETWORK",
            "aliases": ["0xB7C7F6AD6424304B"],
            "jhash": "0x371BBA08",
            "manualHash": true
        },
        "0x90986E8876CE0A83": {
            "name": "PARTICIPANT_ID",
            "params": [],
            "results": "Player",
            "description": "```\nReturn the local Participant ID  \n```",
            "examples": [],
            "hash": "0x90986E8876CE0A83",
            "ns": "NETWORK",
            "jhash": "0x9C35A221",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57A3BDDAD8E5AA0A": {
            "name": "PARTICIPANT_ID_TO_INT",
            "params": [],
            "results": "int",
            "description": "```\nReturn the local Participant ID.  \nThis native is exactly the same as 'PARTICIPANT_ID' native.  \n```",
            "examples": [],
            "hash": "0x57A3BDDAD8E5AA0A",
            "ns": "NETWORK",
            "jhash": "0x907498B0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x99BFDC94A603E541": {
            "name": "OBJ_TO_NET",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "int",
            "description": "```\nLets objects spawn online simply do it like this:  \nint createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));  \n```",
            "examples": [],
            "hash": "0x99BFDC94A603E541",
            "ns": "NETWORK",
            "jhash": "0x1E05F29F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x58C21165F6545892": {
            "name": "OPEN_COMMERCE_STORE",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nHas a 3rd param (int) since patch [???].  \n```\n\n```\nNativeDB Added Parameter 3: int p2\n```",
            "examples": [],
            "hash": "0x58C21165F6545892",
            "ns": "NETWORK",
            "aliases": ["0x58C21165F6545892"],
            "jhash": "0x365C50EE",
            "manualHash": true
        },
        "0x72D0706CD6CCDB58": {
            "name": "RELEASE_ALL_COMMERCE_ITEM_IMAGES",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x72D0706CD6CCDB58",
            "ns": "NETWORK",
            "aliases": ["0x72D0706CD6CCDB58"],
            "jhash": "0xCA7A0A49",
            "manualHash": true
        },
        "0x472841A026D26D8B": {
            "name": "_REMOTE_CHEAT_DETECTED",
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: Player player\nNativeDB Added Parameter 2: int a\nNativeDB Added Parameter 3: int b\n```",
            "examples": [],
            "hash": "0x472841A026D26D8B",
            "ns": "NETWORK",
            "aliases": ["0x472841A026D26D8B"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE26CCFF8094D8C74": {
            "name": "REFRESH_PLAYER_LIST_STATS",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE26CCFF8094D8C74",
            "ns": "NETWORK",
            "aliases": ["USING_NETWORK_WEAPONTYPE", "0xE26CCFF8094D8C74"],
            "jhash": "0xF49C1533",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0EDEC3C276198689": {
            "name": "PED_TO_NET",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "```\ngets the network id of a ped  \n```",
            "examples": [],
            "hash": "0x0EDEC3C276198689",
            "ns": "NETWORK",
            "jhash": "0x86A0B759",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x715135F4B82AC90D": {
            "name": "REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "```\nUsed in am_mp_property_ext and am_mp_property_int  \n```\n\n```\nNativeDB Added Parameter 2: Ped ped\n```",
            "examples": [],
            "hash": "0x715135F4B82AC90D",
            "ns": "NETWORK",
            "aliases": ["0x715135F4B82AC90D"],
            "jhash": "0xCEAE5AFC",
            "manualHash": true
        },
        "0xA2F952104FC6DD4B": {
            "name": "REQUEST_COMMERCE_ITEM_IMAGE",
            "params": [{ "name": "index", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA2F952104FC6DD4B",
            "ns": "NETWORK",
            "aliases": ["0xA2F952104FC6DD4B"],
            "jhash": "0x1FDC75DC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x797F9C5E661D920E": {
            "name": "_RESERVE_NETWORK_LOCAL_OBJECTS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nInternal logging string: SCRIPT_RESERVING_LOCAL_OBJECTS\n```\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x797F9C5E661D920E",
            "ns": "NETWORK",
            "aliases": ["0x797F9C5E661D920E"],
            "manualHash": true
        },
        "0x42613035157E4208": {
            "name": "_RESERVE_NETWORK_LOCAL_VEHICLES",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x42613035157E4208",
            "ns": "NETWORK",
            "aliases": ["0x42613035157E4208"],
            "manualHash": true
        },
        "0x76B02E21ED27A469": {
            "name": "RESERVE_NETWORK_MISSION_VEHICLES",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x76B02E21ED27A469",
            "ns": "NETWORK",
            "jhash": "0x5062875E",
            "manualHash": true
        },
        "0x4E5C93BD0C32FBF8": {
            "name": "RESERVE_NETWORK_MISSION_OBJECTS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4E5C93BD0C32FBF8",
            "ns": "NETWORK",
            "jhash": "0x391DF4F3",
            "manualHash": true
        },
        "0x2C8DF5D129595281": {
            "name": "_RESERVE_NETWORK_LOCAL_PEDS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "```\nInternal logging string: SCRIPT_RESERVING_LOCAL_PEDS\n```\n\n```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x2C8DF5D129595281",
            "ns": "NETWORK",
            "aliases": ["0x2C8DF5D129595281"],
            "manualHash": true
        },
        "0xB60FEBA45333D36F": {
            "name": "RESERVE_NETWORK_MISSION_PEDS",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB60FEBA45333D36F",
            "ns": "NETWORK",
            "jhash": "0x54998C37",
            "manualHash": true
        },
        "0x815E5E3073DA1D67": {
            "name": "SET_BALANCE_ADD_MACHINE",
            "params": [
                {
                    "name": "contentId",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "contentTypeName",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x815E5E3073DA1D67",
            "ns": "NETWORK",
            "jhash": "0xE123C7AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB8322EEB38BE7C26": {
            "name": "SET_BALANCE_ADD_MACHINES",
            "params": [
                { "name": "data", "type": "Any*" },
                { "name": "dataCount", "type": "int" },
                {
                    "name": "contentTypeName",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB8322EEB38BE7C26",
            "ns": "NETWORK",
            "jhash": "0x22C33603",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x17330EBF2F2124A8": {
            "name": "_RESET_GHOSTED_ENTITY_ALPHA",
            "params": [],
            "results": "void",
            "description": "Sets the alpha value used by [`_SET_LOCAL_PLAYER_AS_GHOST`](#\\_0x5FFE9B4144F9712F), [`SET_NETWORK_VEHICLE_AS_GHOST`](#\\_0x6274C4712850841E), and [`_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`](#\\_0x4BA166079D658ED4).",
            "examples": [],
            "hash": "0x17330EBF2F2124A8",
            "ns": "NETWORK",
            "aliases": ["0x17330EBF2F2124A8"],
            "manualHash": true
        },
        "0x241E289B5C059EDC": {
            "name": "SET_ENTITY_LOCALLY_VISIBLE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to set locally visible."
                }
            ],
            "results": "void",
            "description": "Sets the provided entity visible for yourself for the current frame.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\n  -- Any random entity should work\n  local entity = GetVehiclePedIsIn(PlayerPedId(), false)\n  -- Sets the entity not visible to other players\n  SetEntityVisible(entity, false)\n  while true do\n    Wait(0)\n    -- Sets the entity as visible for yourself\n    SetEntityLocallyVisible(entity)\n  end\nend)"
                }
            ],
            "hash": "0x241E289B5C059EDC",
            "ns": "NETWORK",
            "jhash": "0x235A57B3",
            "manualHash": true
        },
        "0xE135A9FF3F5D05D8": {
            "name": "SET_ENTITY_LOCALLY_INVISIBLE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "Sets the provided entity not visible for yourself for the current frame.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\n  -- Any random entity should work\n  local entity = PlayerPedId()\n  -- Make the entity visible for all players\n  SetEntityVisible(entity, true)\n  while true do\n    Wait(0)\n    -- Make the entity invisible for the current player only.\n    SetEntityLocallyInvisible(entity)\n  end\nend)"
                }
            ],
            "hash": "0xE135A9FF3F5D05D8",
            "ns": "NETWORK",
            "jhash": "0x51ADCC5F",
            "manualHash": true
        },
        "0xE0031D3C8F36AB82": {
            "name": "SET_ENTITY_VISIBLE_IN_CUTSCENE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE0031D3C8F36AB82",
            "ns": "NETWORK",
            "jhash": "0xDBFB067B",
            "manualHash": true
        },
        "0x5FFE9B4144F9712F": {
            "name": "_SET_LOCAL_PLAYER_AS_GHOST",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "Formerly incorrectly named `USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR` due to incorrect treatment of console vs. PC native registration.\n\nNative name guessed through ordering.\n\n```\nNativeDB Added Parameter 2: BOOL p1\n```",
            "examples": [],
            "hash": "0x5FFE9B4144F9712F",
            "ns": "NETWORK",
            "manualHash": true
        },
        "0xE5F773C1A1D9D168": {
            "name": "SET_LOCAL_PLAYER_INVISIBLE_LOCALLY",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE5F773C1A1D9D168",
            "ns": "NETWORK",
            "jhash": "0x764F6222",
            "manualHash": true
        },
        "0xAAA553E7DD28A457": {
            "name": "SET_NETWORK_CUTSCENE_ENTITIES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAAA553E7DD28A457",
            "ns": "NETWORK",
            "aliases": ["0xAAA553E7DD28A457"],
            "jhash": "0xFD0F7EDD",
            "manualHash": true
        },
        "0x658500AE6D723A7E": {
            "name": "_SET_GHOSTED_ENTITY_ALPHA",
            "params": [
                {
                    "name": "alpha",
                    "type": "int",
                    "description": "A value between 1 and 254. Default: 128"
                }
            ],
            "results": "void",
            "description": "Sets the alpha value used by [`_SET_LOCAL_PLAYER_AS_GHOST`](#\\_0x5FFE9B4144F9712F), [`SET_NETWORK_VEHICLE_AS_GHOST`](#\\_0x6274C4712850841E), and [`_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`](#\\_0x4BA166079D658ED4).\n\n'Solidness' cannot be achieved using 255 - this will have the opposite effect of it defaulting to 128 it seems (or just having no effect at all).",
            "examples": [],
            "hash": "0x658500AE6D723A7E",
            "ns": "NETWORK",
            "aliases": ["0x658500AE6D723A7E"],
            "manualHash": true
        },
        "0x7619364C82D3BF14": {
            "name": "SET_LOCAL_PLAYER_VISIBLE_LOCALLY",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7619364C82D3BF14",
            "ns": "NETWORK",
            "jhash": "0x324B56DB",
            "manualHash": true
        },
        "0xD1065D68947E7B6E": {
            "name": "SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD1065D68947E7B6E",
            "ns": "NETWORK",
            "jhash": "0x59F3479B",
            "manualHash": true
        },
        "0x299EEB23175895FC": {
            "name": "SET_NETWORK_ID_CAN_MIGRATE",
            "params": [
                { "name": "netId", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nWhether or not another player is allowed to take control of the entity  \n```",
            "examples": [],
            "hash": "0x299EEB23175895FC",
            "ns": "NETWORK",
            "jhash": "0x47C8E5FF",
            "manualHash": true
        },
        "0xE05E81A888FA63C8": {
            "name": "SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES",
            "params": [
                { "name": "netId", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE05E81A888FA63C8",
            "ns": "NETWORK",
            "jhash": "0x68D486B2",
            "manualHash": true
        },
        "0xA8A024587329F36A": {
            "name": "SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER",
            "params": [
                { "name": "netId", "type": "int" },
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA8A024587329F36A",
            "ns": "NETWORK",
            "aliases": ["0xA8A024587329F36A", "_SET_NETWORK_ID_SYNC_TO_PLAYER"],
            "jhash": "0x4D15FDB1",
            "manualHash": true
        },
        "0x838DA0936A24ED4D": {
            "name": "_SET_NETWORK_ENABLE_VEHICLE_POSITION_CORRECTION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nEnables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).\n```",
            "examples": [],
            "hash": "0x838DA0936A24ED4D",
            "ns": "NETWORK",
            "aliases": ["0x838DA0936A24ED4D"],
            "manualHash": true
        },
        "0xA6928482543022B4": {
            "name": "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE",
            "params": [
                { "name": "netId", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA6928482543022B4",
            "ns": "NETWORK",
            "jhash": "0x199E75EF",
            "manualHash": true
        },
        "0x6274C4712850841E": {
            "name": "SET_NETWORK_VEHICLE_AS_GHOST",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6274C4712850841E",
            "ns": "NETWORK",
            "aliases": [
                "0x6274C4712850841E",
                "_SET_NETWORK_OBJECT_NON_CONTACT"
            ],
            "jhash": "0xEA235081",
            "manualHash": true
        },
        "0xA2A707979FE754DC": {
            "name": "_SET_NETWORK_VEHICLE_POSITION_UPDATE_MULTIPLIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nrage::netBlenderLinInterp::GetPositionMaxForUpdateLevel\n```",
            "examples": [],
            "hash": "0xA2A707979FE754DC",
            "ns": "NETWORK",
            "aliases": [
                "0xA2A707979FE754DC",
                "_SET_NETWORK_VEHICLE_BLENDER_DISTANCE_MULTIPLIER"
            ],
            "manualHash": true
        },
        "0x12B37D54667DB0B8": {
            "name": "SET_PLAYER_INVISIBLE_LOCALLY",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x12B37D54667DB0B8",
            "ns": "NETWORK",
            "jhash": "0x18227209",
            "manualHash": true
        },
        "0xEC51713AB6EC36E8": {
            "name": "SET_NETWORK_VEHICLE_RESPOT_TIMER",
            "params": [
                { "name": "netId", "type": "int" },
                { "name": "time", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 3: Any p2\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0xEC51713AB6EC36E8",
            "ns": "NETWORK",
            "jhash": "0x2C30912D",
            "manualHash": true
        },
        "0xA7C511FA1C5BDA38": {
            "name": "_SET_RELATIONSHIP_TO_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Enables ghosting between specific players. Name is between `_SET_RELATIONSHIP_GROUP_DONT_AFFECT_WANTED_LEVEL` and `SET_ROADS_BACK_TO_ORIGINAL`.",
            "examples": [],
            "hash": "0xA7C511FA1C5BDA38",
            "ns": "NETWORK",
            "aliases": ["0xA7C511FA1C5BDA38"],
            "manualHash": true
        },
        "0xFAA10F1FAFB11AF2": {
            "name": "SET_PLAYER_VISIBLE_LOCALLY",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFAA10F1FAFB11AF2",
            "ns": "NETWORK",
            "jhash": "0xBA2BB4B4",
            "manualHash": true
        },
        "0x9641A9FF718E9C5E": {
            "name": "SET_STORE_ENABLED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nAccess to the store for shark cards etc...  \n```",
            "examples": [],
            "hash": "0x9641A9FF718E9C5E",
            "ns": "NETWORK",
            "jhash": "0xC1F6443B",
            "manualHash": true
        },
        "0x593850C16A36B692": {
            "name": "SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME",
            "params": [],
            "results": "void",
            "description": "```\nStarts a new singleplayer game (at the prologue).  \n```",
            "examples": [],
            "hash": "0x593850C16A36B692",
            "ns": "NETWORK",
            "jhash": "0x92B7351C",
            "manualHash": true
        },
        "0x5776ED562C134687": {
            "name": "TEXTURE_DOWNLOAD_HAS_FAILED",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5776ED562C134687",
            "ns": "NETWORK",
            "aliases": ["0x5776ED562C134687"],
            "jhash": "0xE4547765",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3448505B6E35262D": {
            "name": "TEXTURE_DOWNLOAD_GET_NAME",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x3448505B6E35262D",
            "ns": "NETWORK",
            "jhash": "0xA40EF65A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9ECA15ADFE141431": {
            "name": "_SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE",
            "params": [],
            "results": "BOOL",
            "description": "Disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.\n\nIf you're already in SP then it'll re-load singleplayer.\n\nYou might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.\n\nSomewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.",
            "examples": [],
            "hash": "0x9ECA15ADFE141431",
            "ns": "NETWORK",
            "aliases": ["0x9ECA15ADFE141431"],
            "manualHash": true,
            "resultsDescription": "always seems to be 1"
        },
        "0x46FB3ED415C7641C": {
            "name": "_TRIGGER_SCRIPT_CRC_CHECK_ON_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "int" },
                { "name": "scriptHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "```\np1 = 6\n```",
            "examples": [],
            "hash": "0x46FB3ED415C7641C",
            "ns": "NETWORK",
            "aliases": ["0x46FB3ED415C7641C", "_NETWORK_IS_PLAYER_IN_SCRIPT"],
            "jhash": "0xF9A51B92",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x487EB90B98E9FB19": {
            "name": "TEXTURE_DOWNLOAD_RELEASE",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x487EB90B98E9FB19",
            "ns": "NETWORK",
            "jhash": "0xEE8D9E70",
            "manualHash": true
        },
        "0x16160DA74A8E74A2": {
            "name": "TEXTURE_DOWNLOAD_REQUEST",
            "params": [
                { "name": "PlayerHandle", "type": "int*" },
                { "name": "FilePath", "type": "char*" },
                { "name": "Name", "type": "char*" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x16160DA74A8E74A2",
            "ns": "NETWORK",
            "jhash": "0xAD546CC3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0B203B4AFDE53A4F": {
            "name": "TITLE_TEXTURE_DOWNLOAD_REQUEST",
            "params": [
                { "name": "FilePath", "type": "char*" },
                { "name": "Name", "type": "char*" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0B203B4AFDE53A4F",
            "ns": "NETWORK",
            "aliases": ["0x0B203B4AFDE53A4F"],
            "jhash": "0x1856D008",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE9B99B6853181409": {
            "name": "UGC_CANCEL_QUERY",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE9B99B6853181409",
            "ns": "NETWORK",
            "aliases": ["0xE9B99B6853181409"],
            "jhash": "0x021D5A94",
            "manualHash": true
        },
        "0xA1E5E0204A6FCC70": {
            "name": "UGC_CLEAR_MODIFY_RESULT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA1E5E0204A6FCC70",
            "ns": "NETWORK",
            "aliases": ["0xA1E5E0204A6FCC70"],
            "jhash": "0x405ECA16",
            "manualHash": true
        },
        "0x61A885D3F7CFEE9A": {
            "name": "UGC_CLEAR_OFFLINE_QUERY",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x61A885D3F7CFEE9A",
            "ns": "NETWORK",
            "aliases": ["0x61A885D3F7CFEE9A"],
            "jhash": "0xE13C1F7F",
            "manualHash": true
        },
        "0x941E5306BCD7C2C7": {
            "name": "UGC_DID_GET_SUCCEED",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x941E5306BCD7C2C7",
            "ns": "NETWORK",
            "aliases": ["0x941E5306BCD7C2C7"],
            "jhash": "0x3970B0DA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x152D90E4C1B4738A": {
            "name": "UGC_COPY_CONTENT",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x152D90E4C1B4738A",
            "ns": "NETWORK",
            "aliases": ["0x152D90E4C1B4738A"],
            "jhash": "0x08243B79",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD5A4B59980401588": {
            "name": "UGC_GET_BOOKMARKED_CONTENT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD5A4B59980401588",
            "ns": "NETWORK",
            "aliases": ["0xD5A4B59980401588"],
            "jhash": "0x4609D596",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x37025B27D9B658B1": {
            "name": "UGC_GET_CONTENT_FILE_VERSION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x37025B27D9B658B1",
            "ns": "NETWORK",
            "aliases": ["0x37025B27D9B658B1", "_GET_CONTENT_FILE_VERSION"],
            "jhash": "0xFF7D44E6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x40F7E66472DF3E5C": {
            "name": "UGC_GET_CACHED_DESCRIPTION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x40F7E66472DF3E5C",
            "ns": "NETWORK",
            "aliases": ["0x40F7E66472DF3E5C"],
            "jhash": "0x70A2845C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7CF0448787B23758": {
            "name": "UGC_GET_CONTENT_DESCRIPTION_HASH",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x7CF0448787B23758",
            "ns": "NETWORK",
            "aliases": ["0x7CF0448787B23758", "_GET_CONTENT_DESCRIPTION_HASH"],
            "jhash": "0x91534C6E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x17440AA15D1D3739": {
            "name": "UGC_CLEAR_CREATE_RESULT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x17440AA15D1D3739",
            "ns": "NETWORK",
            "aliases": ["0x17440AA15D1D3739"],
            "jhash": "0x133FF2D5",
            "manualHash": true
        },
        "0x993CBE59D350D225": {
            "name": "UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x993CBE59D350D225",
            "ns": "NETWORK",
            "aliases": ["0x993CBE59D350D225"],
            "jhash": "0x0DEB3F5A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A17A27D75C74887": {
            "name": "UGC_GET_CONTENT_HASH",
            "params": [],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x3A17A27D75C74887",
            "ns": "NETWORK",
            "aliases": ["0x3A17A27D75C74887"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x8E1D8F78",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x32DD916F3F7C9672": {
            "name": "UGC_GET_CONTENT_LANGUAGE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x32DD916F3F7C9672",
            "ns": "NETWORK",
            "aliases": ["0x32DD916F3F7C9672"],
            "jhash": "0xA2C5BD9D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA96394A0EECFA65": {
            "name": "UGC_CLEAR_QUERY_RESULTS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA96394A0EECFA65",
            "ns": "NETWORK",
            "aliases": ["0xBA96394A0EECFA65"],
            "jhash": "0x0D35DD93",
            "manualHash": true
        },
        "0x55AA95F481D694D2": {
            "name": "UGC_GET_CONTENT_ID",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "char*",
            "description": "```\nReturn the mission id of a job.\n```",
            "examples": [],
            "hash": "0x55AA95F481D694D2",
            "ns": "NETWORK",
            "aliases": ["0x55AA95F481D694D2", "_GET_CONTENT_ID"],
            "jhash": "0x331AEABF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA9240A96C74CCA13": {
            "name": "UGC_GET_CONTENT_IS_VERIFIED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA9240A96C74CCA13",
            "ns": "NETWORK",
            "aliases": ["0xA9240A96C74CCA13"],
            "jhash": "0x8F6754AE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3054F114121C21EA": {
            "name": "UGC_GET_CONTENT_IS_PUBLISHED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3054F114121C21EA",
            "ns": "NETWORK",
            "aliases": ["0x3054F114121C21EA"],
            "jhash": "0xA850DDE1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA7BAB11E7C9C6C5A": {
            "name": "UGC_GET_CONTENT_CATEGORY",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA7BAB11E7C9C6C5A",
            "ns": "NETWORK",
            "aliases": ["0xA7BAB11E7C9C6C5A", "_GET_CONTENT_CATEGORY"],
            "jhash": "0x5E8A7559",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBAF6BABF9E7CCC13": {
            "name": "UGC_GET_CONTENT_PATH",
            "params": [
                { "name": "p0", "type": "int" },
                {
                    "name": "p1",
                    "type": "int",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xBAF6BABF9E7CCC13",
            "ns": "NETWORK",
            "aliases": ["0xBAF6BABF9E7CCC13", "_UGC_GET_CLOUD_PATH"],
            "jhash": "0x744A9EA5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1ACCFBA3D8DAB2EE": {
            "name": "UGC_GET_CONTENT_RATING",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x1ACCFBA3D8DAB2EE",
            "ns": "NETWORK",
            "aliases": ["0x1ACCFBA3D8DAB2EE"],
            "jhash": "0x1E34953F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x70EA8DA57840F9BE": {
            "name": "UGC_GET_CONTENT_HAS_PLAYER_RECORD",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x70EA8DA57840F9BE",
            "ns": "NETWORK",
            "aliases": ["0x70EA8DA57840F9BE"],
            "jhash": "0x11DC0F27",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE0A6138401BCB837": {
            "name": "UGC_GET_CONTENT_NUM",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xE0A6138401BCB837",
            "ns": "NETWORK",
            "aliases": ["0xE0A6138401BCB837"],
            "jhash": "0x2DE69817",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4E548C0D7AE39FF9": {
            "name": "UGC_GET_CONTENT_RATING_NEGATIVE_COUNT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x4E548C0D7AE39FF9",
            "ns": "NETWORK",
            "aliases": ["0x4E548C0D7AE39FF9"],
            "jhash": "0x41A0FB02",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBF09786A7FCAB582": {
            "name": "UGC_GET_CONTENT_NAME",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xBF09786A7FCAB582",
            "ns": "NETWORK",
            "aliases": ["0xBF09786A7FCAB582"],
            "jhash": "0xA5A0C695",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x87E5C46C187FE0AE": {
            "name": "UGC_GET_CONTENT_RATING_POSITIVE_COUNT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x87E5C46C187FE0AE",
            "ns": "NETWORK",
            "aliases": ["0x87E5C46C187FE0AE"],
            "jhash": "0x3276D9D3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCFD115B373C0DF63": {
            "name": "UGC_GET_CONTENT_UPDATED_DATE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCFD115B373C0DF63",
            "ns": "NETWORK",
            "aliases": ["0xCFD115B373C0DF63"],
            "jhash": "0xA19A238D",
            "manualHash": true
        },
        "0x759299C5BB31D2A9": {
            "name": "UGC_GET_CONTENT_RATING_COUNT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x759299C5BB31D2A9",
            "ns": "NETWORK",
            "aliases": ["0x759299C5BB31D2A9"],
            "jhash": "0x771FE190",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFBC5E768C7A77A6A": {
            "name": "UGC_GET_CREATE_RESULT",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xFBC5E768C7A77A6A",
            "ns": "NETWORK",
            "aliases": ["0xFBC5E768C7A77A6A"],
            "jhash": "0xCE569932",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCD67AD041A394C9C": {
            "name": "UGC_GET_CONTENT_USER_ID",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xCD67AD041A394C9C",
            "ns": "NETWORK",
            "aliases": [
                "0xCD67AD041A394C9C",
                "_GET_CONTENT_USER_ID",
                "GET_PLAYER_ADVANCED_MODIFIER_PRIVILEGES"
            ],
            "jhash": "0x8F3137E6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x597F8DBA9B206FC7": {
            "name": "UGC_GET_CREATOR_NUM",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x597F8DBA9B206FC7",
            "ns": "NETWORK",
            "aliases": ["0x597F8DBA9B206FC7"],
            "jhash": "0x410C61D1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x769951E2455E2EB5": {
            "name": "UGC_GET_CONTENT_TOTAL",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x769951E2455E2EB5",
            "ns": "NETWORK",
            "aliases": ["0x769951E2455E2EB5"],
            "jhash": "0x81BD8D3B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x678BB03C1A3BD51E": {
            "name": "UGC_GET_GET_BY_CATEGORY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x678BB03C1A3BD51E",
            "ns": "NETWORK",
            "aliases": ["0x678BB03C1A3BD51E"],
            "jhash": "0x67E74842",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9F6E2821885CAEE2": {
            "name": "UGC_GET_CREW_CONTENT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9F6E2821885CAEE2",
            "ns": "NETWORK",
            "aliases": ["0x9F6E2821885CAEE2"],
            "jhash": "0xA6D8B798",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x703F12425ECA8BF5": {
            "name": "UGC_GET_CONTENT_USER_NAME",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x703F12425ECA8BF5",
            "ns": "NETWORK",
            "aliases": ["0x703F12425ECA8BF5"],
            "jhash": "0xB9137BA7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3195F8DD0D531052": {
            "name": "UGC_GET_MY_CONTENT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3195F8DD0D531052",
            "ns": "NETWORK",
            "aliases": ["0x3195F8DD0D531052"],
            "jhash": "0x4C2C0D1F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC55A0B40FFB1ED23": {
            "name": "UGC_GET_CREATE_CONTENT_ID",
            "params": [],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xC55A0B40FFB1ED23",
            "ns": "NETWORK",
            "aliases": ["0xC55A0B40FFB1ED23"],
            "jhash": "0x82146BE9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF9E1CCAE8BA4C281": {
            "name": "UGC_GET_FRIEND_CONTENT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF9E1CCAE8BA4C281",
            "ns": "NETWORK",
            "aliases": ["0xF9E1CCAE8BA4C281"],
            "jhash": "0x9EFBD5D1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEDF7F927136C224B": {
            "name": "UGC_GET_QUERY_RESULT",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xEDF7F927136C224B",
            "ns": "NETWORK",
            "aliases": ["0xEDF7F927136C224B"],
            "jhash": "0xCC2356E3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5A0A3D1A186A5508": {
            "name": "UGC_GET_MODIFY_RESULT",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x5A0A3D1A186A5508",
            "ns": "NETWORK",
            "aliases": ["0x5A0A3D1A186A5508"],
            "jhash": "0x1F0DD8AF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0173D6BFF4E0348": {
            "name": "UGC_GET_ROOT_CONTENT_ID",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "char*",
            "description": "```\nReturn the root content id of a job.\n```",
            "examples": [],
            "hash": "0xC0173D6BFF4E0348",
            "ns": "NETWORK",
            "aliases": ["0xC0173D6BFF4E0348", "_GET_ROOT_CONTENT_ID"],
            "jhash": "0x0E5E8E5C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x299EF3C576773506": {
            "name": "UGC_HAS_MODIFY_FINISHED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x299EF3C576773506",
            "ns": "NETWORK",
            "aliases": ["0x299EF3C576773506"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x611E0BE2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5E24341A7F92A74B": {
            "name": "UGC_HAS_CREATE_FINISHED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5E24341A7F92A74B",
            "ns": "NETWORK",
            "aliases": ["0x5E24341A7F92A74B"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0xE69E8D0D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5CAE833B0EE0C500": {
            "name": "UGC_POLICIES_MAKE_PRIVATE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5CAE833B0EE0C500",
            "ns": "NETWORK",
            "aliases": ["0x5CAE833B0EE0C500"],
            "jhash": "0x0D4F845D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD53ACDBEF24A46E8": {
            "name": "UGC_IS_GETTING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD53ACDBEF24A46E8",
            "ns": "NETWORK",
            "aliases": ["0xD53ACDBEF24A46E8"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x4908A514",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x02ADA21EA2F6918F": {
            "name": "UGC_HAS_GET_FINISHED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x02ADA21EA2F6918F",
            "ns": "NETWORK",
            "aliases": ["0x02ADA21EA2F6918F"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x50296140",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7397A83F7A2A462": {
            "name": "UGC_QUERY_BY_CONTENT_IDS",
            "params": [
                { "name": "data", "type": "Any*" },
                { "name": "count", "type": "int" },
                { "name": "latestVersion", "type": "BOOL" },
                { "name": "contentTypeName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC7397A83F7A2A462",
            "ns": "NETWORK",
            "aliases": ["0xC7397A83F7A2A462"],
            "jhash": "0x47B3C35E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF53E48461B71EECB": {
            "name": "UGC_IS_LANGUAGE_SUPPORTED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF53E48461B71EECB",
            "ns": "NETWORK",
            "aliases": ["0xF53E48461B71EECB"],
            "jhash": "0xB4668B23",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1DE0F5F50D723CAA": {
            "name": "UGC_PUBLISH",
            "params": [
                { "name": "contentId", "type": "char*" },
                { "name": "baseContentId", "type": "char*" },
                { "name": "contentTypeName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1DE0F5F50D723CAA",
            "ns": "NETWORK",
            "aliases": ["0x1DE0F5F50D723CAA"],
            "jhash": "0xAD334B40",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9BF438815F5D96EA": {
            "name": "UGC_QUERY_MY_CONTENT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9BF438815F5D96EA",
            "ns": "NETWORK",
            "aliases": ["0x9BF438815F5D96EA"],
            "jhash": "0xCBA7242F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6D4CB481FAC835E8": {
            "name": "_UGC_QUERY_RECENTLY_CREATED_CONTENT",
            "params": [
                { "name": "offset", "type": "int" },
                { "name": "count", "type": "int" },
                { "name": "contentTypeName", "type": "char*" },
                { "name": "p3", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6D4CB481FAC835E8",
            "ns": "NETWORK",
            "aliases": ["0x6D4CB481FAC835E8"],
            "jhash": "0x40CF0783",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x158EC424F35EC469": {
            "name": "UGC_QUERY_BY_CONTENT_ID",
            "params": [
                { "name": "contentId", "type": "char*" },
                { "name": "latestVersion", "type": "BOOL" },
                { "name": "contentTypeName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x158EC424F35EC469",
            "ns": "NETWORK",
            "aliases": ["0x158EC424F35EC469"],
            "jhash": "0xDED82A6E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5E0165278F6339EE": {
            "name": "UGC_REQUEST_CACHED_DESCRIPTION",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5E0165278F6339EE",
            "ns": "NETWORK",
            "aliases": ["0x5E0165278F6339EE"],
            "jhash": "0x1C4F9FDB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7FD2990AF016795E": {
            "name": "UGC_REQUEST_CONTENT_DATA_FROM_PARAMS",
            "params": [
                { "name": "contentTypeName", "type": "char*" },
                { "name": "contentId", "type": "char*" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" },
                { "name": "p4", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x7FD2990AF016795E",
            "ns": "NETWORK",
            "aliases": ["0x7FD2990AF016795E"],
            "jhash": "0x38FC2EEB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD05D1A6C74DA3498": {
            "name": "UGC_SET_DELETED",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD05D1A6C74DA3498",
            "ns": "NETWORK",
            "aliases": ["0xD05D1A6C74DA3498"],
            "jhash": "0x48CCC328",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x308F96458B7087CC": {
            "name": "UGC_TEXTURE_DOWNLOAD_REQUEST",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any*" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x308F96458B7087CC",
            "ns": "NETWORK",
            "aliases": ["0x308F96458B7087CC"],
            "jhash": "0x68C9AF69",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x274A1519DFC1094F": {
            "name": "UGC_SET_BOOKMARKED",
            "params": [
                { "name": "contentId", "type": "char*" },
                { "name": "bookmarked", "type": "BOOL" },
                { "name": "contentTypeName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x274A1519DFC1094F",
            "ns": "NETWORK",
            "aliases": ["0x274A1519DFC1094F"],
            "jhash": "0x980D45D7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x171DF6A0C07FB3DC": {
            "name": "UGC_REQUEST_CONTENT_DATA_FROM_INDEX",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x171DF6A0C07FB3DC",
            "ns": "NETWORK",
            "aliases": ["0x171DF6A0C07FB3DC"],
            "jhash": "0x84315226",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF98DDE0A8ED09323": {
            "name": "UGC_SET_QUERY_DATA_FROM_OFFLINE",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF98DDE0A8ED09323",
            "ns": "NETWORK",
            "aliases": ["0xF98DDE0A8ED09323"],
            "jhash": "0x213C6D36",
            "manualHash": true
        },
        "0x77758139EC9B66C7": {
            "name": "USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x77758139EC9B66C7",
            "ns": "NETWORK",
            "jhash": "0x4DD46DAE",
            "manualHash": true
        },
        "0xB4C94523F023419C": {
            "name": "VEH_TO_NET",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\ncalls from vehicle to net.  \n```",
            "examples": [],
            "hash": "0xB4C94523F023419C",
            "ns": "NETWORK",
            "jhash": "0xF17634EB",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "PHYSICS": {
        "0xE37F721824571784": {
            "name": "APPLY_IMPULSE_TO_CLOTH",
            "params": [
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" },
                { "name": "vecX", "type": "float" },
                { "name": "vecY", "type": "float" },
                { "name": "vecZ", "type": "float" },
                { "name": "impulse", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE37F721824571784",
            "ns": "PHYSICS",
            "jhash": "0xA2A5C9FE",
            "manualHash": true
        },
        "0x710311ADF0E20730": {
            "name": "ACTIVATE_PHYSICS",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x710311ADF0E20730",
            "ns": "PHYSICS",
            "jhash": "0x031711B8",
            "manualHash": true
        },
        "0xE832D760399EB220": {
            "name": "ADD_ROPE",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "Rotation X component."
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "Rotation Y component."
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "Rotation Z component."
                },
                {
                    "name": "maxLength",
                    "type": "float",
                    "description": "The maximum length the rope can droop."
                },
                {
                    "name": "ropeType",
                    "type": "int",
                    "description": "1 to 4 are thick ropes. 5 and up are thin ropes. Ropes types defined in ropedata.xml. An invalid rope type such as 0 will crash the game."
                },
                {
                    "name": "initLength",
                    "type": "float",
                    "description": "The initial length of the rope."
                },
                {
                    "name": "minLength",
                    "type": "float",
                    "description": "The minimum length the rope can be."
                },
                {
                    "name": "lengthChangeRate",
                    "type": "float",
                    "description": "The speed in which the rope will wind if winding is started."
                },
                { "name": "onlyPPU", "type": "BOOL" },
                {
                    "name": "collisionOn",
                    "type": "BOOL",
                    "description": "Whether the rope should have collision. In original scripts this is followed by a LoadRopeData call when set."
                },
                {
                    "name": "lockFromFront",
                    "type": "BOOL",
                    "description": "If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects)."
                },
                {
                    "name": "timeMultiplier",
                    "type": "float",
                    "description": "The speed as which physics should run at. 1.0f is normal, 2.0f is twice as fast, -1.0f is time going backwards. This can affect gravity, etc."
                },
                {
                    "name": "breakable",
                    "type": "BOOL",
                    "description": "Whether shooting the rope will break it."
                },
                {
                    "name": "unkPtr",
                    "type": "Any*",
                    "description": "Unknown pointer, always 0 in original scrips."
                }
            ],
            "results": "int",
            "description": "```\nCreates a rope at the specific position, that extends in the specified direction when not attached to any entities.  \r\n__  \r\nRope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).  \r\nRope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.  \n```",
            "examples": [],
            "hash": "0xE832D760399EB220",
            "ns": "PHYSICS",
            "jhash": "0xA592EC74",
            "manualHash": true,
            "resultsDescription": "A script handle for the rope"
        },
        "0x52B4829281364649": {
            "name": "DELETE_ROPE",
            "params": [{ "name": "ropeId", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x52B4829281364649",
            "ns": "PHYSICS",
            "jhash": "0x748D72AF",
            "manualHash": true
        },
        "0x4B490A6832559A65": {
            "name": "ATTACH_ROPE_TO_ENTITY",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "entity", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThe position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.  \n```",
            "examples": [],
            "hash": "0x4B490A6832559A65",
            "ns": "PHYSICS",
            "jhash": "0xB25D9536",
            "manualHash": true
        },
        "0x2E648D16F6E308F3": {
            "name": "BREAK_ENTITY_GLASS",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2E648D16F6E308F3",
            "ns": "PHYSICS",
            "jhash": "0xD0E0402F",
            "manualHash": true
        },
        "0x3D95EC8B6D940AC3": {
            "name": "ATTACH_ENTITIES_TO_ROPE",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "ent1", "type": "Entity" },
                { "name": "ent2", "type": "Entity" },
                { "name": "ent1_x", "type": "float" },
                { "name": "ent1_y", "type": "float" },
                { "name": "ent1_z", "type": "float" },
                { "name": "ent2_x", "type": "float" },
                { "name": "ent2_y", "type": "float" },
                { "name": "ent2_z", "type": "float" },
                { "name": "length", "type": "float" },
                { "name": "p10", "type": "BOOL" },
                { "name": "p11", "type": "BOOL" },
                { "name": "boneName1", "type": "char*" },
                { "name": "boneName2", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nAttaches entity 1 to entity 2.  \n```",
            "examples": [],
            "hash": "0x3D95EC8B6D940AC3",
            "ns": "PHYSICS",
            "jhash": "0x7508668F",
            "manualHash": true
        },
        "0x8214A4B5A7A33612": {
            "name": "GET_CGOFFSET",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x8214A4B5A7A33612",
            "ns": "PHYSICS",
            "jhash": "0x49A11F0D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBCF3026912A8647D": {
            "name": "DETACH_ROPE_FROM_ENTITY",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBCF3026912A8647D",
            "ns": "PHYSICS",
            "jhash": "0x3E720BEE",
            "manualHash": true
        },
        "0x271C9D3ACA5D6409": {
            "name": "_DOES_ROPE_BELONG_TO_THIS_SCRIPT",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "BOOL",
            "description": "Return if the rope was generated or not by the script where the native is called.",
            "examples": [],
            "hash": "0x271C9D3ACA5D6409",
            "ns": "PHYSICS",
            "aliases": ["0x271C9D3ACA5D6409"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3655F544CD30F0B5": {
            "name": "GET_ROPE_VERTEX_COUNT",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x3655F544CD30F0B5",
            "ns": "PHYSICS",
            "jhash": "0x5131CD2C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA5D6B1888E4DB20": {
            "name": "DELETE_CHILD_ROPE",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA5D6B1888E4DB20",
            "ns": "PHYSICS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xB19B4706",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEA61CA8E80F09E4D": {
            "name": "GET_ROPE_VERTEX_COORD",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "vertex", "type": "int" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xEA61CA8E80F09E4D",
            "ns": "PHYSICS",
            "jhash": "0x84374452",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x36CCB9BE67B970FD": {
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nROPE_*\n```",
            "examples": [],
            "hash": "0x36CCB9BE67B970FD",
            "ns": "PHYSICS",
            "jhash": "0xC67D5CF6",
            "manualHash": true
        },
        "0x0C112765300C7E1E": {
            "name": "_GET_HAS_OBJECT_FRAG_INST",
            "params": [{ "name": "object", "type": "Object" }],
            "results": "BOOL",
            "description": "```\nGET_*\n```",
            "examples": [],
            "hash": "0x0C112765300C7E1E",
            "ns": "PHYSICS",
            "aliases": ["0x0C112765300C7E1E", "_DOES_ENTITY_HAVE_FRAG_INST"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFD5448BE3111ED96": {
            "name": "DOES_ROPE_EXIST",
            "params": [{ "name": "ropeId", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFD5448BE3111ED96",
            "ns": "PHYSICS",
            "jhash": "0x66E4A3AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x84DE3B5FB3E666F0": {
            "params": [
                {
                    "name": "ropeId",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x84DE3B5FB3E666F0",
            "ns": "PHYSICS",
            "jhash": "0x7A18BB9C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA1AE736541B0FCA3": {
            "params": [
                { "name": "ropeId", "type": "int*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "ROPE_\\*\n\n```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xA1AE736541B0FCA3",
            "ns": "PHYSICS",
            "manualHash": true
        },
        "0x21BB0FBD3E217C2D": {
            "name": "GET_ROPE_LAST_VERTEX_COORD",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x21BB0FBD3E217C2D",
            "ns": "PHYSICS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x91F6848B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB743F735C03D7810": {
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nROPE_*\n```",
            "examples": [],
            "hash": "0xB743F735C03D7810",
            "ns": "PHYSICS",
            "jhash": "0x686672DD",
            "manualHash": true
        },
        "0xB1B6216CA2E7B55E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB1B6216CA2E7B55E",
            "ns": "PHYSICS",
            "jhash": "0x7C6F7668",
            "manualHash": true
        },
        "0xF2D0E6A75CC05597": {
            "name": "ROPE_ARE_TEXTURES_LOADED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF2D0E6A75CC05597",
            "ns": "PHYSICS",
            "jhash": "0x5FDC1047",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCBB203C04D1ABD27": {
            "name": "LOAD_ROPE_DATA",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "rope_preset", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nRope presets can be found in the gamefiles. One example is \"ropeFamily3\", it is NOT a hash but rather a string.\n```",
            "examples": [],
            "hash": "0xCBB203C04D1ABD27",
            "ns": "PHYSICS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x9E8F1644",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCC6E963682533882": {
            "params": [{ "name": "object", "type": "Object" }],
            "results": "void",
            "description": "```\nRESET_*  \n```",
            "examples": [],
            "hash": "0xCC6E963682533882",
            "ns": "PHYSICS",
            "manualHash": true
        },
        "0xBC0CE682D4D05650": {
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "p10", "type": "float" },
                { "name": "p11", "type": "float" },
                { "name": "p12", "type": "float" },
                { "name": "p13", "type": "float" }
            ],
            "results": "void",
            "description": "```\nMost likely ROPE_ATTACH_*  \n```",
            "examples": [],
            "hash": "0xBC0CE682D4D05650",
            "ns": "PHYSICS",
            "jhash": "0x106BA127",
            "manualHash": true
        },
        "0x9EBD751E5787BAF2": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSET_*\n```",
            "examples": [],
            "hash": "0x9EBD751E5787BAF2",
            "ns": "PHYSICS",
            "manualHash": true
        },
        "0x5389D48EFA2F079A": {
            "name": "ROPE_CONVERT_TO_SIMPLE",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5389D48EFA2F079A",
            "ns": "PHYSICS",
            "jhash": "0x43E92628",
            "manualHash": true
        },
        "0x9B9039DBF2D258C1": {
            "name": "ROPE_LOAD_TEXTURES",
            "params": [],
            "results": "void",
            "description": "```\nLoads rope textures for all ropes in the current scene.\n```",
            "examples": [],
            "hash": "0x9B9039DBF2D258C1",
            "ns": "PHYSICS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xBA97CE91",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B320CF14146B69A": {
            "name": "PIN_ROPE_VERTEX",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "vertex", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B320CF14146B69A",
            "ns": "PHYSICS",
            "jhash": "0xAE1D101B",
            "manualHash": true
        },
        "0x73040398DFF9A4A6": {
            "name": "ROPE_GET_DISTANCE_BETWEEN_ENDS",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x73040398DFF9A4A6",
            "ns": "PHYSICS",
            "aliases": ["_GET_ROPE_LENGTH"],
            "jhash": "0xFD309DC8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC57A637A20006ED": {
            "name": "ROPE_SET_UPDATE_ORDER",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC57A637A20006ED",
            "ns": "PHYSICS",
            "aliases": ["0xDC57A637A20006ED"],
            "jhash": "0x80DB77A7",
            "manualHash": true
        },
        "0xD009F759A723DB1B": {
            "name": "ROPE_FORCE_LENGTH",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "length", "type": "float" }
            ],
            "results": "void",
            "description": "```\nForces a rope to a certain length.\n```",
            "examples": [],
            "hash": "0xD009F759A723DB1B",
            "ns": "PHYSICS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xABF3130F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6CE36C35C1AC8163": {
            "name": "ROPE_UNLOAD_TEXTURES",
            "params": [],
            "results": "void",
            "description": "```\nUnloads rope textures for all ropes in the current scene.\n```",
            "examples": [],
            "hash": "0x6CE36C35C1AC8163",
            "ns": "PHYSICS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x584463E0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD8FA3908D7B86904": {
            "name": "SET_CGOFFSET",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD8FA3908D7B86904",
            "ns": "PHYSICS",
            "jhash": "0x59910AB2",
            "manualHash": true
        },
        "0xBE520D9761FF811F": {
            "name": "SET_CG_AT_BOUNDCENTER",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBE520D9761FF811F",
            "ns": "PHYSICS",
            "jhash": "0xA5B55421",
            "manualHash": true
        },
        "0xF159A63806BB5BA8": {
            "name": "ROPE_DRAW_SHADOW_ENABLED",
            "params": [
                { "name": "ropeId", "type": "int*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF159A63806BB5BA8",
            "ns": "PHYSICS",
            "jhash": "0x51523B8C",
            "manualHash": true
        },
        "0xEEA3B200A6FEB65B": {
            "name": "SET_DAMPING",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "vertex", "type": "int" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEEA3B200A6FEB65B",
            "ns": "PHYSICS",
            "jhash": "0xCFB37773",
            "manualHash": true
        },
        "0x5CEC1A84620E7D5B": {
            "name": "SET_DISABLE_BREAKING",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5CEC1A84620E7D5B",
            "ns": "PHYSICS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xEE77C326",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC16DE94D9BEA14A0": {
            "name": "ROPE_RESET_LENGTH",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "length", "type": "float" }
            ],
            "results": "void",
            "description": "```\nReset a rope to a certain length.  \n```",
            "examples": [],
            "hash": "0xC16DE94D9BEA14A0",
            "ns": "PHYSICS",
            "jhash": "0xC8A423A3",
            "manualHash": true
        },
        "0xAA6A6098851C396F": {
            "name": "_SET_LAUNCH_CONTROL_ENABLED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.\n\n```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xAA6A6098851C396F",
            "ns": "PHYSICS",
            "aliases": ["0xAA6A6098851C396F"],
            "manualHash": true
        },
        "0x01BA3AED21C16CFB": {
            "name": "SET_DISABLE_FRAG_DAMAGE",
            "params": [
                { "name": "object", "type": "Object" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x01BA3AED21C16CFB",
            "ns": "PHYSICS",
            "jhash": "0x97269DC8",
            "manualHash": true
        },
        "0xC8D667EE52114ABA": {
            "name": "ROPE_SET_UPDATE_PINVERTS",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC8D667EE52114ABA",
            "ns": "PHYSICS",
            "jhash": "0xEAF291A0",
            "manualHash": true
        },
        "0x538D1179EC1AA9A9": {
            "name": "START_ROPE_UNWINDING_FRONT",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x538D1179EC1AA9A9",
            "ns": "PHYSICS",
            "jhash": "0xFC0DB4C3",
            "manualHash": true
        },
        "0xFFF3A50779EFBBB3": {
            "name": "STOP_ROPE_UNWINDING_FRONT",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFFF3A50779EFBBB3",
            "ns": "PHYSICS",
            "jhash": "0x2EEDB18F",
            "manualHash": true
        },
        "0x1461C72C889E343E": {
            "name": "START_ROPE_WINDING",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1461C72C889E343E",
            "ns": "PHYSICS",
            "jhash": "0x5187BED3",
            "manualHash": true
        },
        "0x4B5AE2EEE4A8F180": {
            "name": "UNPIN_ROPE_VERTEX",
            "params": [
                { "name": "ropeId", "type": "int" },
                { "name": "vertex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4B5AE2EEE4A8F180",
            "ns": "PHYSICS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xB30B552F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x15F944730C832252": {
            "name": "_SET_ENTITY_PROOF_UNK",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x15F944730C832252",
            "ns": "PHYSICS",
            "aliases": ["0x15F944730C832252"],
            "manualHash": true
        },
        "0xCB2D4AB84A19AA7C": {
            "name": "STOP_ROPE_WINDING",
            "params": [{ "name": "ropeId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCB2D4AB84A19AA7C",
            "ns": "PHYSICS",
            "jhash": "0x46826B53",
            "manualHash": true
        }
    },
    "PLAYER": {
        "0xAFAF86043E5874E9": {
            "name": "ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAFAF86043E5874E9",
            "ns": "PLAYER",
            "jhash": "0xE13A71C7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0A6EB355EE14A2DB": {
            "name": "ARE_PLAYER_STARS_GREYED_OUT",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0A6EB355EE14A2DB",
            "ns": "PLAYER",
            "jhash": "0x5E72AB72",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAEBF081FFC0A0E5E": {
            "name": "ASSISTED_MOVEMENT_CLOSE_ROUTE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAEBF081FFC0A0E5E",
            "ns": "PLAYER",
            "jhash": "0xF23277F3",
            "manualHash": true
        },
        "0xDE7465A27D403C06": {
            "name": "CAN_PLAYER_START_MISSION",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDE7465A27D403C06",
            "ns": "PLAYER",
            "jhash": "0x39E3CB3F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8621390F0CDCFE1F": {
            "name": "ASSISTED_MOVEMENT_FLUSH_ROUTE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8621390F0CDCFE1F",
            "ns": "PLAYER",
            "jhash": "0xD04568B9",
            "manualHash": true
        },
        "0xF297383AA91DCA29": {
            "name": "CAN_PED_HEAR_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "ped", "type": "Ped" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF297383AA91DCA29",
            "ns": "PLAYER",
            "jhash": "0x1C70B2EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x048189FAC643DEEE": {
            "name": "CHANGE_PLAYER_PED",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "ped", "type": "Ped" },
                { "name": "b2", "type": "BOOL" },
                { "name": "resetDamage", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x048189FAC643DEEE",
            "ns": "PLAYER",
            "jhash": "0xBE515485",
            "manualHash": true
        },
        "0x4AACB96203D11A31": {
            "name": "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4AACB96203D11A31",
            "ns": "PLAYER",
            "jhash": "0x7E3BFBC5",
            "manualHash": true
        },
        "0xF0B67A4DE6AB5F98": {
            "name": "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF0B67A4DE6AB5F98",
            "ns": "PLAYER",
            "jhash": "0x1D31CBBD",
            "manualHash": true
        },
        "0x8753997EB5F6EE3F": {
            "name": "CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8753997EB5F6EE3F",
            "ns": "PLAYER",
            "jhash": "0x6FF034BB",
            "manualHash": true
        },
        "0x10C54E4389C12B42": {
            "name": "CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x10C54E4389C12B42",
            "ns": "PLAYER",
            "jhash": "0xBB62AAC5",
            "manualHash": true
        },
        "0x0F4CC924CF8C7B21": {
            "name": "CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0F4CC924CF8C7B21",
            "ns": "PLAYER",
            "jhash": "0xFD60F5AB",
            "manualHash": true
        },
        "0x5E6CC07646BBEAB8": {
            "name": "DISABLE_PLAYER_FIRING",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player for which to disable combat methods."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Unused, as this native will disable combat regardless of the value of this parameter."
                }
            ],
            "results": "void",
            "description": "Inhibits the player from using any method of combat including melee and firearms.\\\nNOTE: Only disables the firing for one frame",
            "examples": [],
            "hash": "0x5E6CC07646BBEAB8",
            "ns": "PLAYER",
            "jhash": "0x30CB28CB",
            "manualHash": true
        },
        "0x290D248E25815AE8": {
            "name": "_CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x290D248E25815AE8",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0xC142BE3BB9CE125F": {
            "name": "DISABLE_PLAYER_VEHICLE_REWARDS",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player to disable rewards"
                }
            ],
            "results": "void",
            "description": "Disables vehicle rewards for the current frame.",
            "examples": [],
            "hash": "0xC142BE3BB9CE125F",
            "ns": "PLAYER",
            "jhash": "0x8C6E611D",
            "manualHash": true
        },
        "0xB302540597885499": {
            "name": "CLEAR_PLAYER_WANTED_LEVEL",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nThis executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);  \nPLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.  \n```",
            "examples": [],
            "hash": "0xB302540597885499",
            "ns": "PLAYER",
            "jhash": "0x54EA5BCC",
            "manualHash": true
        },
        "0x94DD7888C10A979E": {
            "name": "DISPLAY_SYSTEM_SIGNIN_UI",
            "params": [{ "name": "unk", "type": "BOOL" }],
            "results": "void",
            "description": "```\nPurpose of the BOOL currently unknown.  \nBoth, true and false, work  \n```",
            "examples": [],
            "hash": "0x94DD7888C10A979E",
            "ns": "PLAYER",
            "jhash": "0x4264CED2",
            "manualHash": true
        },
        "0x181EC197DAEFE121": {
            "name": "ENABLE_SPECIAL_ABILITY",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x181EC197DAEFE121",
            "ns": "PLAYER",
            "jhash": "0xC86C1B4E",
            "manualHash": true
        },
        "0x4C68DDDDF0097317": {
            "name": "FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "cleanupFlags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nPLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(\"pb_prostitute\", 1); // Found in decompilation  \n```",
            "examples": [],
            "hash": "0x4C68DDDDF0097317",
            "ns": "PLAYER",
            "jhash": "0x04256C73",
            "manualHash": true
        },
        "0x5006D96C995A5827": {
            "name": "EXTEND_WORLD_BOUNDARY_FOR_PLAYER",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nAppears only 3 times in the scripts, more specifically in michael1.ysc\n-\nThis can be used to prevent dying if you are \"out of the world\"\n```",
            "examples": [],
            "hash": "0x5006D96C995A5827",
            "ns": "PLAYER",
            "aliases": ["0x5006D96C995A5827", "_EXPAND_WORLD_LIMITS"],
            "jhash": "0x64DDB07D",
            "manualHash": true
        },
        "0xBC8983F38F78ED51": {
            "name": "FORCE_CLEANUP",
            "params": [{ "name": "cleanupFlags", "type": "int" }],
            "results": "void",
            "description": "```\nused with 1,2,8,64,128 in the scripts  \n```",
            "examples": [],
            "hash": "0xBC8983F38F78ED51",
            "ns": "PLAYER",
            "jhash": "0xFDAAEA2B",
            "manualHash": true
        },
        "0x9A41CF4674A12272": {
            "name": "GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9A41CF4674A12272",
            "ns": "PLAYER",
            "jhash": "0x39AA9FC8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1C186837D0619335": {
            "name": "_GET_ACHIEVEMENT_PROGRESS",
            "params": [{ "name": "achievement", "type": "int" }],
            "results": "int",
            "description": "```\nFor Steam.\nAlways returns 0 in retail version of the game.\n```",
            "examples": [],
            "hash": "0x1C186837D0619335",
            "ns": "PLAYER",
            "aliases": ["0x1C186837D0619335", "_GET_ACHIEVEMENT_PROGRESSION"],
            "manualHash": true,
            "resultsDescription": "Returns the progression of an achievement; 0 if the achievement cannot be progressed."
        },
        "0xF745B37630DF176B": {
            "name": "FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID",
            "params": [
                { "name": "id", "type": "int" },
                { "name": "cleanupFlags", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF745B37630DF176B",
            "ns": "PLAYER",
            "jhash": "0x882D3EB3",
            "manualHash": true
        },
        "0x407C7F91DDB46C16": {
            "name": "GET_NUMBER_OF_PLAYERS",
            "params": [],
            "results": "int",
            "description": "```\nGets the number of players in the current session.\nIf not multiplayer, always returns 1.\n```",
            "examples": [],
            "hash": "0x407C7F91DDB46C16",
            "ns": "PLAYER",
            "jhash": "0x4C1B8867",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2975C866E6713290": {
            "name": "GET_ENTITY_PLAYER_IS_FREE_AIMING_AT",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "entity", "type": "Entity*" }
            ],
            "results": "BOOL",
            "description": "```\nReturns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.  \nReturns false if no entity found.  \n```",
            "examples": [],
            "hash": "0x2975C866E6713290",
            "ns": "PLAYER",
            "jhash": "0x8866D9D0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1FC200409F10E6F1": {
            "name": "_GET_NUMBER_OF_PLAYERS_IN_TEAM",
            "params": [{ "name": "team", "type": "int" }],
            "results": "int",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x1FC200409F10E6F1",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x0D127585F77030AF": {
            "name": "GET_PLAYER_GROUP",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "```\nReturns the group ID the player is member of.  \n```",
            "examples": [],
            "hash": "0x0D127585F77030AF",
            "ns": "PLAYER",
            "jhash": "0xA5EDCDE8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x462E0DB9B137DC5F": {
            "name": "GET_MAX_WANTED_LEVEL",
            "params": [],
            "results": "int",
            "description": "```\nGets the maximum wanted level the player can get.  \nRanges from 0 to 5.  \n```",
            "examples": [],
            "hash": "0x462E0DB9B137DC5F",
            "ns": "PLAYER",
            "jhash": "0x457F1E44",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA5EDC40EF369B48D": {
            "name": "GET_PLAYER_INDEX",
            "params": [],
            "results": "Player",
            "description": "```\nReturns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT  \n```",
            "examples": [],
            "hash": "0xA5EDC40EF369B48D",
            "ns": "PLAYER",
            "jhash": "0x309BBDC1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2F395D61F3A1F877": {
            "name": "GET_PLAYER_CURRENT_STEALTH_NOISE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x2F395D61F3A1F877",
            "ns": "PLAYER",
            "jhash": "0xC3B02362",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB721981B2B939E07": {
            "name": "GET_PLAYER_INVINCIBLE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nReturns the Player's Invincible status.  \nThis function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:  \n\tbool IsPlayerInvincible(Player player)  \n\t{  \nauto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));\t  \nif (addr)  \n{  \n\tDWORD flag = *(DWORD *)(addr + 0x188);  \n\treturn ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);  \n}  \nreturn false;  \n\t}  \n============================================================  \nThis has bothered me for too long, whoever may come across this, where did anyone ever come up with this made up hash? 0x733A643B5B0C53C1 I've looked all over old hash list, and this nativedb I can not find that PC hash anywhere. What native name is it now or was it?  \n```",
            "examples": [],
            "hash": "0xB721981B2B939E07",
            "ns": "PLAYER",
            "jhash": "0x680C90EE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF56DBABD3CD4887": {
            "name": "GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "r", "type": "int*" },
                { "name": "g", "type": "int*" },
                { "name": "b", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEF56DBABD3CD4887",
            "ns": "PLAYER",
            "jhash": "0xF66E5CDD",
            "manualHash": true
        },
        "0x56105E599CAB0EFA": {
            "name": "GET_PLAYER_FAKE_WANTED_LEVEL",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x56105E599CAB0EFA",
            "ns": "PLAYER",
            "aliases": ["0x56105E599CAB0EFA"],
            "jhash": "0x0098D244",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8BC515BAE4AAF8FF": {
            "name": "_GET_PLAYER_HEALTH_RECHARGE_LIMIT",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x8BC515BAE4AAF8FF",
            "ns": "PLAYER",
            "aliases": ["0x8BC515BAE4AAF8FF"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5DDFE2FF727F3CA3": {
            "name": "GET_PLAYER_HAS_RESERVE_PARACHUTE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5DDFE2FF727F3CA3",
            "ns": "PLAYER",
            "jhash": "0x30DA1DA1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC219887CA3E65C41": {
            "name": "_GET_PLAYER_PARACHUTE_MODEL_OVERRIDE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "Hash",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xC219887CA3E65C41",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x92659B4CE1863CB3": {
            "name": "GET_PLAYER_MAX_ARMOUR",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x92659B4CE1863CB3",
            "ns": "PLAYER",
            "jhash": "0x02A50657",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6D0DE6A7B5DA71F8": {
            "name": "GET_PLAYER_NAME",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player index, or -1 to get the local player ped."
                }
            ],
            "results": "char*",
            "description": "Returns the players name from a specified player index",
            "examples": [],
            "hash": "0x6D0DE6A7B5DA71F8",
            "ns": "PLAYER",
            "jhash": "0x406B4B20",
            "manualHash": true,
            "resultsDescription": "The name of the queried player. \"**Invalid**\" if the player does not exist."
        },
        "0x50FAC3A3E030A6E1": {
            "name": "GET_PLAYER_PED_SCRIPT_INDEX",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "Ped",
            "description": "```\nDoes the same like PLAYER::GET_PLAYER_PED\n```",
            "examples": [],
            "hash": "0x50FAC3A3E030A6E1",
            "ns": "PLAYER",
            "jhash": "0x6AC64990",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x37FAAA68DCA9D08D": {
            "name": "_GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "Hash",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x37FAAA68DCA9D08D",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x6E9C742F340CE5A2": {
            "name": "GET_PLAYER_PARACHUTE_PACK_TINT_INDEX",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "tintIndex", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6E9C742F340CE5A2",
            "ns": "PLAYER",
            "jhash": "0x4E418E13",
            "manualHash": true
        },
        "0x75D3F7A1B0D9B145": {
            "name": "GET_PLAYER_PARACHUTE_TINT_INDEX",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "tintIndex", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n```",
            "examples": [],
            "hash": "0x75D3F7A1B0D9B145",
            "ns": "PLAYER",
            "jhash": "0x432B0509",
            "manualHash": true
        },
        "0x43A66C31C68491C0": {
            "name": "GET_PLAYER_PED",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index, or -1 to get the local player ped."
                }
            ],
            "results": "Ped",
            "description": "Gets the ped for a specified player index.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerIdx = GetPlayerFromServerId(source)\nlocal ped = GetPlayerPed(playerIdx)\n\n-- act on the ped"
                }
            ],
            "hash": "0x43A66C31C68491C0",
            "ns": "PLAYER",
            "jhash": "0x6E31E993",
            "manualHash": true,
            "resultsDescription": "The specified player's ped, or 0 if invalid."
        },
        "0x3F9F16F8E65A7ED7": {
            "name": "GET_PLAYER_SPRINT_STAMINA_REMAINING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x3F9F16F8E65A7ED7",
            "ns": "PLAYER",
            "jhash": "0x47017C90",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE902EF951DCE178F": {
            "name": "GET_PLAYER_RGB_COLOUR",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "r", "type": "int*" },
                { "name": "g", "type": "int*" },
                { "name": "b", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE902EF951DCE178F",
            "ns": "PLAYER",
            "jhash": "0x6EF43BBB",
            "manualHash": true
        },
        "0xD5A016BC3C09CF40": {
            "name": "GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "index", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n```",
            "examples": [],
            "hash": "0xD5A016BC3C09CF40",
            "ns": "PLAYER",
            "jhash": "0x77B8EF01",
            "manualHash": true
        },
        "0x37039302F4E0A008": {
            "name": "GET_PLAYER_TEAM",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "```\nGets the player's team.  \nDoes nothing in singleplayer.  \n```",
            "examples": [],
            "hash": "0x37039302F4E0A008",
            "ns": "PLAYER",
            "jhash": "0x9873E404",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x13EDE1A5DBF797C9": {
            "name": "GET_PLAYER_TARGET_ENTITY",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "entity", "type": "Entity*" }
            ],
            "results": "BOOL",
            "description": "```\nAssigns the handle of locked-on melee target to *entity that you pass it.  \nReturns false if no entity found.  \n```",
            "examples": [],
            "hash": "0x13EDE1A5DBF797C9",
            "ns": "PLAYER",
            "jhash": "0xF6AAA2D7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0C92BA89F1AF26F8": {
            "name": "GET_PLAYER_WANTED_CENTRE_POSITION",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x0C92BA89F1AF26F8",
            "ns": "PLAYER",
            "jhash": "0x821F2D2C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1885BC9B108B4C99": {
            "name": "GET_PLAYER_SPRINT_TIME_REMAINING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x1885BC9B108B4C99",
            "ns": "PLAYER",
            "jhash": "0x40E80543",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC7034807558DDFCA": {
            "name": "GET_TIME_SINCE_LAST_DEATH",
            "params": [],
            "results": "int",
            "description": "```\nReturns the time since the character died in (ms) milliseconds.  \nexample  \nvar time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();  \nUI.DrawSubtitle(time.ToString());  \nif player has not died, the int returned will be -1.  \n```",
            "examples": [],
            "hash": "0xC7034807558DDFCA",
            "ns": "PLAYER",
            "jhash": "0x24BC5AC0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA1FCF8E6AF40B731": {
            "name": "GET_PLAYER_UNDERWATER_TIME_REMAINING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xA1FCF8E6AF40B731",
            "ns": "PLAYER",
            "jhash": "0x1317125A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE28E54788CE8F12D": {
            "name": "GET_PLAYER_WANTED_LEVEL",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xE28E54788CE8F12D",
            "ns": "PLAYER",
            "jhash": "0xBDCDD163",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA72200F51875FEA4": {
            "name": "_GET_WANTED_LEVEL_PAROLE_DURATION",
            "params": [],
            "results": "int",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xA72200F51875FEA4",
            "ns": "PLAYER",
            "aliases": ["0xA72200F51875FEA4"],
            "manualHash": true
        },
        "0xB6997A7EB3F5C8C0": {
            "name": "GET_PLAYERS_LAST_VEHICLE",
            "params": [],
            "results": "Vehicle",
            "description": "### Warning\n\nThis native will return `0` if the last vehicle the player was in was destroyed.\n\n### Alternative\n\nYou can use [GET_VEHICLE_PED_IS_IN](#\\_0x9A9112A0FE9A4713), which will actually get the last vehicle, even if it was destroyed.",
            "examples": [],
            "hash": "0xB6997A7EB3F5C8C0",
            "ns": "PLAYER",
            "jhash": "0xE2757AC1",
            "manualHash": true,
            "resultsDescription": "A vehicle handle containing the last player's vehicle."
        },
        "0xDB89591E290D9182": {
            "name": "GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xDB89591E290D9182",
            "ns": "PLAYER",
            "jhash": "0x9F27D00E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFDD179EAF45B556C": {
            "name": "GET_WANTED_LEVEL_THRESHOLD",
            "params": [{ "name": "wantedLevel", "type": "int" }],
            "results": "int",
            "description": "```\nDrft  \n```",
            "examples": [],
            "hash": "0xFDD179EAF45B556C",
            "ns": "PLAYER",
            "jhash": "0xD9783F6B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5063F92F07C2A316": {
            "name": "GET_TIME_SINCE_LAST_ARREST",
            "params": [],
            "results": "int",
            "description": "```\nReturns the time since the character was arrested in (ms) milliseconds.  \nexample  \nvar time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();  \nUI.DrawSubtitle(time.ToString());  \nif player has not been arrested, the int returned will be -1.  \n```",
            "examples": [],
            "hash": "0x5063F92F07C2A316",
            "ns": "PLAYER",
            "jhash": "0x62824EF4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD559D2BE9E37853B": {
            "name": "GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xD559D2BE9E37853B",
            "ns": "PLAYER",
            "jhash": "0x8836E732",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x867365E111A3B6EB": {
            "name": "HAS_ACHIEVEMENT_BEEN_PASSED",
            "params": [{ "name": "achievement", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x867365E111A3B6EB",
            "ns": "PLAYER",
            "jhash": "0x136A5BE9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE36A25322DC35F42": {
            "name": "GET_TIME_SINCE_PLAYER_HIT_PED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xE36A25322DC35F42",
            "ns": "PLAYER",
            "jhash": "0xB6209195",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5D35ECF3A81A0EE0": {
            "name": "GET_TIME_SINCE_PLAYER_HIT_VEHICLE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5D35ECF3A81A0EE0",
            "ns": "PLAYER",
            "jhash": "0x6E9B8B9E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBEC7076D64130195": {
            "name": "GIVE_ACHIEVEMENT_TO_PLAYER",
            "params": [{ "name": "achievement", "type": "int" }],
            "results": "BOOL",
            "description": "```\nAchievements from 0-57\nmore achievements came with update 1.29 (freemode events update), I'd say that they now go to 60, but I'll need to check.\n```",
            "examples": [],
            "hash": "0xBEC7076D64130195",
            "ns": "PLAYER",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x822BC992",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x085DEB493BE80812": {
            "name": "GET_WANTED_LEVEL_RADIUS",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "float",
            "description": "```\nRemnant from GTA IV. Does nothing in GTA V.\n```",
            "examples": [],
            "hash": "0x085DEB493BE80812",
            "ns": "PLAYER",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x1CF7D7DA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3C49C870E66F0A28": {
            "name": "GIVE_PLAYER_RAGDOLL_CONTROL",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3C49C870E66F0A28",
            "ns": "PLAYER",
            "jhash": "0xC7B4D7AC",
            "manualHash": true
        },
        "0xD705740BB0A1CF4C": {
            "name": "HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD705740BB0A1CF4C",
            "ns": "PLAYER",
            "jhash": "0x4A01B76A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD55DDFB47991A294": {
            "name": "HAS_PLAYER_LEFT_THE_WORLD",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD55DDFB47991A294",
            "ns": "PLAYER",
            "jhash": "0xFEA40B6C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC968670BFACE42D9": {
            "name": "HAS_FORCE_CLEANUP_OCCURRED",
            "params": [{ "name": "cleanupFlags", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC968670BFACE42D9",
            "ns": "PLAYER",
            "jhash": "0x4B37333C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x20CE80B0C2BF4ACC": {
            "name": "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x20CE80B0C2BF4ACC",
            "ns": "PLAYER",
            "jhash": "0x14F52453",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x65FAEE425DE637B0": {
            "name": "IS_PLAYER_BLUETOOTH_ENABLE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x65FAEE425DE637B0",
            "ns": "PLAYER",
            "aliases": ["0x65FAEE425DE637B0"],
            "jhash": "0xEA01BD4A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x41BD2A6B006AF756": {
            "name": "INT_TO_PLAYERINDEX",
            "params": [{ "name": "value", "type": "int" }],
            "results": "Player",
            "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n```",
            "examples": [],
            "hash": "0x41BD2A6B006AF756",
            "ns": "PLAYER",
            "jhash": "0x98DD98F1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBC0753C9CA14B506": {
            "name": "_HAS_PLAYER_BEEN_SHOT_BY_COP",
            "params": [
                { "name": "player", "type": "Player" },
                {
                    "name": "ms",
                    "type": "int",
                    "description": "Time since last bullet fired"
                },
                { "name": "p2", "type": "BOOL", "description": "Always false" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBC0753C9CA14B506",
            "ns": "PLAYER",
            "aliases": ["0xBC0753C9CA14B506"],
            "jhash": "0x9DF75B2A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x49C32D60007AFA47": {
            "name": "IS_PLAYER_CONTROL_ON",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nCan the player control himself, used to disable controls for player for things like a cutscene.  \n---  \nYou can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.  \n```",
            "examples": [],
            "hash": "0x49C32D60007AFA47",
            "ns": "PLAYER",
            "jhash": "0x618857F2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x388A47C51ABDAC8E": {
            "name": "IS_PLAYER_BEING_ARRESTED",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "atArresting", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nReturn true while player is being arrested / busted.  \nIf atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)  \nIf atArresting is set to 0, this function will return 1 only when the busted screen is shown.  \n```",
            "examples": [],
            "hash": "0x388A47C51ABDAC8E",
            "ns": "PLAYER",
            "jhash": "0x7F6A60D3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x38D28DA81E4E9BF9": {
            "name": "IS_PLAYER_BATTLE_AWARE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nReturns true if an unk value is greater than 0.0f  \n```",
            "examples": [],
            "hash": "0x38D28DA81E4E9BF9",
            "ns": "PLAYER",
            "aliases": ["0x38D28DA81E4E9BF9"],
            "jhash": "0x013B4F72",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE4B90F367BD81752": {
            "name": "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE4B90F367BD81752",
            "ns": "PLAYER",
            "jhash": "0xA3707DFC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3C06B5C839B38F7B": {
            "name": "IS_PLAYER_FREE_AIMING_AT_ENTITY",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "BOOL",
            "description": "```\nGets a value indicating whether the specified player is currently aiming freely at the specified entity.  \n```",
            "examples": [],
            "hash": "0x3C06B5C839B38F7B",
            "ns": "PLAYER",
            "jhash": "0x7D80EEAA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x95E8F73DC65EFB9C": {
            "name": "IS_PLAYER_CLIMBING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nReturns TRUE if the player ('s ped) is climbing at the moment.  \n```",
            "examples": [],
            "hash": "0x95E8F73DC65EFB9C",
            "ns": "PLAYER",
            "jhash": "0x4A9E9AE0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7C814D2FB49F40C0": {
            "name": "_IS_PLAYER_CAM_CONTROL_DISABLED",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.  \nNote: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.  \n```",
            "examples": [],
            "hash": "0x7C814D2FB49F40C0",
            "ns": "PLAYER",
            "aliases": ["0x7C814D2FB49F40C0"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9EC6603812C24710": {
            "name": "INT_TO_PARTICIPANTINDEX",
            "params": [{ "name": "value", "type": "int" }],
            "results": "int",
            "description": "```\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n--------------------------------------------------------  \nif (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))  \n```",
            "examples": [],
            "hash": "0x9EC6603812C24710",
            "ns": "PLAYER",
            "jhash": "0x98F3B274",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF10B44FD479D69F3": {
            "name": "_IS_PLAYER_DRIVING_DANGEROUSLY",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "Player ID"
                },
                {
                    "name": "type",
                    "type": "int",
                    "description": "A violation type from 0 to 2 (`eViolationType`)."
                }
            ],
            "results": "BOOL",
            "description": "Violation types:\n\n```\nenum eViolationType {\n  VT_PAVED_PEDESTRIAN_AREAS = 0,\n  VT_RUNNING_REDS,\n  VT_AGAINST_TRAFFIC\n};\n```\n\nChecks if a player is performing a certain type of traffic violation.\n\n*   Type 0: Checks if the player is driving outside designated road areas pedestrians would walk on (specifically paved sidewalks).\n*   Type 1: Checks if the player is running through reds, takes some time to return true.\n*   Type 2: Checks if the player is driving on the wrong side of the road (against traffic).\n\nUsed solely in \"Al Di Napoli\" with type 2 for a voiceline.",
            "examples": [],
            "hash": "0xF10B44FD479D69F3",
            "ns": "PLAYER",
            "aliases": ["0xF10B44FD479D69F3"],
            "jhash": "0x1E359CC8",
            "manualHash": true,
            "resultsDescription": "Whether or not the player is actively performing a certain type of traffic violation."
        },
        "0x2E397FD2ECD37C87": {
            "name": "IS_PLAYER_FREE_AIMING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nGets a value indicating whether the specified player is currently aiming freely.  \n```",
            "examples": [],
            "hash": "0x2E397FD2ECD37C87",
            "ns": "PLAYER",
            "jhash": "0x1DEC67B7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5E9564D8246B909A": {
            "name": "IS_PLAYER_PLAYING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nChecks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.  \n```",
            "examples": [],
            "hash": "0x5E9564D8246B909A",
            "ns": "PLAYER",
            "jhash": "0xE15D777F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDCCFD3F106C36AB4": {
            "name": "IS_PLAYER_FREE_FOR_AMBIENT_TASK",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDCCFD3F106C36AB4",
            "ns": "PLAYER",
            "jhash": "0x85C7E232",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x424D4687FA1E5652": {
            "name": "IS_PLAYER_DEAD",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x424D4687FA1E5652",
            "ns": "PLAYER",
            "jhash": "0x140CA5A8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x74556E1420867ECA": {
            "name": "IS_PLAYER_LOGGING_IN_NP",
            "params": [],
            "results": "BOOL",
            "description": "```\nthis function is hard-coded to always return 0.  \n```",
            "examples": [],
            "hash": "0x74556E1420867ECA",
            "ns": "PLAYER",
            "jhash": "0x8F72FAD0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x908CBECC2CAA3690": {
            "name": "IS_PLAYER_READY_FOR_CUTSCENE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x908CBECC2CAA3690",
            "ns": "PLAYER",
            "jhash": "0xBB77E9CD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF25D331DC2627BBC": {
            "name": "IS_PLAYER_ONLINE",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns TRUE if the game is in online mode and FALSE if in offline mode.  \nThis is an alias for NETWORK_IS_SIGNED_ONLINE.  \n```",
            "examples": [],
            "hash": "0xF25D331DC2627BBC",
            "ns": "PLAYER",
            "jhash": "0x9FAB6729",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFA1E2BF8B10598F9": {
            "name": "IS_PLAYER_PRESSING_HORN",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFA1E2BF8B10598F9",
            "ns": "PLAYER",
            "jhash": "0xED1D1662",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A876A65283DD7D7": {
            "name": "IS_PLAYER_SCRIPT_CONTROL_ON",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8A876A65283DD7D7",
            "ns": "PLAYER",
            "jhash": "0x61B00A84",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4EC12697209F2196": {
            "name": "IS_PLAYER_RIDING_TRAIN",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nReturns true if the player is riding a train.  \n```",
            "examples": [],
            "hash": "0x4EC12697209F2196",
            "ns": "PLAYER",
            "jhash": "0x9765E71D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x238DB2A2C23EE9EF": {
            "name": "IS_PLAYER_WANTED_LEVEL_GREATER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "wantedLevel", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x238DB2A2C23EE9EF",
            "ns": "PLAYER",
            "jhash": "0x589A2661",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x78CFE51896B6B8A4": {
            "name": "IS_PLAYER_TARGETTING_ANYTHING",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x78CFE51896B6B8A4",
            "ns": "PLAYER",
            "jhash": "0x456DB50D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7912F7FC4F6264B6": {
            "name": "IS_PLAYER_TARGETTING_ENTITY",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7912F7FC4F6264B6",
            "ns": "PLAYER",
            "jhash": "0xF3240B77",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x02B15662D7F8886F": {
            "name": "IS_PLAYER_TELEPORT_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x02B15662D7F8886F",
            "ns": "PLAYER",
            "jhash": "0x3A11D118",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB1D200FE26AEF3CB": {
            "name": "IS_SPECIAL_ABILITY_ENABLED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xB1D200FE26AEF3CB",
            "ns": "PLAYER",
            "jhash": "0xC01238CC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3E5F7FC85D854E15": {
            "name": "IS_SPECIAL_ABILITY_ACTIVE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x3E5F7FC85D854E15",
            "ns": "PLAYER",
            "jhash": "0x1B17E334",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x05A1FE504B7F2587": {
            "name": "IS_SPECIAL_ABILITY_METER_FULL",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x05A1FE504B7F2587",
            "ns": "PLAYER",
            "jhash": "0x2E19D7F6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0032A6DBA562C518": {
            "params": [],
            "results": "void",
            "description": "```\n2 matches in 1 script - am_hold_up\nUsed in multiplayer scripts?\n```",
            "examples": [],
            "hash": "0x0032A6DBA562C518",
            "ns": "PLAYER",
            "jhash": "0x47CAB814",
            "manualHash": true
        },
        "0xC6017F6A6CDFA694": {
            "name": "IS_SPECIAL_ABILITY_UNLOCKED",
            "params": [{ "name": "playerModel", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC6017F6A6CDFA694",
            "ns": "PLAYER",
            "jhash": "0xC9C75E82",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5D511E3867C87139": {
            "name": "IS_SYSTEM_UI_BEING_DISPLAYED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5D511E3867C87139",
            "ns": "PLAYER",
            "jhash": "0xE495B6DA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x237440E46D918649": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x237440E46D918649",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x2F41A3BAE005E5FA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F41A3BAE005E5FA",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x2382AB11450AE7BA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2382AB11450AE7BA",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x2F7CEB6520288061": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "```\nUsed with radios:\nvoid sub_cf383(auto _a0) {\n    if ((a_0)==1) {\n        if (MISC::IS_BIT_SET((g_240005._f1), 3)) {\n            PLAYER::_2F7CEB6520288061(0);\n            AUDIO::SET_AUDIO_FLAG(\"AllowRadioDuringSwitch\", 0);\n            AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0);\n            AUDIO::SET_AUDIO_FLAG(\"MobileRadioInGame\", 0);\n        }\n        sub_cf3f6(1);\n    } else {\n        if (MISC::IS_BIT_SET((g_240005._f1), 3)) {\n            PLAYER::_2F7CEB6520288061(1);\n            AUDIO::SET_AUDIO_FLAG(\"AllowRadioDuringSwitch\", 1);\n            AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1);\n            AUDIO::SET_AUDIO_FLAG(\"MobileRadioInGame\", 1);\n        }\n        sub_cf3f6(0);\n    }\n}\nSET_PLAYER_S*\n```",
            "examples": [],
            "hash": "0x2F7CEB6520288061",
            "ns": "PLAYER",
            "jhash": "0x2849D4B2",
            "manualHash": true
        },
        "0x4669B3ED80F24B4E": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nThis has been found in use in the decompiled files.  \n```",
            "examples": [],
            "hash": "0x4669B3ED80F24B4E",
            "ns": "PLAYER",
            "jhash": "0xB9FB142F",
            "manualHash": true
        },
        "0x36F1B38855F2A8DF": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x36F1B38855F2A8DF",
            "ns": "PLAYER",
            "jhash": "0x3A7E5FB6",
            "manualHash": true
        },
        "0x31E90B8873A4CD3B": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x31E90B8873A4CD3B",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x690A61A6D13583F6": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0x690A61A6D13583F6",
            "ns": "PLAYER",
            "jhash": "0x1D371529",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x55FCC0C390620314": {
            "params": [
                { "name": "player1", "type": "Player" },
                { "name": "player2", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x55FCC0C390620314",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x5501B7A5CDB79D37": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nName between DISABLE_ALL_CONTROL_ACTIONS and DISABLE_CONTROL_ACTION\n```",
            "examples": [],
            "hash": "0x5501B7A5CDB79D37",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x7BAE68775557AE0B": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x7BAE68775557AE0B",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x5FC472C501CCADB3": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "```\nAppears once in \"re_dealgonewrong\"  \n```",
            "examples": [],
            "hash": "0x5FC472C501CCADB3",
            "ns": "PLAYER",
            "jhash": "0x46E7E31D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6E4361FF3E8CD7CA": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x6E4361FF3E8CD7CA",
            "ns": "PLAYER",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x70A382ADEC069DD3": {
            "params": [
                { "name": "coordX", "type": "float" },
                { "name": "coordY", "type": "float" },
                { "name": "coordZ", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x70A382ADEC069DD3",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x7148E0F43D11F0D9": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x7148E0F43D11F0D9",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x7E07C78925D5FD96": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x7E07C78925D5FD96",
            "ns": "PLAYER",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x823EC8E82BA45986": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x823EC8E82BA45986",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x9097EB6D4BB9A12A": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "void",
            "description": "ADD_\\*\n\n```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x9097EB6D4BB9A12A",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x8D768602ADEF2245": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSET_PLAYER_MAX_*\n```",
            "examples": [],
            "hash": "0x8D768602ADEF2245",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0xAD73CE5A09E42D12": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nThis has been found in use in the decompiled files.  \n```",
            "examples": [],
            "hash": "0xAD73CE5A09E42D12",
            "ns": "PLAYER",
            "jhash": "0x85725848",
            "manualHash": true
        },
        "0x9F260BFB59ADBCA3": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "void",
            "description": "REMOVE_\\*\n\n```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x9F260BFB59ADBCA3",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0xB885852C39CC265D": {
            "params": [],
            "results": "void",
            "description": "```\nDisables something. Used only once in R* scripts (freemode.ysc).\nDISABLE_PLAYER_*\n```",
            "examples": [],
            "hash": "0xB885852C39CC265D",
            "ns": "PLAYER",
            "jhash": "0x47D6004E",
            "manualHash": true
        },
        "0x9EDD76E87D5D51BA": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9EDD76E87D5D51BA",
            "ns": "PLAYER",
            "jhash": "0xE30A64DC",
            "manualHash": true
        },
        "0xB9CF1F793A9F1BF1": {
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns profile setting 237.\nGET_*\n```",
            "examples": [],
            "hash": "0xB9CF1F793A9F1BF1",
            "ns": "PLAYER",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB45EFF719D8427A6": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "```\nPLAYER::0xBF6993C7(rPtr((&l_122) + 71)); // Found in decompilation\n***\nIn \"am_hold_up.ysc\" used once:\nl_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);\nPLAYER::_B45EFF719D8427A6((l_8d._f47));\n```",
            "examples": [],
            "hash": "0xB45EFF719D8427A6",
            "ns": "PLAYER",
            "jhash": "0xBF6993C7",
            "manualHash": true
        },
        "0xBC9490CA15AEA8FB": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nSeems to only appear in scripts used in Singleplayer.  \nAlways used like this in scripts  \nPLAYER::_BC9490CA15AEA8FB(PLAYER::PLAYER_ID());  \n```",
            "examples": [],
            "hash": "0xBC9490CA15AEA8FB",
            "ns": "PLAYER",
            "jhash": "0x6B34A160",
            "manualHash": true
        },
        "0xCB645E85E97EA48B": {
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns profile setting 243.\nGET_*\n```",
            "examples": [],
            "hash": "0xCB645E85E97EA48B",
            "ns": "PLAYER",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC3376F42B1FACCC6": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\n- This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME\n```",
            "examples": [],
            "hash": "0xC3376F42B1FACCC6",
            "ns": "PLAYER",
            "aliases": ["SET_AREAS_GENERATOR_ORIENTATION"],
            "jhash": "0x02DF7AF4",
            "manualHash": true
        },
        "0xCAC57395B151135F": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nFound in \"director_mode\", \"fm_bj_race_controler\", \"fm_deathmatch_controler\", \"fm_impromptu_dm_controler\", \"fm_race_controler\", \"gb_deathmatch\".  \n```",
            "examples": [],
            "hash": "0xCAC57395B151135F",
            "ns": "PLAYER",
            "jhash": "0x00563E0D",
            "manualHash": true
        },
        "0xDCC07526B8EC45AF": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "Always returns false.\n\n```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xDCC07526B8EC45AF",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0xD821056B9ACF8052": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD821056B9ACF8052",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0xFFEE8FA29AB9A18E": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xFFEE8FA29AB9A18E",
            "ns": "PLAYER",
            "jhash": "0x5D0FE25B",
            "manualHash": true
        },
        "0xDD2620B7B9D16FF1": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\n2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.  \n```",
            "examples": [],
            "hash": "0xDD2620B7B9D16FF1",
            "ns": "PLAYER",
            "jhash": "0x8CB53C9F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFAC75988A7D078D3": {
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFAC75988A7D078D3",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0xEE68096F9F37341E": {
            "name": "NETWORK_PLAYER_ID_TO_INT",
            "params": [],
            "results": "int",
            "description": "```\nDoes exactly the same thing as PLAYER_ID()  \n```",
            "examples": [],
            "hash": "0xEE68096F9F37341E",
            "ns": "PLAYER",
            "jhash": "0x8DD5B838",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDE45D1A1EF45EE61": {
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDE45D1A1EF45EE61",
            "ns": "PLAYER",
            "aliases": ["SET_HUD_ANIM_STOP_LEVEL"],
            "jhash": "0x274631FE",
            "manualHash": true
        },
        "0xD80958FC74E988A6": {
            "name": "PLAYER_PED_ID",
            "params": [],
            "results": "Ped",
            "description": "Returns the entity handle for the local player ped. Note that this entity handle will change after using commands such as SET_PLAYER_MODEL.",
            "examples": [],
            "hash": "0xD80958FC74E988A6",
            "ns": "PLAYER",
            "jhash": "0xFA92E226",
            "manualHash": true,
            "resultsDescription": "The local player ped's entity handle."
        },
        "0x4F8644AF03D0E0D6": {
            "name": "PLAYER_ID",
            "params": [],
            "results": "Player",
            "description": "Returns the player index for the local player.",
            "examples": [],
            "hash": "0x4F8644AF03D0E0D6",
            "ns": "PLAYER",
            "jhash": "0x8AEA886C",
            "manualHash": true,
            "resultsDescription": "The local player's player index."
        },
        "0x1DD5897E2FA6E7C9": {
            "name": "PLAYER_DETACH_VIRTUAL_BOUND",
            "params": [],
            "results": "void",
            "description": "```\n1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;  \n```",
            "examples": [],
            "hash": "0x1DD5897E2FA6E7C9",
            "ns": "PLAYER",
            "jhash": "0x96100EA4",
            "manualHash": true
        },
        "0xED51733DC73AED51": {
            "name": "PLAYER_ATTACH_VIRTUAL_BOUND",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" }
            ],
            "results": "void",
            "description": "```\nOnly 1 match. ob_sofa_michael.  \nPLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;  \n```",
            "examples": [],
            "hash": "0xED51733DC73AED51",
            "ns": "PLAYER",
            "jhash": "0xECD12E60",
            "manualHash": true
        },
        "0xF3AC26D3CC576528": {
            "name": "REMOVE_PLAYER_HELMET",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF3AC26D3CC576528",
            "ns": "PLAYER",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x6255F3B4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC64D2C53493ED12": {
            "name": "REPORT_POLICE_SPOTTED_PLAYER",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC64D2C53493ED12",
            "ns": "PLAYER",
            "aliases": ["0xDC64D2C53493ED12"],
            "jhash": "0xD15C4B1C",
            "manualHash": true
        },
        "0xA6F312FCCE9C1DFE": {
            "name": "RESET_PLAYER_STAMINA",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA6F312FCCE9C1DFE",
            "ns": "PLAYER",
            "jhash": "0xC0445A9C",
            "manualHash": true
        },
        "0x19531C47A2ABD691": {
            "name": "RESET_PLAYER_INPUT_GAIT",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x19531C47A2ABD691",
            "ns": "PLAYER",
            "jhash": "0x4A701EE1",
            "manualHash": true
        },
        "0xE9B09589827545E7": {
            "name": "REPORT_CRIME",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "crimeType", "type": "int" },
                { "name": "wantedLvlThresh", "type": "int" }
            ],
            "results": "void",
            "description": "```\nPLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));  \nFrom am_armybase.ysc.c4:  \nPLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));  \n-----  \nThis was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7   \n-----  \ncrimeType:  \n1: Firearms possession  \n2: Person running a red light (\"5-0-5\")  \n3: Reckless driver  \n4: Speeding vehicle (a \"5-10\")  \n5: Traffic violation (a \"5-0-5\")  \n6: Motorcycle rider without a helmet  \n7: Vehicle theft (a \"5-0-3\")  \n8: Grand Theft Auto  \n9: ???  \n10: ???  \n11: Assault on a civilian (a \"2-40\")  \n12: Assault on an officer  \n13: Assault with a deadly weapon (a \"2-45\")  \n14: Officer shot (a \"2-45\")  \n15: Pedestrian struck by a vehicle  \n16: Officer struck by a vehicle  \n17: Helicopter down (an \"AC\"?)  \n18: Civilian on fire (a \"2-40\")  \n19: Officer set on fire (a \"10-99\")  \n20: Car on fire  \n21: Air unit down (an \"AC\"?)  \n22: An explosion (a \"9-96\")  \n23: A stabbing (a \"2-45\") (also something else I couldn't understand)  \n24: Officer stabbed (also something else I couldn't understand)  \n25: Attack on a vehicle (\"MDV\"?)  \n26: Damage to property  \n27: Suspect threatening officer with a firearm  \n28: Shots fired  \n29: ???  \n30: ???  \n31: ???  \n32: ???  \n33: ???  \n34: A \"2-45\"  \n35: ???  \n36: A \"9-25\"  \n37: ???  \n38: ???  \n39: ???  \n40: ???  \n41: ???  \n42: ???  \n43: Possible disturbance  \n44: Civilian in need of assistance  \n45: ???  \n46: ???  \n```",
            "examples": [],
            "hash": "0xE9B09589827545E7",
            "ns": "PLAYER",
            "jhash": "0xD8EB3A44",
            "manualHash": true
        },
        "0x2D03E13C460760D6": {
            "name": "RESET_PLAYER_ARREST_STATE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2D03E13C460760D6",
            "ns": "PLAYER",
            "jhash": "0x453C7CAB",
            "manualHash": true
        },
        "0x056E0FE8534C2949": {
            "name": "SET_ALL_RANDOM_PEDS_FLEE",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The Player ID for whom you want to set this behavior."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "true/false."
                }
            ],
            "results": "void",
            "description": "Sets whether all random peds will run away from the player if they are agitated (threatened) (bool=true), or if they will stand their ground (bool=false).",
            "examples": [],
            "hash": "0x056E0FE8534C2949",
            "ns": "PLAYER",
            "jhash": "0x49EAE968",
            "manualHash": true
        },
        "0xDA1DF03D5A315F4E": {
            "name": "RESET_WORLD_BOUNDARY_FOR_PLAYER",
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xDA1DF03D5A315F4E",
            "ns": "PLAYER",
            "jhash": "0xA97C2F6C",
            "manualHash": true
        },
        "0xA352C1B864CAFD33": {
            "name": "RESTORE_PLAYER_STAMINA",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "player to restore the stamina for"
                },
                {
                    "name": "percentage",
                    "type": "float",
                    "description": "seems to be a percentage that ranges from 0.0 to 1.0 (1.0 being 100%)"
                }
            ],
            "results": "void",
            "description": "Adds a percentage to a players stamina",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\n  while true do\n    RestorePlayerStamina(PlayerId(), 0.3)\n    Citizen.Wait(15000) -- 15 seconds\n  end\nend)"
                }
            ],
            "hash": "0xA352C1B864CAFD33",
            "ns": "PLAYER",
            "jhash": "0x62A93608",
            "manualHash": true
        },
        "0xB9D0DD990DC141DD": {
            "name": "RESET_WANTED_LEVEL_DIFFICULTY",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB9D0DD990DC141DD",
            "ns": "PLAYER",
            "jhash": "0xA64C378D",
            "manualHash": true
        },
        "0x471D2FF42A94B4F2": {
            "name": "SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x471D2FF42A94B4F2",
            "ns": "PLAYER",
            "jhash": "0xBF974891",
            "manualHash": true
        },
        "0xC2AFFFDABBDC2C5C": {
            "name": "_SET_ACHIEVEMENT_PROGRESS",
            "params": [
                { "name": "achievement", "type": "int" },
                { "name": "progress", "type": "int" }
            ],
            "results": "BOOL",
            "description": "For Steam.\nDoes nothing and always returns false in the retail version of the game.",
            "examples": [],
            "hash": "0xC2AFFFDABBDC2C5C",
            "ns": "PLAYER",
            "aliases": ["0xC2AFFFDABBDC2C5C", "_SET_ACHIEVEMENT_PROGRESSION"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9F343285A00B4BB6": {
            "name": "SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9F343285A00B4BB6",
            "ns": "PLAYER",
            "jhash": "0xA97C2059",
            "manualHash": true
        },
        "0xCA7DC8329F0A1E9E": {
            "name": "SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThis can be between 1.0f - 14.9f   \nYou can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.  \nOn PC the multiplier can be between 0.0f and 50.0f (inclusive).  \n```",
            "examples": [],
            "hash": "0xCA7DC8329F0A1E9E",
            "ns": "PLAYER",
            "jhash": "0xF20F72E5",
            "manualHash": true
        },
        "0x2E8AABFA40A84F8C": {
            "name": "SET_DISABLE_AMBIENT_MELEE_MOVE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2E8AABFA40A84F8C",
            "ns": "PLAYER",
            "jhash": "0xCCD937E7",
            "manualHash": true
        },
        "0x8EEDA153AD141BA4": {
            "name": "SET_EVERYONE_IGNORE_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8EEDA153AD141BA4",
            "ns": "PLAYER",
            "jhash": "0xC915285E",
            "manualHash": true
        },
        "0xDB172424876553F4": {
            "name": "SET_DISPATCH_COPS_FOR_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDB172424876553F4",
            "ns": "PLAYER",
            "jhash": "0x48A18913",
            "manualHash": true
        },
        "0x5DC40A8869C22141": {
            "name": "SET_PLAYER_BLUETOOTH_STATE",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "annotations": { "cs_type": "BOOL" }
                },
                {
                    "name": "state",
                    "type": "BOOL",
                    "annotations": { "cs_type": "ScrHandle" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5DC40A8869C22141",
            "ns": "PLAYER",
            "aliases": ["0x5DC40A8869C22141"],
            "jhash": "0x7A6B0EF8",
            "manualHash": true
        },
        "0xD5E460AD7020A246": {
            "name": "SET_PLAYER_CAN_BE_HASSLED_BY_GANGS",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSets whether this player can be hassled by gangs.  \n```",
            "examples": [],
            "hash": "0xD5E460AD7020A246",
            "ns": "PLAYER",
            "jhash": "0x71B305BB",
            "manualHash": true
        },
        "0xD2B315B6689D537D": {
            "name": "SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2B315B6689D537D",
            "ns": "PLAYER",
            "aliases": ["0xD2B315B6689D537D"],
            "jhash": "0xA25D767E",
            "manualHash": true
        },
        "0xAA5F02DB48D704B9": {
            "name": "SET_MAX_WANTED_LEVEL",
            "params": [{ "name": "maxWantedLevel", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA5F02DB48D704B9",
            "ns": "PLAYER",
            "jhash": "0x665A06F5",
            "manualHash": true
        },
        "0x749FADDF97DFE930": {
            "name": "SET_PLAYER_CLOTH_PIN_FRAMES",
            "params": [
                { "name": "player", "type": "Player" },
                {
                    "name": "p1",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x749FADDF97DFE930",
            "ns": "PLAYER",
            "jhash": "0xF7A0F00F",
            "manualHash": true
        },
        "0xD465A8599DFF6814": {
            "name": "SET_PLAYER_CAN_USE_COVER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSets whether this player can take cover.\n```",
            "examples": [],
            "hash": "0xD465A8599DFF6814",
            "ns": "PLAYER",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x13CAFAFA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x596976B02B6B5700": {
            "name": "SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x596976B02B6B5700",
            "ns": "PLAYER",
            "jhash": "0xA3D675ED",
            "manualHash": true
        },
        "0x6E8834B52EC20C77": {
            "name": "SET_PLAYER_CAN_DO_DRIVE_BY",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player to target."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "If set to false, disables the players ability to do drive bys."
                }
            ],
            "results": "void",
            "description": "Sets whether the player is able to do drive-bys in vehicle (shooting & aiming in vehicles), this also includes middle finger taunts.\n\nThis is a toggle, it does not have to be ran every frame.\n\nExample:\n\n```lua\nSetPlayerCanDoDriveBy(PlayerId(), false)\n```",
            "examples": [],
            "hash": "0x6E8834B52EC20C77",
            "ns": "PLAYER",
            "jhash": "0xF4D99685",
            "manualHash": true
        },
        "0xF401B182DBA8AF53": {
            "name": "SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "enabled", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF401B182DBA8AF53",
            "ns": "PLAYER",
            "jhash": "0x832DEB7A",
            "manualHash": true
        },
        "0xEFD79FA81DFBA9CB": {
            "name": "_SET_PLAYER_FALL_DISTANCE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "distance", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEFD79FA81DFBA9CB",
            "ns": "PLAYER",
            "aliases": ["0xEFD79FA81DFBA9CB"],
            "manualHash": true
        },
        "0x8D32347D6D4C40A2": {
            "name": "SET_PLAYER_CONTROL",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "bHasControl", "type": "BOOL" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nFlags:\nSPC_AMBIENT_SCRIPT = (1 << 1),\nSPC_CLEAR_TASKS = (1 << 2),\nSPC_REMOVE_FIRES = (1 << 3),\nSPC_REMOVE_EXPLOSIONS = (1 << 4),\nSPC_REMOVE_PROJECTILES = (1 << 5),\nSPC_DEACTIVATE_GADGETS = (1 << 6),\nSPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),\nSPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),\nSPC_ALLOW_PLAYER_DAMAGE = (1 << 9),\nSPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),\nSPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),\nSPC_ALLOW_PAD_SHAKE = (1 << 12)\nSee: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt\n```",
            "examples": [],
            "hash": "0x8D32347D6D4C40A2",
            "ns": "PLAYER",
            "jhash": "0xD17AFCD8",
            "manualHash": true
        },
        "0x75E7D505F2B15902": {
            "name": "SET_PLAYER_FORCED_ZOOM",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x75E7D505F2B15902",
            "ns": "PLAYER",
            "jhash": "0xB0C576CB",
            "manualHash": true
        },
        "0x14D913B777DFF5DA": {
            "name": "SET_PLAYER_CLOTH_LOCK_COUNTER",
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "```\n6 matches across 4 scripts. 5 occurrences were 240. The other was 255.  \n```",
            "examples": [],
            "hash": "0x14D913B777DFF5DA",
            "ns": "PLAYER",
            "jhash": "0x8D9FD4D1",
            "manualHash": true
        },
        "0x9F7BBA2EA6372500": {
            "name": "SET_PLAYER_CLOTH_PACKAGE_INDEX",
            "params": [{ "name": "index", "type": "int" }],
            "results": "void",
            "description": "```\nEvery occurrence was either 0 or 2.  \n```",
            "examples": [],
            "hash": "0x9F7BBA2EA6372500",
            "ns": "PLAYER",
            "jhash": "0xB8209F16",
            "manualHash": true
        },
        "0x7DDAB28D31FAC363": {
            "name": "SET_PLAYER_HAS_RESERVE_PARACHUTE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7DDAB28D31FAC363",
            "ns": "PLAYER",
            "jhash": "0xA3E4798E",
            "manualHash": true
        },
        "0x7651BC64AE59E128": {
            "name": "SET_PLAYER_FORCE_SKIP_AIM_INTRO",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7651BC64AE59E128",
            "ns": "PLAYER",
            "jhash": "0x374F42F0",
            "manualHash": true
        },
        "0x0FEE4F80AC44A726": {
            "name": "SET_PLAYER_FORCED_AIM",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0FEE4F80AC44A726",
            "ns": "PLAYER",
            "jhash": "0x94E42E2E",
            "manualHash": true
        },
        "0xC388A0F065F5BC34": {
            "name": "_SET_PLAYER_HEALTH_RECHARGE_LIMIT",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The local player ID."
                },
                {
                    "name": "limit",
                    "type": "float",
                    "description": "A value between 0.0 and 1.0, 0.5 is default."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC388A0F065F5BC34",
            "ns": "PLAYER",
            "aliases": ["0xC388A0F065F5BC34"],
            "manualHash": true
        },
        "0x239528EACDC3E7DE": {
            "name": "SET_PLAYER_INVINCIBLE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSimply sets you as invincible (Health will not deplete).  \nUse 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:  \n*(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);  \n```",
            "examples": [],
            "hash": "0x239528EACDC3E7DE",
            "ns": "PLAYER",
            "jhash": "0xDFB9A2A2",
            "manualHash": true
        },
        "0x5DB660B38DD98A31": {
            "name": "SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The local player ID."
                },
                {
                    "name": "regenRate",
                    "type": "float",
                    "description": "The recharge multiplier, a value between 0.0 and 1.0."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- To disable the health recharge completely:\nSetPlayerHealthRechargeMultiplier(PlayerId(), 0.0)\n\n-- To reset it back to the normal recharge speed:\nSetPlayerHealthRechargeMultiplier(PlayerId(), 1.0)"
                }
            ],
            "hash": "0x5DB660B38DD98A31",
            "ns": "PLAYER",
            "jhash": "0x45514731",
            "manualHash": true
        },
        "0xEE4EBDD2593BA844": {
            "name": "_SET_PLAYER_HOMING_ROCKET_DISABLED",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xEE4EBDD2593BA844",
            "ns": "PLAYER",
            "aliases": ["0xEE4EBDD2593BA844"],
            "manualHash": true
        },
        "0x6BC97F4F4BB3C04B": {
            "name": "_SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6BC97F4F4BB3C04B",
            "ns": "PLAYER",
            "aliases": ["0x6BC97F4F4BB3C04B"],
            "manualHash": true
        },
        "0xFF300C7649724A0B": {
            "name": "SET_PLAYER_LEAVE_PED_BEHIND",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFF300C7649724A0B",
            "ns": "PLAYER",
            "aliases": ["0xFF300C7649724A0B"],
            "jhash": "0xAD8383FA",
            "manualHash": true
        },
        "0x29961D490E5814FD": {
            "name": "SET_PLAYER_LOCKON_RANGE_OVERRIDE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "range", "type": "float" }
            ],
            "results": "void",
            "description": "```\nAffects the range of auto aim target.  \n```",
            "examples": [],
            "hash": "0x29961D490E5814FD",
            "ns": "PLAYER",
            "jhash": "0x74D42C03",
            "manualHash": true
        },
        "0x5C8B2F450EE4328E": {
            "name": "SET_PLAYER_LOCKON",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player ID to toggle the lock on for."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Set to false to prevent lock on, set to true to allow for lock on."
                }
            ],
            "results": "void",
            "description": "```\nUsed to toggle the square up aim.\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local plyId = PlayerId()\nSetPlayerLockon(plyId, false)"
                }
            ],
            "hash": "0x5C8B2F450EE4328E",
            "ns": "PLAYER",
            "jhash": "0x0B270E0F",
            "manualHash": true
        },
        "0x1DE37BBF9E9CC14A": {
            "name": "SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1DE37BBF9E9CC14A",
            "ns": "PLAYER",
            "jhash": "0xAF7AFCC4",
            "manualHash": true
        },
        "0x4A3DC7ECCC321032": {
            "name": "SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 3: BOOL p2\n```",
            "examples": [],
            "hash": "0x4A3DC7ECCC321032",
            "ns": "PLAYER",
            "jhash": "0x362E69AD",
            "manualHash": true
        },
        "0x77DFCCF5948B8C71": {
            "name": "SET_PLAYER_MAX_ARMOUR",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDefault is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4  \n```",
            "examples": [],
            "hash": "0x77DFCCF5948B8C71",
            "ns": "PLAYER",
            "jhash": "0xC6C3C53B",
            "manualHash": true
        },
        "0x00A1CADD00108836": {
            "name": "SET_PLAYER_MODEL",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player to set the model for"
                },
                {
                    "name": "model",
                    "type": "Hash",
                    "description": "The model to use"
                }
            ],
            "results": "void",
            "description": "Set the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this.\n\nAs per usual, make sure to request the model first and wait until it has loaded.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local model = `a_f_m_beach_01`\nif IsModelInCdimage(model) and IsModelValid(model) then\n  RequestModel(model)\n  while not HasModelLoaded(model) do\n    Wait(0)\n  end\n  SetPlayerModel(PlayerId(), model)\n  SetModelAsNoLongerNeeded(model)\nend"
                }
            ],
            "hash": "0x00A1CADD00108836",
            "ns": "PLAYER",
            "jhash": "0x774A4C54",
            "manualHash": true
        },
        "0x93B0FB27C9A04060": {
            "name": "SET_PLAYER_PARACHUTE_PACK_TINT_INDEX",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "tintIndex", "type": "int" }
            ],
            "results": "void",
            "description": "```\ntints 0- 13\n0 - unkown\n1 - unkown\n2 - unkown\n3 - unkown\n4 - unkown\n```",
            "examples": [],
            "hash": "0x93B0FB27C9A04060",
            "ns": "PLAYER",
            "jhash": "0xD79D5D1B",
            "manualHash": true
        },
        "0x8026FF78F208978A": {
            "name": "SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8026FF78F208978A",
            "ns": "PLAYER",
            "jhash": "0xA454DD29",
            "manualHash": true
        },
        "0xAE540335B4ABC4E2": {
            "name": "SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nmodifier's min value is 0.1\n```",
            "examples": [],
            "hash": "0xAE540335B4ABC4E2",
            "ns": "PLAYER",
            "jhash": "0x9F3D577F",
            "manualHash": true
        },
        "0xDB89EF50FF25FCE9": {
            "name": "SET_PLAYER_NOISE_MULTIPLIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDB89EF50FF25FCE9",
            "ns": "PLAYER",
            "jhash": "0x15786DD1",
            "manualHash": true
        },
        "0x0764486AEDE748DB": {
            "name": "_SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "model", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x0764486AEDE748DB",
            "ns": "PLAYER",
            "manualHash": true
        },
        "0x977DB4641F6FC3DB": {
            "name": "SET_PLAYER_PARACHUTE_MODEL_OVERRIDE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "model", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nexample:  \nPLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(PLAYER::PLAYER_ID(), 0x73268708);  \n```",
            "examples": [],
            "hash": "0x977DB4641F6FC3DB",
            "ns": "PLAYER",
            "jhash": "0x5D382498",
            "manualHash": true
        },
        "0xDC80A4C2F18A2B64": {
            "name": "SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "model", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC80A4C2F18A2B64",
            "ns": "PLAYER",
            "jhash": "0xA877FF5E",
            "manualHash": true
        },
        "0x8217FD371A4625CF": {
            "name": "SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8217FD371A4625CF",
            "ns": "PLAYER",
            "jhash": "0x14FE9264",
            "manualHash": true
        },
        "0xD9284A8C0D48352C": {
            "name": "SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 was always 5.  \np4 was always false.  \n```",
            "examples": [],
            "hash": "0xD9284A8C0D48352C",
            "ns": "PLAYER",
            "jhash": "0x9254249D",
            "manualHash": true
        },
        "0xAF04C87F5DC1DF38": {
            "name": "SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "index", "type": "int" }
            ],
            "results": "void",
            "description": "```\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n```",
            "examples": [],
            "hash": "0xAF04C87F5DC1DF38",
            "ns": "PLAYER",
            "jhash": "0x70689638",
            "manualHash": true
        },
        "0xA3D0E54541D9A5E5": {
            "name": "SET_PLAYER_PARACHUTE_TINT_INDEX",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "tintIndex", "type": "int" }
            ],
            "results": "void",
            "description": "```\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n```",
            "examples": [],
            "hash": "0xA3D0E54541D9A5E5",
            "ns": "PLAYER",
            "jhash": "0x8EA12EDB",
            "manualHash": true
        },
        "0xA01B8075D8B92DF4": {
            "name": "SET_PLAYER_SPRINT",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA01B8075D8B92DF4",
            "ns": "PLAYER",
            "jhash": "0x7DD7900C",
            "manualHash": true
        },
        "0xC54C95DA968EC5B5": {
            "name": "SET_PLAYER_SIMULATE_AIMING",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC54C95DA968EC5B5",
            "ns": "PLAYER",
            "jhash": "0xF1E0CAFC",
            "manualHash": true
        },
        "0xB2C1A29588A9F47C": {
            "name": "SET_PLAYER_SNEAKING_NOISE_MULTIPLIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nValues around 1.0f to 2.0f used in game scripts.  \n```",
            "examples": [],
            "hash": "0xB2C1A29588A9F47C",
            "ns": "PLAYER",
            "jhash": "0x8D2D89C4",
            "manualHash": true
        },
        "0x11D5F725F0E780E0": {
            "name": "SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nexample:  \nflags: 0-6  \nPLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);  \nwouldnt the flag be the seatIndex?  \n```",
            "examples": [],
            "hash": "0x11D5F725F0E780E0",
            "ns": "PLAYER",
            "jhash": "0x725C6174",
            "manualHash": true
        },
        "0x0299FA38396A4940": {
            "name": "SET_PLAYER_TEAM",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "team", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSet player team on deathmatch and last team standing..  \n```",
            "examples": [],
            "hash": "0x0299FA38396A4940",
            "ns": "PLAYER",
            "jhash": "0x725ADCF2",
            "manualHash": true
        },
        "0xB1906895227793F3": {
            "name": "SET_PLAYER_TARGETING_MODE",
            "params": [{ "name": "targetMode", "type": "int" }],
            "results": "void",
            "description": "```\nSets your targeting mode.\n0 = Assisted Aim - Full\n1 = Assisted Aim - Partial\n2 = Free Aim - Assisted\n3 = Free Aim\n```",
            "examples": [],
            "hash": "0xB1906895227793F3",
            "ns": "PLAYER",
            "jhash": "0x61CAE253",
            "manualHash": true
        },
        "0x4E9021C1FCDD507A": {
            "name": "SET_PLAYER_STEALTH_PERCEPTION_MODIFIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4E9021C1FCDD507A",
            "ns": "PLAYER",
            "jhash": "0x3D26105F",
            "manualHash": true
        },
        "0x340E61DE7F471565": {
            "name": "SET_PLAYER_WANTED_LEVEL_NO_DROP",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "the target player"
                },
                {
                    "name": "wantedLevel",
                    "type": "int",
                    "description": "the wanted level 1-5"
                },
                {
                    "name": "delayedResponse",
                    "type": "BOOL",
                    "description": "false = 0-10sec police spawn response time, true = 10-20sec police spawn response time"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local player = PlayerId()\nSetPlayerWantedLevelNoDrop(player, 5, false) -- 5 star wanted level"
                }
            ],
            "hash": "0x340E61DE7F471565",
            "ns": "PLAYER",
            "jhash": "0xED6F44F5",
            "manualHash": true
        },
        "0x5702B917B99DB1CD": {
            "name": "SET_PLAYER_TARGET_LEVEL",
            "params": [{ "name": "targetLevel", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5702B917B99DB1CD",
            "ns": "PLAYER",
            "aliases": ["0x5702B917B99DB1CD"],
            "jhash": "0x772DA539",
            "manualHash": true
        },
        "0xCE07B9F7817AADA3": {
            "name": "SET_PLAYER_WEAPON_DAMAGE_MODIFIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "The native ensures the 'modifier' parameter is 0.1 or greater.",
            "examples": [],
            "hash": "0xCE07B9F7817AADA3",
            "ns": "PLAYER",
            "jhash": "0xB02C2F39",
            "manualHash": true
        },
        "0x4C60E6EFDAFF2462": {
            "name": "SET_PLAYER_VEHICLE_DEFENSE_MODIFIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nmodifier's min value is 0.1\n```",
            "examples": [],
            "hash": "0x4C60E6EFDAFF2462",
            "ns": "PLAYER",
            "jhash": "0xA16626C7",
            "manualHash": true
        },
        "0xA50E117CDDF82F0C": {
            "name": "SET_PLAYER_VEHICLE_DAMAGE_MODIFIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nmodifier's min value is 0.1\n```",
            "examples": [],
            "hash": "0xA50E117CDDF82F0C",
            "ns": "PLAYER",
            "jhash": "0x823ECA63",
            "manualHash": true
        },
        "0xA0D3E4F7AAFB7E78": {
            "name": "_SET_PLAYER_UNDERWATER_TIME_REMAINING",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "Player id."
                },
                {
                    "name": "percentage",
                    "type": "float",
                    "description": "Maximum is `100.0`. Any value above `100.0` and less than `0.0` will have no effect on [GET_PLAYER_UNDERWATER_TIME_REMAINING](#\\_0xA1FCF8E6AF40B731)."
                }
            ],
            "results": "Any",
            "description": "Seems to lock the underwater timer of the specified player. Set `percentage` to `50.0` will reduce the value of [GET_PLAYER_UNDERWATER_TIME_REMAINING](#\\_0xA1FCF8E6AF40B731) to 5.0.\n\nIf you want to increase the underwater time for ped, use [SET_PED_MAX_TIME_UNDERWATER](#\\_0x6BA428C528D9E522) instead.\n\nUsing this native after [SET_PED_MAX_TIME_UNDERWATER](#\\_0x6BA428C528D9E522) **WILL NOT** get what you want. For example, if you set the max time underwater to `100.0` seconds using [SET_PED_MAX_TIME_UNDERWATER](#\\_0x6BA428C528D9E522) and then call this native and set the `percentage` to 50.0, you will not get `50.0`, instead `2.0`.",
            "examples": [],
            "hash": "0xA0D3E4F7AAFB7E78",
            "ns": "PLAYER",
            "aliases": ["0xA0D3E4F7AAFB7E78"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2D83BC011CA14A3C": {
            "name": "SET_PLAYER_WEAPON_DEFENSE_MODIFIER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2D83BC011CA14A3C",
            "ns": "PLAYER",
            "jhash": "0xAE446344",
            "manualHash": true
        },
        "0x520E541A97A13354": {
            "name": "SET_PLAYER_WANTED_CENTRE_POSITION",
            "params": [
                { "name": "player", "type": "Player" },
                {
                    "name": "position",
                    "type": "Vector3*",
                    "annotations": { "cs_type": "float" }
                },
                {
                    "name": "p2",
                    "type": "BOOL",
                    "annotations": { "cs_type": "float" }
                },
                {
                    "name": "p3",
                    "type": "BOOL",
                    "annotations": { "cs_type": "float" }
                }
            ],
            "results": "void",
            "description": "```\n# Predominant call signatures  \nPLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));  \n# Parameter value ranges  \nP0: PLAYER::PLAYER_ID()  \nP1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)  \nP2: Not set by any call  \n```",
            "examples": [],
            "hash": "0x520E541A97A13354",
            "ns": "PLAYER",
            "jhash": "0xF261633A",
            "manualHash": true
        },
        "0x39FF19C64EF7DA5B": {
            "name": "SET_PLAYER_WANTED_LEVEL",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "the target player"
                },
                {
                    "name": "wantedLevel",
                    "type": "int",
                    "description": "the wanted level 1-5"
                },
                {
                    "name": "delayedResponse",
                    "type": "BOOL",
                    "description": "false = 0-10sec police spawn response time, true = 10-20sec police spawn response time"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local player = PlayerId()\nSetPlayerWantedLevel(player, 5, false) -- 5 star wanted level"
                }
            ],
            "hash": "0x39FF19C64EF7DA5B",
            "ns": "PLAYER",
            "jhash": "0xB7A0914B",
            "manualHash": true
        },
        "0x6DB47AA77FD94E09": {
            "name": "SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nMultiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.  \nJust call it one time, it is not required to be called once every tick.  \nNote: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.  \nIt is not possible to \"decrease\" speed. Anything below 1 will be ignored.  \n```",
            "examples": [],
            "hash": "0x6DB47AA77FD94E09",
            "ns": "PLAYER",
            "jhash": "0x825423C2",
            "manualHash": true
        },
        "0xE0A7D1E497FFCD6F": {
            "name": "SET_PLAYER_WANTED_LEVEL_NOW",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nForces any pending wanted level to be applied to the specified player immediately.  \nCall SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.  \nSecond parameter is unknown (always false).  \n```",
            "examples": [],
            "hash": "0xE0A7D1E497FFCD6F",
            "ns": "PLAYER",
            "jhash": "0xAF3AFD83",
            "manualHash": true
        },
        "0xBCFDE9EDE4CF27DC": {
            "name": "_SET_PLAYER_WEAPON_DEFENSE_MODIFIER_2",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBCFDE9EDE4CF27DC",
            "ns": "PLAYER",
            "aliases": ["0xBCFDE9EDE4CF27DC"],
            "manualHash": true
        },
        "0x32C62AA929C2DA6A": {
            "name": "SET_POLICE_IGNORE_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThe player will be ignored by the police if toggle is set to true  \n```",
            "examples": [],
            "hash": "0x32C62AA929C2DA6A",
            "ns": "PLAYER",
            "jhash": "0xE6DE71B7",
            "manualHash": true
        },
        "0x43286D561B72B8BF": {
            "name": "SET_POLICE_RADAR_BLIPS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nIf toggle is set to false:\n The police won't be shown on the (mini)map\nIf toggle is set to true:\n The police will be shown on the (mini)map\n```",
            "examples": [],
            "hash": "0x43286D561B72B8BF",
            "ns": "PLAYER",
            "jhash": "0x8E114B10",
            "manualHash": true
        },
        "0xB214D570EAD7F81A": {
            "name": "_SET_SPECIAL_ABILITY",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0xB214D570EAD7F81A",
            "ns": "PLAYER",
            "aliases": ["0xB214D570EAD7F81A"],
            "manualHash": true
        },
        "0x477D5D63E63ECA5D": {
            "name": "SIMULATE_PLAYER_INPUT_GAIT",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player to target (always your local player id)."
                },
                {
                    "name": "amount",
                    "type": "float",
                    "description": "For game pads, using anything less than 1.0 will make it partially press analog controls (like sticks/triggers)."
                },
                {
                    "name": "gaitType",
                    "type": "int",
                    "description": "Value in increments of 100's. 2000, 500, 300, 200, etc. Set to -1 if you want your ped to walk forever."
                },
                {
                    "name": "rotationSpeed",
                    "type": "float",
                    "description": "Determines the counterclockwise rotation angle when walking."
                },
                { "name": "p4", "type": "BOOL", "description": "Always true" },
                { "name": "p5", "type": "BOOL", "description": "Always false" }
            ],
            "results": "void",
            "description": "This is to make the player walk without accepting input.\n\nCall this native every frame so you can control the direction of your ped.",
            "examples": [
                {
                    "lang": "cs",
                    "code": "SimulatePlayerInputGait(Game.Player.Handle, 1f, 100, 1f, 1, 0); //Player will go forward for 100ms\nSimulatePlayerInputGait(Game.Player.Handle, 1f, -1, 0f, 1, 0); //Player will go straight forward forever, stop when facing walls or obstacles."
                }
            ],
            "hash": "0x477D5D63E63ECA5D",
            "ns": "PLAYER",
            "jhash": "0x0D77CC34",
            "manualHash": true
        },
        "0xA49C426ED0CA4AB7": {
            "name": "SET_SPECIAL_ABILITY_MULTIPLIER",
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA49C426ED0CA4AB7",
            "ns": "PLAYER",
            "jhash": "0xFF1BC556",
            "manualHash": true
        },
        "0xA91C6F0FF7D16A13": {
            "name": "SET_SWIM_MULTIPLIER_FOR_PLAYER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSwim speed multiplier.  \nMultiplier goes up to 1.49  \nJust call it one time, it is not required to be called once every tick. - Note copied from below native.  \nNote: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.  \n```",
            "examples": [],
            "hash": "0xA91C6F0FF7D16A13",
            "ns": "PLAYER",
            "jhash": "0xB986FF47",
            "manualHash": true
        },
        "0xF733F45FA4497D93": {
            "name": "SPECIAL_ABILITY_CHARGE_LARGE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\n2 matches. p1 was always true.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0xF733F45FA4497D93",
            "ns": "PLAYER",
            "jhash": "0xF440C04D",
            "manualHash": true
        },
        "0x49B856B1360C47C7": {
            "name": "_SET_WANTED_LEVEL_HIDDEN_EVASION_TIME",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "wantedLevel", "type": "int" },
                { "name": "lossTime", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x49B856B1360C47C7",
            "ns": "PLAYER",
            "aliases": ["0x49B856B1360C47C7"],
            "manualHash": true
        },
        "0x9B0BB33B04405E7A": {
            "name": "SET_WANTED_LEVEL_DIFFICULTY",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "difficulty", "type": "float" }
            ],
            "results": "void",
            "description": "```\nMax value is 1.0  \n```",
            "examples": [],
            "hash": "0x9B0BB33B04405E7A",
            "ns": "PLAYER",
            "jhash": "0xB552626C",
            "manualHash": true
        },
        "0x2E7B9B683481687D": {
            "name": "SPECIAL_ABILITY_CHARGE_SMALL",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nEvery occurrence of p1 & p2 were both true.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0x2E7B9B683481687D",
            "ns": "PLAYER",
            "jhash": "0x6F463F56",
            "manualHash": true
        },
        "0x020E5F00CDA207BA": {
            "name": "SET_WANTED_LEVEL_MULTIPLIER",
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x020E5F00CDA207BA",
            "ns": "PLAYER",
            "jhash": "0x1359292F",
            "manualHash": true
        },
        "0xED481732DFF7E997": {
            "name": "SPECIAL_ABILITY_CHARGE_CONTINUOUS",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p2", "type": "Ped" }
            ],
            "results": "void",
            "description": "```\np1 appears to always be 1 (only comes up twice)\n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0xED481732DFF7E997",
            "ns": "PLAYER",
            "jhash": "0x5FEE98A2",
            "manualHash": true
        },
        "0xB7B0870EB531D08D": {
            "name": "SPECIAL_ABILITY_CHARGE_ABSOLUTE",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 appears as 5, 10, 15, 25, or 30. p2 is always true.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0xB7B0870EB531D08D",
            "ns": "PLAYER",
            "jhash": "0x72429998",
            "manualHash": true
        },
        "0x821FDC827D6F4090": {
            "name": "_SPECIAL_ABILITY_ACTIVATE",
            "params": [{ "name": "player", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x821FDC827D6F4090",
            "ns": "PLAYER",
            "aliases": ["0x821FDC827D6F4090"],
            "manualHash": true
        },
        "0xF113E3AA9BC54613": {
            "name": "SPECIAL_ABILITY_CHARGE_MEDIUM",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOnly 1 match. Both p1 & p2 were true.\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0xF113E3AA9BC54613",
            "ns": "PLAYER",
            "jhash": "0xAB55D8F3",
            "manualHash": true
        },
        "0xC9A763D8FE87436A": {
            "name": "SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xC9A763D8FE87436A",
            "ns": "PLAYER",
            "aliases": ["0xC9A763D8FE87436A"],
            "jhash": "0x4136829A",
            "manualHash": true
        },
        "0xA0696A65F009EE18": {
            "name": "SPECIAL_ABILITY_CHARGE_NORMALIZED",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "normalizedValue", "type": "float" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nnormalizedValue is from 0.0 - 1.0\np2 is always 1\n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0xA0696A65F009EE18",
            "ns": "PLAYER",
            "aliases": ["RESET_SPECIAL_ABILITY_CONTROLS_CINEMATIC"],
            "jhash": "0x8C7E68C1",
            "manualHash": true
        },
        "0xD6A953C6D1492057": {
            "name": "SPECIAL_ABILITY_DEACTIVATE",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xD6A953C6D1492057",
            "ns": "PLAYER",
            "jhash": "0x80C2AB09",
            "manualHash": true
        },
        "0x1D506DBBBC51E64B": {
            "name": "SPECIAL_ABILITY_DEPLETE_METER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 was always true.\n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x1D506DBBBC51E64B",
            "ns": "PLAYER",
            "jhash": "0x9F80F6DF",
            "manualHash": true
        },
        "0x9CB5CE07A3968D5A": {
            "name": "SPECIAL_ABILITY_DEACTIVATE_FAST",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x9CB5CE07A3968D5A",
            "ns": "PLAYER",
            "jhash": "0x0751908A",
            "manualHash": true
        },
        "0x6A09D0D590A47D13": {
            "name": "SPECIAL_ABILITY_LOCK",
            "params": [{ "name": "playerModel", "type": "Hash" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x6A09D0D590A47D13",
            "ns": "PLAYER",
            "jhash": "0x1B7BB388",
            "manualHash": true
        },
        "0x3DACA8DDC6FD4980": {
            "name": "SPECIAL_ABILITY_FILL_METER",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAlso known as _RECHARGE_SPECIAL_ABILITY\n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x3DACA8DDC6FD4980",
            "ns": "PLAYER",
            "jhash": "0xB71589DA",
            "manualHash": true
        },
        "0xC449EDED9D73009C": {
            "name": "STOP_PLAYER_TELEPORT",
            "params": [],
            "results": "void",
            "description": "```\nDisables the player's teleportation  \n```",
            "examples": [],
            "hash": "0xC449EDED9D73009C",
            "ns": "PLAYER",
            "jhash": "0x86AB8DBB",
            "manualHash": true
        },
        "0x17F7471EACA78290": {
            "name": "_SPECIAL_ABILITY_DEPLETE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x17F7471EACA78290",
            "ns": "PLAYER",
            "aliases": ["0x17F7471EACA78290"],
            "manualHash": true
        },
        "0x375F0E738F861A94": {
            "name": "SPECIAL_ABILITY_RESET",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x375F0E738F861A94",
            "ns": "PLAYER",
            "jhash": "0xA7D8BCD3",
            "manualHash": true
        },
        "0xF145F3BE2EFA9A3B": {
            "name": "SPECIAL_ABILITY_UNLOCK",
            "params": [{ "name": "playerModel", "type": "Hash" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xF145F3BE2EFA9A3B",
            "ns": "PLAYER",
            "jhash": "0x1FDB2919",
            "manualHash": true
        },
        "0xBF9BD71691857E48": {
            "name": "START_FIRING_AMNESTY",
            "params": [{ "name": "duration", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF9BD71691857E48",
            "ns": "PLAYER",
            "jhash": "0x5F8A22A6",
            "manualHash": true
        },
        "0xAD15F075A4DA0FDE": {
            "name": "START_PLAYER_TELEPORT",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                {
                    "name": "teleportWithVehicle",
                    "type": "BOOL",
                    "description": "Teleports the player along with the vehicle they are in."
                },
                {
                    "name": "findCollisionLand",
                    "type": "BOOL",
                    "description": "Attempt to find a ground coordinate at the given XY location; overriding the Z value."
                },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Teleports the player to the given coordinates.\n\nIf findCollisionLand is true it will try to find the Z value for you, this however has a timeout of 100 frames.\n\nWhen trying to find the Z value the native will take longer the higher the difference from the given Z to the ground, this combined with the timeout can cause the teleport to just teleport to the given Z value, so try to estimate the z value, so don't just pass in 1000.0.\n\nAlso if you're in a vehicle and teleportWithVehicle is true it will not find the Z value for you.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local coords = vector3(100.0, 100.0, 50.0)\nStartPlayerTeleport(PlayerId(), coords.x, coords.y, coords.z, 0.0, false, true, true)\n\nwhile IsPlayerTeleportActive() do\n  Citizen.Wait(0)\nend\n\n--- If you would want to make 100% sure the ped is on the ground here you would have to do some additional checks here\n--- Easiest would be a simple: GetEntityHeightAboveGround(PlayerPedId())"
                }
            ],
            "hash": "0xAD15F075A4DA0FDE",
            "ns": "PLAYER",
            "jhash": "0xC552E06C",
            "manualHash": true
        },
        "0xE23D5873C2394C61": {
            "name": "_UPDATE_PLAYER_TELEPORT",
            "params": [{ "name": "player", "type": "Player" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE23D5873C2394C61",
            "ns": "PLAYER",
            "aliases": ["0xE23D5873C2394C61", "_HAS_PLAYER_TELEPORT_FINISHED"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9A987297ED8BD838": {
            "name": "SUPPRESS_CRIME_THIS_FRAME",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player we are suppressing the crime for."
                },
                {
                    "name": "crimeType",
                    "type": "int",
                    "description": "The crime to suppress, see [`REPORT_CRIME`](#\\_0xE9B09589827545E7) for available types."
                }
            ],
            "results": "void",
            "description": "Suppresses a crime for a given player for this frame only.\n\n**Note:** This native needs to be executed inside a thread if a crime is meant to be suppressed for a given amount of time.",
            "examples": [],
            "hash": "0x9A987297ED8BD838",
            "ns": "PLAYER",
            "aliases": ["0x9A987297ED8BD838", "_SWITCH_CRIME_TYPE"],
            "jhash": "0x59B5C2A2",
            "manualHash": true
        }
    },
    "RECORDING": {
        "0x13B350B8AD0EEE10": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x13B350B8AD0EEE10",
            "ns": "RECORDING",
            "manualHash": true
        },
        "0x33D47E85B476ABCD": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x33D47E85B476ABCD",
            "ns": "RECORDING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x208784099002BC30": {
            "params": [
                { "name": "missionNameLabel", "type": "char*" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\n-This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -  \nfirst one seems to be a string of a mission name, second one seems to be a bool/toggle  \np1 was always 0.  \n```",
            "examples": [],
            "hash": "0x208784099002BC30",
            "ns": "RECORDING",
            "manualHash": true
        },
        "0xAF66DCEE6609B148": {
            "name": "_DISABLE_ROCKSTAR_EDITOR_CAMERA_CHANGES",
            "params": [],
            "results": "void",
            "description": "```\nThis will disable the ability to make camera changes in R* Editor.\n\nRE*\n```",
            "examples": [],
            "hash": "0xAF66DCEE6609B148",
            "ns": "RECORDING",
            "aliases": ["0xAF66DCEE6609B148"],
            "manualHash": true
        },
        "0x1897CA71995A90B4": {
            "name": "_IS_RECORDING",
            "params": [],
            "results": "BOOL",
            "description": "```\nChecks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)  \nmov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944  \nretn  \n```",
            "examples": [],
            "hash": "0x1897CA71995A90B4",
            "ns": "RECORDING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x66972397E0757E7A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x66972397E0757E7A",
            "ns": "RECORDING",
            "manualHash": true
        },
        "0x293220DA1B46CEBC": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x293220DA1B46CEBC",
            "ns": "RECORDING",
            "manualHash": true
        },
        "0xDF4B952F7D381B95": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xDF4B952F7D381B95",
            "ns": "RECORDING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4282E08174868BE3": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x4282E08174868BE3",
            "ns": "RECORDING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x48621C9FCA3EBD28": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x48621C9FCA3EBD28",
            "ns": "RECORDING",
            "manualHash": true
        },
        "0xF854439EFBB3B583": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF854439EFBB3B583",
            "ns": "RECORDING",
            "manualHash": true
        },
        "0x81CBAE94390F9F89": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x81CBAE94390F9F89",
            "ns": "RECORDING",
            "manualHash": true
        },
        "0x88BB3507ED41A240": {
            "name": "_STOP_RECORDING_AND_DISCARD_CLIP",
            "params": [],
            "results": "void",
            "description": "```\nStops recording and discards the recorded clip.  \n```",
            "examples": [],
            "hash": "0x88BB3507ED41A240",
            "ns": "RECORDING",
            "aliases": ["0x88BB3507ED41A240"],
            "manualHash": true
        },
        "0xC3AC2FFF9612AC81": {
            "name": "_START_RECORDING",
            "params": [{ "name": "mode", "type": "int" }],
            "results": "void",
            "description": "```\nStarts recording a replay.  \nIf mode is 0, turns on action replay.  \nIf mode is 1, starts recording.  \nIf already recording a replay, does nothing.  \n```",
            "examples": [],
            "hash": "0xC3AC2FFF9612AC81",
            "ns": "RECORDING",
            "aliases": ["0xC3AC2FFF9612AC81"],
            "manualHash": true
        },
        "0x644546EC5287471B": {
            "name": "_SAVE_RECORDING_CLIP",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x644546EC5287471B",
            "ns": "RECORDING",
            "aliases": ["0x644546EC5287471B"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEB2D525B57F42B40": {
            "name": "_STOP_RECORDING_THIS_FRAME",
            "params": [],
            "results": "void",
            "description": "This disable the recording feature and has to be called every frame.",
            "examples": [],
            "hash": "0xEB2D525B57F42B40",
            "ns": "RECORDING",
            "aliases": ["0xEB2D525B57F42B40"],
            "manualHash": true
        },
        "0x071A5197D6AFC8B3": {
            "name": "_STOP_RECORDING_AND_SAVE_CLIP",
            "params": [],
            "results": "void",
            "description": "```\nStops recording and saves the recorded clip.  \n```",
            "examples": [],
            "hash": "0x071A5197D6AFC8B3",
            "ns": "RECORDING",
            "aliases": ["_STOP_RECORDING"],
            "manualHash": true
        }
    },
    "REPLAY": {
        "0x49DA8145672B2725": {
            "name": "_ACTIVATE_ROCKSTAR_EDITOR",
            "params": [],
            "results": "void",
            "description": "Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.\n\n```\nNativeDB Added Parameter 1: int p0\n```",
            "examples": [],
            "hash": "0x49DA8145672B2725",
            "ns": "REPLAY",
            "aliases": ["0x49DA8145672B2725"],
            "manualHash": true
        },
        "0x95AB8B5C992C7B58": {
            "name": "_IS_INTERIOR_RENDERING_DISABLED",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns a bool if interior rendering is disabled, if yes, all \"normal\" rendered interiors are invisible  \n```",
            "examples": [],
            "hash": "0x95AB8B5C992C7B58",
            "ns": "REPLAY",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3353D13F09307691": {
            "name": "_RESET_EDITOR_VALUES",
            "params": [],
            "results": "void",
            "description": "```\nSets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.  \n```",
            "examples": [],
            "hash": "0x3353D13F09307691",
            "ns": "REPLAY",
            "aliases": ["0x3353D13F09307691"],
            "manualHash": true
        },
        "0xE058175F8EAFE79A": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE058175F8EAFE79A",
            "ns": "REPLAY",
            "manualHash": true
        },
        "0x7E2BD3EF6C205F09": {
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**\n\n```\nSomething to do with phone cameras.  \nstartup.c4:  \nvoid sub_2a3d() {  \n    UNK2::_7E2BD3EF6C205F09(\"No_Filter\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam1\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam2\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam3\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam4\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam5\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam6\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam7\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam9\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam12\", 0);  \n}  \n```",
            "examples": [],
            "hash": "0x7E2BD3EF6C205F09",
            "ns": "REPLAY",
            "manualHash": true
        },
        "0x5AD3932DAEB1E5D3": {
            "params": [],
            "results": "void",
            "description": "```\nDisables some other rendering (internal)  \n```",
            "examples": [],
            "hash": "0x5AD3932DAEB1E5D3",
            "ns": "REPLAY",
            "manualHash": true
        }
    },
    "SAVEMIGRATION": {
        "0x690B76BD2763E068": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x690B76BD2763E068",
            "ns": "SAVEMIGRATION",
            "manualHash": true
        },
        "0xE5E9746A66359F9D": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xE5E9746A66359F9D",
            "ns": "SAVEMIGRATION",
            "manualHash": true
        },
        "0x84B418E93894AC1C": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x84B418E93894AC1C",
            "ns": "SAVEMIGRATION",
            "manualHash": true
        }
    },
    "SCRIPT": {
        "0xDC2BACD920D0A0DD": {
            "name": "BG_END_CONTEXT",
            "params": [{ "name": "contextName", "type": "char*" }],
            "results": "void",
            "description": "```\nDeletes the given context from the background scripts context map.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xDC2BACD920D0A0DD",
            "ns": "SCRIPT",
            "jhash": "0x11F38FB3",
            "manualHash": true
        },
        "0x75B18E49607874C7": {
            "name": "BG_START_CONTEXT_HASH",
            "params": [{ "name": "contextHash", "type": "Hash" }],
            "results": "void",
            "description": "```\nHashed version of 0x9D5A25BADB742ACD.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x75B18E49607874C7",
            "ns": "SCRIPT",
            "jhash": "0x67B23E17",
            "manualHash": true
        },
        "0xF86AA3C56BA31381": {
            "name": "DOES_SCRIPT_WITH_NAME_HASH_EXIST",
            "params": [{ "name": "scriptHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF86AA3C56BA31381",
            "ns": "SCRIPT",
            "aliases": [
                "0xF86AA3C56BA31381",
                "_DOES_SCRIPT_WITH_NAME_HASH_EXIST"
            ],
            "jhash": "0x19EAE282",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x107E5CC7CA942BC1": {
            "name": "BG_END_CONTEXT_HASH",
            "params": [{ "name": "contextHash", "type": "Hash" }],
            "results": "void",
            "description": "```\nHashed version of 0xDC2BACD920D0A0DD.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x107E5CC7CA942BC1",
            "ns": "SCRIPT",
            "jhash": "0x3D981EBF",
            "manualHash": true
        },
        "0x9D5A25BADB742ACD": {
            "name": "BG_START_CONTEXT",
            "params": [{ "name": "contextName", "type": "char*" }],
            "results": "void",
            "description": "```\nInserts the given context into the background scripts context map.\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x9D5A25BADB742ACD",
            "ns": "SCRIPT",
            "jhash": "0xF3F1D953",
            "manualHash": true
        },
        "0xFC04745FBE67C19A": {
            "name": "DOES_SCRIPT_EXIST",
            "params": [{ "name": "scriptName", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFC04745FBE67C19A",
            "ns": "SCRIPT",
            "jhash": "0xDEAB87AB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A1C8B1738FFE87E": {
            "name": "GET_HASH_OF_THIS_SCRIPT_NAME",
            "params": [],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x8A1C8B1738FFE87E",
            "ns": "SCRIPT",
            "aliases": ["_GET_THIS_SCRIPT_HASH"],
            "jhash": "0x2BEE1F45",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD8F66A3A60C62153": {
            "name": "GET_EVENT_AT_INDEX",
            "params": [
                { "name": "eventGroup", "type": "int" },
                { "name": "eventIndex", "type": "int" }
            ],
            "results": "int",
            "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\n```",
            "examples": [],
            "hash": "0xD8F66A3A60C62153",
            "ns": "SCRIPT",
            "jhash": "0xB49C1442",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2902843FCD2B2D79": {
            "name": "GET_EVENT_DATA",
            "params": [
                { "name": "eventGroup", "type": "int" },
                { "name": "eventIndex", "type": "int" },
                { "name": "eventData", "type": "int*" },
                { "name": "eventDataSize", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\nNote: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).\n```",
            "examples": [],
            "hash": "0x2902843FCD2B2D79",
            "ns": "SCRIPT",
            "jhash": "0x4280F92F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x936E6168A9BCEDB5": {
            "name": "GET_EVENT_EXISTS",
            "params": [
                { "name": "eventGroup", "type": "int" },
                { "name": "eventIndex", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\n```",
            "examples": [],
            "hash": "0x936E6168A9BCEDB5",
            "ns": "SCRIPT",
            "jhash": "0xA1B447B5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2C83A9DA6BFFC4F9": {
            "name": "_GET_NUMBER_OF_REFERENCES_OF_SCRIPT_WITH_NAME_HASH",
            "params": [{ "name": "scriptHash", "type": "Hash" }],
            "results": "int",
            "description": "```\nGets the number of instances of the specified script is currently running.\nActually returns numRefs - 1.\nif (program)\n\tv3 = rage::scrProgram::GetNumRefs(program) - 1;\nreturn v3;\n```",
            "examples": [],
            "hash": "0x2C83A9DA6BFFC4F9",
            "ns": "SCRIPT",
            "aliases": [
                "_GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT",
                "_GET_NUMBER_OF_INSTANCES_OF_SCRIPT_WITH_NAME_HASH"
            ],
            "jhash": "0x029D3841",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x05A42BA9FC8DA96B": {
            "name": "_GET_NAME_OF_THREAD",
            "params": [{ "name": "threadId", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x05A42BA9FC8DA96B",
            "ns": "SCRIPT",
            "aliases": ["_GET_THREAD_NAME"],
            "jhash": "0xBE7ACD89",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC30338E8088E2E21": {
            "name": "GET_ID_OF_THIS_THREAD",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC30338E8088E2E21",
            "ns": "SCRIPT",
            "jhash": "0xDE524830",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x18C1270EA7F199BC": {
            "name": "GET_NO_LOADING_SCREEN",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x18C1270EA7F199BC",
            "ns": "SCRIPT",
            "aliases": ["_GET_NO_LOADING_SCREEN"],
            "jhash": "0x27512BA0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5F0F0C783EB16C04": {
            "name": "HAS_SCRIPT_WITH_NAME_HASH_LOADED",
            "params": [{ "name": "scriptHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5F0F0C783EB16C04",
            "ns": "SCRIPT",
            "aliases": ["_HAS_STREAMED_SCRIPT_LOADED"],
            "jhash": "0x06674818",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5F92A689A06620AA": {
            "name": "GET_NUMBER_OF_EVENTS",
            "params": [{ "name": "eventGroup", "type": "int" }],
            "results": "int",
            "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\n```",
            "examples": [],
            "hash": "0x5F92A689A06620AA",
            "ns": "SCRIPT",
            "jhash": "0xA3525D60",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE6CC9F3BA0FB9EF1": {
            "name": "HAS_SCRIPT_LOADED",
            "params": [{ "name": "scriptName", "type": "char*" }],
            "results": "BOOL",
            "description": "Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.",
            "examples": [],
            "hash": "0xE6CC9F3BA0FB9EF1",
            "ns": "SCRIPT",
            "jhash": "0x5D67F751",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x442E0A7EDE4A738A": {
            "name": "GET_THIS_SCRIPT_NAME",
            "params": [],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x442E0A7EDE4A738A",
            "ns": "SCRIPT",
            "jhash": "0xA40FD5D9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB1577667C3708F9B": {
            "name": "_LOCK_LOADING_SCREEN_BUTTONS",
            "params": [],
            "results": "void",
            "description": "Updates the display of the MP/SP loading buttons, and locks the state so that other options are not displayed or changed. This can only be done once.",
            "examples": [],
            "hash": "0xB1577667C3708F9B",
            "ns": "SCRIPT",
            "aliases": ["0xB1577667C3708F9B"],
            "jhash": "0xB03BCCDF",
            "manualHash": true
        },
        "0x760910B49D2B98EA": {
            "params": [],
            "results": "void",
            "description": "```\nSets bit 1 in GtaThread+0x154\n\nBG_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x760910B49D2B98EA",
            "ns": "SCRIPT",
            "jhash": "0x5C95B670",
            "manualHash": true
        },
        "0x46E9AE36D8FA6417": {
            "name": "IS_THREAD_ACTIVE",
            "params": [{ "name": "threadId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x46E9AE36D8FA6417",
            "ns": "SCRIPT",
            "jhash": "0x78D7A5A0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0F6F1EBBC4E1D5E6": {
            "params": [
                { "name": "scriptIndex", "type": "int" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "```\nBG_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x0F6F1EBBC4E1D5E6",
            "ns": "SCRIPT",
            "jhash": "0xF8E5F73A",
            "manualHash": true
        },
        "0x829CD22E043A2577": {
            "params": [{ "name": "p0", "type": "Hash" }],
            "results": "int",
            "description": "```\nBG_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x829CD22E043A2577",
            "ns": "SCRIPT",
            "jhash": "0xC515E735",
            "manualHash": true
        },
        "0x22E21FBCFC88C149": {
            "params": [
                { "name": "scriptIndex", "type": "int" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "int",
            "description": "```\nBG_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x22E21FBCFC88C149",
            "ns": "SCRIPT",
            "jhash": "0x682CB7E1",
            "manualHash": true
        },
        "0x6EB5F71AA68F2E8E": {
            "name": "REQUEST_SCRIPT",
            "params": [{ "name": "scriptName", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6EB5F71AA68F2E8E",
            "ns": "SCRIPT",
            "jhash": "0xE26B2666",
            "manualHash": true
        },
        "0x836B62713E0534CA": {
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if bit 0 in GtaThread+0x154 is set.\n\nBG_*\n\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x836B62713E0534CA",
            "ns": "SCRIPT",
            "jhash": "0x22B9F132",
            "manualHash": true
        },
        "0x30B4FA1C82DD4B9F": {
            "name": "SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID",
            "params": [],
            "results": "int",
            "description": "```\nIf the function returns 0, the end of the iteration has been reached.\n```",
            "examples": [],
            "hash": "0x30B4FA1C82DD4B9F",
            "ns": "SCRIPT",
            "aliases": [
                "0x30B4FA1C82DD4B9F",
                "_GET_ID_OF_NEXT_THREAD_IN_ENUMERATION"
            ],
            "jhash": "0x1E28B28F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDADFADA5A20143A8": {
            "name": "SCRIPT_THREAD_ITERATOR_RESET",
            "params": [],
            "results": "void",
            "description": "Starts a new iteration of the current threads.\nCall this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)",
            "examples": [],
            "hash": "0xDADFADA5A20143A8",
            "ns": "SCRIPT",
            "aliases": ["0xDADFADA5A20143A8", "_BEGIN_ENUMERATING_THREADS"],
            "jhash": "0xBB4E2F66",
            "manualHash": true
        },
        "0xD62A67D26D9653E6": {
            "name": "REQUEST_SCRIPT_WITH_NAME_HASH",
            "params": [{ "name": "scriptHash", "type": "Hash" }],
            "results": "void",
            "description": "```\nformerly _REQUEST_STREAMED_SCRIPT  \n```",
            "examples": [],
            "hash": "0xD62A67D26D9653E6",
            "ns": "SCRIPT",
            "aliases": ["_REQUEST_STREAMED_SCRIPT"],
            "jhash": "0x1C68D9DC",
            "manualHash": true
        },
        "0x1090044AD1DA76FA": {
            "name": "TERMINATE_THIS_THREAD",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1090044AD1DA76FA",
            "ns": "SCRIPT",
            "jhash": "0x3CD9CBB7",
            "manualHash": true
        },
        "0x078EBE9809CCD637": {
            "name": "SHUTDOWN_LOADING_SCREEN",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x078EBE9809CCD637",
            "ns": "SCRIPT",
            "jhash": "0xA2826D17",
            "manualHash": true
        },
        "0x5262CC1995D07E09": {
            "name": "SET_NO_LOADING_SCREEN",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5262CC1995D07E09",
            "ns": "SCRIPT",
            "jhash": "0xC8055034",
            "manualHash": true
        },
        "0xC90D2DCACD56184C": {
            "name": "SET_SCRIPT_AS_NO_LONGER_NEEDED",
            "params": [{ "name": "scriptName", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC90D2DCACD56184C",
            "ns": "SCRIPT",
            "jhash": "0x6FCB7795",
            "manualHash": true
        },
        "0xA40CC53DF8E50837": {
            "name": "_TRIGGER_SCRIPT_EVENT_2",
            "params": [
                {
                    "name": "eventGroup",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                },
                { "name": "eventData", "type": "int*" },
                { "name": "eventDataSize", "type": "int" },
                { "name": "playerBits", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSee TRIGGER_SCRIPT_EVENT\n```",
            "examples": [],
            "hash": "0xA40CC53DF8E50837",
            "ns": "SCRIPT",
            "aliases": ["0xA40CC53DF8E50837"],
            "manualHash": true
        },
        "0xC8B189ED9138BCD4": {
            "name": "TERMINATE_THREAD",
            "params": [{ "name": "threadId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC8B189ED9138BCD4",
            "ns": "SCRIPT",
            "jhash": "0x253FD520",
            "manualHash": true
        },
        "0xC5BC038960E9DB27": {
            "name": "SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED",
            "params": [{ "name": "scriptHash", "type": "Hash" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC5BC038960E9DB27",
            "ns": "SCRIPT",
            "aliases": ["_SET_STREAMED_SCRIPT_AS_NO_LONGER_NEEDED"],
            "jhash": "0x96C26F66",
            "manualHash": true
        },
        "0x5AE99C571D5BBE5D": {
            "name": "TRIGGER_SCRIPT_EVENT",
            "params": [
                { "name": "eventGroup", "type": "int" },
                { "name": "eventData", "type": "int*" },
                { "name": "eventDataSize", "type": "int" },
                { "name": "playerBits", "type": "int" }
            ],
            "results": "void",
            "description": "```\neventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)\nNote: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).\nplayerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.\n```",
            "examples": [],
            "hash": "0x5AE99C571D5BBE5D",
            "ns": "SCRIPT",
            "jhash": "0x54763B35",
            "manualHash": true
        }
    },
    "PED": {
        "0x5BA652A0CD14DF2F": {
            "name": "ADD_ARMOUR_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "amount", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSame as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.  \n```",
            "examples": [],
            "hash": "0x5BA652A0CD14DF2F",
            "ns": "PED",
            "jhash": "0xF686B26E",
            "manualHash": true
        },
        "0x5619BFA07CFD7833": {
            "name": "ADD_PED_DECORATION_FROM_HASHES_IN_CORONA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "collection", "type": "Hash" },
                { "name": "overlay", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5619BFA07CFD7833",
            "ns": "PED",
            "aliases": ["0x5619BFA07CFD7833", "_SET_PED_FACIAL_DECORATION"],
            "jhash": "0x8CD3E487",
            "manualHash": true
        },
        "0x697157CED63F18D4": {
            "name": "APPLY_DAMAGE_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "damageAmount", "type": "int" },
                { "name": "armorFirst", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\ndamages a ped with the given amount  \n----  \narmorFirst means it will damage/lower the armor first before damaging the player.  \nsetting damageAmount to a negative amount will cause the player or the armor (depending on armorFirst) to be healed by damageAmount instead.  \n```\n\n```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0x697157CED63F18D4",
            "ns": "PED",
            "jhash": "0x4DC27FCF",
            "manualHash": true
        },
        "0xF372BC22FCB88606": {
            "name": "ADD_RELATIONSHIP_GROUP",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "groupHash", "type": "Hash*" }
            ],
            "results": "Any",
            "description": "```\nCan't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.  \n```",
            "examples": [],
            "hash": "0xF372BC22FCB88606",
            "ns": "PED",
            "jhash": "0x8B635546",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x83F7E01C7B769A26": {
            "name": "APPLY_PED_BLOOD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "boneIndex", "type": "int" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "woundType", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nFound one occurence in re_crashrescue.c4  \nPED::APPLY_PED_BLOOD(l_4B, 3, 0.0, 0.0, 0.0, \"wound_sheet\");  \n```",
            "examples": [],
            "hash": "0x83F7E01C7B769A26",
            "ns": "PED",
            "jhash": "0x376CE3C0",
            "manualHash": true
        },
        "0x5F5D1665E352A839": {
            "name": "ADD_PED_DECORATION_FROM_HASHES",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "collection", "type": "Hash" },
                { "name": "overlay", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nApplies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.\ncollection - PedDecorationCollection filename hash\noverlay - Item name hash\nExample:\nEntry inside \"mpbeach_overlays.xml\" -\n<Item>\n  <uvPos x=\"0.500000\" y=\"0.500000\" />\n  <scale x=\"0.600000\" y=\"0.500000\" />\n  <rotation value=\"0.000000\" />\n  <nameHash>FM_Hair_Fuzz</nameHash>\n  <txdHash>mp_hair_fuzz</txdHash>\n  <txtHash>mp_hair_fuzz</txtHash>\n  <zone>ZONE_HEAD</zone>\n  <type>TYPE_TATTOO</type>\n  <faction>FM</faction>\n  <garment>All</garment>\n  <gender>GENDER_DONTCARE</gender>\n  <award />\n  <awardLevel />\n</Item>\nCode:\nPED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"mpbeach_overlays\"), MISC::GET_HASH_KEY(\"fm_hair_fuzz\"))\n```",
            "examples": [],
            "hash": "0x5F5D1665E352A839",
            "ns": "PED",
            "aliases": ["_APPLY_PED_OVERLAY", "_SET_PED_DECORATION"],
            "jhash": "0x70559AC7",
            "manualHash": true
        },
        "0x3311E47B91EDCBBC": {
            "name": "APPLY_PED_BLOOD_BY_ZONE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3311E47B91EDCBBC",
            "ns": "PED",
            "aliases": ["0x3311E47B91EDCBBC"],
            "jhash": "0x8F3F3A9C",
            "manualHash": true
        },
        "0x816F6981C60BF53B": {
            "name": "APPLY_PED_BLOOD_DAMAGE_BY_ZONE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x816F6981C60BF53B",
            "ns": "PED",
            "aliases": ["0x816F6981C60BF53B"],
            "jhash": "0x1E54DB12",
            "manualHash": true
        },
        "0x272E4723B56A3B96": {
            "name": "ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY",
            "params": [
                { "name": "sceneID", "type": "int" },
                { "name": "entity", "type": "Entity" },
                { "name": "boneIndex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x272E4723B56A3B96",
            "ns": "PED",
            "jhash": "0xE9BA6189",
            "manualHash": true
        },
        "0x46DF918788CB093F": {
            "name": "APPLY_PED_DAMAGE_PACK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "damagePack", "type": "char*" },
                { "name": "damage", "type": "float" },
                { "name": "mult", "type": "float" }
            ],
            "results": "void",
            "description": "```\nDamage Packs:  \n\"SCR_TrevorTreeBang\"  \n\"HOSPITAL_0\"  \n\"HOSPITAL_1\"  \n\"HOSPITAL_2\"  \n\"HOSPITAL_3\"  \n\"HOSPITAL_4\"  \n\"HOSPITAL_5\"  \n\"HOSPITAL_6\"  \n\"HOSPITAL_7\"  \n\"HOSPITAL_8\"  \n\"HOSPITAL_9\"  \n\"SCR_Dumpster\"  \n\"BigHitByVehicle\"  \n\"SCR_Finale_Michael_Face\"  \n\"SCR_Franklin_finb\"  \n\"SCR_Finale_Michael\"  \n\"SCR_Franklin_finb2\"  \n\"Explosion_Med\"  \n\"SCR_Torture\"  \n\"SCR_TracySplash\"  \n\"Skin_Melee_0\"  \nAdditional damage packs:  \ngist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227  \n```",
            "examples": [],
            "hash": "0x46DF918788CB093F",
            "ns": "PED",
            "jhash": "0x208D0CB8",
            "manualHash": true
        },
        "0x1B5C85C612E5256E": {
            "name": "ADD_SCENARIO_BLOCKING_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x1B5C85C612E5256E",
            "ns": "PED",
            "jhash": "0xA38C0234",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x397C38AA7B4A5F83": {
            "name": "APPLY_PED_DAMAGE_DECAL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "damageZone", "type": "int" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "scale", "type": "float" },
                { "name": "alpha", "type": "float" },
                { "name": "variation", "type": "int" },
                { "name": "fadeIn", "type": "BOOL" },
                { "name": "decalName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nenum eDamageZone\n{\n\tDZ_Torso = 0,\n\tDZ_Head,\n\tDZ_LeftArm,\n\tDZ_RightArm,\n\tDZ_LeftLeg,\n\tDZ_RightLeg,\n};\nDecal Names:\nscar\nblushing\ncs_flush_anger\ncs_flush_anger_face\nbruise\nbruise_large\nherpes\nArmorBullet\nbasic_dirt_cloth\nbasic_dirt_skin\ncs_trev1_dirt\nAPPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, \"blushing\");\n```",
            "examples": [],
            "hash": "0x397C38AA7B4A5F83",
            "ns": "PED",
            "jhash": "0x8A13A41F",
            "manualHash": true
        },
        "0x5EE2CAFF7F17770D": {
            "name": "CAN_CREATE_RANDOM_COPS",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5EE2CAFF7F17770D",
            "ns": "PED",
            "jhash": "0xAA73DAD9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB8EB95E5B4E56978": {
            "name": "CAN_CREATE_RANDOM_DRIVER",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB8EB95E5B4E56978",
            "ns": "PED",
            "jhash": "0x99861609",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x51AC07A44D4F5B8A": {
            "name": "CAN_KNOCK_PED_OFF_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x51AC07A44D4F5B8A",
            "ns": "PED",
            "jhash": "0xC9D098B3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF0D582CBF2D9B0F": {
            "name": "APPLY_PED_BLOOD_SPECIFIC",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The Ped to which blood damage is applied."
                },
                {
                    "name": "component",
                    "type": "int",
                    "description": "Specific component or body part."
                },
                {
                    "name": "u",
                    "type": "float",
                    "description": "UV texture coordinates for placing the decal in the specified zone."
                },
                {
                    "name": "v",
                    "type": "float",
                    "description": "UV texture coordinates for placing the decal in the specified zone."
                },
                {
                    "name": "rotation",
                    "type": "float",
                    "description": "Angle in degrees for the rotation of the blood decal."
                },
                {
                    "name": "scale",
                    "type": "float",
                    "description": "Scale factor for the damage, ranging from 0.0 to 1.0."
                },
                {
                    "name": "forcedFrame",
                    "type": "int",
                    "description": "Allows a specific frame of damage to be chosen (-1 for random selection)."
                },
                {
                    "name": "preAge",
                    "type": "float",
                    "description": "Number of seconds to pre-age the damage for an \"old wound\" effect (0.0 for fresh wound)."
                },
                {
                    "name": "bloodName",
                    "type": "char*",
                    "annotations": { "cs_type": "Any*" },
                    "description": "Name of the blood type, matching an entry in peddamage.xml."
                }
            ],
            "results": "void",
            "description": "Applies blood damage to a ped with specific parameters for zone, UV offsets, rotation, scale, and initial aging.\n\n```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xEF0D582CBF2D9B0F",
            "ns": "PED",
            "aliases": ["0xEF0D582CBF2D9B0F"],
            "jhash": "0xFC13CE80",
            "manualHash": true
        },
        "0xEACEEDA81751915C": {
            "name": "CAN_CREATE_RANDOM_BIKE_RIDER",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEACEEDA81751915C",
            "ns": "PED",
            "jhash": "0x7018BE31",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEAD42DE3610D0721": {
            "name": "CAN_PED_IN_COMBAT_SEE_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEAD42DE3610D0721",
            "ns": "PED",
            "jhash": "0xCCD525E1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE43A13C9E4CCCBCF": {
            "name": "_BLOCK_PED_DEAD_BODY_SHOCKING_EVENTS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE43A13C9E4CCCBCF",
            "ns": "PED",
            "aliases": ["0xE43A13C9E4CCCBCF"],
            "jhash": "0xFF1F6AEB",
            "manualHash": true
        },
        "0x128F79EDCECE4FD5": {
            "name": "CAN_PED_RAGDOLL",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nPrevents the ped from going limp.  \n[Example: Can prevent peds from falling when standing on moving vehicles.]  \n```",
            "examples": [],
            "hash": "0x128F79EDCECE4FD5",
            "ns": "PED",
            "jhash": "0xC0EFB7A3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCD8A7537A9B52F06": {
            "name": "CLEAR_ALL_PED_PROPS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD8A7537A9B52F06",
            "ns": "PED",
            "jhash": "0x81DF8B43",
            "manualHash": true
        },
        "0x637822DC2AFEEBF8": {
            "name": "_CLEAR_FACIAL_CLIPSET_OVERRIDE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x637822DC2AFEEBF8",
            "ns": "PED",
            "aliases": ["0x637822DC2AFEEBF8"],
            "manualHash": true
        },
        "0xE6CA85E7259CE16B": {
            "name": "CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE6CA85E7259CE16B",
            "ns": "PED",
            "aliases": ["0xE6CA85E7259CE16B"],
            "jhash": "0xCC1D8F66",
            "manualHash": true
        },
        "0x3E8349C08E4B82E4": {
            "name": "CAN_CREATE_RANDOM_PED",
            "params": [{ "name": "unk", "type": "BOOL" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3E8349C08E4B82E4",
            "ns": "PED",
            "jhash": "0xF9ABE88F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD8D19675ED5FBDCE": {
            "name": "CLEAR_PED_ALTERNATE_MOVEMENT_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "stance", "type": "int" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD8D19675ED5FBDCE",
            "ns": "PED",
            "jhash": "0x7A7F5BC3",
            "manualHash": true
        },
        "0x6CD5A433374D4CFB": {
            "name": "CAN_PED_SEE_HATED_PED",
            "params": [
                { "name": "ped1", "type": "Ped" },
                { "name": "ped2", "type": "Ped" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6CD5A433374D4CFB",
            "ns": "PED",
            "aliases": ["0x6CD5A433374D4CFB", "_CAN_PED_SEE_PED"],
            "jhash": "0x74A0F291",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x726256CC1EEB182F": {
            "name": "CLEAR_FACIAL_IDLE_ANIM_OVERRIDE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x726256CC1EEB182F",
            "ns": "PED",
            "jhash": "0x5244F4E2",
            "manualHash": true
        },
        "0x8844BBFCE30AA9E9": {
            "name": "CLEAR_PED_ALTERNATE_WALK_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8844BBFCE30AA9E9",
            "ns": "PED",
            "jhash": "0x5736FB23",
            "manualHash": true
        },
        "0x8FE22675A5A45817": {
            "name": "CLEAR_PED_BLOOD_DAMAGE",
            "params": [
                { "name": "ped", "type": "Ped", "description": "Ped id." }
            ],
            "results": "void",
            "description": "Clears the blood on a ped.",
            "examples": [],
            "hash": "0x8FE22675A5A45817",
            "ns": "PED",
            "jhash": "0xF7ADC960",
            "manualHash": true
        },
        "0x56E3B78C5408D9F4": {
            "name": "CLEAR_PED_BLOOD_DAMAGE_BY_ZONE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSomehow related to changing ped's clothes.  \n```",
            "examples": [],
            "hash": "0x56E3B78C5408D9F4",
            "ns": "PED",
            "aliases": ["0x56E3B78C5408D9F4"],
            "jhash": "0xF210BE69",
            "manualHash": true
        },
        "0x523C79AEEFCC4A2A": {
            "name": "CLEAR_PED_DAMAGE_DECAL_BY_ZONE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "char*" }
            ],
            "results": "void",
            "description": "```\np1: from 0 to 5 in the b617d scripts.  \np2: \"blushing\" and \"ALL\" found in the b617d scripts.  \n```",
            "examples": [],
            "hash": "0x523C79AEEFCC4A2A",
            "ns": "PED",
            "aliases": ["0x523C79AEEFCC4A2A"],
            "jhash": "0x70AA5B7D",
            "manualHash": true
        },
        "0x0E5173C163976E38": {
            "name": "CLEAR_PED_DECORATIONS",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0E5173C163976E38",
            "ns": "PED",
            "jhash": "0xD4496BF3",
            "manualHash": true
        },
        "0xE3B27E70CEAB9F0C": {
            "name": "CLEAR_PED_DECORATIONS_LEAVE_SCARS",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE3B27E70CEAB9F0C",
            "ns": "PED",
            "aliases": ["0xE3B27E70CEAB9F0C", "_CLEAR_PED_FACIAL_DECORATIONS"],
            "jhash": "0xEFD58EB9",
            "manualHash": true
        },
        "0x6585D955A68452A5": {
            "name": "CLEAR_PED_ENV_DIRT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6585D955A68452A5",
            "ns": "PED",
            "aliases": ["0x6585D955A68452A5"],
            "jhash": "0xA993915F",
            "manualHash": true
        },
        "0x8EF6B7AC68E2F01B": {
            "name": "CLEAR_PED_LAST_DAMAGE_BONE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8EF6B7AC68E2F01B",
            "ns": "PED",
            "jhash": "0x56CB715E",
            "manualHash": true
        },
        "0xC79196DCB36F6121": {
            "name": "_CLEAR_PED_COVER_CLIPSET_OVERRIDE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nCLEAR_PED_*\n```",
            "examples": [],
            "hash": "0xC79196DCB36F6121",
            "ns": "PED",
            "aliases": ["0xC79196DCB36F6121"],
            "manualHash": true
        },
        "0x2E05208086BA0651": {
            "name": "CLEAR_PED_NON_CREATION_AREA",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2E05208086BA0651",
            "ns": "PED",
            "jhash": "0x6F7043A3",
            "manualHash": true
        },
        "0x0943E5B8E078E76E": {
            "name": "CLEAR_PED_PROP",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "propId",
                    "type": "int",
                    "description": "The prop id you want to clear from the ped. Refer to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0943E5B8E078E76E",
            "ns": "PED",
            "jhash": "0x2D23D743",
            "manualHash": true
        },
        "0x4AFE3690D7E0B5AC": {
            "name": "CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4AFE3690D7E0B5AC",
            "ns": "PED",
            "jhash": "0xAEC9163B",
            "manualHash": true
        },
        "0x9C720776DAA43E7E": {
            "name": "CLEAR_PED_WETNESS",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nIt clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.  \n```",
            "examples": [],
            "hash": "0x9C720776DAA43E7E",
            "ns": "PED",
            "jhash": "0x629F15BD",
            "manualHash": true
        },
        "0x1280804F7CFD2D6C": {
            "name": "CLEAR_PED_PARACHUTE_PACK_VARIATION",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1280804F7CFD2D6C",
            "ns": "PED",
            "aliases": ["0x1280804F7CFD2D6C"],
            "jhash": "0x7BCD8991",
            "manualHash": true
        },
        "0xD86D101FCFD00A4B": {
            "name": "CLEAR_RAGDOLL_BLOCKING_FLAGS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nThere seem to be 26 flags  \n```",
            "examples": [],
            "hash": "0xD86D101FCFD00A4B",
            "ns": "PED",
            "aliases": [
                "0xD86D101FCFD00A4B",
                "_RESET_PED_RAGDOLL_BLOCKING_FLAGS"
            ],
            "jhash": "0x77CBA290",
            "manualHash": true
        },
        "0x687C0B594907D2E8": {
            "name": "CLEAR_PED_STORED_HAT_PROP",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x687C0B594907D2E8",
            "ns": "PED",
            "aliases": ["0x687C0B594907D2E8"],
            "jhash": "0x24A1284E",
            "manualHash": true
        },
        "0xB50EB4CCB29704AC": {
            "name": "CLEAR_PED_SCUBA_GEAR_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to remove the scuba gear from."
                }
            ],
            "results": "void",
            "description": "Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.",
            "examples": [],
            "hash": "0xB50EB4CCB29704AC",
            "ns": "PED",
            "aliases": ["0xB50EB4CCB29704AC", "_REMOVE_PED_SCUBA_GEAR_NOW"],
            "jhash": "0x080275EE",
            "manualHash": true
        },
        "0x5E29243FB56FC6D4": {
            "name": "CLEAR_RELATIONSHIP_BETWEEN_GROUPS",
            "params": [
                { "name": "relationship", "type": "int" },
                { "name": "group1", "type": "Hash" },
                { "name": "group2", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nClears the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \n(Credits: Inco)  \nExample:  \nPED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);  \nPED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);  \n```",
            "examples": [],
            "hash": "0x5E29243FB56FC6D4",
            "ns": "PED",
            "jhash": "0x994B8C2D",
            "manualHash": true
        },
        "0xEF29A16337FACADB": {
            "name": "CLONE_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The input ped."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "annotations": { "cs_type": "float" },
                    "description": "Whether or not the ped should be registered as a network object."
                },
                {
                    "name": "bScriptHostPed",
                    "type": "BOOL",
                    "description": "Script host flag."
                },
                {
                    "name": "copyHeadBlendFlag",
                    "type": "BOOL",
                    "description": "If true, head blend data is referenced, not copied."
                }
            ],
            "results": "Ped",
            "description": "Creates a copy of the passed ped, optionally setting it as local and/or shallow-copying the head blend data.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- makes a locally visible duplicate of the local player for presentation\nlocal playerDummy = ClonePed(PlayerPedId(), false, false, true)\nSetEntityCoords(playerDummy, pos.x, pos.y, pos.z)"
                }
            ],
            "hash": "0xEF29A16337FACADB",
            "ns": "PED",
            "jhash": "0x8C8A8D6E",
            "manualHash": true,
            "resultsDescription": "A new ped handle representing the ped's copy."
        },
        "0x668FD40BCBA5DE48": {
            "name": "_CLONE_PED_EX",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "heading",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "bScriptHostPed",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p4", "type": "Any" }
            ],
            "results": "Ped",
            "description": "Used one time in fmmc_launcher.c instead of CLONE_PED because ?",
            "examples": [],
            "hash": "0x668FD40BCBA5DE48",
            "ns": "PED",
            "aliases": ["0x668FD40BCBA5DE48", "_CLONE_PED_2"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8C4F3BF23B6237DB": {
            "name": "CREATE_PARACHUTE_BAG_OBJECT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "Object",
            "description": "",
            "examples": [],
            "hash": "0x8C4F3BF23B6237DB",
            "ns": "PED",
            "aliases": ["0x8C4F3BF23B6237DB", "_CREATE_PARACHUTE_OBJECT"],
            "jhash": "0x19198A16",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE952D6431689AD9A": {
            "name": "CLONE_PED_TO_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "targetPed", "type": "Ped" }
            ],
            "results": "void",
            "description": "```\nCopies ped's components and props to targetPed.\n```",
            "examples": [],
            "hash": "0xE952D6431689AD9A",
            "ns": "PED",
            "aliases": ["_ASSIGN_PLAYER_TO_PED"],
            "jhash": "0xFC70EEC7",
            "manualHash": true
        },
        "0x148B08C2D2ACB884": {
            "name": "_CLONE_PED_TO_TARGET_EX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "targetPed", "type": "Ped" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x148B08C2D2ACB884",
            "ns": "PED",
            "aliases": ["0x148B08C2D2ACB884"],
            "manualHash": true
        },
        "0x90370EBE0FEE1A3D": {
            "name": "CREATE_GROUP",
            "params": [{ "name": "unused", "type": "int" }],
            "results": "int",
            "description": "```\nCreates a new ped group.  \nGroups can contain up to 8 peds.  \nThe parameter is unused.  \nReturns a handle to the created group, or 0 if a group couldn't be created.  \n```",
            "examples": [],
            "hash": "0x90370EBE0FEE1A3D",
            "ns": "PED",
            "jhash": "0x8DC0368D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9B62392B474F44A0": {
            "name": "CREATE_RANDOM_PED_AS_DRIVER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "returnHandle", "type": "BOOL" }
            ],
            "results": "Ped",
            "description": "",
            "examples": [],
            "hash": "0x9B62392B474F44A0",
            "ns": "PED",
            "jhash": "0xB927CE9A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7DD959874C1FD534": {
            "name": "CREATE_PED_INSIDE_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "pedType",
                    "type": "int",
                    "description": "See [`CREATE_PED`](#\\_0xD49F9B0955C367DE)"
                },
                { "name": "modelHash", "type": "Hash" },
                { "name": "seat", "type": "int" },
                { "name": "isNetwork", "type": "BOOL" },
                { "name": "bScriptHostPed", "type": "BOOL" }
            ],
            "results": "Ped",
            "description": "",
            "examples": [],
            "hash": "0x7DD959874C1FD534",
            "ns": "PED",
            "jhash": "0x3000F092",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x418EF2A1BCE56685": {
            "name": "CREATE_NM_MESSAGE",
            "params": [
                { "name": "startImmediately", "type": "BOOL" },
                { "name": "messageId", "type": "int" }
            ],
            "results": "void",
            "description": "```\nCreates a new NaturalMotion message.  \nstartImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.  \nmessageId: The ID of the NaturalMotion message.  \nIf a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.  \n```",
            "examples": [],
            "hash": "0x418EF2A1BCE56685",
            "ns": "PED",
            "jhash": "0x1CFBFD4B",
            "manualHash": true
        },
        "0xD49F9B0955C367DE": {
            "name": "CREATE_PED",
            "params": [
                {
                    "name": "pedType",
                    "type": "int",
                    "description": "Unused. Peds get set to CIVMALE/CIVFEMALE/etc. no matter the value specified."
                },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model of ped to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "Heading to face towards, in degrees."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the ped. If false, the ped exists only locally."
                },
                {
                    "name": "bScriptHostPed",
                    "type": "BOOL",
                    "description": "Whether to register the ped as pinned to the script host in the R\\* network model."
                }
            ],
            "results": "Ped",
            "description": "Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.\nThis ped will initially be owned by the creating script as a mission entity, and the model should be loaded already\n(e.g. using REQUEST_MODEL).",
            "examples": [],
            "hash": "0xD49F9B0955C367DE",
            "ns": "PED",
            "jhash": "0x0389EF71",
            "manualHash": true,
            "resultsDescription": "A script handle (fwScriptGuid index) for the ped, or `0` if the ped failed to be created."
        },
        "0x9614299DCB53E54B": {
            "name": "DELETE_PED",
            "params": [{ "name": "ped", "type": "Ped*" }],
            "results": "void",
            "description": "```\nDeletes the specified ped, then sets the handle pointed to by the pointer to NULL.  \n```",
            "examples": [],
            "hash": "0x9614299DCB53E54B",
            "ns": "PED",
            "jhash": "0x13EFB9A0",
            "manualHash": true
        },
        "0x62EC273D00187DCA": {
            "name": "_CREATE_SYNCHRONIZED_SCENE_2",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "object", "type": "Hash" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x62EC273D00187DCA",
            "ns": "PED",
            "aliases": ["0x62EC273D00187DCA"],
            "jhash": "0xF3876894",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7C6B0C22F9F40BBE": {
            "name": "DOES_GROUP_EXIST",
            "params": [{ "name": "groupId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7C6B0C22F9F40BBE",
            "ns": "PED",
            "jhash": "0x935C978D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8C18E0F9080ADD73": {
            "name": "CREATE_SYNCHRONIZED_SCENE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "roll", "type": "float" },
                { "name": "pitch", "type": "float" },
                { "name": "yaw", "type": "float" },
                { "name": "p6", "type": "int" }
            ],
            "results": "int",
            "description": "```\np6 always 2 (but it doesnt seem to matter...)  \nroll and pitch 0  \nyaw to Ped.rotation  \n```",
            "examples": [],
            "hash": "0x8C18E0F9080ADD73",
            "ns": "PED",
            "jhash": "0xFFDDF8FA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCD9CC7E200A52A6F": {
            "name": "_DISPOSE_SYNCHRONIZED_SCENE",
            "params": [{ "name": "scene", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD9CC7E200A52A6F",
            "ns": "PED",
            "aliases": ["0xCD9CC7E200A52A6F"],
            "jhash": "0xBF7F9035",
            "manualHash": true
        },
        "0xB4AC7D0CF06BFE8F": {
            "name": "CREATE_RANDOM_PED",
            "params": [
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" }
            ],
            "results": "Ped",
            "description": "```\nvb.net\nDim ped_handle As Integer\n                    With Game.Player.Character\n                        Dim pos As Vector3 = .Position + .ForwardVector * 3\n                        ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)\n                    End With\nCreates a Ped at the specified location, returns the Ped Handle.\nPed will not act until SET_PED_AS_NO_LONGER_NEEDED is called.\n```",
            "examples": [],
            "hash": "0xB4AC7D0CF06BFE8F",
            "ns": "PED",
            "jhash": "0x5A949543",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA21C118553BBDF02": {
            "name": "DISABLE_HEAD_BLEND_PALETTE_COLOR",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA21C118553BBDF02",
            "ns": "PED",
            "aliases": ["0xA21C118553BBDF02"],
            "jhash": "0xC6F36292",
            "manualHash": true
        },
        "0x8A24B067D175A7BD": {
            "name": "_DOES_SCENARIO_BLOCKING_AREA_EXIST",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8A24B067D175A7BD",
            "ns": "PED",
            "aliases": ["0x8A24B067D175A7BD"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6D38F1F04CBB37EA": {
            "name": "DETACH_SYNCHRONIZED_SCENE",
            "params": [{ "name": "sceneID", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6D38F1F04CBB37EA",
            "ns": "PED",
            "jhash": "0x52A1CAB2",
            "manualHash": true
        },
        "0xAFF4710E2A0A6C12": {
            "name": "DROP_AMBIENT_PROP",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAFF4710E2A0A6C12",
            "ns": "PED",
            "aliases": ["0xAFF4710E2A0A6C12"],
            "jhash": "0x728D3D53",
            "manualHash": true
        },
        "0x4668D80430D6C299": {
            "name": "FINALIZE_HEAD_BLEND",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4668D80430D6C299",
            "ns": "PED",
            "aliases": ["0x4668D80430D6C299"],
            "jhash": "0x894314A4",
            "manualHash": true
        },
        "0x600048C60D5C2C51": {
            "name": "DISABLE_PED_HEATSCALE_OVERRIDE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x600048C60D5C2C51",
            "ns": "PED",
            "aliases": ["0x600048C60D5C2C51"],
            "jhash": "0x0688DE64",
            "manualHash": true
        },
        "0xCC6E3B6BB69501F1": {
            "name": "_DOES_RELATIONSHIP_GROUP_EXIST",
            "params": [
                {
                    "name": "groupHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCC6E3B6BB69501F1",
            "ns": "PED",
            "aliases": ["0xCC6E3B6BB69501F1"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x16E42E800B472221": {
            "name": "FORCE_PED_TO_OPEN_PARACHUTE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x16E42E800B472221",
            "ns": "PED",
            "jhash": "0xA819680B",
            "manualHash": true
        },
        "0x2D05CED3A38D0F3A": {
            "name": "EXPLODE_PED_HEAD",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to lethally injure."
                },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "The weapon to attribute the damage to."
                }
            ],
            "results": "void",
            "description": "Applies lethal damage (FLT_MAX) to the `SKEL_Head` bone of the specified ped using the weapon passed, leading to the\nped's untimely demise.\n\nThe naming of the native is a legacy leftover (formerly EXPLODE_CHAR_HEAD in GTA3) as in the early 3D GTA games, lethal\ndamage to a ped head would 'explode' it.",
            "examples": [],
            "hash": "0x2D05CED3A38D0F3A",
            "ns": "PED",
            "jhash": "0x05CC1380",
            "manualHash": true
        },
        "0x4B805E6046EE9E47": {
            "name": "GET_ANIM_INITIAL_OFFSET_ROTATION",
            "params": [
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "int" }
            ],
            "results": "Vector3",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x4B805E6046EE9E47",
            "ns": "PED",
            "jhash": "0x5F7789E6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBE22B26DD764C040": {
            "name": "GET_ANIM_INITIAL_OFFSET_POSITION",
            "params": [
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "xRot", "type": "float" },
                { "name": "yRot", "type": "float" },
                { "name": "zRot", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "int" }
            ],
            "results": "Vector3",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0xBE22B26DD764C040",
            "ns": "PED",
            "jhash": "0xC59D4268",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCD5003B097200F36": {
            "name": "GET_DEAD_PED_PICKUP_COORDS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xCD5003B097200F36",
            "ns": "PED",
            "jhash": "0x129F9DC1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFF287323B0E2C69A": {
            "name": "_FREEZE_PED_CAMERA_ROTATION",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFF287323B0E2C69A",
            "ns": "PED",
            "aliases": ["0xFF287323B0E2C69A"],
            "jhash": "0x290421BE",
            "manualHash": true
        },
        "0x2208438012482A1A": {
            "name": "FORCE_PED_AI_AND_ANIMATION_UPDATE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2208438012482A1A",
            "ns": "PED",
            "aliases": ["0x2208438012482A1A"],
            "jhash": "0x187B9070",
            "manualHash": true
        },
        "0x52DFF8A10508090A": {
            "name": "GET_COMBAT_FLOAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "float",
            "description": "```\np0: Ped Handle  \np1: int i | 0 <= i <= 27  \np1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:  \n<BlindFireChance value=\"0.1\"/>  \n<WeaponShootRateModifier value=\"1.0\"/>  \n<TimeBetweenBurstsInCover value=\"1.25\"/>  \n<BurstDurationInCover value=\"2.0\"/>  \n<TimeBetweenPeeks value=\"10.0\"/>  \n<WeaponAccuracy value=\"0.18\"/>  \n<FightProficiency value=\"0.8\"/>  \n<StrafeWhenMovingChance value=\"1.0\"/>  \n<WalkWhenStrafingChance value=\"0.0\"/>  \n<AttackWindowDistanceForCover value=\"55.0\"/>  \n<TimeToInvalidateInjuredTarget value=\"9.0\"/>  \n<TriggerChargeTime_Near value=\"4.0\"/>  \n<TriggerChargeTime_Far value=\"10.0\"/>  \n-------------Confirmed by editing combatbehavior.meta:  \np1:  \n0=BlindFireChance  \n1=BurstDurationInCover  \n3=TimeBetweenBurstsInCover  \n4=TimeBetweenPeeks  \n5=StrafeWhenMovingChance  \n8=WalkWhenStrafingChance  \n11=AttackWindowDistanceForCover  \n12=TimeToInvalidateInjuredTarget  \n16=OptimalCoverDistance  \n```",
            "examples": [],
            "hash": "0x52DFF8A10508090A",
            "ns": "PED",
            "jhash": "0x511D7EF8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x18A3E9EE1297FD39": {
            "name": "GET_MELEE_TARGET_FOR_PED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Ped",
            "description": "",
            "examples": [],
            "hash": "0x18A3E9EE1297FD39",
            "ns": "PED",
            "jhash": "0xAFEC26A4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE7E11B8DCBED1058": {
            "name": "GET_MOUNT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Ped",
            "description": "```\nFunction just returns 0  \nvoid __fastcall ped__get_mount(NativeContext *a1)  \n{  \n  NativeContext *v1; // rbx@1  \n  v1 = a1;  \n  GetAddressOfPedFromScriptHandle(a1->Args->Arg1);  \n  v1->Returns->Item1= 0;  \n}  \n```",
            "examples": [],
            "hash": "0xE7E11B8DCBED1058",
            "ns": "PED",
            "jhash": "0xDD31EC4E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF28965D04F570DCA": {
            "name": "FORCE_PED_MOTION_STATE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "motionStateHash", "type": "Hash" },
                { "name": "p2", "type": "BOOL" },
                {
                    "name": "p3",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nSome motionstate hashes are  \n0xec17e58 (standing idle), 0xbac0f10b (nothing?), 0x3f67c6af (aiming with pistol 2-h), 0x422d7a25 (stealth), 0xbd8817db, 0x916e828c  \nand those for the strings  \n\"motionstate_idle\", \"motionstate_walk\", \"motionstate_run\", \"motionstate_actionmode_idle\", and \"motionstate_actionmode_walk\".  \nRegarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in the scripts. p4 is very rarely something other than 0.  \n [31/03/2017] ins1de :  \n        enum MotionState  \n        {  \n            StopRunning = -530524,  \n            StopWalking = -668482597,  \n            Idle = 247561816, // 1, 1, 0  \n            Idl2 = -1871534317,  \n            SkyDive =-1161760501, // 0, 1, 0  \n            Stealth = 1110276645,  \n            Sprint = -1115154469,  \n            Swim = -1855028596,  \n            Unknown1 = 1063765679,  \n            Unknown2 = -633298724,  \n        }  \n```",
            "examples": [],
            "hash": "0xF28965D04F570DCA",
            "ns": "PED",
            "jhash": "0x164DDEFF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8DE69FE35CA09A45": {
            "name": "GET_GROUP_SIZE",
            "params": [
                { "name": "groupID", "type": "int" },
                { "name": "unknown", "type": "Any*" },
                { "name": "sizeInMembers", "type": "int*" }
            ],
            "results": "void",
            "description": "```\np1 may be a BOOL representing whether or not the group even exists  \n```",
            "examples": [],
            "hash": "0x8DE69FE35CA09A45",
            "ns": "PED",
            "jhash": "0xF7E1A691",
            "manualHash": true
        },
        "0xA6E7F1CEB523E171": {
            "name": "GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "propId",
                    "type": "int",
                    "description": "The prop id you want to get the texture variations of. Refer to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id of the prop you want to get the texture variations of. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)."
                }
            ],
            "results": "int",
            "description": "```\nNeed to check behavior when drawableId = -1\n```",
            "examples": [],
            "hash": "0xA6E7F1CEB523E171",
            "ns": "PED",
            "jhash": "0x4892B882",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5486A79D9FBD342D": {
            "name": "GET_JACK_TARGET",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Ped",
            "description": "",
            "examples": [],
            "hash": "0x5486A79D9FBD342D",
            "ns": "PED",
            "jhash": "0x1D196361",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD1F7CA1535D22818": {
            "name": "_GET_NUM_MAKEUP_COLORS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xD1F7CA1535D22818",
            "ns": "PED",
            "aliases": ["0xD1F7CA1535D22818"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x27561561732A7842": {
            "name": "GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component id you want to get the drawable variatons of. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x27561561732A7842",
            "ns": "PED",
            "jhash": "0x9754C27D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9483AF821605B1D8": {
            "name": "GET_PED_ARMOUR",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9483AF821605B1D8",
            "ns": "PED",
            "jhash": "0x2CE311A7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC33AB876A77F8164": {
            "name": "GET_CLOSEST_PED",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" },
                { "name": "outPed", "type": "Ped*" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "pedType", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nGets the closest ped in a radius.  \nPed Types:  \nAny ped = -1  \nPlayer = 1  \nMale = 4   \nFemale = 5   \nCop = 6  \nHuman = 26  \nSWAT = 27   \nAnimal = 28  \nArmy = 29  \n------------------  \nP4 P5 P7 P8  \n1  0  x  x  = return nearest walking Ped  \n1  x  0  x  = return nearest walking Ped  \nx  1  1  x  = return Ped you are using  \n0  0  x  x  = no effect  \n0  x  0  x  = no effect  \nx = can be 1 or 0. Does not have any obvious changes.  \nThis function does not return ped who is:  \n1. Standing still  \n2. Driving  \n3. Fleeing  \n4. Attacking  \nThis function only work if the ped is:  \n1. walking normally.  \n2. waiting to cross a road.  \nNote: PED::GET_PED_NEARBY_PEDS works for more peds.  \n```",
            "examples": [],
            "hash": "0xC33AB876A77F8164",
            "ns": "PED",
            "jhash": "0x8F6C1F55",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8F7156A3142A6BAD": {
            "name": "GET_NUMBER_OF_PED_TEXTURE_VARIATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component id you want to get the texture variations of. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id of the component you want to get the texture variations of. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)."
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x8F7156A3142A6BAD",
            "ns": "PED",
            "jhash": "0x83D9FBE7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x51455483CF23ED97": {
            "name": "GET_PED_AS_GROUP_MEMBER",
            "params": [
                { "name": "groupID", "type": "int" },
                { "name": "memberNumber", "type": "int" }
            ],
            "results": "Ped",
            "description": "```\nfrom fm_mission_controller.c4 (variable names changed for clarity):  \nint groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());  \nPED::GET_GROUP_SIZE(group, &unused, &groupSize);  \nif (groupSize >= 1) {  \n. . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {  \n. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);  \n. . . . . . . . //and so on  \n```",
            "examples": [],
            "hash": "0x51455483CF23ED97",
            "ns": "PED",
            "jhash": "0x9AA3CC8C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE5C0CF872C2AD150": {
            "name": "_GET_NUM_HAIR_COLORS",
            "params": [],
            "results": "int",
            "description": "```\nUsed for freemode (online) characters.  \n```",
            "examples": [],
            "hash": "0xE5C0CF872C2AD150",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDEA92412FCAEB3F5": {
            "name": "GET_PED_COMBAT_MOVEMENT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xDEA92412FCAEB3F5",
            "ns": "PED",
            "jhash": "0xF3E7730E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x37F4AD56ECBC0CD6": {
            "name": "GET_PED_ACCURACY",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x37F4AD56ECBC0CD6",
            "ns": "PED",
            "jhash": "0x0A2A0AA0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5CCE68DBD5FE93EC": {
            "name": "GET_PED_AS_GROUP_LEADER",
            "params": [{ "name": "groupID", "type": "int" }],
            "results": "Ped",
            "description": "",
            "examples": [],
            "hash": "0x5CCE68DBD5FE93EC",
            "ns": "PED",
            "aliases": ["_GET_PED_AS_GROUP_LEADER"],
            "jhash": "0x52873C6A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5FAF9754E789FB47": {
            "name": "GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "propId",
                    "type": "int",
                    "description": "The prop id you want to get the drawable variations of. Refer to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5FAF9754E789FB47",
            "ns": "PED",
            "jhash": "0xC9780B95",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x16FFE42AB2D2DC59": {
            "name": "GET_PED_CAUSE_OF_DEATH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Hash",
            "description": "```\nReturns the hash of the weapon/model/object that killed the ped.  \n```",
            "examples": [],
            "hash": "0x16FFE42AB2D2DC59",
            "ns": "PED",
            "jhash": "0x63458C27",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF60165E1D2C5370B": {
            "name": "_GET_PED_CURRENT_MOVEMENT_SPEED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "speedX", "type": "float*" },
                { "name": "speedY", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF60165E1D2C5370B",
            "ns": "PED",
            "aliases": ["0xF60165E1D2C5370B"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF9D9F7F2DB8E2FA0": {
            "name": "GET_PED_COMBAT_RANGE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF9D9F7F2DB8E2FA0",
            "ns": "PED",
            "jhash": "0x9B9B7163",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3F428D08BE5AAE31": {
            "name": "GET_PED_BONE_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "boneId", "type": "int" }
            ],
            "results": "int",
            "description": "```\nenum ePedBoneId : uint16_t\n{\n    SKEL_ROOT = 0x0,\n    SKEL_Pelvis = 0x2E28,\n    SKEL_L_Thigh = 0xE39F,\n    SKEL_L_Calf = 0xF9BB,\n    SKEL_L_Foot = 0x3779,\n    SKEL_L_Toe0 = 0x83C,\n    EO_L_Foot = 0x84C5,\n    EO_L_Toe = 0x68BD,\n    IK_L_Foot = 0xFEDD,\n    PH_L_Foot = 0xE175,\n    MH_L_Knee = 0xB3FE,\n    SKEL_R_Thigh = 0xCA72,\n    SKEL_R_Calf = 0x9000,\n    SKEL_R_Foot = 0xCC4D,\n    SKEL_R_Toe0 = 0x512D,\n    EO_R_Foot = 0x1096,\n    EO_R_Toe = 0x7163,\n    IK_R_Foot = 0x8AAE,\n    PH_R_Foot = 0x60E6,\n    MH_R_Knee = 0x3FCF,\n    RB_L_ThighRoll = 0x5C57,\n    RB_R_ThighRoll = 0x192A,\n    SKEL_Spine_Root = 0xE0FD,\n    SKEL_Spine0 = 0x5C01,\n    SKEL_Spine1 = 0x60F0,\n    SKEL_Spine2 = 0x60F1,\n    SKEL_Spine3 = 0x60F2,\n    SKEL_L_Clavicle = 0xFCD9,\n    SKEL_L_UpperArm = 0xB1C5,\n    SKEL_L_Forearm = 0xEEEB,\n    SKEL_L_Hand = 0x49D9,\n    SKEL_L_Finger00 = 0x67F2,\n    SKEL_L_Finger01 = 0xFF9,\n    SKEL_L_Finger02 = 0xFFA,\n    SKEL_L_Finger10 = 0x67F3,\n    SKEL_L_Finger11 = 0x1049,\n    SKEL_L_Finger12 = 0x104A,\n    SKEL_L_Finger20 = 0x67F4,\n    SKEL_L_Finger21 = 0x1059,\n    SKEL_L_Finger22 = 0x105A,\n    SKEL_L_Finger30 = 0x67F5,\n    SKEL_L_Finger31 = 0x1029,\n    SKEL_L_Finger32 = 0x102A,\n    SKEL_L_Finger40 = 0x67F6,\n    SKEL_L_Finger41 = 0x1039,\n    SKEL_L_Finger42 = 0x103A,\n    PH_L_Hand = 0xEB95,\n    IK_L_Hand = 0x8CBD,\n    RB_L_ForeArmRoll = 0xEE4F,\n    RB_L_ArmRoll = 0x1470,\n    MH_L_Elbow = 0x58B7,\n    SKEL_R_Clavicle = 0x29D2,\n    SKEL_R_UpperArm = 0x9D4D,\n    SKEL_R_Forearm = 0x6E5C,\n    SKEL_R_Hand = 0xDEAD,\n    SKEL_R_Finger00 = 0xE5F2,\n    SKEL_R_Finger01 = 0xFA10,\n    SKEL_R_Finger02 = 0xFA11,\n    SKEL_R_Finger10 = 0xE5F3,\n    SKEL_R_Finger11 = 0xFA60,\n    SKEL_R_Finger12 = 0xFA61,\n    SKEL_R_Finger20 = 0xE5F4,\n    SKEL_R_Finger21 = 0xFA70,\n    SKEL_R_Finger22 = 0xFA71,\n    SKEL_R_Finger30 = 0xE5F5,\n    SKEL_R_Finger31 = 0xFA40,\n    SKEL_R_Finger32 = 0xFA41,\n    SKEL_R_Finger40 = 0xE5F6,\n    SKEL_R_Finger41 = 0xFA50,\n    SKEL_R_Finger42 = 0xFA51,\n    PH_R_Hand = 0x6F06,\n    IK_R_Hand = 0x188E,\n    RB_R_ForeArmRoll = 0xAB22,\n    RB_R_ArmRoll = 0x90FF,\n    MH_R_Elbow = 0xBB0,\n    SKEL_Neck_1 = 0x9995,\n    SKEL_Head = 0x796E,\n    IK_Head = 0x322C,\n    FACIAL_facialRoot = 0xFE2C,\n    FB_L_Brow_Out_000 = 0xE3DB,\n    FB_L_Lid_Upper_000 = 0xB2B6,\n    FB_L_Eye_000 = 0x62AC,\n    FB_L_CheekBone_000 = 0x542E,\n    FB_L_Lip_Corner_000 = 0x74AC,\n    FB_R_Lid_Upper_000 = 0xAA10,\n    FB_R_Eye_000 = 0x6B52,\n    FB_R_CheekBone_000 = 0x4B88,\n    FB_R_Brow_Out_000 = 0x54C,\n    FB_R_Lip_Corner_000 = 0x2BA6,\n    FB_Brow_Centre_000 = 0x9149,\n    FB_UpperLipRoot_000 = 0x4ED2,\n    FB_UpperLip_000 = 0xF18F,\n    FB_L_Lip_Top_000 = 0x4F37,\n    FB_R_Lip_Top_000 = 0x4537,\n    FB_Jaw_000 = 0xB4A0,\n    FB_LowerLipRoot_000 = 0x4324,\n    FB_LowerLip_000 = 0x508F,\n    FB_L_Lip_Bot_000 = 0xB93B,\n    FB_R_Lip_Bot_000 = 0xC33B,\n    FB_Tongue_000 = 0xB987,\n    RB_Neck_1 = 0x8B93,\n    SPR_L_Breast = 0xFC8E,\n    SPR_R_Breast = 0x885F,\n    IK_Root = 0xDD1C,\n    SKEL_Neck_2 = 0x5FD4,\n    SKEL_Pelvis1 = 0xD003,\n    SKEL_PelvisRoot = 0x45FC,\n    SKEL_SADDLE = 0x9524,\n    MH_L_CalfBack = 0x1013,\n    MH_L_ThighBack = 0x600D,\n    SM_L_Skirt = 0xC419,\n    MH_R_CalfBack = 0xB013,\n    MH_R_ThighBack = 0x51A3,\n    SM_R_Skirt = 0x7712,\n    SM_M_BackSkirtRoll = 0xDBB,\n    SM_L_BackSkirtRoll = 0x40B2,\n    SM_R_BackSkirtRoll = 0xC141,\n    SM_M_FrontSkirtRoll = 0xCDBB,\n    SM_L_FrontSkirtRoll = 0x9B69,\n    SM_R_FrontSkirtRoll = 0x86F1,\n    SM_CockNBalls_ROOT = 0xC67D,\n    SM_CockNBalls = 0x9D34,\n    MH_L_Finger00 = 0x8C63,\n    MH_L_FingerBulge00 = 0x5FB8,\n    MH_L_Finger10 = 0x8C53,\n    MH_L_FingerTop00 = 0xA244,\n    MH_L_HandSide = 0xC78A,\n    MH_Watch = 0x2738,\n    MH_L_Sleeve = 0x933C,\n    MH_R_Finger00 = 0x2C63,\n    MH_R_FingerBulge00 = 0x69B8,\n    MH_R_Finger10 = 0x2C53,\n    MH_R_FingerTop00 = 0xEF4B,\n    MH_R_HandSide = 0x68FB,\n    MH_R_Sleeve = 0x92DC,\n    FACIAL_jaw = 0xB21,\n    FACIAL_underChin = 0x8A95,\n    FACIAL_L_underChin = 0x234E,\n    FACIAL_chin = 0xB578,\n    FACIAL_chinSkinBottom = 0x98BC,\n    FACIAL_L_chinSkinBottom = 0x3E8F,\n    FACIAL_R_chinSkinBottom = 0x9E8F,\n    FACIAL_tongueA = 0x4A7C,\n    FACIAL_tongueB = 0x4A7D,\n    FACIAL_tongueC = 0x4A7E,\n    FACIAL_tongueD = 0x4A7F,\n    FACIAL_tongueE = 0x4A80,\n    FACIAL_L_tongueE = 0x35F2,\n    FACIAL_R_tongueE = 0x2FF2,\n    FACIAL_L_tongueD = 0x35F1,\n    FACIAL_R_tongueD = 0x2FF1,\n    FACIAL_L_tongueC = 0x35F0,\n    FACIAL_R_tongueC = 0x2FF0,\n    FACIAL_L_tongueB = 0x35EF,\n    FACIAL_R_tongueB = 0x2FEF,\n    FACIAL_L_tongueA = 0x35EE,\n    FACIAL_R_tongueA = 0x2FEE,\n    FACIAL_chinSkinTop = 0x7226,\n    FACIAL_L_chinSkinTop = 0x3EB3,\n    FACIAL_chinSkinMid = 0x899A,\n    FACIAL_L_chinSkinMid = 0x4427,\n    FACIAL_L_chinSide = 0x4A5E,\n    FACIAL_R_chinSkinMid = 0xF5AF,\n    FACIAL_R_chinSkinTop = 0xF03B,\n    FACIAL_R_chinSide = 0xAA5E,\n    FACIAL_R_underChin = 0x2BF4,\n    FACIAL_L_lipLowerSDK = 0xB9E1,\n    FACIAL_L_lipLowerAnalog = 0x244A,\n    FACIAL_L_lipLowerThicknessV = 0xC749,\n    FACIAL_L_lipLowerThicknessH = 0xC67B,\n    FACIAL_lipLowerSDK = 0x7285,\n    FACIAL_lipLowerAnalog = 0xD97B,\n    FACIAL_lipLowerThicknessV = 0xC5BB,\n    FACIAL_lipLowerThicknessH = 0xC5ED,\n    FACIAL_R_lipLowerSDK = 0xA034,\n    FACIAL_R_lipLowerAnalog = 0xC2D9,\n    FACIAL_R_lipLowerThicknessV = 0xC6E9,\n    FACIAL_R_lipLowerThicknessH = 0xC6DB,\n    FACIAL_nose = 0x20F1,\n    FACIAL_L_nostril = 0x7322,\n    FACIAL_L_nostrilThickness = 0xC15F,\n    FACIAL_noseLower = 0xE05A,\n    FACIAL_L_noseLowerThickness = 0x79D5,\n    FACIAL_R_noseLowerThickness = 0x7975,\n    FACIAL_noseTip = 0x6A60,\n    FACIAL_R_nostril = 0x7922,\n    FACIAL_R_nostrilThickness = 0x36FF,\n    FACIAL_noseUpper = 0xA04F,\n    FACIAL_L_noseUpper = 0x1FB8,\n    FACIAL_noseBridge = 0x9BA3,\n    FACIAL_L_nasolabialFurrow = 0x5ACA,\n    FACIAL_L_nasolabialBulge = 0xCD78,\n    FACIAL_L_cheekLower = 0x6907,\n    FACIAL_L_cheekLowerBulge1 = 0xE3FB,\n    FACIAL_L_cheekLowerBulge2 = 0xE3FC,\n    FACIAL_L_cheekInner = 0xE7AB,\n    FACIAL_L_cheekOuter = 0x8161,\n    FACIAL_L_eyesackLower = 0x771B,\n    FACIAL_L_eyeball = 0x1744,\n    FACIAL_L_eyelidLower = 0x998C,\n    FACIAL_L_eyelidLowerOuterSDK = 0xFE4C,\n    FACIAL_L_eyelidLowerOuterAnalog = 0xB9AA,\n    FACIAL_L_eyelashLowerOuter = 0xD7F6,\n    FACIAL_L_eyelidLowerInnerSDK = 0xF151,\n    FACIAL_L_eyelidLowerInnerAnalog = 0x8242,\n    FACIAL_L_eyelashLowerInner = 0x4CCF,\n    FACIAL_L_eyelidUpper = 0x97C1,\n    FACIAL_L_eyelidUpperOuterSDK = 0xAF15,\n    FACIAL_L_eyelidUpperOuterAnalog = 0x67FA,\n    FACIAL_L_eyelashUpperOuter = 0x27B7,\n    FACIAL_L_eyelidUpperInnerSDK = 0xD341,\n    FACIAL_L_eyelidUpperInnerAnalog = 0xF092,\n    FACIAL_L_eyelashUpperInner = 0x9B1F,\n    FACIAL_L_eyesackUpperOuterBulge = 0xA559,\n    FACIAL_L_eyesackUpperInnerBulge = 0x2F2A,\n    FACIAL_L_eyesackUpperOuterFurrow = 0xC597,\n    FACIAL_L_eyesackUpperInnerFurrow = 0x52A7,\n    FACIAL_forehead = 0x9218,\n    FACIAL_L_foreheadInner = 0x843,\n    FACIAL_L_foreheadInnerBulge = 0x767C,\n    FACIAL_L_foreheadOuter = 0x8DCB,\n    FACIAL_skull = 0x4221,\n    FACIAL_foreheadUpper = 0xF7D6,\n    FACIAL_L_foreheadUpperInner = 0xCF13,\n    FACIAL_L_foreheadUpperOuter = 0x509B,\n    FACIAL_R_foreheadUpperInner = 0xCEF3,\n    FACIAL_R_foreheadUpperOuter = 0x507B,\n    FACIAL_L_temple = 0xAF79,\n    FACIAL_L_ear = 0x19DD,\n    FACIAL_L_earLower = 0x6031,\n    FACIAL_L_masseter = 0x2810,\n    FACIAL_L_jawRecess = 0x9C7A,\n    FACIAL_L_cheekOuterSkin = 0x14A5,\n    FACIAL_R_cheekLower = 0xF367,\n    FACIAL_R_cheekLowerBulge1 = 0x599B,\n    FACIAL_R_cheekLowerBulge2 = 0x599C,\n    FACIAL_R_masseter = 0x810,\n    FACIAL_R_jawRecess = 0x93D4,\n    FACIAL_R_ear = 0x1137,\n    FACIAL_R_earLower = 0x8031,\n    FACIAL_R_eyesackLower = 0x777B,\n    FACIAL_R_nasolabialBulge = 0xD61E,\n    FACIAL_R_cheekOuter = 0xD32,\n    FACIAL_R_cheekInner = 0x737C,\n    FACIAL_R_noseUpper = 0x1CD6,\n    FACIAL_R_foreheadInner = 0xE43,\n    FACIAL_R_foreheadInnerBulge = 0x769C,\n    FACIAL_R_foreheadOuter = 0x8FCB,\n    FACIAL_R_cheekOuterSkin = 0xB334,\n    FACIAL_R_eyesackUpperInnerFurrow = 0x9FAE,\n    FACIAL_R_eyesackUpperOuterFurrow = 0x140F,\n    FACIAL_R_eyesackUpperInnerBulge = 0xA359,\n    FACIAL_R_eyesackUpperOuterBulge = 0x1AF9,\n    FACIAL_R_nasolabialFurrow = 0x2CAA,\n    FACIAL_R_temple = 0xAF19,\n    FACIAL_R_eyeball = 0x1944,\n    FACIAL_R_eyelidUpper = 0x7E14,\n    FACIAL_R_eyelidUpperOuterSDK = 0xB115,\n    FACIAL_R_eyelidUpperOuterAnalog = 0xF25A,\n    FACIAL_R_eyelashUpperOuter = 0xE0A,\n    FACIAL_R_eyelidUpperInnerSDK = 0xD541,\n    FACIAL_R_eyelidUpperInnerAnalog = 0x7C63,\n    FACIAL_R_eyelashUpperInner = 0x8172,\n    FACIAL_R_eyelidLower = 0x7FDF,\n    FACIAL_R_eyelidLowerOuterSDK = 0x1BD,\n    FACIAL_R_eyelidLowerOuterAnalog = 0x457B,\n    FACIAL_R_eyelashLowerOuter = 0xBE49,\n    FACIAL_R_eyelidLowerInnerSDK = 0xF351,\n    FACIAL_R_eyelidLowerInnerAnalog = 0xE13,\n    FACIAL_R_eyelashLowerInner = 0x3322,\n    FACIAL_L_lipUpperSDK = 0x8F30,\n    FACIAL_L_lipUpperAnalog = 0xB1CF,\n    FACIAL_L_lipUpperThicknessH = 0x37CE,\n    FACIAL_L_lipUpperThicknessV = 0x38BC,\n    FACIAL_lipUpperSDK = 0x1774,\n    FACIAL_lipUpperAnalog = 0xE064,\n    FACIAL_lipUpperThicknessH = 0x7993,\n    FACIAL_lipUpperThicknessV = 0x7981,\n    FACIAL_L_lipCornerSDK = 0xB1C,\n    FACIAL_L_lipCornerAnalog = 0xE568,\n    FACIAL_L_lipCornerThicknessUpper = 0x7BC,\n    FACIAL_L_lipCornerThicknessLower = 0xDD42,\n    FACIAL_R_lipUpperSDK = 0x7583,\n    FACIAL_R_lipUpperAnalog = 0x51CF,\n    FACIAL_R_lipUpperThicknessH = 0x382E,\n    FACIAL_R_lipUpperThicknessV = 0x385C,\n    FACIAL_R_lipCornerSDK = 0xB3C,\n    FACIAL_R_lipCornerAnalog = 0xEE0E,\n    FACIAL_R_lipCornerThicknessUpper = 0x54C3,\n    FACIAL_R_lipCornerThicknessLower = 0x2BBA,\n    MH_MulletRoot = 0x3E73,\n    MH_MulletScaler = 0xA1C2,\n    MH_Hair_Scale = 0xC664,\n    MH_Hair_Crown = 0x1675,\n    SM_Torch = 0x8D6,\n    FX_Light = 0x8959,\n    FX_Light_Scale = 0x5038,\n    FX_Light_Switch = 0xE18E,\n    BagRoot = 0xAD09,\n    BagPivotROOT = 0xB836,\n    BagPivot = 0x4D11,\n    BagBody = 0xAB6D,\n    BagBone_R = 0x937,\n    BagBone_L = 0x991,\n    SM_LifeSaver_Front = 0x9420,\n    SM_R_Pouches_ROOT = 0x2962,\n    SM_R_Pouches = 0x4141,\n    SM_L_Pouches_ROOT = 0x2A02,\n    SM_L_Pouches = 0x4B41,\n    SM_Suit_Back_Flapper = 0xDA2D,\n    SPR_CopRadio = 0x8245,\n    SM_LifeSaver_Back = 0x2127,\n    MH_BlushSlider = 0xA0CE,\n    SKEL_Tail_01 = 0x347,\n    SKEL_Tail_02 = 0x348,\n    MH_L_Concertina_B = 0xC988,\n    MH_L_Concertina_A = 0xC987,\n    MH_R_Concertina_B = 0xC8E8,\n    MH_R_Concertina_A = 0xC8E7,\n    MH_L_ShoulderBladeRoot = 0x8711,\n    MH_L_ShoulderBlade = 0x4EAF,\n    MH_R_ShoulderBladeRoot = 0x3A0A,\n    MH_R_ShoulderBlade = 0x54AF,\n    FB_R_Ear_000 = 0x6CDF,\n    SPR_R_Ear = 0x63B6,\n    FB_L_Ear_000 = 0x6439,\n    SPR_L_Ear = 0x5B10,\n    FB_TongueA_000 = 0x4206,\n    FB_TongueB_000 = 0x4207,\n    FB_TongueC_000 = 0x4208,\n    SKEL_L_Toe1 = 0x1D6B,\n    SKEL_R_Toe1 = 0xB23F,\n    SKEL_Tail_03 = 0x349,\n    SKEL_Tail_04 = 0x34A,\n    SKEL_Tail_05 = 0x34B,\n    SPR_Gonads_ROOT = 0xBFDE,\n    SPR_Gonads = 0x1C00,\n    FB_L_Brow_Out_001 = 0xE3DB,\n    FB_L_Lid_Upper_001 = 0xB2B6,\n    FB_L_Eye_001 = 0x62AC,\n    FB_L_CheekBone_001 = 0x542E,\n    FB_L_Lip_Corner_001 = 0x74AC,\n    FB_R_Lid_Upper_001 = 0xAA10,\n    FB_R_Eye_001 = 0x6B52,\n    FB_R_CheekBone_001 = 0x4B88,\n    FB_R_Brow_Out_001 = 0x54C,\n    FB_R_Lip_Corner_001 = 0x2BA6,\n    FB_Brow_Centre_001 = 0x9149,\n    FB_UpperLipRoot_001 = 0x4ED2,\n    FB_UpperLip_001 = 0xF18F,\n    FB_L_Lip_Top_001 = 0x4F37,\n    FB_R_Lip_Top_001 = 0x4537,\n    FB_Jaw_001 = 0xB4A0,\n    FB_LowerLipRoot_001 = 0x4324,\n    FB_LowerLip_001 = 0x508F,\n    FB_L_Lip_Bot_001 = 0xB93B,\n    FB_R_Lip_Bot_001 = 0xC33B,\n    FB_Tongue_001 = 0xB987\n}; \n```",
            "examples": [],
            "hash": "0x3F428D08BE5AAE31",
            "ns": "PED",
            "jhash": "0x259C6BA2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF6AA118530443FD2": {
            "name": "GET_PED_ALERTNESS",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "```\nReturns the ped's alertness (0-3).  \nValues :   \n0 : Neutral  \n1 : Heard something (gun shot, hit, etc)  \n2 : Knows (the origin of the event)  \n3 : Fully alerted (is facing the event?)  \nIf the Ped does not exist, returns -1.  \n```",
            "examples": [],
            "hash": "0xF6AA118530443FD2",
            "ns": "PED",
            "jhash": "0xF83E4DAF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x17C07FC640E86B4E": {
            "name": "GET_PED_BONE_COORDS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "boneId", "type": "int" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" }
            ],
            "results": "Vector3",
            "description": "```\nGets the position of the specified bone of the specified ped.  \nped: The ped to get the position of a bone from.  \nboneId: The ID of the bone to get the position from. This is NOT the index.  \noffsetX: The X-component of the offset to add to the position relative to the bone's rotation.  \noffsetY: The Y-component of the offset to add to the position relative to the bone's rotation.  \noffsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.  \n```",
            "examples": [],
            "hash": "0x17C07FC640E86B4E",
            "ns": "PED",
            "jhash": "0x4579CAB1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3C06B8786DD94CD1": {
            "name": "GET_PED_DEFENSIVE_AREA_POSITION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x3C06B8786DD94CD1",
            "ns": "PED",
            "jhash": "0xCB65198D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7EE53118C892B513": {
            "name": "GET_PED_CONFIG_FLAG",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "flagId", "type": "int" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "See [`SET_PED_CONFIG_FLAG`](#\\_0x1913FE4CBF41C463).",
            "examples": [],
            "hash": "0x7EE53118C892B513",
            "ns": "PED",
            "jhash": "0xABE98267",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1461B28A06717D68": {
            "name": "_GET_PED_EMISSIVE_INTENSITY",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to get the glow intensity from."
                }
            ],
            "results": "float",
            "description": "Use [`SetPedIlluminatedClothingGlowIntensity`](#\\_0x4E90D746056E273D) to set the illuminated clothing glow intensity for a specific ped.",
            "examples": [],
            "hash": "0x1461B28A06717D68",
            "ns": "PED",
            "aliases": [
                "0x1461B28A06717D68",
                "_GET_PED_ILLUMINATED_CLOTHING_GLOW_INTENSITY"
            ],
            "manualHash": true,
            "resultsDescription": "A float between 0.0 and 1.0 representing the current illuminated clothing glow intensity."
        },
        "0x9FD452BFBE7A7A8B": {
            "name": "GET_PED_DECORATION_ZONE_FROM_HASHES",
            "params": [
                { "name": "collection", "type": "Hash" },
                { "name": "overlay", "type": "Hash" }
            ],
            "results": "int",
            "description": "```\nReturns the zoneID for the overlay if it is a member of collection.\nenum ePedDecorationZone\n{\n\tZONE_TORSO = 0,\n\tZONE_HEAD = 1,\n\tZONE_LEFT_ARM = 2,\n\tZONE_RIGHT_ARM = 3,\n\tZONE_LEFT_LEG = 4,\n\tZONE_RIGHT_LEG = 5,\n\tZONE_UNKNOWN = 6,\n\tZONE_NONE = 7\n};\n```",
            "examples": [],
            "hash": "0x9FD452BFBE7A7A8B",
            "ns": "PED",
            "aliases": ["_GET_TATTOO_ZONE"],
            "jhash": "0x3543019E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x71EAB450D86954A1": {
            "name": "GET_PED_DECORATIONS_STATE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x71EAB450D86954A1",
            "ns": "PED",
            "aliases": ["0x71EAB450D86954A1"],
            "jhash": "0x47187F7F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x67F3780DD425D4FC": {
            "name": "GET_PED_DRAWABLE_VARIATION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "componentId", "type": "int" }
            ],
            "results": "int",
            "description": "```\nIds\n0 - Head\n1 - Beard\n2 - Hair\n3 - Torso\n4 - Legs\n5 - Hands\n6 - Foot\n7 - Scarfs/Neck Accessories\n8 - Accessories 1\n9 - Accessories 2\n10- Decals\n11 - Auxiliary parts for torso\n```",
            "examples": [],
            "hash": "0x67F3780DD425D4FC",
            "ns": "PED",
            "jhash": "0x29850FE2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x65671A4FB8218930": {
            "name": "_GET_PED_DIES_IN_WATER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x65671A4FB8218930",
            "ns": "PED",
            "manualHash": true
        },
        "0xE0AF41401ADF87E3": {
            "name": "GET_PED_EXTRACTED_DISPLACEMENT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "worldSpace", "type": "BOOL" }
            ],
            "results": "Vector3",
            "description": "```\nGets the offset the specified ped has moved since the previous tick.  \nIf worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.  \nIf worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.  \n```",
            "examples": [],
            "hash": "0xE0AF41401ADF87E3",
            "ns": "PED",
            "jhash": "0x5231F901",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9C14D30395A51A3C": {
            "name": "GET_PED_ENVEFF_SCALE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x9C14D30395A51A3C",
            "ns": "PED",
            "jhash": "0xA3421E39",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4852FC386E2E1BB5": {
            "name": "_GET_PED_HAIR_RGB_COLOR",
            "params": [
                {
                    "name": "hairColorIndex",
                    "type": "int",
                    "description": "The hair color index. Value between 0-63 (inclusive)."
                },
                {
                    "name": "outR",
                    "type": "int*",
                    "description": "Output red value."
                },
                {
                    "name": "outG",
                    "type": "int*",
                    "description": "Output green value."
                },
                {
                    "name": "outB",
                    "type": "int*",
                    "description": "Output blue value."
                }
            ],
            "results": "void",
            "description": "Input: Haircolor index, value between 0 and 63 (inclusive).\nOutput: RGB values for the haircolor specified in the input.\n\nThis is used with the hair color swatches scaleform.\n\nUse [`_0x013E5CFC38CD5387`](#\\_0x013E5CFC38CD5387) to get the makeup colors.",
            "examples": [],
            "hash": "0x4852FC386E2E1BB5",
            "ns": "PED",
            "aliases": ["0x4852FC386E2E1BB5", "_GET_HAIR_RGB_COLOR"],
            "manualHash": true
        },
        "0xF162E133B4E7A675": {
            "name": "GET_PED_GROUP_INDEX",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "```\nReturns the group id of which the specified ped is a member of.  \n```",
            "examples": [],
            "hash": "0xF162E133B4E7A675",
            "ns": "PED",
            "jhash": "0x134E0785",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA656A3BB01BDEA3": {
            "name": "_GET_PED_EVENT_DATA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "eventType", "type": "int" },
                { "name": "outData", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xBA656A3BB01BDEA3",
            "ns": "PED",
            "manualHash": true
        },
        "0x76BBA2CEE66D47E9": {
            "name": "_GET_PED_EYE_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "results": "int",
            "description": "A getter for [`_SET_PED_EYE_COLOR`](#\\_0x50B56988B170AFDF).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local pedEyeColour = N_0x76bba2cee66d47e9(PlayerPedId())\nif pedEyeColour == 7 then\n  print(\"Gray eyes!\")\nend"
                }
            ],
            "hash": "0x76BBA2CEE66D47E9",
            "ns": "PED",
            "aliases": ["0x76BBA2CEE66D47E9"],
            "manualHash": true,
            "resultsDescription": "Returns ped's eye colour, or -1 if fails to get."
        },
        "0x2746BD9D88C5C5D0": {
            "name": "GET_PED_HEAD_BLEND_DATA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "headBlendData", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "```\nThe pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.  \npass this struct in the second parameter   \ntypedef struct  \n{  \n        int shapeFirst, shapeSecond, shapeThird;   \n        int skinFirst, skinSecond, skinThird;   \n\tfloat shapeMix, skinMix, thirdMix;  \n} headBlendData;  \n```",
            "examples": [],
            "hash": "0x2746BD9D88C5C5D0",
            "ns": "PED",
            "aliases": ["_GET_PED_HEAD_BLEND_DATA"],
            "jhash": "0x44E1680C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA60EF3B6461A4D43": {
            "name": "_GET_PED_HEAD_OVERLAY_VALUE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "overlayID", "type": "int" }
            ],
            "results": "int",
            "description": "```\nLikely a char, if that overlay is not set, e.i. \"None\" option, returns 255;\nThis might be the once removed native GET_PED_HEAD_OVERLAY.\n```",
            "examples": [],
            "hash": "0xA60EF3B6461A4D43",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCF1CE768BB43480E": {
            "name": "GET_PED_HEAD_OVERLAY_NUM",
            "params": [{ "name": "overlayID", "type": "int" }],
            "results": "int",
            "description": "```\nUsed with freemode (online) characters.\n```",
            "examples": [],
            "hash": "0xCF1CE768BB43480E",
            "ns": "PED",
            "aliases": ["_GET_NUM_HEAD_OVERLAY_VALUES"],
            "jhash": "0xFF43C18D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x68D353AB88B97E0C": {
            "name": "GET_PED_HEAD_BLEND_FIRST_INDEX",
            "params": [{ "name": "type", "type": "int" }],
            "results": "int",
            "description": "```\nType equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.\nUsed when calling SET_PED_HEAD_BLEND_DATA.\n```",
            "examples": [],
            "hash": "0x68D353AB88B97E0C",
            "ns": "PED",
            "aliases": ["_GET_FIRST_PARENT_ID_FOR_PED_TYPE"],
            "jhash": "0x211DEFEC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5EF37013A6539C9D": {
            "name": "GET_PED_HEAD_BLEND_NUM_HEADS",
            "params": [{ "name": "type", "type": "int" }],
            "results": "int",
            "description": "```\nType equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.  \n```",
            "examples": [],
            "hash": "0x5EF37013A6539C9D",
            "ns": "PED",
            "aliases": ["_GET_NUM_PARENT_PEDS_OF_TYPE"],
            "jhash": "0x095D3BD8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x451294E859ECC018": {
            "name": "GET_PED_HELMET_STORED_HAT_PROP_INDEX",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x451294E859ECC018",
            "ns": "PED",
            "aliases": ["0x451294E859ECC018"],
            "jhash": "0x8A3A3116",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4700A416E8324EF3": {
            "name": "GET_PED_MAX_HEALTH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x4700A416E8324EF3",
            "ns": "PED",
            "jhash": "0xA45B6C8D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D728C1E12BF5518": {
            "name": "GET_PED_HELMET_STORED_HAT_TEX_INDEX",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9D728C1E12BF5518",
            "ns": "PED",
            "aliases": ["0x9D728C1E12BF5518"],
            "jhash": "0x74EB662D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD75960F6BD9EA49C": {
            "name": "GET_PED_LAST_DAMAGE_BONE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "outBone", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD75960F6BD9EA49C",
            "ns": "PED",
            "jhash": "0xAB933841",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE3DD5F2A84B42281": {
            "name": "GET_PED_PALETTE_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component id to get the palette variation from. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xE3DD5F2A84B42281",
            "ns": "PED",
            "jhash": "0xEF1BC082",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8B9F1FC6AE8166C0": {
            "name": "GET_PED_PARACHUTE_LANDING_TYPE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "```\n-1: no landing  \n0: landing on both feet  \n1: stumbling  \n2: rolling  \n3: ragdoll  \n```",
            "examples": [],
            "hash": "0x8B9F1FC6AE8166C0",
            "ns": "PED",
            "jhash": "0x01F3B035",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x013E5CFC38CD5387": {
            "name": "_GET_PED_MAKEUP_RGB_COLOR",
            "params": [
                {
                    "name": "makeupColorIndex",
                    "type": "int",
                    "description": "The hair color index. Value between 0-63 (inclusive)."
                },
                {
                    "name": "outR",
                    "type": "int*",
                    "description": "Output red value."
                },
                {
                    "name": "outG",
                    "type": "int*",
                    "description": "Output green value."
                },
                {
                    "name": "outB",
                    "type": "int*",
                    "description": "Output blue value."
                }
            ],
            "results": "void",
            "description": "Input: Makeup color index, value between 0 and 63 (inclusive).\nOutput: RGB values for the makeup color specified in the input.\n\nThis is used with the makeup color swatches scaleform.\n\nUse [`_0x4852FC386E2E1BB5`](#\\_0x4852FC386E2E1BB5) to get the hair colors.",
            "examples": [],
            "hash": "0x013E5CFC38CD5387",
            "ns": "PED",
            "aliases": ["0x013E5CFC38CD5387", "_GET_MAKEUP_RGB_COLOR"],
            "manualHash": true
        },
        "0x3F69145BBA87BAE7": {
            "name": "GET_PED_MONEY",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x3F69145BBA87BAE7",
            "ns": "PED",
            "jhash": "0xEB3C4C7E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2057EF813397A772": {
            "name": "GET_PED_RAGDOLL_BONE_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "bone", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2057EF813397A772",
            "ns": "PED",
            "jhash": "0x849F0716",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCFF869CBFA210D82": {
            "name": "GET_PED_NEARBY_VEHICLES",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "sizeAndVehs", "type": "int*" }
            ],
            "results": "int",
            "description": "```\nReturns size of array, passed into the second variable.  \nSee below for usage information.  \nThis function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.  \n//Setup the array  \n\tconst int numElements = 10;  \n\tconst int arrSize = numElements * 2 + 2;  \n\tAny veh[arrSize];  \n\t//0 index is the size of the array  \n\tveh[0] = numElements;  \n\tint count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);  \n\tif (veh != NULL)  \n\t{  \n//Simple loop to go through results  \nfor (int i = 0; i < count; i++)  \n{  \n\tint offsettedID = i * 2 + 2;  \n\t//Make sure it exists  \n\tif (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))  \n\t{  \n//Do something  \n\t}  \n}  \n\t}    \nHere's the right way to do it (console and pc):  \npastebin.com/SsFej963  \n```",
            "examples": [],
            "hash": "0xCFF869CBFA210D82",
            "ns": "PED",
            "jhash": "0xCB716F68",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEAF5F7E5AE7C6C9D": {
            "name": "GET_PED_PARACHUTE_TINT_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "outTintIndex", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEAF5F7E5AE7C6C9D",
            "ns": "PED",
            "jhash": "0xE9E7FAC5",
            "manualHash": true
        },
        "0x79CFD9827CC979B6": {
            "name": "GET_PED_PARACHUTE_STATE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "```\nReturns:  \n-1: Normal  \n0: Wearing parachute on back  \n1: Parachute opening  \n2: Parachute open  \n3: Falling to doom (e.g. after exiting parachute)  \nNormal means no parachute?  \n```",
            "examples": [],
            "hash": "0x79CFD9827CC979B6",
            "ns": "PED",
            "jhash": "0x7D4BC475",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7DBDD04862D95F04": {
            "name": "GET_PED_RELATIONSHIP_GROUP_HASH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x7DBDD04862D95F04",
            "ns": "PED",
            "jhash": "0x354F283C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x93C8B64DEB84728C": {
            "name": "GET_PED_SOURCE_OF_DEATH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Entity",
            "description": "```\nReturns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'  \nIs best to check if the Ped is dead before asking for its killer.  \n```",
            "examples": [],
            "hash": "0x93C8B64DEB84728C",
            "ns": "PED",
            "aliases": ["_GET_PED_KILLER"],
            "jhash": "0x84ADF9EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x42FDD0F017B1E38E": {
            "name": "GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x42FDD0F017B1E38E",
            "ns": "PED",
            "jhash": "0x714BD6E4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x23F8F5FC7E8C4A6B": {
            "name": "GET_PED_NEARBY_PEDS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "sizeAndPeds", "type": "int*" },
                {
                    "name": "ignore",
                    "type": "int",
                    "description": "Ped type to ignore"
                }
            ],
            "results": "int",
            "description": "Console/PC structure definitions and example: pastebin.com/SsFej963\n\nFor FiveM/Cfx.Re use-cases refer to: [`GET_GAME_POOL`](#\\_0x2B9D4F50).",
            "examples": [],
            "hash": "0x23F8F5FC7E8C4A6B",
            "ns": "PED",
            "jhash": "0x4D3325F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE131A28626F81AB2": {
            "name": "GET_PED_PROP_TEXTURE_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component id to get the prop texture index from. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xE131A28626F81AB2",
            "ns": "PED",
            "jhash": "0x922A6653",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1E98817B311AE98A": {
            "name": "GET_PED_TIME_OF_DEATH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x1E98817B311AE98A",
            "ns": "PED",
            "aliases": ["_GET_PED_TIME_OF_DEATH", "0x1E98817B311AE98A"],
            "jhash": "0xDF6D5D54",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x898CC20EA75BACD8": {
            "name": "GET_PED_PROP_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component id to get the prop index from. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x898CC20EA75BACD8",
            "ns": "PED",
            "jhash": "0x746DDAC0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAF9E59B1B1FBF2A0": {
            "name": "GET_PED_RESET_FLAG",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "flagId", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAF9E59B1B1FBF2A0",
            "ns": "PED",
            "jhash": "0x2FC10D11",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x32C27A11307B01CC": {
            "name": "_GET_PED_TASK_COMBAT_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Entity",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x32C27A11307B01CC",
            "ns": "PED",
            "aliases": ["0x32C27A11307B01CC"],
            "manualHash": true
        },
        "0x04A355E041E004E6": {
            "name": "GET_PED_TEXTURE_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component id to get the texture variation from. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x04A355E041E004E6",
            "ns": "PED",
            "jhash": "0xC0A8590A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7C2AC9CA66575FBF": {
            "name": "GET_PED_STEALTH_MOVEMENT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns whether the entity is in stealth mode  \n```",
            "examples": [],
            "hash": "0x7C2AC9CA66575FBF",
            "ns": "PED",
            "jhash": "0x40321B83",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDB4EACD4AD0A5D6B": {
            "name": "GET_PEDHEADSHOT_TXD_STRING",
            "params": [{ "name": "id", "type": "int" }],
            "results": "char*",
            "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```",
            "examples": [],
            "hash": "0xDB4EACD4AD0A5D6B",
            "ns": "PED",
            "jhash": "0x76D28E96",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF2C71A32CAD5FBD": {
            "name": "_GET_PED_VISUAL_FIELD_CENTER_ANGLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "float",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xEF2C71A32CAD5FBD",
            "ns": "PED",
            "manualHash": true
        },
        "0xFF059E1E4C01E63C": {
            "name": "GET_PED_TYPE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "Ped types:\n\n```cpp\nenum ePedType\n{\n\tPED_TYPE_PLAYER_0,\n\tPED_TYPE_PLAYER_1,\n\tPED_TYPE_NETWORK_PLAYER,\n\tPED_TYPE_PLAYER_2,\n\tPED_TYPE_CIVMALE,\n\tPED_TYPE_CIVFEMALE,\n\tPED_TYPE_COP,\n\tPED_TYPE_GANG_ALBANIAN,\n\tPED_TYPE_GANG_BIKER_1,\n\tPED_TYPE_GANG_BIKER_2,\n\tPED_TYPE_GANG_ITALIAN,\n\tPED_TYPE_GANG_RUSSIAN,\n\tPED_TYPE_GANG_RUSSIAN_2,\n\tPED_TYPE_GANG_IRISH,\n\tPED_TYPE_GANG_JAMAICAN,\n\tPED_TYPE_GANG_AFRICAN_AMERICAN,\n\tPED_TYPE_GANG_KOREAN,\n\tPED_TYPE_GANG_CHINESE_JAPANESE,\n\tPED_TYPE_GANG_PUERTO_RICAN,\n\tPED_TYPE_DEALER,\n\tPED_TYPE_MEDIC,\n\tPED_TYPE_FIREMAN,\n\tPED_TYPE_CRIMINAL,\n\tPED_TYPE_BUM,\n\tPED_TYPE_PROSTITUTE,\n\tPED_TYPE_SPECIAL,\n\tPED_TYPE_MISSION,\n\tPED_TYPE_SWAT,\n\tPED_TYPE_ANIMAL,\n\tPED_TYPE_ARMY\n};\n```",
            "examples": [],
            "hash": "0xFF059E1E4C01E63C",
            "ns": "PED",
            "jhash": "0xB1460D43",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9B128DC36C1E04CF": {
            "name": "GET_PEDS_JACKER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Ped",
            "description": "",
            "examples": [],
            "hash": "0x9B128DC36C1E04CF",
            "ns": "PED",
            "jhash": "0xDE1DBB59",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x876046A8E3A4B71C": {
            "name": "GET_RANDOM_PED_AT_COORD",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "xRadius", "type": "float" },
                { "name": "yRadius", "type": "float" },
                { "name": "zRadius", "type": "float" },
                { "name": "pedType", "type": "int" }
            ],
            "results": "Ped",
            "description": "```\nGets a random ped in the x/y/zRadius near the x/y/z coordinates passed.   \nPed Types:  \nAny = -1  \nPlayer = 1  \nMale = 4   \nFemale = 5   \nCop = 6  \nHuman = 26  \nSWAT = 27   \nAnimal = 28  \nArmy = 29  \n```",
            "examples": [],
            "hash": "0x876046A8E3A4B71C",
            "ns": "PED",
            "jhash": "0xDC8239EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6A3975DEA89F9A17": {
            "name": "GET_PLAYER_PED_IS_FOLLOWING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Player",
            "description": "",
            "examples": [],
            "hash": "0x6A3975DEA89F9A17",
            "ns": "PED",
            "jhash": "0xDE7442EE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE4A310B1D7FA73CC": {
            "name": "GET_SYNCHRONIZED_SCENE_PHASE",
            "params": [{ "name": "sceneID", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xE4A310B1D7FA73CC",
            "ns": "PED",
            "jhash": "0xB0B2C852",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEBA5AD3A0EAF7121": {
            "name": "GET_RELATIONSHIP_BETWEEN_PEDS",
            "params": [
                { "name": "ped1", "type": "Ped" },
                { "name": "ped2", "type": "Ped" }
            ],
            "results": "int",
            "description": "```\nGets the relationship between two peds. This should be called twice (once for each ped).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \n(Credits: Inco)  \nExample:  \nPED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);  \nPED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);  \n```",
            "examples": [],
            "hash": "0xEBA5AD3A0EAF7121",
            "ns": "PED",
            "jhash": "0xE254C39C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF92691AED837A5FC": {
            "name": "GET_VEHICLE_PED_IS_ENTERING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Vehicle",
            "description": "",
            "examples": [],
            "hash": "0xF92691AED837A5FC",
            "ns": "PED",
            "aliases": ["SET_EXCLUSIVE_PHONE_RELATIONSHIPS"],
            "jhash": "0x56E0C163",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9E6B70061662AE5C": {
            "name": "GET_RELATIONSHIP_BETWEEN_GROUPS",
            "params": [
                { "name": "group1", "type": "Hash" },
                { "name": "group2", "type": "Hash" }
            ],
            "results": "int",
            "description": "```\nGets the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \nExample:  \nPED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);  \nPED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);  \n```",
            "examples": [],
            "hash": "0x9E6B70061662AE5C",
            "ns": "PED",
            "jhash": "0x4E372FE2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x36B77BB84687C318": {
            "name": "_GET_TIME_OF_LAST_PED_WEAPON_DAMAGE",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "```\nGET_TIME_*\n```",
            "examples": [],
            "hash": "0x36B77BB84687C318",
            "ns": "PED",
            "aliases": ["0x36B77BB84687C318"],
            "jhash": "0x0170C6E1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9A9112A0FE9A4713": {
            "name": "GET_VEHICLE_PED_IS_IN",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "lastVehicle",
                    "type": "BOOL",
                    "description": "A boolean value where `false` represents the current vehicle the Ped is in, and `true` represents the last vehicle the Ped was in."
                }
            ],
            "results": "Vehicle",
            "description": "Retrieves the vehicle the specified ped is currently in, or the last vehicle they were in.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example gets the vehicle the player is currently in and print the vehicle id.\n\n-- Retrieve the LocalPlayer.\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the vehicle the player is currently in. \nlocal vehicle = GetVehiclePedIsIn(playerPed, false)\n\n-- Check if the vehicle exists in the game world.\nif not DoesEntityExist(vehicle) then \n    -- If the vehicle does not exist, end the execution of the code here.\n    return \nend\n\n-- Print the vehicle id\nprint(\"Vehicle ID: \" .. vehicle)"
                },
                {
                    "lang": "js",
                    "code": "// This example gets the vehicle the player is currently in and print the vehicle id.\n\n// Retrieve the player ped.\nconst playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nconst vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle)) {\n    // If the vehicle does not exist, end the execution of the code here.\n    return;\n}\n\n// Print the vehicle id\nconsole.log(`Vehicle ID: ${vehicle}`);"
                },
                {
                    "lang": "cs",
                    "code": "// This example gets the vehicle the player is currently in and print the vehicle id.\nusing static CitizenFX.Core.Native.API;\n\n// Retrieve the player ped\nPed playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nVehicle vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle)) {\n    // If the vehicle does not exist, end the execution of the code here.\n    return;\n}\n\n// Print the vehicle id\nDebug.WriteLine($\"Vehicle ID: {vehicle}\");"
                }
            ],
            "hash": "0x9A9112A0FE9A4713",
            "ns": "PED",
            "jhash": "0xAFE92319",
            "manualHash": true,
            "resultsDescription": "The vehicle id. Returns 0 if the ped is/was not in a vehicle."
        },
        "0x6F4C85ACD641BCD2": {
            "name": "GET_SEAT_PED_IS_TRYING_TO_ENTER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x6F4C85ACD641BCD2",
            "ns": "PED",
            "jhash": "0xACF162E0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD80932D577274D40": {
            "name": "GET_SYNCHRONIZED_SCENE_RATE",
            "params": [{ "name": "sceneID", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xD80932D577274D40",
            "ns": "PED",
            "jhash": "0x89365F0D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x814FA8BE5449445D": {
            "name": "GET_VEHICLE_PED_IS_TRYING_TO_ENTER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Vehicle",
            "description": "",
            "examples": [],
            "hash": "0x814FA8BE5449445D",
            "ns": "PED",
            "jhash": "0x99968B37",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x54C7C4A94367717E": {
            "name": "GIVE_PED_HELMET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "cannotRemove", "type": "BOOL" },
                { "name": "helmetFlag", "type": "int" },
                { "name": "textureIndex", "type": "int" }
            ],
            "results": "void",
            "description": "```\nPoliceMotorcycleHelmet   1024\nRegularMotorcycleHelmet   4096\nFiremanHelmet 16384\nPilotHeadset  32768\nPilotHelmet   65536\n--\np2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.\n```",
            "examples": [],
            "hash": "0x54C7C4A94367717E",
            "ns": "PED",
            "jhash": "0x1862A461",
            "manualHash": true
        },
        "0xB158DFCCC56E5C5B": {
            "name": "GIVE_PED_NM_MESSAGE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nSends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.  \nIf a message hasn't been created already, this function does nothing.  \nIf the Ped is not ragdolled with Euphoria enabled, this function does nothing.  \nThe following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);  \nCall order:  \nSET_PED_TO_RAGDOLL  \nCREATE_NM_MESSAGE  \nGIVE_PED_NM_MESSAGE  \nMultiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:  \nSET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);  \nCREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \nCREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \nCREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \n```",
            "examples": [],
            "hash": "0xB158DFCCC56E5C5B",
            "ns": "PED",
            "jhash": "0x737C3689",
            "manualHash": true
        },
        "0xE4B5F4BF2CB24E65": {
            "name": "HAS_ACTION_MODE_ASSET_LOADED",
            "params": [{ "name": "asset", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE4B5F4BF2CB24E65",
            "ns": "PED",
            "jhash": "0xF7EB2BF1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x654CD0A825161131": {
            "name": "HAS_PED_HEAD_BLEND_FINISHED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x654CD0A825161131",
            "ns": "PED",
            "jhash": "0x2B1BD9C5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6094AD011A2EA87D": {
            "name": "GET_VEHICLE_PED_IS_USING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Vehicle",
            "description": "```\nGets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.  \n```",
            "examples": [],
            "hash": "0x6094AD011A2EA87D",
            "ns": "PED",
            "jhash": "0x6DE3AADA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x876928DDDFCCC9CD": {
            "name": "HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x876928DDDFCCC9CD",
            "ns": "PED",
            "aliases": ["0x876928DDDFCCC9CD"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x05023F8F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8507BCB710FA6DC0": {
            "name": "HAS_PED_RECEIVED_EVENT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "eventId", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8507BCB710FA6DC0",
            "ns": "PED",
            "jhash": "0xECD73DB0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x66680A92700F43DF": {
            "name": "HAS_PED_PRELOAD_VARIATION_DATA_FINISHED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x66680A92700F43DF",
            "ns": "PED",
            "aliases": ["0x66680A92700F43DF"],
            "jhash": "0xC6517D52",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE977FC5B08AF3441": {
            "name": "HAS_STEALTH_MODE_ASSET_LOADED",
            "params": [{ "name": "asset", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE977FC5B08AF3441",
            "ns": "PED",
            "jhash": "0x39245667",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7350823473013C02": {
            "name": "HAVE_ALL_STREAMING_REQUESTS_COMPLETED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7350823473013C02",
            "ns": "PED",
            "aliases": [
                "0x7350823473013C02",
                "_HAS_STREAMED_PED_ASSETS_LOADED"
            ],
            "jhash": "0xF9FB4B71",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x784002A632822099": {
            "name": "HAS_PED_PRELOAD_PROP_DATA_FINISHED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x784002A632822099",
            "ns": "PED",
            "aliases": ["0x784002A632822099"],
            "jhash": "0x3B0CA391",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x62AB793144DE75DC": {
            "name": "HIDE_PED_BLOOD_DAMAGE_BY_ZONE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x62AB793144DE75DC",
            "ns": "PED",
            "aliases": ["0x62AB793144DE75DC"],
            "jhash": "0x0CB6C4ED",
            "manualHash": true
        },
        "0x68772DB2B2526F9F": {
            "name": "IS_ANY_HOSTILE_PED_NEAR_POINT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x68772DB2B2526F9F",
            "ns": "PED",
            "aliases": ["0x68772DB2B2526F9F"],
            "jhash": "0x1A464167",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4759CC730F947C81": {
            "name": "INSTANTLY_FILL_PED_POPULATION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4759CC730F947C81",
            "ns": "PED",
            "aliases": ["0x4759CC730F947C81"],
            "jhash": "0x8C555ADD",
            "manualHash": true
        },
        "0xE8A169E666CBC541": {
            "name": "HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE8A169E666CBC541",
            "ns": "PED",
            "aliases": ["0xE8A169E666CBC541"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0xAA39FD6C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE0A0AEC214B1FABA": {
            "name": "IS_CONVERSATION_PED_DEAD",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE0A0AEC214B1FABA",
            "ns": "PED",
            "jhash": "0x1FA39EFE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x083961498679DC9F": {
            "name": "IS_ANY_PED_NEAR_POINT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x083961498679DC9F",
            "ns": "PED",
            "jhash": "0xFBD9B050",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x16EC4839969F9F5E": {
            "name": "IS_COP_PED_IN_AREA_3D",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nxyz - relative to the world origin.  \n```",
            "examples": [],
            "hash": "0x16EC4839969F9F5E",
            "ns": "PED",
            "jhash": "0xB98DB96B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0D3D71EA1086C55": {
            "name": "IS_ANY_PED_SHOOTING_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA0D3D71EA1086C55",
            "ns": "PED",
            "jhash": "0x91833867",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x863B23EFDE9C5DF2": {
            "name": "IS_PED_BEING_STEALTH_KILLED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x863B23EFDE9C5DF2",
            "ns": "PED",
            "jhash": "0xD044C8AF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x12534C348C6CB68B": {
            "name": "IS_PED_A_PLAYER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.\n```",
            "examples": [],
            "hash": "0x12534C348C6CB68B",
            "ns": "PED",
            "jhash": "0x404794CA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4FBACCE3B4138EE8": {
            "name": "IS_PED_BEING_STUNNED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\np1 is always 0  \n```",
            "examples": [],
            "hash": "0x4FBACCE3B4138EE8",
            "ns": "PED",
            "jhash": "0x0A66CE30",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9A497FE2DF198913": {
            "name": "IS_PED_BEING_JACKED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9A497FE2DF198913",
            "ns": "PED",
            "jhash": "0xD45D605C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x53E8CB4F48BFE623": {
            "name": "IS_PED_CLIMBING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x53E8CB4F48BFE623",
            "ns": "PED",
            "jhash": "0xBCE03D35",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3998B1276A3300E5": {
            "name": "IS_PED_AIMING_FROM_COVER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3998B1276A3300E5",
            "ns": "PED",
            "jhash": "0xDEBAB2AF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF41B5D290C99A3D6": {
            "name": "_IS_PED_BLUSH_COLOR_VALID_2",
            "params": [{ "name": "colorId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF41B5D290C99A3D6",
            "ns": "PED",
            "aliases": ["0xF41B5D290C99A3D6"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x604E810189EE3A59": {
            "name": "_IS_PED_BLUSH_COLOR_VALID",
            "params": [{ "name": "colorID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x604E810189EE3A59",
            "ns": "PED",
            "aliases": ["0x604E810189EE3A59"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3317DEDB88C95038": {
            "name": "IS_PED_DEAD_OR_DYING",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to check."
                },
                {
                    "name": "checkMeleeDeathFlags",
                    "type": "BOOL",
                    "description": "If set to `true`, extends the check to include melee takedown moves as part of the dying phase."
                }
            ],
            "results": "BOOL",
            "description": "Determines if a ped is dead. Contrary to what the name might suggest, it does not always detect when a ped is in the 'dying' phase (transitioning to death). The exception is when `checkMeleeDeathFlags` is set to `true`, which then includes peds in the midst of melee takedown moves as being in a dying state, even if the death task has not yet started.\n\n```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x3317DEDB88C95038",
            "ns": "PED",
            "jhash": "0xCBDB7739",
            "manualHash": true,
            "resultsDescription": "Returns `true` if the ped is dead. When `checkMeleeDeathFlags` is set to `true`, it also considers peds in melee takedown moves as dying, although the broader 'dying' phase may not be detected."
        },
        "0x09E7ECA981D9B210": {
            "name": "_IS_PED_BODY_BLEMISH_VALID",
            "params": [{ "name": "colorID", "type": "int" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x09E7ECA981D9B210",
            "ns": "PED",
            "aliases": ["0x09E7ECA981D9B210"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true
        },
        "0x5527B8246FEF9B11": {
            "name": "IS_PED_DIVING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5527B8246FEF9B11",
            "ns": "PED",
            "jhash": "0x7BC5BF3C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE825F6B6CEA7671D": {
            "name": "IS_PED_COMPONENT_VARIATION_VALID",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component id to check the variation of. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id to get the component variation of. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id to get the component variation of. Refer to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171)."
                }
            ],
            "results": "BOOL",
            "description": "Checks if the component variation is valid, this works great for randomizing components using loops.",
            "examples": [],
            "hash": "0xE825F6B6CEA7671D",
            "ns": "PED",
            "jhash": "0x952ABD9A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD125AE748725C6BC": {
            "name": "IS_PED_DUCKING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD125AE748725C6BC",
            "ns": "PED",
            "jhash": "0x9199C77D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA63D9FE45412247": {
            "name": "IS_PED_DEFENSIVE_AREA_ACTIVE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBA63D9FE45412247",
            "ns": "PED",
            "aliases": ["0xBA63D9FE45412247"],
            "jhash": "0x6D88BCD3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x451D05012CCEC234": {
            "name": "_IS_PED_DOING_BEAST_JUMP",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x451D05012CCEC234",
            "ns": "PED",
            "aliases": ["0x451D05012CCEC234"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFB92A102F1C4DFA3": {
            "name": "IS_PED_FALLING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFB92A102F1C4DFA3",
            "ns": "PED",
            "jhash": "0xABF77334",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB2C086CC1BF8F2BF": {
            "name": "IS_PED_DOING_DRIVEBY",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB2C086CC1BF8F2BF",
            "ns": "PED",
            "jhash": "0xAC3CEB9C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBBCCE00B381F8482": {
            "name": "IS_PED_FLEEING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBBCCE00B381F8482",
            "ns": "PED",
            "jhash": "0x85D813C6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD839450756ED5A80": {
            "name": "IS_PED_FATALLY_INJURED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nGets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.  \nIf the handle is invalid, the function returns true.  \n```",
            "examples": [],
            "hash": "0xD839450756ED5A80",
            "ns": "PED",
            "jhash": "0xBADA0093",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD71649DB0A545AA3": {
            "name": "IS_PED_FACING_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "otherPed", "type": "Ped" },
                { "name": "angle", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nangle is ped's view cone  \n```",
            "examples": [],
            "hash": "0xD71649DB0A545AA3",
            "ns": "PED",
            "jhash": "0x0B775838",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x414641C26E105898": {
            "name": "IS_PED_EVASIVE_DIVING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "evadingEntity", "type": "Entity*" }
            ],
            "results": "BOOL",
            "description": "```\nPresumably returns the Entity that the Ped is currently diving out of the way of.\nvar num3;\n    if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)\n        if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)\n```",
            "examples": [],
            "hash": "0x414641C26E105898",
            "ns": "PED",
            "jhash": "0xD82829DC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBB062B2B5722478E": {
            "name": "IS_PED_GETTING_INTO_A_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBB062B2B5722478E",
            "ns": "PED",
            "jhash": "0x90E805AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE0D36E5D9E99CC21": {
            "name": "_IS_PED_HAIR_COLOR_VALID",
            "params": [{ "name": "colorID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE0D36E5D9E99CC21",
            "ns": "PED",
            "aliases": ["0xE0D36E5D9E99CC21"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xED6D8E27A43B8CDE": {
            "name": "_IS_PED_HAIR_COLOR_VALID_2",
            "params": [{ "name": "colorId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xED6D8E27A43B8CDE",
            "ns": "PED",
            "aliases": ["0xED6D8E27A43B8CDE"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x813A0A7C9D2E831F": {
            "name": "IS_PED_HEADTRACKING_ENTITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x813A0A7C9D2E831F",
            "ns": "PED",
            "jhash": "0x233C9ACF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9F65DBC537E59AD5": {
            "name": "IS_PED_GOING_INTO_COVER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9F65DBC537E59AD5",
            "ns": "PED",
            "jhash": "0xA3589628",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1C86D8AEF8254B78": {
            "name": "IS_PED_HANGING_ON_TO_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1C86D8AEF8254B78",
            "ns": "PED",
            "jhash": "0x9678D4FF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9BB01E3834671191": {
            "name": "IS_PED_GROUP_MEMBER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "groupId", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9BB01E3834671191",
            "ns": "PED",
            "jhash": "0x876D5363",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5CD3CB88A7F8850D": {
            "name": "IS_PED_HEADTRACKING_PED",
            "params": [
                { "name": "ped1", "type": "Ped" },
                { "name": "ped2", "type": "Ped" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5CD3CB88A7F8850D",
            "ns": "PED",
            "jhash": "0x2A5DF721",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFCF37A457CB96DC0": {
            "name": "IS_PED_HEADING_TOWARDS_POSITION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFCF37A457CB96DC0",
            "ns": "PED",
            "aliases": ["0xFCF37A457CB96DC0"],
            "jhash": "0x45037B9B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB980061DA992779D": {
            "name": "IS_PED_HUMAN",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns true/false if the ped is/isn't humanoid.  \n```",
            "examples": [],
            "hash": "0xB980061DA992779D",
            "ns": "PED",
            "jhash": "0x194BB7B0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2E0E1C2B4F6CB339": {
            "name": "IS_PED_IN_ANY_BOAT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2E0E1C2B4F6CB339",
            "ns": "PED",
            "jhash": "0x1118A947",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5983BB449D7FDB12": {
            "name": "IS_PED_HURT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns whether the specified ped is hurt.  \n```",
            "examples": [],
            "hash": "0x5983BB449D7FDB12",
            "ns": "PED",
            "jhash": "0x69DFA0AF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB9496CE47546DB2C": {
            "name": "_IS_PED_HELMET_UNK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB9496CE47546DB2C",
            "ns": "PED",
            "aliases": ["0xB9496CE47546DB2C"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5FFF4CFC74D8FB80": {
            "name": "IS_PED_IN_ANY_PLANE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5FFF4CFC74D8FB80",
            "ns": "PED",
            "jhash": "0x51BBCE7E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6E575D6A898AB852": {
            "name": "IS_PED_IN_ANY_TAXI",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6E575D6A898AB852",
            "ns": "PED",
            "jhash": "0x16FD386C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0BD04E29640C9C12": {
            "name": "IS_PED_IN_ANY_POLICE_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0BD04E29640C9C12",
            "ns": "PED",
            "jhash": "0x84FA790D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6F972C1AB75A1ED0": {
            "name": "IS_PED_IN_ANY_TRAIN",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6F972C1AB75A1ED0",
            "ns": "PED",
            "jhash": "0x759EF63A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x298B91AE825E5705": {
            "name": "IS_PED_IN_ANY_HELI",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x298B91AE825E5705",
            "ns": "PED",
            "jhash": "0x7AB5523B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x60DFD0691A170B88": {
            "name": "IS_PED_IN_COVER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "exceptUseWeapon", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np1 is nearly always 0 in the scripts.  \n```",
            "examples": [],
            "hash": "0x60DFD0691A170B88",
            "ns": "PED",
            "jhash": "0x972C5A8B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFBFC01CCFB35D99E": {
            "name": "IS_PED_IN_ANY_SUB",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFBFC01CCFB35D99E",
            "ns": "PED",
            "jhash": "0xE65F8059",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x997ABD671D25CA0B": {
            "name": "IS_PED_IN_ANY_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to check."
                },
                {
                    "name": "atGetIn",
                    "type": "BOOL",
                    "description": "`true` to also consider attempting to enter a vehicle."
                }
            ],
            "results": "BOOL",
            "description": "Returns whether the specified ped is in any vehicle. If `atGetIn` is set to true, also returns true if the ped is\ncurrently in the process of entering a vehicle (a specific stage check for `CTaskEnterVehicle`).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsPedInAnyVehicle(PlayerPedId(), false) then\n    print('Local player is in a vehicle!')\nend"
                }
            ],
            "hash": "0x997ABD671D25CA0B",
            "ns": "PED",
            "jhash": "0x3B0171EE",
            "manualHash": true,
            "resultsDescription": "Whether or not the ped is currently involved in any vehicle."
        },
        "0x6A03BF943D767C93": {
            "name": "IS_PED_IN_HIGH_COVER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6A03BF943D767C93",
            "ns": "PED",
            "aliases": ["0x6A03BF943D767C93", "_IS_PED_STANDING_IN_COVER"],
            "jhash": "0xDD5D08A7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4859F1FC66A6278E": {
            "name": "IS_PED_IN_COMBAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" }
            ],
            "results": "BOOL",
            "description": "```\nChecks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.  \np1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4/*14*/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794  \n```",
            "examples": [],
            "hash": "0x4859F1FC66A6278E",
            "ns": "PED",
            "jhash": "0xFE027CB5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x845333B3150583AB": {
            "name": "IS_PED_IN_COVER_FACING_LEFT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x845333B3150583AB",
            "ns": "PED",
            "jhash": "0xB89DBB80",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5891CAC5D4ACFF74": {
            "name": "IS_PED_IN_GROUP",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5891CAC5D4ACFF74",
            "ns": "PED",
            "jhash": "0x836D9795",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9134873537FA419C": {
            "name": "IS_PED_IN_FLYING_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9134873537FA419C",
            "ns": "PED",
            "jhash": "0xCA072485",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4E209B2C1EAD5159": {
            "name": "IS_PED_IN_MELEE_COMBAT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nNotes: The function only returns true while the ped is:   \nA.) Swinging a random melee attack (including pistol-whipping)  \nB.) Reacting to being hit by a melee attack (including pistol-whipping)  \nC.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).   \nYou don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds  \n```",
            "examples": [],
            "hash": "0x4E209B2C1EAD5159",
            "ns": "PED",
            "jhash": "0xFD7814A5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x796D90EFB19AA332": {
            "name": "IS_PED_IN_MODEL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x796D90EFB19AA332",
            "ns": "PED",
            "jhash": "0xA6438D4B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCEDABC5900A0BF97": {
            "name": "IS_PED_JUMPING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCEDABC5900A0BF97",
            "ns": "PED",
            "jhash": "0x07E5BC0E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x84A2DD9AC37C35C1": {
            "name": "IS_PED_INJURED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nGets a value indicating whether this ped's health is below its injured threshold.  \nThe default threshold is 100.  \n```",
            "examples": [],
            "hash": "0x84A2DD9AC37C35C1",
            "ns": "PED",
            "jhash": "0x2530A087",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3E802F11FBE27674": {
            "name": "_IS_PED_LIPSTICK_COLOR_VALID_2",
            "params": [{ "name": "colorId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3E802F11FBE27674",
            "ns": "PED",
            "aliases": ["0x3E802F11FBE27674"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7DCE8BDA0F1C1200": {
            "name": "IS_PED_IN_PARACHUTE_FREE_FALL",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7DCE8BDA0F1C1200",
            "ns": "PED",
            "jhash": "0xCD71F11B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA3EE4A07279BB9DB": {
            "name": "IS_PED_IN_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "atGetIn", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nGets a value indicating whether the specified ped is in the specified vehicle.  \nIf 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.  \n```",
            "examples": [],
            "hash": "0xA3EE4A07279BB9DB",
            "ns": "PED",
            "jhash": "0x7DA6BC83",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x01FEE67DB37F59B2": {
            "name": "IS_PED_ON_FOOT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x01FEE67DB37F59B2",
            "ns": "PED",
            "jhash": "0xC60D0785",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0525A2C2562F3CD4": {
            "name": "_IS_PED_LIPSTICK_COLOR_VALID",
            "params": [{ "name": "colorID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0525A2C2562F3CD4",
            "ns": "PED",
            "aliases": ["0x0525A2C2562F3CD4"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEC5F66E459AF3BB2": {
            "name": "IS_PED_ON_SPECIFIC_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEC5F66E459AF3BB2",
            "ns": "PED",
            "jhash": "0x63CB4603",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4AE4FF911DFB61DA": {
            "name": "IS_PED_JACKING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4AE4FF911DFB61DA",
            "ns": "PED",
            "jhash": "0x3B321816",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x94495889E22C6479": {
            "name": "IS_PED_ON_ANY_BIKE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x94495889E22C6479",
            "ns": "PED",
            "jhash": "0x4D885B2E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6D9F5FAA7488BA46": {
            "name": "IS_PED_MALE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns true/false if the ped is/isn't male.  \n```",
            "examples": [],
            "hash": "0x6D9F5FAA7488BA46",
            "ns": "PED",
            "jhash": "0x90950455",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x433DDFFE2044B636": {
            "name": "IS_PED_JUMPING_OUT_OF_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x433DDFFE2044B636",
            "ns": "PED",
            "jhash": "0xB19215F6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x460BC76A0E10655E": {
            "name": "IS_PED_ON_MOUNT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nSame function call as PED::GET_MOUNT, aka just returns 0  \n```",
            "examples": [],
            "hash": "0x460BC76A0E10655E",
            "ns": "PED",
            "jhash": "0x43103006",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEBD0EDBA5BE957CF": {
            "name": "IS_PED_PERFORMING_DEPENDENT_COMBO_LIMIT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEBD0EDBA5BE957CF",
            "ns": "PED",
            "aliases": ["0xEBD0EDBA5BE957CF"],
            "jhash": "0x9BE7C860",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC9D55B1A358A5BF7": {
            "name": "IS_PED_MODEL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC9D55B1A358A5BF7",
            "ns": "PED",
            "jhash": "0x5F1DDFCB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x67722AEB798E5FAB": {
            "name": "IS_PED_ON_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nGets a value indicating whether the specified ped is on top of any vehicle.  \nReturn 1 when ped is on vehicle.  \nReturn 0 when ped is not on a vehicle.  \n```",
            "examples": [],
            "hash": "0x67722AEB798E5FAB",
            "ns": "PED",
            "jhash": "0xA1AE7CC7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDCCA191DF9980FD7": {
            "name": "IS_PED_PERFORMING_MELEE_ACTION",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDCCA191DF9980FD7",
            "ns": "PED",
            "aliases": ["0xDCCA191DF9980FD7"],
            "jhash": "0x139C0875",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD6A86331A537A7B9": {
            "name": "IS_PED_PRONE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD6A86331A537A7B9",
            "ns": "PED",
            "jhash": "0x02C2A6C3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC70B5FAE151982D8": {
            "name": "IS_PED_PLANTING_BOMB",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC70B5FAE151982D8",
            "ns": "PED",
            "jhash": "0x0EDAC574",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x26AF0E8E30BD2A2C": {
            "name": "_IS_PED_OPENING_A_DOOR",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nIS_PED_*\n\nReturns true if the ped is currently opening a door (CTaskOpenDoor).\n```",
            "examples": [],
            "hash": "0x26AF0E8E30BD2A2C",
            "ns": "PED",
            "aliases": ["0x26AF0E8E30BD2A2C"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD1871251F3B5ACD7": {
            "name": "IS_PED_RUNNING_MELEE_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD1871251F3B5ACD7",
            "ns": "PED",
            "aliases": ["0xD1871251F3B5ACD7"],
            "jhash": "0xBD4236F6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x24B100C68C645951": {
            "name": "IS_PED_RELOADING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns whether the specified ped is reloading.  \n```",
            "examples": [],
            "hash": "0x24B100C68C645951",
            "ns": "PED",
            "jhash": "0x961E1745",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x625B774D75C87068": {
            "name": "IS_PED_RESPONDING_TO_EVENT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "event", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x625B774D75C87068",
            "ns": "PED",
            "jhash": "0x7A877554",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFD4CCDBCC59941B7": {
            "name": "IS_PED_PERFORMING_STEALTH_KILL",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFD4CCDBCC59941B7",
            "ns": "PED",
            "jhash": "0x9ADD7B21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE3B6097CC25AA69E": {
            "name": "IS_PED_RUNNING_RAGDOLL_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE3B6097CC25AA69E",
            "ns": "PED",
            "jhash": "0x44A153F2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7E9DFE24AC1E58EF": {
            "name": "IS_PED_SHOOTING_IN_AREA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7E9DFE24AC1E58EF",
            "ns": "PED",
            "jhash": "0x741BF04F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x81AA517FBBA05D39": {
            "name": "_IS_PED_SHADER_EFFECT_VALID",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x81AA517FBBA05D39",
            "ns": "PED",
            "aliases": ["0x81AA517FBBA05D39"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA808AA1D79230FC2": {
            "name": "IS_PED_SITTING_IN_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "BOOL",
            "description": "```\nDetect if ped is sitting in the specified vehicle  \n[True/False]  \n```",
            "examples": [],
            "hash": "0xA808AA1D79230FC2",
            "ns": "PED",
            "jhash": "0xDDDE26FA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x826AA586EDB9FEF8": {
            "name": "IS_PED_SITTING_IN_ANY_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nDetect if ped is in any vehicle  \n[True/False]  \n```",
            "examples": [],
            "hash": "0x826AA586EDB9FEF8",
            "ns": "PED",
            "jhash": "0x0EA9CA03",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x47E4E977581C5B55": {
            "name": "IS_PED_RAGDOLL",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nIf the ped handle passed through the parenthesis is in a ragdoll state this will return true.  \n```",
            "examples": [],
            "hash": "0x47E4E977581C5B55",
            "ns": "PED",
            "jhash": "0xC833BBE1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC024869A53992F34": {
            "name": "IS_PED_SWIMMING_UNDER_WATER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC024869A53992F34",
            "ns": "PED",
            "jhash": "0x0E8D524F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3795688A307E1EB6": {
            "name": "_IS_PED_SWAPPING_WEAPON",
            "params": [{ "name": "Ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3795688A307E1EB6",
            "ns": "PED",
            "aliases": ["0x3795688A307E1EB6"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x530944F6F4B8A214": {
            "name": "IS_PED_STOPPED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.  \n```",
            "examples": [],
            "hash": "0x530944F6F4B8A214",
            "ns": "PED",
            "jhash": "0xA0DC0B87",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2AFE52F782F25775": {
            "name": "IS_PED_RUNNING_MOBILE_PHONE_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2AFE52F782F25775",
            "ns": "PED",
            "jhash": "0xFB2AFED1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9DE327631295B4C2": {
            "name": "IS_PED_SWIMMING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9DE327631295B4C2",
            "ns": "PED",
            "jhash": "0x7AB43DB8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x34616828CD07F1A1": {
            "name": "IS_PED_SHOOTING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns whether the specified ped is shooting.  \n```",
            "examples": [],
            "hash": "0x34616828CD07F1A1",
            "ns": "PED",
            "jhash": "0xE7C3405E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4C5E1F087CD10BB7": {
            "name": "IS_PED_TRACKED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4C5E1F087CD10BB7",
            "ns": "PED",
            "jhash": "0x7EB613D9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57AB4A3080F85143": {
            "name": "IS_PED_USING_ANY_SCENARIO",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x57AB4A3080F85143",
            "ns": "PED",
            "jhash": "0x195EF5B7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x14590DDBEDB1EC85": {
            "name": "IS_PED_TAKING_OFF_HELMET",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x14590DDBEDB1EC85",
            "ns": "PED",
            "aliases": ["0x14590DDBEDB1EC85"],
            "jhash": "0xA1008E0E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x00E73468D085F745": {
            "name": "IS_PED_USING_ACTION_MODE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x00E73468D085F745",
            "ns": "PED",
            "jhash": "0x5AE7EDA2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x117C70D1F5730B5E": {
            "name": "IS_PED_VAULTING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x117C70D1F5730B5E",
            "ns": "PED",
            "jhash": "0xC3169BDA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44D28D5DDFE5F68C": {
            "name": "IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x44D28D5DDFE5F68C",
            "ns": "PED",
            "jhash": "0x46828B4E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEBB376779A760AA8": {
            "name": "IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEBB376779A760AA8",
            "ns": "PED",
            "aliases": ["0xEBB376779A760AA8"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x810158F8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1BF094736DD62C2E": {
            "name": "IS_PED_USING_SCENARIO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "scenario", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1BF094736DD62C2E",
            "ns": "PED",
            "jhash": "0x0F65B0D4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF33BDFE19B309B19": {
            "name": "IS_PED_WEARING_HELMET",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nReturns true if the ped passed through the parenthesis is wearing a helmet.  \n```",
            "examples": [],
            "hash": "0xF33BDFE19B309B19",
            "ns": "PED",
            "jhash": "0x0D680D49",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0A9668F158129A2": {
            "name": "IS_PEDHEADSHOT_VALID",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```",
            "examples": [],
            "hash": "0xA0A9668F158129A2",
            "ns": "PED",
            "jhash": "0x0B1080C4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7085228842B13A67": {
            "name": "IS_PEDHEADSHOT_READY",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```",
            "examples": [],
            "hash": "0x7085228842B13A67",
            "ns": "PED",
            "jhash": "0x761CD02E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x88274C11CF0D866D": {
            "name": "_IS_SCUBA_GEAR_LIGHT_ENABLED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x88274C11CF0D866D",
            "ns": "PED",
            "manualHash": true
        },
        "0x7F2F4F13AC5257EF": {
            "name": "IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME",
            "params": [{ "name": "sceneID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7F2F4F13AC5257EF",
            "ns": "PED",
            "aliases": ["0x7F2F4F13AC5257EF"],
            "jhash": "0x72CF2514",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6EC47A344923E1ED": {
            "name": "IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animDict", "type": "char*" },
                { "name": "anim", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x6EC47A344923E1ED",
            "ns": "PED",
            "jhash": "0x3C30B447",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x25D39B935A038A26": {
            "name": "IS_SYNCHRONIZED_SCENE_RUNNING",
            "params": [{ "name": "sceneId", "type": "int" }],
            "results": "BOOL",
            "description": "```\nReturns true if a synchronized scene is running  \n```",
            "examples": [],
            "hash": "0x25D39B935A038A26",
            "ns": "PED",
            "jhash": "0x57A282F1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x62522002E0C391BA": {
            "name": "IS_SYNCHRONIZED_SCENE_LOOPED",
            "params": [{ "name": "sceneID", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x62522002E0C391BA",
            "ns": "PED",
            "jhash": "0x47D87A84",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x91C8E617F64188AC": {
            "name": "IS_TRACKED_PED_VISIBLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nreturns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.  \nTarget needs to be tracked.. won't work otherwise.  \n```",
            "examples": [],
            "hash": "0x91C8E617F64188AC",
            "ns": "PED",
            "jhash": "0x33248CC1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x45BBCBA77C29A841": {
            "name": "KNOCK_PED_OFF_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x45BBCBA77C29A841",
            "ns": "PED",
            "jhash": "0xACDD0674",
            "manualHash": true
        },
        "0x06087579E7AA85A9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x06087579E7AA85A9",
            "ns": "PED",
            "jhash": "0xD0567D41",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x03EA03AF85A85CB7": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x03EA03AF85A85CB7",
            "ns": "PED",
            "jhash": "0x18DD76A1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0B3E35AC043707D9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0B3E35AC043707D9",
            "ns": "PED",
            "manualHash": true
        },
        "0x6FD7816A36615F48": {
            "name": "KNOCK_OFF_PED_PROP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6FD7816A36615F48",
            "ns": "PED",
            "jhash": "0x08D8B180",
            "manualHash": true
        },
        "0x1216E0BFA72CC703": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x1216E0BFA72CC703",
            "ns": "PED",
            "jhash": "0x7BD26837",
            "manualHash": true
        },
        "0x061CB768363D6424": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x061CB768363D6424",
            "ns": "PED",
            "jhash": "0x7DA12905",
            "manualHash": true
        },
        "0x0F62619393661D6E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0F62619393661D6E",
            "ns": "PED",
            "manualHash": true
        },
        "0x2016C603D6B8987C": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_PED_STE*\n```",
            "examples": [],
            "hash": "0x2016C603D6B8987C",
            "ns": "PED",
            "jhash": "0xA6F2C057",
            "manualHash": true
        },
        "0x1E77FA7A62EE6C4C": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nGET_*\n```",
            "examples": [],
            "hash": "0x1E77FA7A62EE6C4C",
            "ns": "PED",
            "jhash": "0x021F5B36",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1A330D297AAC6BC1": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nOnly appears in lamar1 script.  \n```",
            "examples": [],
            "hash": "0x1A330D297AAC6BC1",
            "ns": "PED",
            "jhash": "0x77BB7CB8",
            "manualHash": true
        },
        "0x110F526AB784111F": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nIn agency_heist3b.c4, its like this 90% of the time:  \nPED::_110F526AB784111F(ped, 0.099);  \nPED::SET_PED_ENVEFF_SCALE(ped, 1.0);  \nPED::_D69411AA0CEBF9E9(ped, 87, 81, 68);  \nPED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);  \nand its like this 10% of the time:  \nPED::_110F526AB784111F(ped, 0.2);  \nPED::SET_PED_ENVEFF_SCALE(ped, 0.65);  \nPED::_D69411AA0CEBF9E9(ped, 74, 69, 60);  \nPED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);  \n```",
            "examples": [],
            "hash": "0x110F526AB784111F",
            "ns": "PED",
            "jhash": "0x3B882533",
            "manualHash": true
        },
        "0x2DFC81C9B9608549": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2DFC81C9B9608549",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B694AFCF64E6994": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B694AFCF64E6994",
            "ns": "PED",
            "manualHash": true
        },
        "0x2735233A786B1BEF": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2735233A786B1BEF",
            "ns": "PED",
            "jhash": "0x373CC405",
            "manualHash": true
        },
        "0x25361A96E0F7E419": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x25361A96E0F7E419",
            "ns": "PED",
            "jhash": "0x58C0F6CF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x336B3D200AB007CB": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x336B3D200AB007CB",
            "ns": "PED",
            "jhash": "0xFB18CB19",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3E9679C1DFCF422C": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3E9679C1DFCF422C",
            "ns": "PED",
            "manualHash": true
        },
        "0x288DF530C92DAD6F": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "[`SET_VEHICLE_STEER_BIAS`](#\\_0x42A8EC77D5150CBE) for peds, e.g., `_SET_PED_STEER_BIAS`.",
            "examples": [],
            "hash": "0x288DF530C92DAD6F",
            "ns": "PED",
            "manualHash": true
        },
        "0x2F3C3D9F50681DE4": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F3C3D9F50681DE4",
            "ns": "PED",
            "jhash": "0xCC9D7F1A",
            "manualHash": true
        },
        "0x412F1364FA066CFB": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x412F1364FA066CFB",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x425AECF167663F48": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x425AECF167663F48",
            "ns": "PED",
            "jhash": "0x5BC276AE",
            "manualHash": true
        },
        "0x2F074C904D85129E": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F074C904D85129E",
            "ns": "PED",
            "manualHash": true
        },
        "0x511F1A683387C7E2": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "```\nGET_*\n```",
            "examples": [],
            "hash": "0x511F1A683387C7E2",
            "ns": "PED",
            "jhash": "0x5B1B70AA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x46B05BCAE43856B0": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "flag", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nChecks if the specified unknown flag is set in the ped's model.  \nThe engine itself seems to exclusively check for flags 1 and 4 (Might be inlined code of the check that checks for other flags).  \nGame scripts exclusively check for flags 1 and 4.  \n```",
            "examples": [],
            "hash": "0x46B05BCAE43856B0",
            "ns": "PED",
            "jhash": "0x79543043",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5407B7288D0478B7": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5407B7288D0478B7",
            "ns": "PED",
            "jhash": "0xEF0B78E6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x49E50BDB8BA4DAB2": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_PED_ALLOW*\n```",
            "examples": [],
            "hash": "0x49E50BDB8BA4DAB2",
            "ns": "PED",
            "jhash": "0x397F06E3",
            "manualHash": true
        },
        "0x5B6010B3CBC29095": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5B6010B3CBC29095",
            "ns": "PED",
            "manualHash": true
        },
        "0x75BA1CB3B7D40CAF": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nREQUEST_*\n```",
            "examples": [],
            "hash": "0x75BA1CB3B7D40CAF",
            "ns": "PED",
            "jhash": "0x9194DB71",
            "manualHash": true
        },
        "0x5A7F62FDA59759BD": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5A7F62FDA59759BD",
            "ns": "PED",
            "jhash": "0xB48C0C04",
            "manualHash": true
        },
        "0x733C87D4CE22BEA2": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x733C87D4CE22BEA2",
            "ns": "PED",
            "jhash": "0x43709044",
            "manualHash": true
        },
        "0x83A169EABCDB10A2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x83A169EABCDB10A2",
            "ns": "PED",
            "manualHash": true
        },
        "0x820E9892A77E97CD": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x820E9892A77E97CD",
            "ns": "PED",
            "manualHash": true
        },
        "0x87DDEB611B329A9C": {
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "```\nSET_A*\n```",
            "examples": [],
            "hash": "0x87DDEB611B329A9C",
            "ns": "PED",
            "manualHash": true
        },
        "0x711794453CFD692B": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x711794453CFD692B",
            "ns": "PED",
            "manualHash": true
        },
        "0x9911F4A24485F653": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9911F4A24485F653",
            "ns": "PED",
            "jhash": "0x02A080C8",
            "manualHash": true
        },
        "0x9A77DFD295E29B09": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9A77DFD295E29B09",
            "ns": "PED",
            "jhash": "0xC08FE5F6",
            "manualHash": true
        },
        "0x80054D7FCC70EEC6": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nCLEAR_PED_*\n```",
            "examples": [],
            "hash": "0x80054D7FCC70EEC6",
            "ns": "PED",
            "manualHash": true
        },
        "0xB3352E018D6F89DF": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\n_SET_PED_HEAD_* - _SET_PED_HEARING_*\n\n_SET_PED_HEALTH_...\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0xB3352E018D6F89DF",
            "ns": "PED",
            "manualHash": true
        },
        "0xA52D5247A4227E14": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA52D5247A4227E14",
            "ns": "PED",
            "jhash": "0xB52BA5F5",
            "manualHash": true
        },
        "0x9E30E91FB03A2CAF": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9E30E91FB03A2CAF",
            "ns": "PED",
            "jhash": "0x52559BB6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9C6A6C19B6C0C496": {
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "p1",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9C6A6C19B6C0C496",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAFC976FD0580C7B3": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_PED_*\n```",
            "examples": [],
            "hash": "0xAFC976FD0580C7B3",
            "ns": "PED",
            "jhash": "0x1572022A",
            "manualHash": true
        },
        "0xA3F3564A5B3646C0": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nOnly called once in the scripts:\nif (sub_1abd() && (!PED::_A3F3564A5B3646C0(l_8C))) {\n    if (sub_52e3(\"RESNA_CELLR\", 0)) {\n        PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(l_8C, 1);\n        PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(l_8C, 1);\n        PED::SET_PED_CAN_PLAY_VISEME_ANIMS(l_8C, 1, 0);\n        l_184 += 1;\n    }\n}\nChecks something related to the mobile phone task.\nIS_*\n```",
            "examples": [],
            "hash": "0xA3F3564A5B3646C0",
            "ns": "PED",
            "jhash": "0x97353375",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA9B61A329BFDCBEA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA9B61A329BFDCBEA",
            "ns": "PED",
            "jhash": "0x2276DE0D",
            "manualHash": true
        },
        "0xC2EE020F5FB4DB53": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC2EE020F5FB4DB53",
            "ns": "PED",
            "jhash": "0xB7CD0A49",
            "manualHash": true
        },
        "0xA660FAF550EB37E5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA660FAF550EB37E5",
            "ns": "PED",
            "manualHash": true
        },
        "0xB8B52E498014F5B0": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB8B52E498014F5B0",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAD27D957598E49E9": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" },
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xAD27D957598E49E9",
            "ns": "PED",
            "manualHash": true
        },
        "0xCEDA60A74219D064": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCEDA60A74219D064",
            "ns": "PED",
            "manualHash": true
        },
        "0xAAA6A3698A69E048": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xAAA6A3698A69E048",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC56FBF2F228E1DAC": {
            "params": [
                { "name": "modelHash", "type": "Hash" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC56FBF2F228E1DAC",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE906EC930F5FE7C8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE906EC930F5FE7C8",
            "ns": "PED",
            "manualHash": true
        },
        "0xB282749D5E028163": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xB282749D5E028163",
            "ns": "PED",
            "manualHash": true
        },
        "0xC30BDAEE47256C13": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xC30BDAEE47256C13",
            "ns": "PED",
            "manualHash": true
        },
        "0xD33DAA36272177C4": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD33DAA36272177C4",
            "ns": "PED",
            "jhash": "0xA89A53F2",
            "manualHash": true
        },
        "0xED3C76ADFA6D07C4": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nFORCE_*\n```",
            "examples": [],
            "hash": "0xED3C76ADFA6D07C4",
            "ns": "PED",
            "jhash": "0xFB4000DC",
            "manualHash": true
        },
        "0xCD018C591F94CB43": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nREQUEST_*\n```",
            "examples": [],
            "hash": "0xCD018C591F94CB43",
            "ns": "PED",
            "manualHash": true
        },
        "0xDFE68C4B787E1BFB": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xDFE68C4B787E1BFB",
            "ns": "PED",
            "manualHash": true
        },
        "0xF9ACF4A08098EA25": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 was always 1 (true).  \nKicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.  \nActual name begins with 'S'  \n```",
            "examples": [],
            "hash": "0xF9ACF4A08098EA25",
            "ns": "PED",
            "jhash": "0x141CC936",
            "manualHash": true
        },
        "0xEA9960D07DADCF10": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xEA9960D07DADCF10",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEC4B4B3B9908052A": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "unk", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSET_PED_*  \nHas most likely to do with some shooting attributes as it sets the float which is in the same range as shootRate.  \n```",
            "examples": [],
            "hash": "0xEC4B4B3B9908052A",
            "ns": "PED",
            "jhash": "0xF30658D2",
            "manualHash": true
        },
        "0xF033419D1B81FAE8": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nGET_*\n```",
            "examples": [],
            "hash": "0xF033419D1B81FAE8",
            "ns": "PED",
            "jhash": "0x8FDDB5DB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF2385935BFFD4D92": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "Initial guess of native: `_IS_PED_WEARING_MOTORCYCLE_HELMET`.",
            "examples": [],
            "hash": "0xF2385935BFFD4D92",
            "ns": "PED",
            "jhash": "0xFFF149FE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFD325494792302D7": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFD325494792302D7",
            "ns": "PED",
            "aliases": ["SET_TIME_EXCLUSIVE_DISPLAY_TEXTURE"],
            "jhash": "0x7F67671D",
            "manualHash": true
        },
        "0xF2BEBCDFAFDAA19E": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSET_PED_ALLOW*\ntoggle was always false except in one instance (b678).\nThe one time this is set to true seems to do with when you fail the mission.\n```",
            "examples": [],
            "hash": "0xF2BEBCDFAFDAA19E",
            "ns": "PED",
            "jhash": "0x6CD58238",
            "manualHash": true
        },
        "0xFEC9A3B1820F3331": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "Native to check whether [`_SET_PED_SCUBA_GEAR_VARIATION`](#\\_0x36c6984c3ed0c911) is enabled/actived.",
            "examples": [],
            "hash": "0xFEC9A3B1820F3331",
            "ns": "PED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA8805A1108A2515": {
            "name": "_REGISTER_PEDHEADSHOT_3",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xBA8805A1108A2515",
            "ns": "PED",
            "aliases": ["0xBA8805A1108A2515"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9222F300BF8354FE": {
            "name": "REGISTER_HATED_TARGETS_AROUND_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "```\nBased on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).  \n```",
            "examples": [],
            "hash": "0x9222F300BF8354FE",
            "ns": "PED",
            "jhash": "0x7F87559E",
            "manualHash": true
        },
        "0x13E940F88470FA51": {
            "name": "REMOVE_ACTION_MODE_ASSET",
            "params": [{ "name": "asset", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x13E940F88470FA51",
            "ns": "PED",
            "jhash": "0x3F480F92",
            "manualHash": true
        },
        "0xE1E65CA8AC9C00ED": {
            "name": "PLAY_FACIAL_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animName", "type": "char*" },
                { "name": "animDict", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE1E65CA8AC9C00ED",
            "ns": "PED",
            "jhash": "0x1F6CCDDE",
            "manualHash": true
        },
        "0x4462658788425076": {
            "name": "REGISTER_PEDHEADSHOT",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped you want to take the \"headshot\" of."
                }
            ],
            "results": "int",
            "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\n    -- Get the ped headshot image.\n    local handle = RegisterPedheadshot(PlayerPedId())\n    while not IsPedheadshotReady(handle) or not IsPedheadshotValid(handle) do\n        Wait(0)\n    end\n    local txd = GetPedheadshotTxdString(handle)\n\n    -- Add the notification text, the more text you add the smaller the font\n    -- size will become (text is forced on 1 line only), so keep this short!\n    SetNotificationTextEntry(\"STRING\")\n    AddTextComponentSubstringPlayerName(\"Headshot\")\n\n    -- Draw the notification\n    DrawNotificationAward(txd, txd, 200, 0, \"FM_GEN_UNLOCK\")\n\n    -- Cleanup after yourself!\n    UnregisterPedheadshot(handle)\nend)"
                },
                {
                    "lang": "js",
                    "code": "  // This function gets the ped headshot texture and returns an url which can be used in NUI (written in TypeScript)\n  \n  export const GetPedHeadShotUrl = (ped: number): Promise<string> => {\n    // We return a Promise so we can async await it, because registering the ped headshot takes some time.\n    \n    return new Promise(async res => {\n        const handle = RegisterPedheadshot(ped)\n        \n        while (!IsPedheadshotReady(handle) || !IsPedheadshotValid(handle)) {\n            // This is a custom function, not a native, which just returns a promise that is resolved after the ms specified using the setTimeout function\n            await Delay(10)\n        }\n        \n        const txdString = GetPedheadshotTxdString(handle)\n        \n        // We \"unload\" the handle as we no longer need it\n        UnregisterPedheadshot(handle)\n        \n        // From forum post: https://forum.cfx.re/t/ped-headshot-to-image/4813157/2\n        \n        const pictureUrl = `https://nui-img/${txdString}/${txdString}?v=${Date.now()}`\n        \n        // Finally we resolve the Promise!\n        res(pictureUrl)\n    })\n}"
                }
            ],
            "hash": "0x4462658788425076",
            "ns": "PED",
            "jhash": "0xFFE2667B",
            "manualHash": true,
            "resultsDescription": "It returns a Pedheadshot handle, which can be used by natives such as [`GET_PEDHEADSHOT_TXD_STRING`](#\\_0xDB4EACD4AD0A5D6B)"
        },
        "0xFAB944D4D481ACCB": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "SET_A\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xFAB944D4D481ACCB",
            "ns": "PED",
            "manualHash": true
        },
        "0x8EB2F69076AF7053": {
            "name": "REMOVE_GROUP",
            "params": [{ "name": "groupId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8EB2F69076AF7053",
            "ns": "PED",
            "jhash": "0x48D72B88",
            "manualHash": true
        },
        "0x2F25D9AEFA34FBA2": {
            "name": "REGISTER_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" }
            ],
            "results": "void",
            "description": "```\nPED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.  \nl_216 = RECSBRobber1  \n```",
            "examples": [],
            "hash": "0x2F25D9AEFA34FBA2",
            "ns": "PED",
            "jhash": "0x50A95442",
            "manualHash": true
        },
        "0xF79F9DEF0AADE61A": {
            "name": "RELEASE_PED_PRELOAD_PROP_DATA",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF79F9DEF0AADE61A",
            "ns": "PED",
            "aliases": ["0xF79F9DEF0AADE61A"],
            "jhash": "0xFD103BA7",
            "manualHash": true
        },
        "0x5D517B27CF6ECD04": {
            "name": "RELEASE_PEDHEADSHOT_IMG_UPLOAD",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5D517B27CF6ECD04",
            "ns": "PED",
            "aliases": ["0x5D517B27CF6ECD04"],
            "jhash": "0x0DBB2FA7",
            "manualHash": true
        },
        "0xA7B2458D0AD6DED8": {
            "name": "REMOVE_PED_HELMET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "instantly", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA7B2458D0AD6DED8",
            "ns": "PED",
            "jhash": "0x2086B1F0",
            "manualHash": true
        },
        "0xFF4803BC019852D9": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nRelated to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate\n```",
            "examples": [],
            "hash": "0xFF4803BC019852D9",
            "ns": "PED",
            "jhash": "0xD41C9AED",
            "manualHash": true
        },
        "0xAC6D445B994DF95E": {
            "name": "REMOVE_PED_ELEGANTLY",
            "params": [{ "name": "ped", "type": "Ped*" }],
            "results": "void",
            "description": "```\nJudging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. \n```",
            "examples": [],
            "hash": "0xAC6D445B994DF95E",
            "ns": "PED",
            "jhash": "0x4FFB8C6C",
            "manualHash": true
        },
        "0x74D4E028107450A9": {
            "name": "REMOVE_PED_DEFENSIVE_AREA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nPed will no longer get angry when you stay near him.  \n```",
            "examples": [],
            "hash": "0x74D4E028107450A9",
            "ns": "PED",
            "jhash": "0x34AAAFA5",
            "manualHash": true
        },
        "0x953563CE563143AF": {
            "name": "REGISTER_PEDHEADSHOT_TRANSPARENT",
            "params": [
                { "name": "ped", "type": "Ped", "description": "A ped handle." }
            ],
            "results": "int",
            "description": "Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black.\n\n**Result of the example code:**\n<https://i.imgur.com/iHz8ztn.png>",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\n    -- Get the ped headshot image.\n    local handle = RegisterPedheadshotTransparent(PlayerPedId())\n    while not IsPedheadshotReady(handle) or not IsPedheadshotValid(handle) do\n        Wait(0)\n    end\n    local txd = GetPedheadshotTxdString(handle)\n\n    -- Add the notification text, the more text you add the smaller the font\n    -- size will become (text is forced on 1 line only), so keep this short!\n    SetNotificationTextEntry(\"STRING\")\n    AddTextComponentSubstringPlayerName(\"Transparent Headshot\")\n\n    -- Draw the notification\n    DrawNotificationAward(txd, txd, 200, 0, \"FM_GEN_UNLOCK\")\n    \n    -- Cleanup after yourself!\n    UnregisterPedheadshot(handle)\nend)"
                }
            ],
            "hash": "0x953563CE563143AF",
            "ns": "PED",
            "aliases": ["0x953563CE563143AF"],
            "jhash": "0x4DD03628",
            "manualHash": true,
            "resultsDescription": "The Pedheadshot handle."
        },
        "0x5AAB586FFEC0FD96": {
            "name": "RELEASE_PED_PRELOAD_VARIATION_DATA",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5AAB586FFEC0FD96",
            "ns": "PED",
            "aliases": ["0x5AAB586FFEC0FD96"],
            "jhash": "0x6435F67F",
            "manualHash": true
        },
        "0xB6BA2444AB393DA2": {
            "name": "REMOVE_RELATIONSHIP_GROUP",
            "params": [{ "name": "groupHash", "type": "Hash" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB6BA2444AB393DA2",
            "ns": "PED",
            "jhash": "0x4A1DC59A",
            "manualHash": true
        },
        "0xED74007FFB146BC2": {
            "name": "REMOVE_PED_FROM_GROUP",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED74007FFB146BC2",
            "ns": "PED",
            "jhash": "0x82697713",
            "manualHash": true
        },
        "0xFDDB234CF74073D9": {
            "name": "REMOVE_PED_PREFERRED_COVER_SET",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFDDB234CF74073D9",
            "ns": "PED",
            "aliases": ["0xFDDB234CF74073D9"],
            "jhash": "0xA0134498",
            "manualHash": true
        },
        "0x2BC338A7B21F4608": {
            "name": "REQUEST_PED_VEHICLE_VISIBILITY_TRACKING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2BC338A7B21F4608",
            "ns": "PED",
            "aliases": ["GET_PED_FLOOD_INVINCIBILITY"],
            "jhash": "0x31C31DAA",
            "manualHash": true
        },
        "0x31D16B74C6E29D66": {
            "name": "REMOVE_SCENARIO_BLOCKING_AREA",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x31D16B74C6E29D66",
            "ns": "PED",
            "jhash": "0x4483EF06",
            "manualHash": true
        },
        "0xD37401D78A929A49": {
            "name": "REMOVE_SCENARIO_BLOCKING_AREAS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD37401D78A929A49",
            "ns": "PED",
            "jhash": "0x4DDF845F",
            "manualHash": true
        },
        "0x9219857D21F0E842": {
            "name": "REMOVE_STEALTH_MODE_ASSET",
            "params": [{ "name": "asset", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9219857D21F0E842",
            "ns": "PED",
            "jhash": "0x8C0B243A",
            "manualHash": true
        },
        "0xF0DAEF2F545BEE25": {
            "name": "REQUEST_PEDHEADSHOT_IMG_UPLOAD",
            "params": [{ "name": "id", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF0DAEF2F545BEE25",
            "ns": "PED",
            "aliases": ["0xF0DAEF2F545BEE25"],
            "jhash": "0x10F2C023",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2A0A62FCDEE16D4F": {
            "name": "REQUEST_STEALTH_MODE_ASSET",
            "params": [{ "name": "asset", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A0A62FCDEE16D4F",
            "ns": "PED",
            "jhash": "0x280A004A",
            "manualHash": true
        },
        "0x290E2780BB7AA598": {
            "name": "REQUEST_ACTION_MODE_ASSET",
            "params": [{ "name": "asset", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x290E2780BB7AA598",
            "ns": "PED",
            "jhash": "0x572BA553",
            "manualHash": true
        },
        "0x7D7A2E43E74E2EB8": {
            "name": "REQUEST_PED_VISIBILITY_TRACKING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7D7A2E43E74E2EB8",
            "ns": "PED",
            "aliases": ["0x7D7A2E43E74E2EB8"],
            "jhash": "0x840D24D3",
            "manualHash": true
        },
        "0x63DAB4CCB3273205": {
            "name": "RESET_GROUP_FORMATION_DEFAULT_SPACING",
            "params": [{ "name": "groupHandle", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x63DAB4CCB3273205",
            "ns": "PED",
            "jhash": "0x267FCEAD",
            "manualHash": true
        },
        "0xAA74EC0CB0AAEA2C": {
            "name": "RESET_PED_MOVEMENT_CLIPSET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "transitionSpeed", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA74EC0CB0AAEA2C",
            "ns": "PED",
            "jhash": "0xB83CEE93",
            "manualHash": true
        },
        "0xEA16670E7BA4743C": {
            "name": "RESET_AI_WEAPON_DAMAGE_MODIFIER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEA16670E7BA4743C",
            "ns": "PED",
            "jhash": "0x6E965420",
            "manualHash": true
        },
        "0x46E56A7CD1D63C3F": {
            "name": "RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x46E56A7CD1D63C3F",
            "ns": "PED",
            "jhash": "0x97886238",
            "manualHash": true
        },
        "0x9FA4664CF62E47E8": {
            "name": "RESET_PED_RAGDOLL_TIMER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9FA4664CF62E47E8",
            "ns": "PED",
            "jhash": "0xF2865370",
            "manualHash": true
        },
        "0xBB8DE8CF6A8DD8BB": {
            "name": "RESET_PED_LAST_VEHICLE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nResets the value for the last vehicle driven by the Ped.  \n```",
            "examples": [],
            "hash": "0xBB8DE8CF6A8DD8BB",
            "ns": "PED",
            "jhash": "0x5E3B5942",
            "manualHash": true
        },
        "0x3AC1F7B898F30C05": {
            "name": "RESET_PED_VISIBLE_DAMAGE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3AC1F7B898F30C05",
            "ns": "PED",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xC4BC4841",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x22EF8FF8778030EB": {
            "name": "RESET_PED_IN_VEHICLE_CONTEXT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x22EF8FF8778030EB",
            "ns": "PED",
            "jhash": "0x3C94D88A",
            "manualHash": true
        },
        "0x71BC8E838B9C6035": {
            "name": "RESURRECT_PED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nThis function will simply bring the dead person back to life.\nTry not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).\nInstead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)\nAlso, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.\n```",
            "examples": [],
            "hash": "0x71BC8E838B9C6035",
            "ns": "PED",
            "jhash": "0xA4B82097",
            "manualHash": true
        },
        "0x97B0DB5B4AA74E77": {
            "name": "RESET_PED_WEAPON_MOVEMENT_CLIPSET",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x97B0DB5B4AA74E77",
            "ns": "PED",
            "jhash": "0xC60C9ACD",
            "manualHash": true
        },
        "0x20510814175EA477": {
            "name": "RESET_PED_STRAFE_CLIPSET",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x20510814175EA477",
            "ns": "PED",
            "jhash": "0xF1967A12",
            "manualHash": true
        },
        "0x8D8ACD8388CD99CE": {
            "name": "REVIVE_INJURED_PED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nIt will revive/cure the injured ped. The condition is ped must not be dead.  \nUpon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).  \nThis function is well suited there.  \n```",
            "examples": [],
            "hash": "0x8D8ACD8388CD99CE",
            "ns": "PED",
            "jhash": "0x14D3E6E3",
            "manualHash": true
        },
        "0x66460DEDDD417254": {
            "name": "SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER",
            "params": [{ "name": "modifier", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x66460DEDDD417254",
            "ns": "PED",
            "jhash": "0x0F9A401F",
            "manualHash": true
        },
        "0x1B1E2A40A65B8521": {
            "name": "SET_AI_WEAPON_DAMAGE_MODIFIER",
            "params": [{ "name": "value", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1B1E2A40A65B8521",
            "ns": "PED",
            "jhash": "0x516E30EE",
            "manualHash": true
        },
        "0xB3B1CB349FF9C75D": {
            "name": "SET_CAN_ATTACK_FRIENDLY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSetting ped to true allows the ped to shoot \"friendlies\".  \np2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.  \np1 = false & p2 = false for unable to aim at.  \np1 = true & p2 = false for able to aim at.  \n```",
            "examples": [],
            "hash": "0xB3B1CB349FF9C75D",
            "ns": "PED",
            "jhash": "0x47C60963",
            "manualHash": true
        },
        "0x6B0E6172C9A4D902": {
            "name": "SET_AMBIENT_PEDS_DROP_MONEY",
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6B0E6172C9A4D902",
            "ns": "PED",
            "aliases": ["0x6B0E6172C9A4D902"],
            "jhash": "0x30B98369",
            "manualHash": true
        },
        "0x8A4986851C4EF6E7": {
            "name": "SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8A4986851C4EF6E7",
            "ns": "PED",
            "jhash": "0x82E548CC",
            "manualHash": true
        },
        "0x9F8AA94D6D97DBF4": {
            "name": "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nworks with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him\n```",
            "examples": [],
            "hash": "0x9F8AA94D6D97DBF4",
            "ns": "PED",
            "jhash": "0xDFE34E4A",
            "manualHash": true
        },
        "0xB195FFA8042FC5C3": {
            "name": "SET_DRIVER_ABILITY",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "ability", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThe function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.  \n```",
            "examples": [],
            "hash": "0xB195FFA8042FC5C3",
            "ns": "PED",
            "jhash": "0xAAD4012C",
            "manualHash": true
        },
        "0xDF1AF8B5D56542FA": {
            "name": "SET_ENABLE_HANDCUFFS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nped can not pull out a weapon when true  \n```",
            "examples": [],
            "hash": "0xDF1AF8B5D56542FA",
            "ns": "PED",
            "jhash": "0xAC9BBA23",
            "manualHash": true
        },
        "0xFF41B4B141ED981C": {
            "name": "SET_COMBAT_FLOAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "combatType",
                    "type": "int",
                    "description": "A value between 0-14, See [`GET_COMBAT_FLOAT`](#\\_0x52DFF8A10508090A) for a list of possible parameters."
                },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFF41B4B141ED981C",
            "ns": "PED",
            "jhash": "0xD8B7637C",
            "manualHash": true
        },
        "0x102E68B2024D536D": {
            "name": "SET_CREATE_RANDOM_COPS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x102E68B2024D536D",
            "ns": "PED",
            "jhash": "0x23441648",
            "manualHash": true
        },
        "0xA731F608CA104E3C": {
            "name": "SET_DRIVER_AGGRESSIVENESS",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "aggressiveness", "type": "float" }
            ],
            "results": "void",
            "description": "```\nrange 0.0f - 1.0f  \n```",
            "examples": [],
            "hash": "0xA731F608CA104E3C",
            "ns": "PED",
            "jhash": "0x8B02A8FB",
            "manualHash": true
        },
        "0xF99F62004024D506": {
            "name": "SET_ENABLE_SCUBA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nEnables diving motion when underwater.  \n```",
            "examples": [],
            "hash": "0xF99F62004024D506",
            "ns": "PED",
            "jhash": "0x7BF61471",
            "manualHash": true
        },
        "0x444CB7D7DBE6973D": {
            "name": "SET_CREATE_RANDOM_COPS_ON_SCENARIOS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x444CB7D7DBE6973D",
            "ns": "PED",
            "jhash": "0xEDC31475",
            "manualHash": true
        },
        "0xDED5AF5A0EA4B297": {
            "name": "SET_DRIVER_RACING_MODIFIER",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nScripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0\n```",
            "examples": [],
            "hash": "0xDED5AF5A0EA4B297",
            "ns": "PED",
            "aliases": ["0xDED5AF5A0EA4B297"],
            "jhash": "0x6D55B3B3",
            "manualHash": true
        },
        "0xEE2476B9EE4A094F": {
            "name": "_SET_ENABLE_SCUBA_GEAR_LIGHT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xEE2476B9EE4A094F",
            "ns": "PED",
            "manualHash": true
        },
        "0xC52E0F855C58FC2E": {
            "name": "SET_ENABLE_BOUND_ANKLES",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Used with [SET_ENABLE_HANDCUFFS](#\\_0xDF1AF8B5D56542FA) in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.",
            "examples": [],
            "hash": "0xC52E0F855C58FC2E",
            "ns": "PED",
            "jhash": "0x9208D689",
            "manualHash": true
        },
        "0x5687C7F05B39E401": {
            "name": "_SET_FACIAL_CLIPSET_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animDict", "type": "char*" }
            ],
            "results": "void",
            "description": "Clipsets:\n\"facials@gen_female@base\"\n\"facials@gen_male@base\"\n\"facials@p_m_zero@base\"\n\nTypically followed with [SET_FACIAL_IDLE_ANIM_OVERRIDE](#\\_0xFFC24B988B938B38):\n\"mood_drunk\\_1\"\n\"mood_stressed\\_1\"\n\"mood_happy\\_1\"\n\"mood_talking\\_1\"\n\n```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x5687C7F05B39E401",
            "ns": "PED",
            "aliases": ["0x5687C7F05B39E401"],
            "manualHash": true
        },
        "0xD2C5AA0C0E8D0F1E": {
            "name": "SET_ENABLE_PED_ENVEFF_SCALE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2C5AA0C0E8D0F1E",
            "ns": "PED",
            "jhash": "0xC70F4A84",
            "manualHash": true
        },
        "0xCB968B53FC7F916D": {
            "name": "SET_FORCE_STEP_TYPE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "type", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCB968B53FC7F916D",
            "ns": "PED",
            "aliases": ["0xCB968B53FC7F916D"],
            "jhash": "0xC0F1BC91",
            "manualHash": true
        },
        "0xFFC24B988B938B38": {
            "name": "SET_FACIAL_IDLE_ANIM_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animName", "type": "char*" },
                { "name": "animDict", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFFC24B988B938B38",
            "ns": "PED",
            "jhash": "0x9BA19C13",
            "manualHash": true
        },
        "0x4102C7858CFEE4E4": {
            "name": "SET_GROUP_SEPARATION_RANGE",
            "params": [
                { "name": "groupHandle", "type": "int" },
                { "name": "separationRange", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets the range at which members will automatically leave the group.  \n```",
            "examples": [],
            "hash": "0x4102C7858CFEE4E4",
            "ns": "PED",
            "jhash": "0x7B820CD5",
            "manualHash": true
        },
        "0x129466ED55140F8D": {
            "name": "SET_FORCE_FOOTSTEP_UPDATE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x129466ED55140F8D",
            "ns": "PED",
            "aliases": ["0x129466ED55140F8D"],
            "jhash": "0x37DBC2AD",
            "manualHash": true
        },
        "0xCC9682B8951C5229": {
            "name": "SET_HEAD_BLEND_PALETTE_COLOR",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" },
                { "name": "id", "type": "int", "description": "From 0 to 3." }
            ],
            "results": "void",
            "description": "Preview: https://gfycat.com/MaleRareAmazonparrot",
            "examples": [],
            "hash": "0xCC9682B8951C5229",
            "ns": "PED",
            "aliases": ["0xCC9682B8951C5229"],
            "jhash": "0x57E5B3F9",
            "manualHash": true
        },
        "0xDBA71115ED9941A6": {
            "name": "SET_PED_ALERTNESS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "```\nvalue ranges from 0 to 3.  \n```",
            "examples": [],
            "hash": "0xDBA71115ED9941A6",
            "ns": "PED",
            "jhash": "0x2C32D9AE",
            "manualHash": true
        },
        "0x7AEFB85C1D49DEB6": {
            "name": "SET_PED_ACCURACY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "accuracy", "type": "int" }
            ],
            "results": "void",
            "description": "```\naccuracy = 0-100, 100 being perfectly accurate\n```",
            "examples": [],
            "hash": "0x7AEFB85C1D49DEB6",
            "ns": "PED",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x6C17122E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1D9D45004C28C916": {
            "name": "SET_GROUP_FORMATION_SPACING",
            "params": [
                { "name": "groupId", "type": "int" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1D9D45004C28C916",
            "ns": "PED",
            "jhash": "0xB1E086FF",
            "manualHash": true
        },
        "0x6C60394CB4F75E9A": {
            "name": "SET_PED_ALTERNATE_WALK_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x6C60394CB4F75E9A",
            "ns": "PED",
            "jhash": "0x895E1D67",
            "manualHash": true
        },
        "0xCE2F5FC3AF7E8C1E": {
            "name": "SET_GROUP_FORMATION",
            "params": [
                { "name": "groupId", "type": "int" },
                { "name": "formationType", "type": "int" }
            ],
            "results": "void",
            "description": "```\n0: Freedom to move\n1: Circle Around Leader\n2: Alternative Circle Around Leader  \n3: Line, with Leader at center  \n4: Arrow Formation\n5: \"V\" Formation\n6: Line Follow Formation\n7: Single Formation\n8: Pairwise\n```",
            "examples": [],
            "hash": "0xCE2F5FC3AF7E8C1E",
            "ns": "PED",
            "jhash": "0x08FAC739",
            "manualHash": true
        },
        "0xDA1F1B7BE1A8766F": {
            "name": "SET_PED_ALLOWED_TO_DUCK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDA1F1B7BE1A8766F",
            "ns": "PED",
            "jhash": "0xC4D122F8",
            "manualHash": true
        },
        "0xC32779C16FCEECD9": {
            "name": "SET_IK_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "ikIndex", "type": "int" },
                { "name": "entityLookAt", "type": "Entity" },
                { "name": "boneLookAt", "type": "int" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" },
                { "name": "p7", "type": "Any" },
                { "name": "blendInDuration", "type": "int" },
                { "name": "blendOutDuration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC32779C16FCEECD9",
            "ns": "PED",
            "jhash": "0x6FE5218C",
            "manualHash": true
        },
        "0xBB03C38DD3FB7FFD": {
            "name": "SET_PED_AS_COP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nTurns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as \"false\" has no effect; you must change p0's ped model to disable the effect.  \n```",
            "examples": [],
            "hash": "0xBB03C38DD3FB7FFD",
            "ns": "PED",
            "jhash": "0x84E7DE9F",
            "manualHash": true
        },
        "0xC7F76DF27A5045A1": {
            "name": "SET_PED_ANGLED_DEFENSIVE_AREA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC7F76DF27A5045A1",
            "ns": "PED",
            "jhash": "0x3EFBDD9B",
            "manualHash": true
        },
        "0x781DE8FA214E87D2": {
            "name": "SET_MOVEMENT_MODE_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nname: \"MP_FEMALE_ACTION\" found multiple times in the b617d scripts.\n```",
            "examples": [],
            "hash": "0x781DE8FA214E87D2",
            "ns": "PED",
            "aliases": ["0x781DE8FA214E87D2"],
            "jhash": "0x83BAE814",
            "manualHash": true
        },
        "0x90A43CC281FFAB46": {
            "name": "SET_PED_ALTERNATE_MOVEMENT_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "stance", "type": "int" },
                { "name": "animDictionary", "type": "char*" },
                { "name": "animationName", "type": "char*" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nstance:  \n0 = idle  \n1 = walk  \n2 = running  \np5 = usually set to true  \n```\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x90A43CC281FFAB46",
            "ns": "PED",
            "jhash": "0xBA84FD8C",
            "manualHash": true
        },
        "0x3C028C636A414ED9": {
            "name": "SET_PED_ALLOW_VEHICLES_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3C028C636A414ED9",
            "ns": "PED",
            "jhash": "0x58A80BD5",
            "manualHash": true
        },
        "0x02A0C9720B854BFA": {
            "name": "SET_PED_AS_ENEMY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x02A0C9720B854BFA",
            "ns": "PED",
            "jhash": "0xAE620A1B",
            "manualHash": true
        },
        "0xCEA04D83135264CC": {
            "name": "SET_PED_ARMOUR",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "amount", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets the armor of the specified ped.  \nped: The Ped to set the armor of.  \namount: A value between 0 and 100 indicating the value to set the Ped's armor to.  \n```",
            "examples": [],
            "hash": "0xCEA04D83135264CC",
            "ns": "PED",
            "jhash": "0x4E3A0CC4",
            "manualHash": true
        },
        "0x2B5AA717A181FB4C": {
            "name": "SET_PED_AO_BLOB_RENDERING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nEnable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko\n```",
            "examples": [],
            "hash": "0x2B5AA717A181FB4C",
            "ns": "PED",
            "aliases": ["0x2B5AA717A181FB4C"],
            "jhash": "0x98E29ED0",
            "manualHash": true
        },
        "0x9F3480FE65DB31B5": {
            "name": "SET_PED_AS_GROUP_MEMBER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "groupId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9F3480FE65DB31B5",
            "ns": "PED",
            "jhash": "0x0EE13F92",
            "manualHash": true
        },
        "0x576594E8D64375E2": {
            "name": "SET_PED_BLOCKS_PATHING_WHEN_DEAD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x576594E8D64375E2",
            "ns": "PED",
            "aliases": ["0x576594E8D64375E2"],
            "jhash": "0x1D87DDC1",
            "manualHash": true
        },
        "0x7A6535691B477C48": {
            "name": "SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "state", "type": "int" }
            ],
            "results": "void",
            "description": "```\nstate: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt\n```",
            "examples": [],
            "hash": "0x7A6535691B477C48",
            "ns": "PED",
            "jhash": "0x8A251612",
            "manualHash": true
        },
        "0x2A7819605465FBCE": {
            "name": "SET_PED_AS_GROUP_LEADER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "groupId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A7819605465FBCE",
            "ns": "PED",
            "jhash": "0x7265BEA2",
            "manualHash": true
        },
        "0x63F58F7C80513AAD": {
            "name": "SET_PED_CAN_BE_TARGETTED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x63F58F7C80513AAD",
            "ns": "PED",
            "jhash": "0x75C49F74",
            "manualHash": true
        },
        "0x4F5F651ACCC9C4CF": {
            "name": "SET_PED_BOUNDS_ORIENTATION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4F5F651ACCC9C4CF",
            "ns": "PED",
            "jhash": "0xCFA20D68",
            "manualHash": true
        },
        "0x137BBD05230DB22D": {
            "name": "SET_PED_BLEND_FROM_PARENTS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "father", "type": "Ped" },
                { "name": "mother", "type": "Ped" },
                { "name": "fathersSide", "type": "float" },
                { "name": "mothersSide", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x137BBD05230DB22D",
            "ns": "PED",
            "jhash": "0x837BD370",
            "manualHash": true
        },
        "0x6B7A646C242A7059": {
            "name": "SET_PED_CAN_EVASIVE_DIVE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6B7A646C242A7059",
            "ns": "PED",
            "jhash": "0x542FEB4D",
            "manualHash": true
        },
        "0xC7EF1BA83230BA07": {
            "name": "SET_PED_CAN_BE_SHOT_IN_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC7EF1BA83230BA07",
            "ns": "PED",
            "jhash": "0x5DB7B3A9",
            "manualHash": true
        },
        "0xC1670E958EEE24E5": {
            "name": "SET_PED_CAN_BE_DRAGGED_OUT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC1670E958EEE24E5",
            "ns": "PED",
            "jhash": "0xAA7F1131",
            "manualHash": true
        },
        "0x6C3B4D6D13B4C841": {
            "name": "SET_PED_CAN_ARM_IK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6C3B4D6D13B4C841",
            "ns": "PED",
            "jhash": "0x343B4DE0",
            "manualHash": true
        },
        "0x66B57B72E0836A76": {
            "name": "SET_PED_CAN_BE_TARGETTED_BY_PLAYER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x66B57B72E0836A76",
            "ns": "PED",
            "jhash": "0xD050F490",
            "manualHash": true
        },
        "0x4328652AE5769C71": {
            "name": "SET_PED_CAN_BE_TARGETED_WITHOUT_LOS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4328652AE5769C71",
            "ns": "PED",
            "jhash": "0x7FDDC0A6",
            "manualHash": true
        },
        "0xE861D0B05C7662B8": {
            "name": "SET_PED_CAN_LOSE_PROPS_ON_DAMAGE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "loseProps",
                    "type": "BOOL",
                    "description": "true = allow props to fall off, false = don't let props fall off"
                },
                {
                    "name": "p2",
                    "type": "int",
                    "description": "purpose unknown, usually 0"
                }
            ],
            "results": "void",
            "description": "It makes the ped lose (or not lose) their props (like glasses or helmets/hat) when someone punches or pushes the ped.\nThis is probably what's being used in GTA:O to keep players from knocking other player's hats/glasses off when in combat.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Make the ped NOT lose their props when they're hit or pushed.\nSetPedCanLosePropsOnDamage(PlayerPedId(), false, 0)\n\n-- Make the ped LOSE their props when they're hit or pushed.\nSetPedCanLosePropsOnDamage(PlayerPedId(), true, 0)"
                }
            ],
            "hash": "0xE861D0B05C7662B8",
            "ns": "PED",
            "aliases": ["0xE861D0B05C7662B8"],
            "jhash": "0x2F9550C2",
            "manualHash": true
        },
        "0x638C03B0F9878F57": {
            "name": "SET_PED_CAN_BE_TARGETED_WHEN_INJURED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x638C03B0F9878F57",
            "ns": "PED",
            "jhash": "0x6FD9A7CD",
            "manualHash": true
        },
        "0xCB7553CDCEF4A735": {
            "name": "SET_PED_CAN_COWER_IN_COVER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nIt simply makes the said ped to cower behind cover object(wall, desk, car)  \nPeds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.  \n```",
            "examples": [],
            "hash": "0xCB7553CDCEF4A735",
            "ns": "PED",
            "jhash": "0x5194658B",
            "manualHash": true
        },
        "0xBF1CA77833E58F2C": {
            "name": "SET_PED_CAN_BE_TARGETTED_BY_TEAM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "team", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF1CA77833E58F2C",
            "ns": "PED",
            "jhash": "0xB103A8E1",
            "manualHash": true
        },
        "0x6373D1349925A70E": {
            "name": "SET_PED_CAN_PLAY_AMBIENT_ANIMS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6373D1349925A70E",
            "ns": "PED",
            "jhash": "0xF8053081",
            "manualHash": true
        },
        "0xC514825C507E3736": {
            "name": "SET_PED_CAN_PEEK_IN_COVER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC514825C507E3736",
            "ns": "PED",
            "jhash": "0xC1DAE216",
            "manualHash": true
        },
        "0xF833DDBA3B104D43": {
            "name": "SET_PED_CAN_PLAY_VISEME_ANIMS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np2 usually 0  \n```",
            "examples": [],
            "hash": "0xF833DDBA3B104D43",
            "ns": "PED",
            "jhash": "0xA2FDAF27",
            "manualHash": true
        },
        "0xC11C18092C5530DC": {
            "name": "SET_PED_CAN_HEAD_IK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC11C18092C5530DC",
            "ns": "PED",
            "jhash": "0xD3B04476",
            "manualHash": true
        },
        "0xB128377056A54E2A": {
            "name": "SET_PED_CAN_RAGDOLL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB128377056A54E2A",
            "ns": "PED",
            "jhash": "0xCF1384C4",
            "manualHash": true
        },
        "0x73518ECE2485412B": {
            "name": "SET_PED_CAN_LEG_IK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x73518ECE2485412B",
            "ns": "PED",
            "jhash": "0x9955BC6F",
            "manualHash": true
        },
        "0x33A60D8BDD6E508C": {
            "name": "_SET_PED_CAN_PLAY_INJURED_ANIMS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x33A60D8BDD6E508C",
            "ns": "PED",
            "aliases": ["0x33A60D8BDD6E508C"],
            "jhash": "0xADB2511A",
            "manualHash": true
        },
        "0x0EB0585D15254740": {
            "name": "SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0EB0585D15254740",
            "ns": "PED",
            "jhash": "0x5720A5DD",
            "manualHash": true
        },
        "0xF2B7106D37947CE0": {
            "name": "SET_PED_CAN_TORSO_IK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF2B7106D37947CE0",
            "ns": "PED",
            "jhash": "0x8E5D4EAB",
            "manualHash": true
        },
        "0xED7F7EFE9FABF340": {
            "name": "SET_PED_CAN_SWITCH_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED7F7EFE9FABF340",
            "ns": "PED",
            "jhash": "0xB5F8BA28",
            "manualHash": true
        },
        "0x1CCE141467FF42A2": {
            "name": "SET_PED_CAN_SMASH_GLASS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1CCE141467FF42A2",
            "ns": "PED",
            "jhash": "0x149C60A8",
            "manualHash": true
        },
        "0xBAF20C5432058024": {
            "name": "SET_PED_CAN_PLAY_GESTURE_ANIMS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBAF20C5432058024",
            "ns": "PED",
            "jhash": "0xE131E3B3",
            "manualHash": true
        },
        "0xF5846EDB26A98A24": {
            "name": "SET_PED_CAN_TORSO_REACT_IK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF5846EDB26A98A24",
            "ns": "PED",
            "aliases": ["0xF5846EDB26A98A24"],
            "jhash": "0x7B0040A8",
            "manualHash": true
        },
        "0xEC4686EC06434678": {
            "name": "SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEC4686EC06434678",
            "ns": "PED",
            "jhash": "0x584C5178",
            "manualHash": true
        },
        "0x6647C5F6F5792496": {
            "name": "SET_PED_CAN_TORSO_VEHICLE_IK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6647C5F6F5792496",
            "ns": "PED",
            "aliases": ["0x6647C5F6F5792496"],
            "jhash": "0x0FDA62DE",
            "manualHash": true
        },
        "0xDF993EE5E90ABA25": {
            "name": "SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDF993EE5E90ABA25",
            "ns": "PED",
            "jhash": "0xE9BD733A",
            "manualHash": true
        },
        "0x78C4E9961DB3EB5B": {
            "name": "SET_PED_CLOTH_PACKAGE_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x78C4E9961DB3EB5B",
            "ns": "PED",
            "aliases": ["0x78C4E9961DB3EB5B"],
            "jhash": "0xFC942D7C",
            "manualHash": true
        },
        "0x2E2F4240B3F24647": {
            "name": "SET_PED_CAN_TELEPORT_TO_GROUP_LEADER",
            "params": [
                { "name": "pedHandle", "type": "Ped" },
                { "name": "groupHandle", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis only will teleport the ped to the group leader if the group leader teleports (sets coords).  \nOnly works in singleplayer  \n```",
            "examples": [],
            "hash": "0x2E2F4240B3F24647",
            "ns": "PED",
            "jhash": "0xD0D8BDBC",
            "manualHash": true
        },
        "0x82A3D6D9CC2CB8E3": {
            "name": "SET_PED_CLOTH_PRONE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x82A3D6D9CC2CB8E3",
            "ns": "PED",
            "aliases": ["0x82A3D6D9CC2CB8E3"],
            "jhash": "0x89EEE07B",
            "manualHash": true
        },
        "0x9F7794730795E019": {
            "name": "SET_PED_COMBAT_ATTRIBUTES",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to set attributes to."
                },
                {
                    "name": "attributeIndex",
                    "type": "int",
                    "description": "The attribute index to set."
                },
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "description": "A boolean to enable/disable the attribute (true/false)."
                }
            ],
            "results": "void",
            "description": "These combat attributes seem to be the same as the BehaviourFlags from combatbehaviour.meta.\n\nSo far, these are the equivalents found:\n\n```\nenum CombatAttributes  \n{\n\tBF_CanUseCover = 0,\n\tBF_CanUseVehicles = 1,\n\tBF_CanDoDrivebys = 2,\n\tBF_CanLeaveVehicle = 3,\n\tBF_CanUseDynamicStrafeDecisions = 4,\n\tBF_AlwaysFight = 5,\n\t_0x66BB9FCC = 6,\n\t_0x6837DA41 = 7,\n\t_0xB4A13A5A = 8,\n\t_0xEE326AAD = 9,\n\t_0x7DF2CCFA = 10,\n\t_0x0036D422 = 11,\n\tBF_BlindFireWhenInCover = 12,\n\tBF_Aggressive = 13,\n\tBF_CanInvestigate = 14,\n\tBF_HasRadio = 15,\n\t_0x6BDE28D1 = 16,\n\tBF_AlwaysFlee = 17,\n\t_0x7852797D = 18,\n\t_0x33497B95 = 19,\n\tBF_CanTauntInVehicle = 20,\n\tBF_CanChaseTargetOnFoot = 21,\n\tBF_WillDragInjuredPedsToSafety = 22,\n\t_0xCD7168B8 = 23,\n\tBF_UseProximityFiringRate = 24,\n\t_0x48F914F8 = 25,\n\t_0x2EA543D0 = 26,\n\tBF_PerfectAccuracy = 27,\n\tBF_CanUseFrustratedAdvance = 28,\n\t_0x3D131AC1 = 29,\n\t_0x3AD95F27 = 30,\n\tBF_MaintainMinDistanceToTarget = 31,\n\t_0xEAD68AD2 = 32,\n\t_0xA206C2E0 = 33,\n\tBF_CanUsePeekingVariations = 34,\n\t_0xA5715184 = 35,\n\t_0xD5265533 = 36,\n\t_0x2B84C2BF = 37,\n\tBF_DisableBulletReactions = 38,\n\tBF_CanBust = 39,\n\t_0xAA525726 = 40,\n\tBF_CanCommandeerVehicles = 41,\n\tBF_CanFlank = 42,\n\tBF_SwitchToAdvanceIfCantFindCover = 43,\n\tBF_SwitchToDefensiveIfInCover = 44,\n\t_0xEB4786A0 = 45,\n\tBF_CanFightArmedPedsWhenNotArmed = 46,\n\t_0xA08E9402 = 47,\n\t_0x952EAD7D = 48,\n\tBF_UseEnemyAccuracyScaling = 49,\n\tBF_CanCharge = 50,\n\t_0xDA8C2BD3 = 51,\n\t_0x6562F017 = 52,\n\t_0xA2C3D53B = 53,\n\tBF_AlwaysEquipBestWeapon = 54,\n\tBF_CanSeeUnderwaterPeds = 55,\n\t_0xF619486B = 56,\n\t_0x61EB63A3 = 57,\n\tBF_DisableFleeFromCombat = 58,\n\t_0x8976D12B = 59,\n\tBF_CanThrowSmokeGrenade = 60,\n\tBF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,\n\t_0x5452A10C = 62,\n\tBF_FleesFromInvincibleOpponents = 63,\n\tBF_DisableBlockFromPursueDuringVehicleChase = 64,\n\tBF_DisableSpinOutDuringVehicleChase = 65,\n\tBF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,\n\t_0x0B404731 = 67,\n\tBF_DisableReactToBuddyShot = 68,\n\t_0x7FFD6AEB = 69,\n\t_0x51F4AEF8 = 70,\n\tBF_PermitChargeBeyondDefensiveArea = 71,\n\t_0x63E0A8E2 = 72,\n\t_0xDF974436 = 73,\n\t_0x556C080B = 74,\n\t_0xA4D50035 = 75,\n\tBF_SetDisableShoutTargetPositionOnCombatStart = 76,\n\tBF_DisableRespondedToThreatBroadcast = 77,\n\t_0xCBB01765 = 78,\n\t_0x4F862ED4 = 79,\n\t_0xEF9C7C40 = 80,\n\t_0xE51B494F = 81,\n\t_0x054D0199 = 82,\n\t_0xD36BCE94 = 83,\n\t_0xFB11F690 = 84,\n\t_0xD208A9AD = 85,\n\tBF_AllowDogFighting = 86,\n\t_0x07A6E531 = 87,\n\t_0x34F9317B = 88,\n\t_0x4240F5A9 = 89,\n\t_0xEE129DBD = 90,\n\t_0x053AEAD9 = 91, \n};\n```\n\nThe source for this enum is [here](https://alexguirre.github.io/rage-parser-dumps/dump.html?game=gta5\\&build=2944#\\_0x0E8E7201).",
            "examples": [],
            "hash": "0x9F7794730795E019",
            "ns": "PED",
            "jhash": "0x81D64248",
            "manualHash": true
        },
        "0x364DF566EC833DE2": {
            "name": "SET_PED_CAPSULE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nOverrides the ped's collision capsule radius for the current tick.  \nMust be called every tick to be effective.  \nSetting this to 0.001 will allow warping through some objects.  \n```",
            "examples": [],
            "hash": "0x364DF566EC833DE2",
            "ns": "PED",
            "jhash": "0xB153E1B9",
            "manualHash": true
        },
        "0x3C606747B23E497B": {
            "name": "SET_PED_COMBAT_RANGE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nOnly the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described as AttackRange in combatbehaviour.meta:  \n0: CR_Near  \n1: CR_Medium  \n2: CR_Far  \n```",
            "examples": [],
            "hash": "0x3C606747B23E497B",
            "ns": "PED",
            "jhash": "0x8818A959",
            "manualHash": true
        },
        "0xC7622C0D36B2FDA8": {
            "name": "SET_PED_COMBAT_ABILITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\n100 would equal attack  \nless then 50ish would mean run away  \nOnly the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described in combatbehaviour.meta:  \n0: CA_Poor  \n1: CA_Average  \n2: CA_Professional  \nTested this and got the same results as the first explanation here. Could not find any difference between 0, 1 and 2.  \n```",
            "examples": [],
            "hash": "0xC7622C0D36B2FDA8",
            "ns": "PED",
            "jhash": "0x6C23D329",
            "manualHash": true
        },
        "0x262B14F48D29DE80": {
            "name": "SET_PED_COMPONENT_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component that you want to set."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\\_0x27561561732A7842)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\\_0x8F7156A3142A6BAD)."
                },
                { "name": "paletteId", "type": "int", "description": "0 to 3." }
            ],
            "results": "void",
            "description": "This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of components\n\n**0**: Face\n**1**: Mask\n**2**: Hair\n**3**: Torso\n**4**: Leg\n**5**: Parachute / bag\n**6**: Shoes\n**7**: Accessory\n**8**: Undershirt\n**9**: Kevlar\n**10**: Badge\n**11**: Torso 2\n\nList of Component IDs\n\n```cpp\n// Components\nenum ePedVarComp\n{\n    PV_COMP_INVALID = 0xFFFFFFFF,\n    PV_COMP_HEAD = 0, // \"HEAD\"\n    PV_COMP_BERD = 1, // \"BEARD\"\n    PV_COMP_HAIR = 2, // \"HAIR\"\n    PV_COMP_UPPR = 3, // \"UPPER\"\n    PV_COMP_LOWR = 4, // \"LOWER\"\n    PV_COMP_HAND = 5, // \"HAND\"\n    PV_COMP_FEET = 6, // \"FEET\"\n    PV_COMP_TEEF = 7, // \"TEETH\"\n    PV_COMP_ACCS = 8, // \"ACCESSORIES\"\n    PV_COMP_TASK = 9, // \"TASK\"\n    PV_COMP_DECL = 10, // \"DECL\"\n    PV_COMP_JBIB = 11, // \"JBIB\"\n    PV_COMP_MAX = 12,\n};\n```",
            "examples": [],
            "hash": "0x262B14F48D29DE80",
            "ns": "PED",
            "jhash": "0xD4F7B05C",
            "manualHash": true
        },
        "0x4D9CA1009AFBD057": {
            "name": "SET_PED_COMBAT_MOVEMENT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "combatMovement", "type": "int" }
            ],
            "results": "void",
            "description": "```\n0 - Stationary (Will just stand in place)  \n1 - Defensive (Will try to find cover and very likely to blind fire)  \n2 - Offensive (Will attempt to charge at enemy but take cover as well)  \n3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)  \n```",
            "examples": [],
            "hash": "0x4D9CA1009AFBD057",
            "ns": "PED",
            "jhash": "0x12E62F9E",
            "manualHash": true
        },
        "0x9AFEFF481A85AB2E": {
            "name": "SET_PED_COORDS_KEEP_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" }
            ],
            "results": "void",
            "description": "```\nteleports ped to coords along with the vehicle ped is in  \n```",
            "examples": [],
            "hash": "0x9AFEFF481A85AB2E",
            "ns": "PED",
            "jhash": "0xD66AE1D3",
            "manualHash": true
        },
        "0x413C6C763A4AFFAD": {
            "name": "SET_PED_DEFENSIVE_AREA_DIRECTION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x413C6C763A4AFFAD",
            "ns": "PED",
            "jhash": "0xB66B0C9A",
            "manualHash": true
        },
        "0xD718A22995E2B4BC": {
            "name": "SET_PED_DIES_IN_SINKING_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD718A22995E2B4BC",
            "ns": "PED",
            "jhash": "0x8D4D9ABB",
            "manualHash": true
        },
        "0xA549131166868ED3": {
            "name": "SET_PED_COWER_HASH",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "void",
            "description": "```\np1: Only \"CODE_HUMAN_STAND_COWER\" found in the b617d scripts.  \n```",
            "examples": [],
            "hash": "0xA549131166868ED3",
            "ns": "PED",
            "jhash": "0x16F30DF4",
            "manualHash": true
        },
        "0x1913FE4CBF41C463": {
            "name": "SET_PED_CONFIG_FLAG",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "flagId", "type": "int" },
                { "name": "value", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```cpp\n// Potential names and hash collisions included as comments\nenum ePedConfigFlags {\n\t_0x67D1A445 = 0,\n\t_0xC63DE95E = 1,\n\tCPED_CONFIG_FLAG_NoCriticalHits = 2,\n\tCPED_CONFIG_FLAG_DrownsInWater = 3,\n\tCPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,\n\t_0x37D196F4 = 5,\n\t_0xE2462399 = 6,\n\tCPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,\n\t_0xEDDEB838 = 8,\n\t_0xB398B6FD = 9,\n\t_0xF6664E68 = 10,\n\t_0xA05E7CA3 = 11,\n\t_0xCE394045 = 12,\n\tCPED_CONFIG_FLAG_NeverLeavesGroup = 13,\n\t_0xCD8D1411 = 14,\n\t_0xB031F1A9 = 15,\n\t_0xFE65BEE3 = 16,\n\tCPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,\n\t_0x380165BD = 18,\n\t_0x07C045C7 = 19,\n\t_0x583B5E2D = 20,\n\t_0x475EDA58 = 21,\n\t_0x8629D05B = 22,\n\t_0x1522968B = 23,\n\tCPED_CONFIG_FLAG_IgnoreSeenMelee = 24,\n\t_0x4CC09C4B = 25,\n\t_0x034F3053 = 26,\n\t_0xD91BA7CC = 27,\n\t_0x5C8DC66E = 28,\n\t_0x8902EAA0 = 29,\n\t_0x6580B9D2 = 30,\n\t_0x0EF7A297 = 31,\n\t_0x6BF86E5B = 32,\n\tCPED_CONFIG_FLAG_DieWhenRagdoll = 33,\n\tCPED_CONFIG_FLAG_HasHelmet = 34,\n\tCPED_CONFIG_FLAG_UseHelmet = 35,\n\t_0xEEB3D630 = 36,\n\t_0xB130D17B = 37,\n\t_0x5F071200 = 38,\n\tCPED_CONFIG_FLAG_DisableEvasiveDives = 39,\n\t_0xC287AAFF = 40,\n\t_0x203328CC = 41,\n\tCPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,\n\tCPED_CONFIG_FLAG_DisablePlayerLockon = 43,\n\tCPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,\n\t_0xEC4A8ACF = 45,\n\t_0xDB115BFA = 46,\n\tCPED_CONFIG_FLAG_PedBeingDeleted = 47,\n\tCPED_CONFIG_FLAG_BlockWeaponSwitching = 48,\n\t_0xF8E99565 = 49,\n\t_0xDD17FEE6 = 50,\n\t_0x7ED9B2C9 = 51,\n\t_0x655E8618 = 52,\n\t_0x5A6C1F6E = 53,\n\t_0xD749FC41 = 54,\n\t_0x357F63F3 = 55,\n\t_0xC5E60961 = 56,\n\t_0x29275C3E = 57,\n\tCPED_CONFIG_FLAG_IsFiring = 58,\n\tCPED_CONFIG_FLAG_WasFiring = 59,\n\tCPED_CONFIG_FLAG_IsStanding = 60,\n\tCPED_CONFIG_FLAG_WasStanding = 61,\n\tCPED_CONFIG_FLAG_InVehicle = 62,\n\tCPED_CONFIG_FLAG_OnMount = 63,\n\tCPED_CONFIG_FLAG_AttachedToVehicle = 64,\n\tCPED_CONFIG_FLAG_IsSwimming = 65,\n\tCPED_CONFIG_FLAG_WasSwimming = 66,\n\tCPED_CONFIG_FLAG_IsSkiing = 67,\n\tCPED_CONFIG_FLAG_IsSitting = 68,\n\tCPED_CONFIG_FLAG_KilledByStealth = 69,\n\tCPED_CONFIG_FLAG_KilledByTakedown = 70,\n\tCPED_CONFIG_FLAG_Knockedout = 71,\n\t_0x3E3C4560 = 72,\n\t_0x2994C7B7 = 73,\n\t_0x6D59D275 = 74,\n\tCPED_CONFIG_FLAG_UsingCoverPoint = 75,\n\tCPED_CONFIG_FLAG_IsInTheAir = 76,\n\t_0x2D493FB7 = 77,\n\tCPED_CONFIG_FLAG_IsAimingGun = 78,\n\t_0x14D69875 = 79,\n\t_0x40B05311 = 80,\n\t_0x8B230BC5 = 81,\n\t_0xC74E5842 = 82,\n\t_0x9EA86147 = 83,\n\t_0x674C746C = 84,\n\t_0x3E56A8C2 = 85,\n\t_0xC144A1EF = 86,\n\t_0x0548512D = 87,\n\t_0x31C93909 = 88,\n\t_0xA0269315 = 89,\n\t_0xD4D59D4D = 90,\n\t_0x411D4420 = 91,\n\t_0xDF4AEF0D = 92,\n\tCPED_CONFIG_FLAG_ForcePedLoadCover = 93,\n\t_0x300E4CD3 = 94,\n\t_0xF1C5BF04 = 95,\n\t_0x89C2EF13 = 96,\n\tCPED_CONFIG_FLAG_VaultFromCover = 97,\n\t_0x02A852C8 = 98,\n\t_0x3D9407F1 = 99,\n\t_0x319B4558 = 100,\n\tCPED_CONFIG_FLAG_ForcedAim = 101,\n\t_0xB942D71A = 102,\n\t_0xD26C55A8 = 103,\n\t_0xB89E703B = 104,\n\tCPED_CONFIG_FLAG_ForceReload = 105,\n\t_0xD9E73DA2 = 106,\n\t_0xFF71DC2C = 107,\n\t_0x1E27E8D8 = 108,\n\t_0xF2C53966 = 109,\n\t_0xC4DBE247 = 110,\n\t_0x83C0A4BF = 111,\n\t_0x0E0FAF8C = 112,\n\t_0x26616660 = 113,\n\t_0x43B80B79 = 114,\n\t_0x0D2A9309 = 115,\n\t_0x12C1C983 = 116,\n\tCPED_CONFIG_FLAG_BumpedByPlayer = 117,\n\t_0xE586D504 = 118,\n\t_0x52374204 = 119,\n\tCPED_CONFIG_FLAG_IsHandCuffed = 120,\n\tCPED_CONFIG_FLAG_IsAnkleCuffed = 121,\n\tCPED_CONFIG_FLAG_DisableMelee = 122,\n\t_0xFE714397 = 123,\n\t_0xB3E660BD = 124,\n\t_0x5FED6BFD = 125,\n\t_0xC9D6F66F = 126,\n\t_0x519BC986 = 127,\n\tCPED_CONFIG_FLAG_CanBeAgitated = 128,\n\t_0x9A4B617C = 129, // CPED_CONFIG_FLAG_FaceDirInsult\n\t_0xDAB70E9F = 130,\n\t_0xE569438A = 131,\n\t_0xBBC77D6D = 132,\n\t_0xCB59EF0F = 133,\n\t_0x8C5EA971 = 134,\n\tCPED_CONFIG_FLAG_IsScuba = 135,\n\tCPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,\n\t_0xDCE59B58 = 137,\n\tCPED_CONFIG_FLAG_RidingTrain = 138,\n\tCPED_CONFIG_FLAG_ArrestResult = 139,\n\tCPED_CONFIG_FLAG_CanAttackFriendly = 140,\n\t_0x98A4BE43 = 141,\n\t_0x6901E731 = 142,\n\t_0x9EC9BF6C = 143,\n\t_0x42841A8F = 144,\n\tCPED_CONFIG_FLAG_ShootingAnimFlag = 145,\n\tCPED_CONFIG_FLAG_DisableLadderClimbing = 146,\n\tCPED_CONFIG_FLAG_StairsDetected = 147,\n\tCPED_CONFIG_FLAG_SlopeDetected = 148,\n\t_0x1A15670B = 149,\n\t_0x61786EE5 = 150,\n\t_0xCB9186BD = 151,\n\t_0xF0710152 = 152,\n\t_0x43DFE310 = 153,\n\t_0xC43C624E = 154,\n\tCPED_CONFIG_FLAG_CanPerformArrest = 155,\n\tCPED_CONFIG_FLAG_CanPerformUncuff = 156,\n\tCPED_CONFIG_FLAG_CanBeArrested = 157,\n\t_0xF7960FF5 = 158,\n\t_0x59564113 = 159,\n\t_0x0C6C3099 = 160,\n\t_0x645F927A = 161,\n\t_0xA86549B9 = 162,\n\t_0x8AAF337A = 163,\n\t_0x13BAA6E7 = 164,\n\t_0x5FB9D1F5 = 165,\n\tCPED_CONFIG_FLAG_IsInjured = 166,\n\t_0x6398A20B = 167,\n\t_0xD8072639 = 168,\n\t_0xA05B1845 = 169,\n\t_0x83F6D220 = 170,\n\t_0xD8430331 = 171,\n\t_0x4B547520 = 172,\n\t_0xE66E1406 = 173,\n\t_0x1C4BFE0C = 174,\n\t_0x90008BFA = 175,\n\t_0x07C7A910 = 176,\n\t_0xF15F8191 = 177,\n\t_0xCE4E8BE2 = 178,\n\t_0x1D46E4F2 = 179,\n\tCPED_CONFIG_FLAG_IsInCustody = 180,\n\t_0xE4FD9B3A = 181,\n\t_0x67AE0812 = 182,\n\tCPED_CONFIG_FLAG_IsAgitated = 183,\n\tCPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,\n\t_0x7B2D325E = 185,\n\tCPED_CONFIG_FLAG_EnableWeaponBlocking = 186,\n\tCPED_CONFIG_FLAG_HasHurtStarted = 187,\n\tCPED_CONFIG_FLAG_DisableHurt = 188,\n\tCPED_CONFIG_FLAG_PlayerIsWeird = 189,\n\t_0x32FC208B = 190,\n\t_0x0C296E5A = 191,\n\t_0xE63B73EC = 192,\n\t_0x04E9CC80 = 193,\n\tCPED_CONFIG_FLAG_UsingScenario = 194,\n\tCPED_CONFIG_FLAG_VisibleOnScreen = 195,\n\t_0xD88C58A1 = 196,\n\t_0x5A3DCF43 = 197, // CPED_CONFIG_FLAG_AvoidUnderSide\n\t_0xEA02B420 = 198,\n\t_0x3F559CFF = 199,\n\t_0x8C55D029 = 200,\n\t_0x5E6466F6 = 201,\n\t_0xEB5AD706 = 202,\n\t_0x0EDDDDE7 = 203,\n\t_0xA64F7B1D = 204,\n\t_0x48532CBA = 205,\n\t_0xAA25A9E7 = 206,\n\t_0x415B26B9 = 207,\n\tCPED_CONFIG_FLAG_DisableExplosionReactions = 208,\n\tCPED_CONFIG_FLAG_DodgedPlayer = 209,\n\t_0x67405504 = 210,\n\t_0x75DDD68C = 211,\n\t_0x2AD879B4 = 212,\n\t_0x51486F91 = 213,\n\t_0x32F79E21 = 214,\n\t_0xBF099213 = 215,\n\t_0x054AC8E2 = 216,\n\t_0x14E495CC = 217,\n\t_0x3C7DF9DF = 218,\n\t_0x848FFEF2 = 219,\n\tCPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,\n\t_0x2618E1CF = 221,\n\t_0x84F722FA = 222,\n\t_0xD1B87B1F = 223,\n\t_0x728AA918 = 224,\n\tCPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,\n\tCPED_CONFIG_FLAG_DisablePedAvoidance = 226,\n\t_0x59E91185 = 227,\n\t_0x1EA7225F = 228,\n\tCPED_CONFIG_FLAG_DisablePanicInVehicle = 229,\n\t_0x6DCA7D88 = 230,\n\t_0xFC3E572D = 231,\n\t_0x08E9F9CF = 232,\n\t_0x2D3BA52D = 233,\n\t_0xFD2F53EA = 234,\n\t_0x31A1B03B = 235,\n\tCPED_CONFIG_FLAG_IsHoldingProp = 236,\n\t_0x82ED0A66 = 237, // CPED_CONFIG_FLAG_BlocksPathingWhenDead\n\t_0xCE57C9A3 = 238,\n\t_0x26149198 = 239,\n\t_0x1B33B598 = 240,\n\t_0x719B6E87 = 241,\n\t_0x13E8E8E8 = 242,\n\t_0xF29739AE = 243,\n\t_0xABEA8A74 = 244,\n\t_0xB60EA2BA = 245,\n\t_0x536B0950 = 246,\n\t_0x0C754ACA = 247,\n\tCPED_CONFIG_FLAG_DisableVehicleSeatRandomAnimations = 248,\n\t_0x12659168 = 249,\n\t_0x1BDF2F04 = 250,\n\t_0x7728FAA3 = 251,\n\t_0x6A807ED8 = 252,\n\tCPED_CONFIG_FLAG_OnStairs = 253,\n\t_0xE1A2F73F = 254,\n\t_0x5B3697C8 = 255,\n\t_0xF1EB20A9 = 256,\n\t_0x8B7DF407 = 257,\n\t_0x329DCF1A = 258,\n\t_0x8D90DD1B = 259,\n\t_0xB8A292B7 = 260,\n\t_0x8374B087 = 261,\n\t_0x2AF558F0 = 262,\n\t_0x82251455 = 263,\n\t_0x30CF498B = 264,\n\t_0xE1CD50AF = 265,\n\t_0x72E4AE48 = 266,\n\t_0xC2657EA1 = 267,\n\t_0x29FF6030 = 268,\n\t_0x8248A5EC = 269,\n\tCPED_CONFIG_FLAG_OnStairSlope = 270,\n\t_0xA0897933 = 271,\n\tCPED_CONFIG_FLAG_DontBlipCop = 272,\n\tCPED_CONFIG_FLAG_ClimbedShiftedFence = 273,\n\t_0xF7823618 = 274,\n\t_0xDC305CCE = 275, // CPED_CONFIG_FLAG_KillWhenTrapped\n\tCPED_CONFIG_FLAG_EdgeDetected = 276,\n\t_0x92B67896 = 277,\n\t_0xCAD677C9 = 278,\n\tCPED_CONFIG_FLAG_AvoidTearGas = 279,\n\t_0x5276AC7B = 280,\n\t_0x1032692A = 281,\n\t_0xDA23E7F1 = 282,\n\t_0x9139724D = 283,\n\t_0xA1457461 = 284,\n\t_0x4186E095 = 285,\n\t_0xAC68E2EB = 286,\n\tCPED_CONFIG_FLAG_RagdollingOnBoat = 287,\n\tCPED_CONFIG_FLAG_HasBrandishedWeapon = 288,\n\t_0x1B9EE8A1 = 289,\n\t_0xF3F5758C = 290,\n\t_0x2A9307F1 = 291,\n\t_0x7403D216 = 292,\n\t_0xA06A3C6C = 293,\n\tCPED_CONFIG_FLAG_DisableShockingEvents = 294,\n\t_0xF8DA25A5 = 295,\n\t_0x7EF55802 = 296,\n\t_0xB31F1187 = 297,\n\t_0x84315402 = 298,\n\t_0x0FD69867 = 299,\n\t_0xC7829B67 = 300,\n\tCPED_CONFIG_FLAG_DisablePedConstraints = 301,\n\t_0x6D23CF25 = 302,\n\t_0x2ADA871B = 303,\n\t_0x47BC8A58 = 304,\n\t_0xEB692FA5 = 305,\n\t_0x4A133C50 = 306,\n\t_0xC58099C3 = 307,\n\t_0xF3D76D41 = 308,\n\t_0xB0EEE9F2 = 309,\n\tCPED_CONFIG_FLAG_IsInCluster = 310,\n\t_0x0FA153EF = 311,\n\t_0xD73F5CD3 = 312,\n\t_0xD4136C22 = 313,\n\t_0xE404CA6B = 314,\n\t_0xB9597446 = 315,\n\t_0xD5C98277 = 316,\n\t_0xD5060A9C = 317,\n\t_0x3E5F1CBB = 318,\n\t_0xD8BE1D54 = 319,\n\t_0x0B1F191F = 320,\n\t_0xC995167A = 321,\n\tCPED_CONFIG_FLAG_HasHighHeels = 322,\n\t_0x86B01E54 = 323,\n\t_0x3A56FE15 = 324,\n\t_0xC03B736C = 325, // CPED_CONFIG_FLAG_SpawnedAtScenario\n\t_0xBBF47729 = 326,\n\t_0x22B668A8 = 327,\n\t_0x2624D4D4 = 328,\n\tCPED_CONFIG_FLAG_DisableTalkTo = 329,\n\tCPED_CONFIG_FLAG_DontBlip = 330,\n\tCPED_CONFIG_FLAG_IsSwitchingWeapon = 331,\n\t_0x630F55F3 = 332,\n\t_0x150468FD = 333,\n\t_0x914EBD6B = 334,\n\t_0x79AF3B6D = 335,\n\t_0x75C7A632 = 336,\n\t_0x52D530E2 = 337,\n\t_0xDB2A90E0 = 338,\n\t_0x5922763D = 339,\n\t_0x12ADB567 = 340,\n\t_0x105C8518 = 341,\n\t_0x106F703D = 342,\n\t_0xED152C3E = 343,\n\t_0xA0EFE6A8 = 344,\n\t_0xBF348C82 = 345,\n\t_0xCDDFE830 = 346,\n\t_0x7B59BD9B = 347,\n\t_0x0124C788 = 348,\n\tCPED_CONFIG_FLAG_EquipJetpack = 349,\n\t_0x08D361A5 = 350,\n\t_0xE13D1F7C = 351,\n\t_0x40E25FB9 = 352,\n\t_0x930629D9 = 353,\n\t_0xECCF0C7F = 354,\n\t_0xB6E9613B = 355,\n\t_0x490C0478 = 356,\n\t_0xE8865BEA = 357,\n\t_0xF3C34A29 = 358,\n\tCPED_CONFIG_FLAG_IsDuckingInVehicle = 359,\n\t_0xF660E115 = 360,\n\t_0xAB0E6DED = 361,\n\tCPED_CONFIG_FLAG_HasReserveParachute = 362,\n\tCPED_CONFIG_FLAG_UseReserveParachute = 363,\n\t_0x5C5D9CD3 = 364,\n\t_0x8F7701F3 = 365,\n\t_0xBC4436AD = 366,\n\t_0xD7E07D37 = 367,\n\t_0x03C4FD24 = 368,\n\t_0x7675789A = 369,\n\t_0xB7288A88 = 370,\n\t_0xC06B6291 = 371,\n\t_0x95A4A805 = 372,\n\t_0xA8E9A042 = 373,\n\tCPED_CONFIG_FLAG_NeverLeaveTrain = 374,\n\t_0xBAC674B3 = 375,\n\t_0x147F1FFB = 376,\n\t_0x4376DD79 = 377,\n\t_0xCD3DB518 = 378,\n\t_0xFE4BA4B6 = 379,\n\t_0x5DF03A55 = 380,\n\t_0xBCD816CD = 381,\n\t_0xCF02DD69 = 382,\n\t_0xF73AFA2E = 383,\n\t_0x80B9A9D0 = 384,\n\t_0xF601F7EE = 385,\n\t_0xA91350FC = 386,\n\t_0x3AB23B96 = 387,\n\tCPED_CONFIG_FLAG_IsClimbingLadder = 388,\n\tCPED_CONFIG_FLAG_HasBareFeet = 389,\n\t_0xB4B1CD4C = 390,\n\t_0x5459AFB8 = 391,\n\t_0x54F27667 = 392,\n\t_0xC11D3E8F = 393,\n\t_0x5419EB3E = 394,\n\t_0x82D8DBB4 = 395,\n\t_0x33B02D2F = 396,\n\t_0xAE66176D = 397,\n\t_0xA2692593 = 398,\n\t_0x714C7E31 = 399,\n\t_0xEC488AC7 = 400,\n\t_0xAE398504 = 401,\n\t_0xABC58D72 = 402,\n\t_0x5E5B9591 = 403,\n\t_0x6BA1091E = 404,\n\t_0x77840177 = 405,\n\t_0x1C7ACAC4 = 406,\n\t_0x124420E9 = 407,\n\t_0x75A65587 = 408,\n\t_0xDFD2D55B = 409,\n\t_0xBDD39919 = 410,\n\t_0x43DEC267 = 411,\n\t_0xE42B7797 = 412,\n\tCPED_CONFIG_FLAG_IsHolsteringWeapon = 413,\n\t_0x4F8149F5 = 414,\n\t_0xDD9ECA7A = 415,\n\t_0x9E7EF9D2 = 416,\n\t_0x2C6ED942 = 417,\n\tCPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,\n\t_0xA488727D = 419,\n\t_0xCFF5F6DE = 420,\n\t_0x6D614599 = 421,\n\tCPED_CONFIG_FLAG_DisableVehicleCombat = 422,\n\t_0xFE401D26 = 423,\n\tCPED_CONFIG_FLAG_FallsLikeAircraft = 424,\n\t_0x2B42AE82 = 425,\n\t_0x7A95734F = 426,\n\t_0xDF4D8617 = 427,\n\t_0x578F1F14 = 428,\n\tCPED_CONFIG_FLAG_DisableStartEngine = 429,\n\tCPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,\n\t_0x153C9500 = 431,\n\t_0xCB7A632E = 432,\n\t_0xDE727981 = 433,\n\tCPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,\n\t_0x12BBB935 = 435,\n\t_0xAD0A1277 = 436,\n\t_0xEA6AA46A = 437,\n\tCPED_CONFIG_FLAG_DisableHelmetArmor = 438,\n\t_0xCB7F3A1E = 439,\n\t_0x50178878 = 440,\n\t_0x051B4F0D = 441,\n\t_0x2FC3DECC = 442,\n\t_0xC0030B0B = 443,\n\t_0xBBDAF1E9 = 444,\n\t_0x944FE59C = 445,\n\t_0x506FBA39 = 446,\n\t_0xDD45FE84 = 447,\n\t_0xE698AE75 = 448,\n\t_0x199633F8 = 449,\n\tCPED_CONFIG_FLAG_PedIsArresting = 450,\n\tCPED_CONFIG_FLAG_IsDecoyPed = 451,\n\t_0x3A251D83 = 452,\n\t_0xA56F6986 = 453,\n\t_0x1D19C622 = 454,\n\t_0xB68D3EAB = 455,\n\tCPED_CONFIG_FLAG_CanBeIncapacitated = 456,\n\t_0x4BD5EBAD = 457,\n}\n```",
            "examples": [],
            "hash": "0x1913FE4CBF41C463",
            "ns": "PED",
            "jhash": "0x9CFBE10D",
            "manualHash": true
        },
        "0x9DBA107B4937F809": {
            "name": "_SET_PED_COVER_CLIPSET_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nFound in the b617d scripts:\nPED::_9DBA107B4937F809(v_7, \"trevor_heist_cover_2h\");\nSET_PED_MO*\n```",
            "examples": [],
            "hash": "0x9DBA107B4937F809",
            "ns": "PED",
            "aliases": ["0x9DBA107B4937F809"],
            "manualHash": true
        },
        "0x56CEF0AC79073BDE": {
            "name": "SET_PED_DIES_IN_WATER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x56CEF0AC79073BDE",
            "ns": "PED",
            "jhash": "0x604C872B",
            "manualHash": true
        },
        "0xF9B8F91AAD3B953E": {
            "name": "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF9B8F91AAD3B953E",
            "ns": "PED",
            "aliases": ["0xF9B8F91AAD3B953E"],
            "jhash": "0x40638BDC",
            "manualHash": true
        },
        "0x87052FE446E07247": {
            "name": "SET_PED_COORDS_NO_GANG",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "posX", "type": "float" },
                { "name": "posY", "type": "float" },
                { "name": "posZ", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x87052FE446E07247",
            "ns": "PED",
            "jhash": "0x9561AD98",
            "manualHash": true
        },
        "0x4EF47FE21698A8B6": {
            "name": "SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "attachPed", "type": "Ped" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "BOOL" },
                { "name": "p10", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4EF47FE21698A8B6",
            "ns": "PED",
            "jhash": "0x74BDA7CE",
            "manualHash": true
        },
        "0x45EEE61580806D63": {
            "name": "SET_PED_DEFAULT_COMPONENT_VARIATION",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nSets Ped Default Clothes  \n```",
            "examples": [],
            "hash": "0x45EEE61580806D63",
            "ns": "PED",
            "jhash": "0xC866A984",
            "manualHash": true
        },
        "0xAA5A7ECE2AA8FE70": {
            "name": "SET_PED_DESIRED_HEADING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "heading", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA5A7ECE2AA8FE70",
            "ns": "PED",
            "jhash": "0x961458F9",
            "manualHash": true
        },
        "0x030983CA930B692D": {
            "name": "SET_PED_DUCKING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.  \n```",
            "examples": [],
            "hash": "0x030983CA930B692D",
            "ns": "PED",
            "jhash": "0xB90353D7",
            "manualHash": true
        },
        "0x95E3D6257B166CF2": {
            "name": "SET_PED_DENSITY_MULTIPLIER_THIS_FRAME",
            "params": [
                {
                    "name": "multiplier",
                    "type": "float",
                    "description": "Adjust from 0.0 (minimum, indicating no pedestrians in the street) to 1.0 (maximum, representing a normal amount of pedestrians on the street)."
                }
            ],
            "results": "void",
            "description": "**Usage:** Call this native every frame",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- 0.0 means no peds, while 1.0 indicates the regular density of peds.\nlocal pedsDensityFactor = 0.0 \n\nCitizen.CreateThread(function()\n   while true do\n       SetPedDensityMultiplierThisFrame(pedsDensityFactor)\n       Citizen.Wait(0)    \n   end\nend)"
                },
                {
                    "lang": "js",
                    "code": "// 0.0 means no peds, while 1.0 indicates the regular density of peds.\nconst pedsDensityFactor = 0.0;\n\nsetTick(() => {\n    SetPedDensityMultiplierThisFrame(pedsDensityFactor);  \n});"
                }
            ],
            "hash": "0x95E3D6257B166CF2",
            "ns": "PED",
            "jhash": "0x039C82BB",
            "manualHash": true
        },
        "0xE4723DB6E736CCFF": {
            "name": "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Vehicle" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE4723DB6E736CCFF",
            "ns": "PED",
            "aliases": ["0xE4723DB6E736CCFF"],
            "jhash": "0x4763B2C6",
            "manualHash": true
        },
        "0x2A30922C90C9B42C": {
            "name": "SET_PED_DIES_IN_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A30922C90C9B42C",
            "ns": "PED",
            "jhash": "0x6FE1E440",
            "manualHash": true
        },
        "0x5BA7919BED300023": {
            "name": "SET_PED_DIES_WHEN_INJURED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5BA7919BED300023",
            "ns": "PED",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xE94E24D4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD69411AA0CEBF9E9": {
            "name": "SET_PED_ENVEFF_COLOR_MODULATOR",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSomething related to the environmental effects natives.\nIn the \"agency_heist3b\" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}\n```",
            "examples": [],
            "hash": "0xD69411AA0CEBF9E9",
            "ns": "PED",
            "aliases": ["0xD69411AA0CEBF9E9"],
            "jhash": "0x87A0C174",
            "manualHash": true
        },
        "0xED34AB6C5CB36520": {
            "name": "SET_PED_DRIVE_BY_CLIPSET_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "clipset", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED34AB6C5CB36520",
            "ns": "PED",
            "jhash": "0xD4C73595",
            "manualHash": true
        },
        "0x97A790315D3831FD": {
            "name": "SET_PED_ENABLE_WEAPON_BLOCKING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x97A790315D3831FD",
            "ns": "PED",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x4CAD1A4A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEEB64139BA29A7CF": {
            "name": "SET_PED_DIES_INSTANTLY_IN_WATER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEEB64139BA29A7CF",
            "ns": "PED",
            "jhash": "0xFE2554FC",
            "manualHash": true
        },
        "0xBF29516833893561": {
            "name": "SET_PED_ENVEFF_SCALE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nValues look to be between 0.0 and 1.0  \nFrom decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0  \nYou are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.  \n```",
            "examples": [],
            "hash": "0xBF29516833893561",
            "ns": "PED",
            "jhash": "0xFC1CFC27",
            "manualHash": true
        },
        "0x50B56988B170AFDF": {
            "name": "_SET_PED_EYE_COLOR",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "index", "type": "int" }
            ],
            "results": "void",
            "description": "Used for freemode (online) characters.\n\nIndices:\n\n1.  black\n2.  very light blue/green\n3.  dark blue\n4.  brown\n5.  darker brown\n6.  light brown\n7.  blue\n8.  light blue\n9.  pink\n10. yellow\n11. purple\n12. black\n13. dark green\n14. light brown\n15. yellow/black pattern\n16. light colored spiral pattern\n17. shiny red\n18. shiny half blue/half red\n19. half black/half light blue\n20. white/red perimter\n21. green snake\n22. red snake\n23. dark blue snake\n24. dark yellow\n25. bright yellow\n26. all black\n27. red small pupil\n28. devil blue/black\n29. white small pupil\n30. glossed over",
            "examples": [],
            "hash": "0x50B56988B170AFDF",
            "ns": "PED",
            "manualHash": true
        },
        "0x70A2D1137C8ED7C9": {
            "name": "SET_PED_FLEE_ATTRIBUTES",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "attributeFlags", "type": "int" },
                { "name": "enable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nbit 15 (0x8000) = force cower\n```",
            "examples": [],
            "hash": "0x70A2D1137C8ED7C9",
            "ns": "PED",
            "jhash": "0xA717A875",
            "manualHash": true
        },
        "0x4E90D746056E273D": {
            "name": "_SET_PED_EMISSIVE_INTENSITY",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to set the glow intensity on."
                },
                {
                    "name": "intensity",
                    "type": "float",
                    "description": "The glow intensity, value between `0.0` and `1.0`."
                }
            ],
            "results": "void",
            "description": "This native sets the glow intensity of illuminated clothing items.\n\nThis native does **NOT** need to be executed every tick.\nThis native is **NOT** synced with other connected players, you will have to set the opacity on the ped on all clients individually.\n\nGlow intensity is a value between `0.0` and `1.0`.\n\nIn some older decompiled scripts this is known as `_SET_PED_REFLECTION_INTENSITY`.\nSince there's no joaat hash for this, I find `_SET_PED_ILLUMINATED_CLOTHING_GLOW_INTENSITY` more descriptive than `_SET_PED_REFLECTION_INTENSITY`.\n\nUse [`GetPedIlluminatedClothingGlowIntensity`](#\\_0x1461B28A06717D68) to get the illuminated clothing glow intensity of a specific ped.\n\nIntensity: `1.0`:\n![](https://www.vespura.com/hi/i/2018-11-13\\_17-03\\_c2e23\\_229.png)\n\nIntensity: `0.0`:\n![](https://www.vespura.com/hi/i/2018-11-13\\_17-03\\_35c33\\_230.png)\n\n**Examples code result**:\n![](https://www.vespura.com/hi/i/2018-11-13\\_17-11\\_10199\\_232.gif)\n\n(Direct link if embed doesn't work: [here](https://www.vespura.com/hi/i/2018-11-13\\_17-11\\_10199\\_232.gif))",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\n    local glowIntensity = 0.0\n    local reverse = false\n    while true do\n        Wait(100)\n        SetPedIlluminatedClothingGlowIntensity(PlayerPedId(), glowIntensity)\n        if reverse then\n            glowIntensity = glowIntensity - 0.05\n            if glowIntensity < 0.0 then\n                reverse = false\n                glowIntensity = 0.0\n            end\n        else\n            glowIntensity = glowIntensity + 0.05\n            if glowIntensity > 1.0 then\n                reverse = true\n                glowIntensity = 1.0\n            end\n        end\n    end\nend)"
                },
                {
                    "lang": "cs",
                    "code": "private float intensity = 0.0f;\nprivate bool reverse = false;\n\n// Execute this function every tick (for example: Tick += OnTickFunction; in your constructor )\nprivate async Task OnTickFunction()\n{\n    await Delay(100);\n    SetPedIlluminatedClothingGlowIntensity(PlayerPedId(), intensity);\n    if (reverse)\n    {\n        intensity -= 0.05f;\n        if (intensity < 0.0f)\n        {\n            intensity = 0.0f;\n            reverse = false;\n        }\n    }\n    else\n    {\n        intensity += 0.05f;\n        if (intensity > 1.0f)\n        {\n            intensity = 1.0f;\n            reverse = true;\n        }\n    }\n}"
                }
            ],
            "hash": "0x4E90D746056E273D",
            "ns": "PED",
            "aliases": [
                "0x4E90D746056E273D",
                "_SET_PED_ILLUMINATED_CLOTHING_GLOW_INTENSITY"
            ],
            "manualHash": true
        },
        "0x7FB17BA2E7DECA5B": {
            "name": "SET_PED_GENERATES_DEAD_BODY_EVENTS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7FB17BA2E7DECA5B",
            "ns": "PED",
            "jhash": "0xE9B97A2B",
            "manualHash": true
        },
        "0x9AC577F5A12AD8A9": {
            "name": "SET_PED_FIRING_PATTERN",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "patternHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nFIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )  \nFIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )  \nFIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )  \nFIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )  \nFIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )  \nFIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )  \nFIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )  \nFIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )  \nFIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )  \nFIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )  \nFIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )  \nFIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )  \nFIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )  \nFIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )  \nFIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )  \nFIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )  \nif anyone is interested firing pattern info: pastebin.com/Px036isB  \n```",
            "examples": [],
            "hash": "0x9AC577F5A12AD8A9",
            "ns": "PED",
            "jhash": "0xB4629D66",
            "manualHash": true
        },
        "0x71A5C1DBA060049E": {
            "name": "_SET_PED_FACE_FEATURE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "An integer ranging from 0 to 19"
                },
                {
                    "name": "scale",
                    "type": "float",
                    "description": "A float ranging from -1.0 to 1.0"
                }
            ],
            "results": "void",
            "description": "Sets the various freemode face features, e.g. nose length, chin shape.\n\n**Indexes (From 0 to 19):**\n\nParentheses indicate morph scale/direction as in (-1.0 to 1.0)\n\n*   **0**: Nose Width (Thin/Wide)\n*   **1**: Nose Peak (Up/Down)\n*   **2**: Nose Length (Long/Short)\n*   **3**: Nose Bone Curveness (Crooked/Curved)\n*   **4**: Nose Tip (Up/Down)\n*   **5**: Nose Bone Twist (Left/Right)\n*   **6**: Eyebrow (Up/Down)\n*   **7**: Eyebrow (In/Out)\n*   **8**: Cheek Bones (Up/Down)\n*   **9**: Cheek Sideways Bone Size (In/Out)\n*   **10**: Cheek Bones Width (Puffed/Gaunt)\n*   **11**: Eye Opening (Both) (Wide/Squinted)\n*   **12**: Lip Thickness (Both) (Fat/Thin)\n*   **13**: Jaw Bone Width (Narrow/Wide)\n*   **14**: Jaw Bone Shape (Round/Square)\n*   **15**: Chin Bone (Up/Down)\n*   **16**: Chin Bone Length (In/Out or Backward/Forward)\n*   **17**: Chin Bone Shape (Pointed/Square)\n*   **18**: Chin Hole (Chin Bum)\n*   **19**: Neck Thickness (Thin/Thick)\n\n**Note:**\n\nYou may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.",
            "examples": [],
            "hash": "0x71A5C1DBA060049E",
            "ns": "PED",
            "manualHash": true
        },
        "0x0BDDB8D9EC6BCF3C": {
            "name": "SET_PED_GROUP_MEMBER_PASSENGER_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "index", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0BDDB8D9EC6BCF3C",
            "ns": "PED",
            "jhash": "0x2AB3670B",
            "manualHash": true
        },
        "0x9FF447B6B6AD960A": {
            "name": "SET_PED_GRAVITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nenable or disable the gravity of a ped  \nExamples:  \nPED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);  \nPED::SET_PED_GRAVITY(Local_289[iVar0 /*20*/], 0x00000001);  \n```",
            "examples": [],
            "hash": "0x9FF447B6B6AD960A",
            "ns": "PED",
            "jhash": "0x3CA16652",
            "manualHash": true
        },
        "0xBC0ED94165A48BC2": {
            "name": "SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBC0ED94165A48BC2",
            "ns": "PED",
            "jhash": "0x89AD49FF",
            "manualHash": true
        },
        "0xDDF803377F94AAA8": {
            "name": "SET_PED_GESTURE_GROUP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animGroupGesture", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nFrom the scripts:  \nPED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),  \n\"ANIM_GROUP_GESTURE_MISS_FRA0\");  \nPED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),  \n\"ANIM_GROUP_GESTURE_MISS_DocksSetup1\");  \n```",
            "examples": [],
            "hash": "0xDDF803377F94AAA8",
            "ns": "PED",
            "jhash": "0x170DA109",
            "manualHash": true
        },
        "0x4CFFC65454C93A49": {
            "name": "_SET_PED_HAIR_COLOR",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "colorID", "type": "int" },
                { "name": "highlightColorID", "type": "int" }
            ],
            "results": "void",
            "description": "```\nUsed for freemode (online) characters.  \n```",
            "examples": [],
            "hash": "0x4CFFC65454C93A49",
            "ns": "PED",
            "manualHash": true
        },
        "0x48F44967FA05CC1E": {
            "name": "SET_PED_HEAD_OVERLAY",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "overlayID",
                    "type": "int",
                    "description": "The overlay id displayed up above."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "An integer representing the index (from 0 to `_GET_NUM_OVERLAY_VALUES(overlayID)-1`)"
                },
                {
                    "name": "opacity",
                    "type": "float",
                    "description": "A float ranging from 0.0 to 1.0"
                }
            ],
            "results": "void",
            "description": "```\nOverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.   \noverlayID       Part                  Index, to disable  \n0               Blemishes             0 - 23, 255  \n1               Facial Hair           0 - 28, 255  \n2               Eyebrows              0 - 33, 255  \n3               Ageing                0 - 14, 255  \n4               Makeup                0 - 74, 255  \n5               Blush                 0 - 6, 255  \n6               Complexion            0 - 11, 255  \n7               Sun Damage            0 - 10, 255  \n8               Lipstick              0 - 9, 255  \n9               Moles/Freckles        0 - 17, 255  \n10              Chest Hair            0 - 16, 255  \n11              Body Blemishes        0 - 11, 255  \n12              Add Body Blemishes    0 - 1, 255  \n```\n\n**Note:**\n\nYou may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.",
            "examples": [],
            "hash": "0x48F44967FA05CC1E",
            "ns": "PED",
            "jhash": "0xD28DBA90",
            "manualHash": true
        },
        "0x9414E18B9434C2FE": {
            "name": "SET_PED_HEAD_BLEND_DATA",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "shapeFirstID",
                    "type": "int",
                    "description": "Controls the shape of the first ped's face"
                },
                {
                    "name": "shapeSecondID",
                    "type": "int",
                    "description": "Controls the shape of the second ped's face"
                },
                {
                    "name": "shapeThirdID",
                    "type": "int",
                    "description": "Controls the shape of the third ped's face"
                },
                {
                    "name": "skinFirstID",
                    "type": "int",
                    "description": "Controls the first id's skin tone"
                },
                {
                    "name": "skinSecondID",
                    "type": "int",
                    "description": "Controls the second id's skin tone"
                },
                {
                    "name": "skinThirdID",
                    "type": "int",
                    "description": "Controls the third id's skin tone"
                },
                {
                    "name": "shapeMix",
                    "type": "float",
                    "description": "0.0 - 1.0 Of whose characteristics to take Mother -> Father (shapeFirstID and shapeSecondID)"
                },
                {
                    "name": "skinMix",
                    "type": "float",
                    "description": "0.0 - 1.0 Of whose characteristics to take Mother -> Father (skinFirstID and skinSecondID)"
                },
                {
                    "name": "thirdMix",
                    "type": "float",
                    "description": "Overrides the others in favor of the third IDs."
                },
                {
                    "name": "isParent",
                    "type": "BOOL",
                    "description": "IsParent is set for \"children\" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise."
                }
            ],
            "results": "void",
            "description": "For more info please refer to [this](https://gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained) topic.\n\n**Other information:**\n\nIDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br>\n\nThis native function is often called prior to calling natives such as:\n\n*   [`SetPedHairColor`](#\\_0xBB43F090)\n*   [`SetPedHeadOverlayColor`](#\\_0x78935A27)\n*   [`SetPedHeadOverlay`](#\\_0xD28DBA90)\n*   [`SetPedFaceFeature`](#\\_0x6C8D4458)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Unfortunately, there's no clear way of getting the head blend data in lua out of the box, but there are wrappers:\n-- https://forum.cfx.re/t/small-c-export-event-wrapper-for-getpedheadblenddata/214611\nSetPedHeadBlendData(PlayerPedId(), 0, 0, 0, 0, 0, 0, 0, 0, 0, false)"
                }
            ],
            "hash": "0x9414E18B9434C2FE",
            "ns": "PED",
            "jhash": "0x60746B88",
            "manualHash": true
        },
        "0x497BF74A7B9CB952": {
            "name": "_SET_PED_HEAD_OVERLAY_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "overlayID",
                    "type": "int",
                    "description": "An integer representing the overlay id"
                },
                {
                    "name": "colorType",
                    "type": "int",
                    "description": "1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases."
                },
                {
                    "name": "colorID",
                    "type": "int",
                    "description": "An integer representing the primary color id"
                },
                {
                    "name": "secondColorID",
                    "type": "int",
                    "description": "An integer representing the secondary color id"
                }
            ],
            "results": "void",
            "description": "```\nUsed for freemode (online) characters. \nCalled after SET_PED_HEAD_OVERLAY().  \n```\n\n**Note:**\n\nYou may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.",
            "examples": [],
            "hash": "0x497BF74A7B9CB952",
            "ns": "PED",
            "manualHash": true
        },
        "0x33A8F7F7D5F7F33C": {
            "name": "SET_PED_HEARING_RANGE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x33A8F7F7D5F7F33C",
            "ns": "PED",
            "jhash": "0xB32087E0",
            "manualHash": true
        },
        "0xC1F6EBF9A3D55538": {
            "name": "SET_PED_HEATSCALE_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "heatScale",
                    "type": "float",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC1F6EBF9A3D55538",
            "ns": "PED",
            "aliases": ["0xC1F6EBF9A3D55538"],
            "jhash": "0xEF9142DB",
            "manualHash": true
        },
        "0x560A43136EB58105": {
            "name": "SET_PED_HELMET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "canWearHelmet", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x560A43136EB58105",
            "ns": "PED",
            "jhash": "0xED366E53",
            "manualHash": true
        },
        "0xC0E78D5C2CE3EB25": {
            "name": "SET_PED_HELMET_FLAG",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "helmetFlag", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC0E78D5C2CE3EB25",
            "ns": "PED",
            "jhash": "0x12677780",
            "manualHash": true
        },
        "0xF107E836A70DCE05": {
            "name": "SET_PED_ID_RANGE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF107E836A70DCE05",
            "ns": "PED",
            "jhash": "0xEF3B4ED9",
            "manualHash": true
        },
        "0xF1550C4BD22582E2": {
            "name": "SET_PED_HELMET_TEXTURE_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "textureIndex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF1550C4BD22582E2",
            "ns": "PED",
            "jhash": "0x5F6C3328",
            "manualHash": true
        },
        "0x971D38760FBC02EF": {
            "name": "SET_PED_KEEP_TASK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x971D38760FBC02EF",
            "ns": "PED",
            "jhash": "0xA7EC79CE",
            "manualHash": true
        },
        "0x52D59AB61DDC05DD": {
            "name": "SET_PED_HIGHLY_PERCEPTIVE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x52D59AB61DDC05DD",
            "ns": "PED",
            "aliases": ["0x52D59AB61DDC05DD"],
            "jhash": "0x9A2180FF",
            "manualHash": true
        },
        "0xF75B0D629E1C063D": {
            "name": "SET_PED_INTO_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669). -2 for the first available seat."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF75B0D629E1C063D",
            "ns": "PED",
            "jhash": "0x07500C79",
            "manualHash": true
        },
        "0x3F7325574E41B44D": {
            "name": "_SET_PED_HELMET_UNK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3F7325574E41B44D",
            "ns": "PED",
            "aliases": ["0x3F7325574E41B44D"],
            "manualHash": true
        },
        "0x530071295899A8C6": {
            "name": "SET_PED_IN_VEHICLE_CONTEXT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "context", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY(\"MINI_PROSTITUTE_LOW_PASSENGER\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY(\"MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY(\"MISS_FAMILY1_JIMMY_SIT\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY(\"MISS_FAMILY1_JIMMY_SIT_REAR\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY(\"MISS_FAMILY2_JIMMY_BICYCLE\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY(\"MISSFBI2_MICHAEL_DRIVEBY\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"MISS_ARMENIAN3_FRANKLIN_TENSE\"));\nPED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"MISSFBI5_TREVOR_DRIVING\"));\n```",
            "examples": [],
            "hash": "0x530071295899A8C6",
            "ns": "PED",
            "jhash": "0x27F25C0E",
            "manualHash": true
        },
        "0xF5F6378C4F3419D3": {
            "name": "SET_PED_MAX_HEALTH",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "```\nsets the maximum health of a ped  \nI think it's never been used in any script  \n```",
            "examples": [],
            "hash": "0xF5F6378C4F3419D3",
            "ns": "PED",
            "jhash": "0x5533F60B",
            "manualHash": true
        },
        "0x26D83693ED99291C": {
            "name": "SET_PED_HELMET_PROP_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "propIndex",
                    "type": "int",
                    "description": "The prop index to set the helmet to. Refer to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)."
                }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 3: BOOL p2\n```",
            "examples": [],
            "hash": "0x26D83693ED99291C",
            "ns": "PED",
            "jhash": "0xA316D13F",
            "manualHash": true
        },
        "0xDC2C5C242AAC342B": {
            "name": "SET_PED_LOD_MULTIPLIER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC2C5C242AAC342B",
            "ns": "PED",
            "jhash": "0x1D2B5C70",
            "manualHash": true
        },
        "0xC396F5B86FF9FEBD": {
            "name": "SET_PED_LEG_IK_MODE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "mode", "type": "int" }
            ],
            "results": "void",
            "description": "```\n\"IK\" stands for \"Inverse kinematics.\" I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1  \n```",
            "examples": [],
            "hash": "0xC396F5B86FF9FEBD",
            "ns": "PED",
            "jhash": "0xFDDB042E",
            "manualHash": true
        },
        "0x570389D1C3DE3C6B": {
            "name": "SET_PED_INCREASED_AVOIDANCE_RADIUS",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x570389D1C3DE3C6B",
            "ns": "PED",
            "aliases": ["0x570389D1C3DE3C6B"],
            "jhash": "0x59C52BE6",
            "manualHash": true
        },
        "0xFA0675AB151073FA": {
            "name": "SET_PED_MIN_GROUND_TIME_FOR_STUNGUN",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "ms", "type": "int" }
            ],
            "results": "void",
            "description": "```\nPed will stay on the ground after being stunned for at lest ms time. (in milliseconds)  \n```",
            "examples": [],
            "hash": "0xFA0675AB151073FA",
            "ns": "PED",
            "jhash": "0x2F0D0973",
            "manualHash": true
        },
        "0x6BA428C528D9E522": {
            "name": "SET_PED_MAX_TIME_UNDERWATER",
            "params": [
                { "name": "ped", "type": "Ped", "description": "Ped id." },
                {
                    "name": "value",
                    "type": "float",
                    "description": "Time in seconds. Maximum is 50.0, any value above will be changed to 50.0."
                }
            ],
            "results": "void",
            "description": "Set the maximum time a ped can stay underwater. Maximum seems to be 50 seconds.",
            "examples": [],
            "hash": "0x6BA428C528D9E522",
            "ns": "PED",
            "jhash": "0x082EF240",
            "manualHash": true
        },
        "0x43C851690662113D": {
            "name": "SET_PED_MAX_TIME_IN_WATER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x43C851690662113D",
            "ns": "PED",
            "jhash": "0xFE0A106B",
            "manualHash": true
        },
        "0xA9C8960E8684C1B5": {
            "name": "SET_PED_MONEY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "amount", "type": "int" }
            ],
            "results": "void",
            "description": "```\nMaximum possible amount of money on MP is 2000. ~JX  \n-----------------------------------------------------------------------------  \nMaximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.  \n```",
            "examples": [],
            "hash": "0xA9C8960E8684C1B5",
            "ns": "PED",
            "jhash": "0x40D90BF2",
            "manualHash": true
        },
        "0x433083750C5E064A": {
            "name": "SET_PED_MAX_MOVE_BLEND_RATIO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x433083750C5E064A",
            "ns": "PED",
            "jhash": "0xEAD0269A",
            "manualHash": true
        },
        "0x01A898D26E2333DD": {
            "name": "SET_PED_MIN_MOVE_BLEND_RATIO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x01A898D26E2333DD",
            "ns": "PED",
            "jhash": "0x383EC364",
            "manualHash": true
        },
        "0xE163A4BCE4DE6F11": {
            "name": "SET_PED_MODEL_IS_SUPPRESSED",
            "params": [
                {
                    "name": "model",
                    "type": "Hash",
                    "annotations": { "cs_type": "int" }
                },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE163A4BCE4DE6F11",
            "ns": "PED",
            "jhash": "0x7820CA43",
            "manualHash": true
        },
        "0x0A986918B102B448": {
            "name": "SET_PED_MOTION_BLUR",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A986918B102B448",
            "ns": "PED",
            "jhash": "0xA211A128",
            "manualHash": true
        },
        "0x9E8C908F41584ECD": {
            "name": "SET_PED_MOVE_ANIMS_BLEND_OUT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9E8C908F41584ECD",
            "ns": "PED",
            "jhash": "0x20E01957",
            "manualHash": true
        },
        "0xAF8A94EDE7712BEF": {
            "name": "SET_PED_MOVEMENT_CLIPSET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "clipSet", "type": "char*" },
                {
                    "name": "transitionSpeed",
                    "type": "float",
                    "description": "time in seconds it takes to transition from one movement clipset to another."
                }
            ],
            "results": "void",
            "description": "```\nList of movement clipsets:\nThanks to elsewhat for list.\n \"ANIM_GROUP_MOVE_BALLISTIC\"\n \"ANIM_GROUP_MOVE_LEMAR_ALLEY\"\n \"clipset@move@trash_fast_turn\"\n \"FEMALE_FAST_RUNNER\"\n \"missfbi4prepp1_garbageman\"\n \"move_characters@franklin@fire\"\n \"move_characters@Jimmy@slow@\"\n \"move_characters@michael@fire\"\n \"move_f@flee@a\"\n \"move_f@scared\"\n \"move_f@sexy@a\"\n \"move_heist_lester\"\n \"move_injured_generic\"\n \"move_lester_CaneUp\"\n \"move_m@bag\"\n \"MOVE_M@BAIL_BOND_NOT_TAZERED\"\n \"MOVE_M@BAIL_BOND_TAZERED\"\n \"move_m@brave\"\n \"move_m@casual@d\"\n \"move_m@drunk@moderatedrunk\"\n \"MOVE_M@DRUNK@MODERATEDRUNK\"\n \"MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP\"\n \"MOVE_M@DRUNK@SLIGHTLYDRUNK\"\n \"MOVE_M@DRUNK@VERYDRUNK\"\n \"move_m@fire\"\n \"move_m@gangster@var_e\"\n \"move_m@gangster@var_f\"\n \"move_m@gangster@var_i\"\n \"move_m@JOG@\"\n \"MOVE_M@PRISON_GAURD\"\n \"MOVE_P_M_ONE\"\n \"MOVE_P_M_ONE_BRIEFCASE\"\n \"move_p_m_zero_janitor\"\n \"move_p_m_zero_slow\"\n \"move_ped_bucket\"\n \"move_ped_crouched\"\n \"move_ped_mop\"\n \"MOVE_M@FEMME@\"\n \"MOVE_F@FEMME@\"\n \"MOVE_M@GANGSTER@NG\"\n \"MOVE_F@GANGSTER@NG\"\n \"MOVE_M@POSH@\"\n \"MOVE_F@POSH@\"\n \"MOVE_M@TOUGH_GUY@\"\n \"MOVE_F@TOUGH_GUY@\"\n~ NotCrunchyTaco\n```",
            "examples": [],
            "hash": "0xAF8A94EDE7712BEF",
            "ns": "PED",
            "jhash": "0xA817CDEB",
            "manualHash": true
        },
        "0x085BF80FA50A39D1": {
            "name": "SET_PED_MOVE_RATE_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nMin: 0.00  \nMax: 10.00  \nCan be used in combo with fast run cheat.  \nWhen value is set to 10.00:  \nSprinting without fast run cheat: 66 m/s  \nSprinting with fast run cheat: 77 m/s  \nNeeds to be looped!  \nNote: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.  \n```",
            "examples": [],
            "hash": "0x085BF80FA50A39D1",
            "ns": "PED",
            "jhash": "0x900008C6",
            "manualHash": true
        },
        "0xFE07FF6495D52E2A": {
            "name": "SET_PED_PANIC_EXIT_SCENARIO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xFE07FF6495D52E2A",
            "ns": "PED",
            "aliases": ["0xFE07FF6495D52E2A"],
            "jhash": "0x59DE73AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3DBFC55D5C9BB447": {
            "name": "SET_PED_NEVER_LEAVES_GROUP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3DBFC55D5C9BB447",
            "ns": "PED",
            "jhash": "0x0E038813",
            "manualHash": true
        },
        "0x8421EB4DA7E391B9": {
            "name": "SET_PED_PREFERRED_COVER_SET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "itemSet", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8421EB4DA7E391B9",
            "ns": "PED",
            "aliases": ["0x8421EB4DA7E391B9"],
            "jhash": "0xF3B7EFBF",
            "manualHash": true
        },
        "0x333FC8DB079B7186": {
            "name": "SET_PED_PARACHUTE_TINT_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "tintIndex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x333FC8DB079B7186",
            "ns": "PED",
            "jhash": "0x5AEFEC3A",
            "manualHash": true
        },
        "0xEE01041D559983EA": {
            "name": "SET_PED_NON_CREATION_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThe distance between these points, is the diagonal of a box (remember it's 3D).  \n```",
            "examples": [],
            "hash": "0xEE01041D559983EA",
            "ns": "PED",
            "jhash": "0x7A97283F",
            "manualHash": true
        },
        "0x98EFA132A4117BE1": {
            "name": "SET_PED_NAME_DEBUG",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n*untested but char *name could also be a hash for a localized string  \n```",
            "examples": [],
            "hash": "0x98EFA132A4117BE1",
            "ns": "PED",
            "jhash": "0x20D6273E",
            "manualHash": true
        },
        "0xAAD6D1ACF08F4612": {
            "name": "SET_PED_PINNED_DOWN",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "pinned", "type": "BOOL" },
                { "name": "i", "type": "int" }
            ],
            "results": "Any",
            "description": "```\ni could be time. Only example in the decompiled scripts uses it as -1.\n```",
            "examples": [],
            "hash": "0xAAD6D1ACF08F4612",
            "ns": "PED",
            "jhash": "0xCC78999D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x93376B65A266EB5F": {
            "name": "SET_PED_PROP_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component that you want to set. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171)."
                },
                {
                    "name": "attach",
                    "type": "BOOL",
                    "description": "Attached or not."
                }
            ],
            "results": "void",
            "description": "This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of props\n\n**0**: Hats\n**1**: Glasses\n**2**: Ears\n**6**: Watches\n**7**: Bracelets\n\nList of Prop IDs\n\n```cpp\n// Props\nenum eAnchorPoints\n{\n    ANCHOR_HEAD = 0, // \"p_head\"\n    ANCHOR_EYES = 1, // \"p_eyes\"\n    ANCHOR_EARS = 2, // \"p_ears\"\n    ANCHOR_MOUTH = 3, // \"p_mouth\"\n    ANCHOR_LEFT_HAND = 4, // \"p_lhand\"\n    ANCHOR_RIGHT_HAND = 5, // \"p_rhand\"\n    ANCHOR_LEFT_WRIST = 6, // \"p_lwrist\"\n    ANCHOR_RIGHT_WRIST = 7, // \"p_rwrist\"\n    ANCHOR_HIP = 8, // \"p_lhip\"\n    ANCHOR_LEFT_FOOT = 9, // \"p_lfoot\"\n    ANCHOR_RIGHT_FOOT = 10, // \"p_rfoot\"\n    ANCHOR_PH_L_HAND = 11, // \"ph_lhand\"\n    ANCHOR_PH_R_HAND = 12, // \"ph_rhand\"\n    NUM_ANCHORS = 13,\n};\n```",
            "examples": [],
            "hash": "0x93376B65A266EB5F",
            "ns": "PED",
            "jhash": "0x0829F2E2",
            "manualHash": true
        },
        "0x94D94BF1A75AED3D": {
            "name": "SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**\n\n```\nPoints to the same function as for example GET_RANDOM_VEHICLE_MODEL_IN_MEMORY and it does absolutely nothing.  \n```",
            "examples": [],
            "hash": "0x94D94BF1A75AED3D",
            "ns": "PED",
            "jhash": "0x7C563CD2",
            "manualHash": true
        },
        "0x2B16A3BFF1FBCE49": {
            "name": "SET_PED_PRELOAD_PROP_DATA",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component that you want to set. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2B16A3BFF1FBCE49",
            "ns": "PED",
            "aliases": ["0x2B16A3BFF1FBCE49", "_IS_PED_PROP_VALID"],
            "jhash": "0xC0E23671",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCD17B554996A8D9E": {
            "name": "SET_PED_PRIMARY_LOOKAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "lookAt", "type": "Ped" }
            ],
            "results": "void",
            "description": "```\nThis is only called once in the scripts.\nsub_1CD9(&l_49, 0, getElem(3, &l_34, 4), \"MICHAEL\", 0, 1);\n                    sub_1CA8(\"WORLD_HUMAN_SMOKING\", 2);\n                    PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());\n```",
            "examples": [],
            "hash": "0xCD17B554996A8D9E",
            "ns": "PED",
            "jhash": "0x6DEF6F1C",
            "manualHash": true
        },
        "0x39D55A620FCB6A3A": {
            "name": "SET_PED_PRELOAD_VARIATION_DATA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "slot", "type": "int" },
                { "name": "drawableId", "type": "int" },
                { "name": "textureId", "type": "int" }
            ],
            "results": "Any",
            "description": "```\nfrom extreme3.c4\nPED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));\np1 is probably componentId\n```",
            "examples": [],
            "hash": "0x39D55A620FCB6A3A",
            "ns": "PED",
            "aliases": ["0x39D55A620FCB6A3A"],
            "jhash": "0x45F3BDFB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF0A4F1BBF4FA7497": {
            "name": "SET_PED_RAGDOLL_ON_COLLISION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.\nNeeds to be recalled after each ragdoll from a Collision.",
            "examples": [],
            "hash": "0xF0A4F1BBF4FA7497",
            "ns": "PED",
            "jhash": "0x2654A0F4",
            "manualHash": true
        },
        "0x01F6594B923B9251": {
            "name": "SET_PED_RAGDOLL_FORCE_FALL",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x01F6594B923B9251",
            "ns": "PED",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x20A5BDE0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xADB3F206518799E8": {
            "name": "SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "hash", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xADB3F206518799E8",
            "ns": "PED",
            "jhash": "0x423B7BA2",
            "manualHash": true
        },
        "0xC8A9481A01E63C28": {
            "name": "SET_PED_RANDOM_COMPONENT_VARIATION",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "p1",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                }
            ],
            "results": "void",
            "description": "```\np1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.  \n```",
            "examples": [],
            "hash": "0xC8A9481A01E63C28",
            "ns": "PED",
            "jhash": "0x4111BA46",
            "manualHash": true
        },
        "0xE88DA0751C22A2AD": {
            "name": "SET_PED_RESERVE_PARACHUTE_TINT_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE88DA0751C22A2AD",
            "ns": "PED",
            "jhash": "0x177EFC79",
            "manualHash": true
        },
        "0xC44AA05345C992C6": {
            "name": "SET_PED_RANDOM_PROPS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC44AA05345C992C6",
            "ns": "PED",
            "jhash": "0xE3318E0E",
            "manualHash": true
        },
        "0xC80A74AC829DDD92": {
            "name": "SET_PED_RELATIONSHIP_GROUP_HASH",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "hash", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC80A74AC829DDD92",
            "ns": "PED",
            "jhash": "0x79F8C18C",
            "manualHash": true
        },
        "0x36C6984C3ED0C911": {
            "name": "_SET_PED_SCUBA_GEAR_VARIATION",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "This native sets a scuba mask for freemode models and an oxygen bottle for player_\\* models. It works on freemode and player_\\* models.",
            "examples": [],
            "hash": "0x36C6984C3ED0C911",
            "ns": "PED",
            "aliases": ["0x36C6984C3ED0C911"],
            "manualHash": true
        },
        "0x614DA022990752DC": {
            "name": "SET_PED_SHOOT_RATE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "shootRate", "type": "int" }
            ],
            "results": "void",
            "description": "```\nshootRate 0-1000  \n```",
            "examples": [],
            "hash": "0x614DA022990752DC",
            "ns": "PED",
            "jhash": "0xFB301746",
            "manualHash": true
        },
        "0xF29CF591C4BF6CEE": {
            "name": "SET_PED_SEEING_RANGE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF29CF591C4BF6CEE",
            "ns": "PED",
            "jhash": "0x4BD72FE8",
            "manualHash": true
        },
        "0xC1E8A365BF3B29F2": {
            "name": "SET_PED_RESET_FLAG",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "flagId", "type": "int" },
                { "name": "doReset", "type": "BOOL" }
            ],
            "results": "void",
            "description": "PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);\nKnown values:",
            "examples": [],
            "hash": "0xC1E8A365BF3B29F2",
            "ns": "PED",
            "jhash": "0xCFF6FF66",
            "manualHash": true
        },
        "0xEEED8FAFEC331A70": {
            "name": "SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xEEED8FAFEC331A70",
            "ns": "PED",
            "aliases": ["0xEEED8FAFEC331A70"],
            "jhash": "0x7B4C3E6F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x96A05E4FB321B1BA": {
            "name": "SET_PED_SHOOTS_AT_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x96A05E4FB321B1BA",
            "ns": "PED",
            "jhash": "0xFD64EAE5",
            "manualHash": true
        },
        "0xEC6935EBE0847B90": {
            "name": "_SET_PED_SHOULD_PLAY_DIRECTED_SCENARIO_EXIT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xEC6935EBE0847B90",
            "ns": "PED",
            "aliases": ["0xEC6935EBE0847B90"],
            "jhash": "0x761F8F48",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D3151A373974804": {
            "name": "SET_PED_SPHERE_DEFENSIVE_AREA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9D3151A373974804",
            "ns": "PED",
            "jhash": "0xBD96D8E8",
            "manualHash": true
        },
        "0xF1C03A5352243A30": {
            "name": "SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF1C03A5352243A30",
            "ns": "PED",
            "aliases": ["0xF1C03A5352243A30"],
            "jhash": "0x4C684C81",
            "manualHash": true
        },
        "0xA3A9299C4F2ADB98": {
            "name": "SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA3A9299C4F2ADB98",
            "ns": "PED",
            "aliases": ["0xA3A9299C4F2ADB98"],
            "jhash": "0x033F43FA",
            "manualHash": true
        },
        "0x1509C089ADC208BF": {
            "name": "SET_PED_STEERS_AROUND_OBJECTS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1509C089ADC208BF",
            "ns": "PED",
            "jhash": "0x3BD9B0A6",
            "manualHash": true
        },
        "0xEDF4079F9D54C9A1": {
            "name": "SET_PED_STAY_IN_VEHICLE_WHEN_JACKED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEDF4079F9D54C9A1",
            "ns": "PED",
            "jhash": "0xB014A09C",
            "manualHash": true
        },
        "0x88CBB5CEB96B7BD2": {
            "name": "SET_PED_STEALTH_MOVEMENT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "action", "type": "char*" }
            ],
            "results": "void",
            "description": "```\np1 is usually 0 in the scripts. action is either 0 or a pointer to \"DEFAULT_ACTION\".  \n```",
            "examples": [],
            "hash": "0x88CBB5CEB96B7BD2",
            "ns": "PED",
            "jhash": "0x67E28E1D",
            "manualHash": true
        },
        "0x29A28F3F8CF6D854": {
            "name": "SET_PED_STRAFE_CLIPSET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "clipSet", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x29A28F3F8CF6D854",
            "ns": "PED",
            "jhash": "0x0BACF010",
            "manualHash": true
        },
        "0x27B0405F59637D1F": {
            "name": "SET_PED_SWEAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "sweat", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSweat is set to 100.0 or 0.0 in the decompiled scripts.  \n```",
            "examples": [],
            "hash": "0x27B0405F59637D1F",
            "ns": "PED",
            "jhash": "0x76A1DB9F",
            "manualHash": true
        },
        "0x46F2193B3AD1D891": {
            "name": "SET_PED_STEERS_AROUND_PEDS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x46F2193B3AD1D891",
            "ns": "PED",
            "jhash": "0x797CAE4F",
            "manualHash": true
        },
        "0xEB6FB9D48DDE23EC": {
            "name": "SET_PED_STEERS_AROUND_VEHICLES",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEB6FB9D48DDE23EC",
            "ns": "PED",
            "jhash": "0x533C0651",
            "manualHash": true
        },
        "0x0703B9079823DA4A": {
            "name": "SET_PED_TARGET_LOSS_RESPONSE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "responseType", "type": "int" }
            ],
            "results": "void",
            "description": "```\nOnly 1 and 2 appear in the scripts. combatbehaviour.meta seems to only have TLR_SearchForTarget for all peds, but we don't know if that's 1 or 2.  \n```",
            "examples": [],
            "hash": "0x0703B9079823DA4A",
            "ns": "PED",
            "jhash": "0xCFA613FF",
            "manualHash": true
        },
        "0x332B562EEDA62399": {
            "name": "SET_PED_TO_LOAD_COVER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x332B562EEDA62399",
            "ns": "PED",
            "jhash": "0xCF94BA97",
            "manualHash": true
        },
        "0xEBD76F2359F190AC": {
            "name": "SET_PED_SUFFERS_CRITICAL_HITS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Ped no longer takes critical damage modifiers if set to FALSE.\n\nExample: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.",
            "examples": [],
            "hash": "0xEBD76F2359F190AC",
            "ns": "PED",
            "jhash": "0x6F6FC7E6",
            "manualHash": true
        },
        "0xD76632D99E4966C8": {
            "name": "SET_PED_TO_RAGDOLL_WITH_FALL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "time", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "ragdollType", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "p10", "type": "float" },
                { "name": "p11", "type": "float" },
                { "name": "p12", "type": "float" },
                { "name": "p13", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nReturn variable is never used in R*'s scripts.  \nNot sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.  \nx, y, and z are coordinates, most likely to where the ped will fall.  \np7 is probably the force of the fall, but untested, so I left the variable name the same.  \np8 to p13 are always 0f in R*'s scripts.  \n(Simplified) Example of the usage of the function from R*'s scripts:  \nped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);  \n```",
            "examples": [],
            "hash": "0xD76632D99E4966C8",
            "ns": "PED",
            "jhash": "0xFA12E286",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x70793BDCA1E854D4": {
            "name": "SET_PED_VISUAL_FIELD_MAX_ANGLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x70793BDCA1E854D4",
            "ns": "PED",
            "jhash": "0x0CEA0F9A",
            "manualHash": true
        },
        "0x112942C6E708F70B": {
            "name": "SET_PED_TO_INFORM_RESPECTED_FRIENDS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "radius", "type": "float" },
                { "name": "maxFriends", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x112942C6E708F70B",
            "ns": "PED",
            "jhash": "0xD78AC46C",
            "manualHash": true
        },
        "0xAE99FB955581844A": {
            "name": "SET_PED_TO_RAGDOLL",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "time1",
                    "type": "int",
                    "description": "Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1."
                },
                { "name": "time2", "type": "int" },
                { "name": "ragdollType", "type": "int" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "p4/p5: Unusued in TU27\n\n### Ragdoll Types\n\n**0**: CTaskNMRelax\n**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.\n**Else**: CTaskNMBalance",
            "examples": [],
            "hash": "0xAE99FB955581844A",
            "ns": "PED",
            "jhash": "0x83CB5052",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x952F06BEECD775CC": {
            "name": "SET_PED_VEHICLE_FORCED_SEAT_USAGE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 5: Any p4\n```",
            "examples": [],
            "hash": "0x952F06BEECD775CC",
            "ns": "PED",
            "aliases": ["0x952F06BEECD775CC"],
            "jhash": "0x79CA237B",
            "manualHash": true
        },
        "0x3B6405E8AB34A907": {
            "name": "SET_PED_VISUAL_FIELD_CENTER_ANGLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "angle", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3B6405E8AB34A907",
            "ns": "PED",
            "jhash": "0xE57202A1",
            "manualHash": true
        },
        "0x7A276EB2C224D70F": {
            "name": "SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "angle", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThis native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.  \n```",
            "examples": [],
            "hash": "0x7A276EB2C224D70F",
            "ns": "PED",
            "jhash": "0x5CC2F1B8",
            "manualHash": true
        },
        "0x2622E35B77D3ACA2": {
            "name": "SET_PED_WEAPON_MOVEMENT_CLIPSET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "clipSet", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2622E35B77D3ACA2",
            "ns": "PED",
            "jhash": "0xF8BE54DC",
            "manualHash": true
        },
        "0xD75ACCF5E0FB5367": {
            "name": "SET_PED_USING_ACTION_MODE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "int" },
                { "name": "action", "type": "char*" }
            ],
            "results": "void",
            "description": "```\np2 is usually -1 in the scripts. action is either 0 or \"DEFAULT_ACTION\".  \n```",
            "examples": [],
            "hash": "0xD75ACCF5E0FB5367",
            "ns": "PED",
            "jhash": "0x8802F696",
            "manualHash": true
        },
        "0x9C74B0BC831B753A": {
            "name": "SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "range", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9C74B0BC831B753A",
            "ns": "PED",
            "jhash": "0xFDF2F7C2",
            "manualHash": true
        },
        "0x78D0B67629D75856": {
            "name": "SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "angle", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThis native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.  \n```",
            "examples": [],
            "hash": "0x78D0B67629D75856",
            "ns": "PED",
            "jhash": "0x39D9102F",
            "manualHash": true
        },
        "0xD8C3BE3EE94CAF2D": {
            "name": "SET_POP_CONTROL_SPHERE_THIS_FRAME",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "min", "type": "float" },
                { "name": "max", "type": "float" }
            ],
            "results": "void",
            "description": "```\nMin and max are usually 100.0 and 200.0\n```",
            "examples": [],
            "hash": "0xD8C3BE3EE94CAF2D",
            "ns": "PED",
            "aliases": ["0xD8C3BE3EE94CAF2D"],
            "jhash": "0x4BBE5E2C",
            "manualHash": true
        },
        "0x2DB492222FB21E26": {
            "name": "SET_PED_VISUAL_FIELD_MIN_ANGLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2DB492222FB21E26",
            "ns": "PED",
            "jhash": "0x72E2E18B",
            "manualHash": true
        },
        "0xB5485E4907B53019": {
            "name": "SET_PED_WETNESS_ENABLED_THIS_FRAME",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\ncombined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function  \n```",
            "examples": [],
            "hash": "0xB5485E4907B53019",
            "ns": "PED",
            "jhash": "0xBDE749F7",
            "manualHash": true
        },
        "0x26695EC767728D84": {
            "name": "SET_RAGDOLL_BLOCKING_FLAGS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nWorks for both player and peds, but some flags don't seem to work for the player (1, for example)  \n1 - Blocks ragdolling when shot.  \n2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.  \n4 - Blocks ragdolling when set on fire.  \n-----------------------------------------------------------------------  \nThere seem to be 26 flags  \n```",
            "examples": [],
            "hash": "0x26695EC767728D84",
            "ns": "PED",
            "aliases": [
                "0x26695EC767728D84",
                "_SET_PED_RAGDOLL_BLOCKING_FLAGS"
            ],
            "jhash": "0x9C8F830D",
            "manualHash": true
        },
        "0xBF25EB89375A37AD": {
            "name": "SET_RELATIONSHIP_BETWEEN_GROUPS",
            "params": [
                { "name": "relationship", "type": "int" },
                { "name": "group1", "type": "Hash" },
                { "name": "group2", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nSets the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \nExample:  \nPED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);  \nPED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);  \n```",
            "examples": [],
            "hash": "0xBF25EB89375A37AD",
            "ns": "PED",
            "jhash": "0xD4A215BA",
            "manualHash": true
        },
        "0x44CB6447D2571AA0": {
            "name": "SET_PED_WETNESS_HEIGHT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "height", "type": "float" }
            ],
            "results": "void",
            "description": "```\nIt adds the wetness level to the player clothing/outfit. As if player just got out from water surface.  \n```",
            "examples": [],
            "hash": "0x44CB6447D2571AA0",
            "ns": "PED",
            "jhash": "0x7B33289A",
            "manualHash": true
        },
        "0x7A556143A1C03898": {
            "name": "SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7A556143A1C03898",
            "ns": "PED",
            "jhash": "0x2909ABF0",
            "manualHash": true
        },
        "0x5615E0C5EB2BC6E2": {
            "name": "_SET_RELATIONSHIP_GROUP_DONT_AFFECT_WANTED_LEVEL",
            "params": [
                {
                    "name": "group",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5615E0C5EB2BC6E2",
            "ns": "PED",
            "aliases": ["0x5615E0C5EB2BC6E2"],
            "manualHash": true
        },
        "0x28157D43CF600981": {
            "name": "SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "range", "type": "float" },
                { "name": "p4", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x28157D43CF600981",
            "ns": "PED",
            "jhash": "0x80EAD297",
            "manualHash": true
        },
        "0x14F19A8782C8071E": {
            "name": "SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND",
            "params": [{ "name": "value", "type": "BOOL" }],
            "results": "void",
            "description": "```\nSets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.  \n```",
            "examples": [],
            "hash": "0x14F19A8782C8071E",
            "ns": "PED",
            "jhash": "0x85615FD0",
            "manualHash": true
        },
        "0x394B9CD12435C981": {
            "name": "SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME",
            "params": [
                { "name": "sceneID", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x394B9CD12435C981",
            "ns": "PED",
            "aliases": [
                "0x394B9CD12435C981",
                "_SET_SYNCHRONIZED_SCENE_OCCLUSION_PORTAL"
            ],
            "jhash": "0x2DE48DA1",
            "manualHash": true
        },
        "0x5086C7843552CF85": {
            "name": "SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5086C7843552CF85",
            "ns": "PED",
            "jhash": "0x25EA2AA5",
            "manualHash": true
        },
        "0x6ACF6B7225801CD7": {
            "name": "SET_SYNCHRONIZED_SCENE_ORIGIN",
            "params": [
                { "name": "sceneID", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "roll", "type": "float" },
                { "name": "pitch", "type": "float" },
                { "name": "yaw", "type": "float" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6ACF6B7225801CD7",
            "ns": "PED",
            "jhash": "0x2EC2A0B2",
            "manualHash": true
        },
        "0xFEE4A5459472A9F8": {
            "name": "SPAWNPOINTS_CANCEL_SEARCH",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFEE4A5459472A9F8",
            "ns": "PED",
            "aliases": ["0xFEE4A5459472A9F8"],
            "jhash": "0x492C9E46",
            "manualHash": true
        },
        "0x5917BBA32D06C230": {
            "name": "SET_SCRIPTED_ANIM_SEAT_OFFSET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5917BBA32D06C230",
            "ns": "PED",
            "jhash": "0x7CEFFA45",
            "manualHash": true
        },
        "0x734292F4F0ABF6D0": {
            "name": "SET_SYNCHRONIZED_SCENE_PHASE",
            "params": [
                { "name": "sceneID", "type": "int" },
                { "name": "phase", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x734292F4F0ABF6D0",
            "ns": "PED",
            "jhash": "0xF5AB0D98",
            "manualHash": true
        },
        "0xA635C11B8C44AFC2": {
            "name": "SPAWNPOINTS_GET_NUM_SEARCH_RESULTS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA635C11B8C44AFC2",
            "ns": "PED",
            "aliases": ["0xA635C11B8C44AFC2"],
            "jhash": "0xF46B4DC8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3C67506996001F5E": {
            "name": "SPAWNPOINTS_IS_SEARCH_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3C67506996001F5E",
            "ns": "PED",
            "aliases": ["0x3C67506996001F5E"],
            "jhash": "0x814A28F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB782F8238512BAD5": {
            "name": "SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB782F8238512BAD5",
            "ns": "PED",
            "aliases": ["0xB782F8238512BAD5"],
            "jhash": "0xBA699DDF",
            "manualHash": true
        },
        "0xF445DE8DA80A1792": {
            "name": "SPAWNPOINTS_IS_SEARCH_FAILED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF445DE8DA80A1792",
            "ns": "PED",
            "aliases": ["0xF445DE8DA80A1792"],
            "jhash": "0x6B83ABDF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD9A897A4C6C2974F": {
            "name": "SET_SYNCHRONIZED_SCENE_LOOPED",
            "params": [
                { "name": "sceneID", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD9A897A4C6C2974F",
            "ns": "PED",
            "jhash": "0x32ED9F82",
            "manualHash": true
        },
        "0x280C7E3AC7F56E90": {
            "name": "SPAWNPOINTS_GET_SEARCH_RESULT",
            "params": [
                { "name": "randomInt", "type": "int" },
                { "name": "x", "type": "float*" },
                { "name": "y", "type": "float*" },
                { "name": "z", "type": "float*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x280C7E3AC7F56E90",
            "ns": "PED",
            "aliases": ["0x280C7E3AC7F56E90"],
            "jhash": "0x36A4AC65",
            "manualHash": true
        },
        "0xB6C49F8A5E295A5D": {
            "name": "SET_SYNCHRONIZED_SCENE_RATE",
            "params": [
                { "name": "sceneID", "type": "int" },
                { "name": "rate", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB6C49F8A5E295A5D",
            "ns": "PED",
            "jhash": "0xF10112FD",
            "manualHash": true
        },
        "0x2DF9038C90AD5264": {
            "name": "SPAWNPOINTS_START_SEARCH",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "interiorFlags", "type": "int" },
                { "name": "scale", "type": "float" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2DF9038C90AD5264",
            "ns": "PED",
            "aliases": ["0x2DF9038C90AD5264"],
            "jhash": "0x909A1D76",
            "manualHash": true
        },
        "0xA586FBEB32A53DBB": {
            "name": "SPAWNPOINTS_IS_SEARCH_COMPLETE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA586FBEB32A53DBB",
            "ns": "PED",
            "aliases": ["0xA586FBEB32A53DBB"],
            "jhash": "0x0B60D2BA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC158D28142A34608": {
            "name": "STOP_PED_WEAPON_FIRING_WHEN_DROPPED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC158D28142A34608",
            "ns": "PED",
            "jhash": "0x4AC3421E",
            "manualHash": true
        },
        "0xB2AFF10216DEFA2F": {
            "name": "SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "interiorFlags", "type": "int" },
                { "name": "scale", "type": "float" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB2AFF10216DEFA2F",
            "ns": "PED",
            "aliases": ["0xB2AFF10216DEFA2F"],
            "jhash": "0x4AAD0ECB",
            "manualHash": true
        },
        "0xB47BD05FA66B40CF": {
            "name": "STOP_ANY_PED_MODEL_BEING_SUPPRESSED",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB47BD05FA66B40CF",
            "ns": "PED",
            "jhash": "0x5AD7DC55",
            "manualHash": true
        },
        "0xF9800AA1A771B000": {
            "name": "WAS_PED_KILLED_BY_STEALTH",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF9800AA1A771B000",
            "ns": "PED",
            "jhash": "0x2EA4B54E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x96B1361D9B24C2FF": {
            "name": "UNREGISTER_PEDHEADSHOT",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "```\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n```",
            "examples": [],
            "hash": "0x96B1361D9B24C2FF",
            "ns": "PED",
            "jhash": "0x0879AE45",
            "manualHash": true
        },
        "0x723538F61C647C5A": {
            "name": "UPDATE_PED_HEAD_BLEND_DATA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "shapeMix", "type": "float" },
                { "name": "skinMix", "type": "float" },
                { "name": "thirdMix", "type": "float" }
            ],
            "results": "void",
            "description": "See [`SET_PED_HEAD_BLEND_DATA`](#\\_0x9414E18B9434C2FE)",
            "examples": [],
            "hash": "0x723538F61C647C5A",
            "ns": "PED",
            "jhash": "0x5CB76219",
            "manualHash": true
        },
        "0x7F08E26039C7347C": {
            "name": "WAS_PED_KILLED_BY_TAKEDOWN",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7F08E26039C7347C",
            "ns": "PED",
            "jhash": "0xBDD3CE69",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x61767F73EACEED21": {
            "name": "WAS_PED_KNOCKED_OUT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x61767F73EACEED21",
            "ns": "PED",
            "aliases": ["0x61767F73EACEED21"],
            "jhash": "0x3993092B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x11B499C1E0FF8559": {
            "name": "WAS_PED_SKELETON_UPDATED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nDespite this function's name, it simply returns whether the specified handle is a Ped.  \n```",
            "examples": [],
            "hash": "0x11B499C1E0FF8559",
            "ns": "PED",
            "jhash": "0xF7E2FBAD",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "SHAPETEST": {
        "0x65287525D951F6BE": {
            "name": "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL",
            "params": [
                {
                    "name": "shapeTestHandle",
                    "type": "int",
                    "description": "A shape test handle."
                },
                {
                    "name": "hit",
                    "type": "BOOL*",
                    "description": "Whether or not the shape test hit any collisions."
                },
                {
                    "name": "endCoords",
                    "type": "Vector3*",
                    "description": "The resulting coordinates where the shape test hit a collision."
                },
                {
                    "name": "surfaceNormal",
                    "type": "Vector3*",
                    "description": "The surface normal of the hit position."
                },
                {
                    "name": "materialHash",
                    "type": "Hash*",
                    "description": "hash of the hit material or surface type, see materialFX.dat"
                },
                {
                    "name": "entityHit",
                    "type": "Entity*",
                    "description": "Any dynamic entity hit by the shape test."
                }
            ],
            "results": "int",
            "description": "Returns the result of a shape test, also returning the material of any touched surface.\n\nWhen used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.\n\nUnless the return value is 2, the other return values are undefined.",
            "examples": [],
            "hash": "0x65287525D951F6BE",
            "ns": "SHAPETEST",
            "aliases": ["0x65287525D951F6BE", "_GET_SHAPE_TEST_RESULT_EX"],
            "jhash": "0x4301E10C",
            "manualHash": true,
            "resultsDescription": "`0` if the handle is invalid, `1` if the shape test is still pending, or `2` if the shape test has completed, and the handle should be invalidated."
        },
        "0x3D87450E15D98694": {
            "name": "GET_SHAPE_TEST_RESULT",
            "params": [
                {
                    "name": "shapeTestHandle",
                    "type": "int",
                    "description": "A shape test handle."
                },
                {
                    "name": "hit",
                    "type": "BOOL*",
                    "description": "Whether or not the shape test hit any collisions."
                },
                {
                    "name": "endCoords",
                    "type": "Vector3*",
                    "description": "The resulting coordinates where the shape test hit a collision."
                },
                {
                    "name": "surfaceNormal",
                    "type": "Vector3*",
                    "description": "The surface normal of the hit position."
                },
                {
                    "name": "entityHit",
                    "type": "Entity*",
                    "description": "Any dynamic entity hit by the shape test."
                }
            ],
            "results": "int",
            "description": "Returns the result of a shape test.\n\nWhen used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.\n\nUnless the return value is 2, the other return values are undefined.",
            "examples": [],
            "hash": "0x3D87450E15D98694",
            "ns": "SHAPETEST",
            "aliases": ["_GET_RAYCAST_RESULT"],
            "jhash": "0xF3C2875A",
            "manualHash": true,
            "resultsDescription": "`0` if the handle is invalid, `1` if the shape test is still pending, or `2` if the shape test has completed, and the handle should be invalidated."
        },
        "0x2B3334BCA57CD799": {
            "name": "RELEASE_SCRIPT_GUID_FROM_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity handle to invalidate."
                }
            ],
            "results": "void",
            "description": "Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an\nambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.",
            "examples": [],
            "hash": "0x2B3334BCA57CD799",
            "ns": "SHAPETEST",
            "aliases": ["0x2B3334BCA57CD799", "_SHAPE_TEST_RESULT_ENTITY"],
            "jhash": "0xEC2AAF06",
            "manualHash": true
        },
        "0x37181417CE7C8900": {
            "name": "START_SHAPE_TEST_BOUND",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "flags1", "type": "int" },
                { "name": "flags2", "type": "int" }
            ],
            "results": "int",
            "description": "See [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E) for flags.",
            "examples": [],
            "hash": "0x37181417CE7C8900",
            "ns": "SHAPETEST",
            "aliases": ["0x37181417CE7C8900"],
            "jhash": "0x13BC46C0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x052837721A854EC7": {
            "name": "START_SHAPE_TEST_BOUNDING_BOX",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "flags1", "type": "int" },
                { "name": "flags2", "type": "int" }
            ],
            "results": "int",
            "description": "See [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E) for flags.",
            "examples": [],
            "hash": "0x052837721A854EC7",
            "ns": "SHAPETEST",
            "aliases": ["0x052837721A854EC7"],
            "jhash": "0xCEEAD94B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x377906D8A31E5586": {
            "name": "START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "Starting X coordinate."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Starting Y coordinate."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Starting Z coordinate."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "Ending X coordinate."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Ending Y coordinate."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Ending Z coordinate."
                },
                {
                    "name": "flags",
                    "type": "int",
                    "description": "See [START_SHAPE_TEST_LOS_PROBE](#\\_0x7EE9F5D83DD4F90E)."
                },
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "An entity to ignore, or 0."
                },
                {
                    "name": "p8",
                    "type": "int",
                    "description": "A bit mask with bits 1, 2 and/or 4, relating to collider types. 4 should usually be used."
                }
            ],
            "results": "int",
            "description": "Does the same as [START_SHAPE_TEST_LOS_PROBE](#\\_0x7EE9F5D83DD4F90E), except blocking until the shape test completes.\n\nUse [START_SHAPE_TEST_LOS_PROBE](#\\_0x7EE9F5D83DD4F90E) instead. Literally. Rockstar named this correctly: it's expensive, and it's synchronous.",
            "examples": [],
            "hash": "0x377906D8A31E5586",
            "ns": "SHAPETEST",
            "aliases": ["_CAST_RAY_POINT_TO_POINT", "_START_SHAPE_TEST_RAY"],
            "jhash": "0x8251485D",
            "manualHash": true,
            "resultsDescription": "A shape test handle."
        },
        "0x28579D1B8F8AAC80": {
            "name": "START_SHAPE_TEST_CAPSULE",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "Starting X coordinate."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Starting Y coordinate."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Starting Z coordinate."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "Ending X coordinate."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Ending Y coordinate."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Ending Z coordinate."
                },
                { "name": "radius", "type": "float" },
                {
                    "name": "flags",
                    "type": "int",
                    "description": "See [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E)"
                },
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "Entity to ignore, or 0."
                },
                {
                    "name": "p9",
                    "type": "int",
                    "description": "A bit mask with bits 1, 2, 4, or 7 relating to collider types. 4 and 7 are usually used."
                }
            ],
            "results": "int",
            "description": "Raycast from point to point, where the ray has a radius.",
            "examples": [],
            "hash": "0x28579D1B8F8AAC80",
            "ns": "SHAPETEST",
            "aliases": ["_CAST_3D_RAY_POINT_TO_POINT"],
            "jhash": "0x591EA833",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7EE9F5D83DD4F90E": {
            "name": "START_SHAPE_TEST_LOS_PROBE",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "Starting X coordinate."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Starting Y coordinate."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Starting Z coordinate."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "Ending X coordinate."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Ending Y coordinate."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Ending Z coordinate."
                },
                { "name": "flags", "type": "int", "description": "Flags." },
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "An entity to ignore, or 0."
                },
                {
                    "name": "p8",
                    "type": "int",
                    "description": "A bit mask with bits 1, 2, 4, or 7 relating to collider types. 4 and 7 are usually used."
                }
            ],
            "results": "int",
            "description": "Asynchronously starts a line-of-sight (raycast) world probe shape test.\n\n```cpp\nenum TraceFlags\n{\n  None = 0,\n  IntersectWorld = 1,\n  IntersectVehicles = 2,\n  IntersectPedsSimpleCollision = 4,\n  IntersectPeds = 8,\n  IntersectObjects = 16,\n  IntersectWater = 32,\n  Unknown = 128,\n  IntersectFoliage = 256,\n  IntersectEverything = 4294967295\n}\n```\n\nNOTE: Raycasts that intersect with mission_entites (flag = 2) has limited range and will not register for far away entites. The range seems to be about 30 metres.\n\nUse the handle with [GET_SHAPE_TEST_RESULT](#\\_0x3D87450E15D98694) or [GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL](#\\_0x65287525D951F6BE) until it returns 0 or 2.",
            "examples": [],
            "hash": "0x7EE9F5D83DD4F90E",
            "ns": "SHAPETEST",
            "aliases": ["0x7EE9F5D83DD4F90E"],
            "jhash": "0xEFAF4BA6",
            "manualHash": true,
            "resultsDescription": "A shape test handle."
        },
        "0xFE466162C4401D18": {
            "name": "START_SHAPE_TEST_BOX",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "Starting X coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Starting Y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Starting Z coordinate."
                },
                {
                    "name": "x1",
                    "type": "float",
                    "description": "Ending X coordinate."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Ending Y coordinate."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Ending Z coordinate."
                },
                { "name": "rotX", "type": "float" },
                { "name": "rotY", "type": "float" },
                { "name": "rotZ", "type": "float" },
                {
                    "name": "p9",
                    "type": "int",
                    "description": "Unknown, always 2 or 0"
                },
                {
                    "name": "flags",
                    "type": "int",
                    "description": "See [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E)"
                },
                { "name": "entity", "type": "Entity" },
                {
                    "name": "p12",
                    "type": "int",
                    "description": "A bit mask with bits 1, 2, 4, or 7 relating to collider types. 4 and 7 are usually used."
                }
            ],
            "results": "int",
            "description": "For more information, see [`START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE`](#\\_0x377906D8A31E5586) and [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E).",
            "examples": [],
            "hash": "0xFE466162C4401D18",
            "ns": "SHAPETEST",
            "aliases": ["0xFE466162C4401D18"],
            "jhash": "0x249BC876",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE6AC6C45FBE83004": {
            "name": "START_SHAPE_TEST_SWEPT_SPHERE",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "Starting X coordinate."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Starting Y coordinate."
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Starting Z coordinate."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "Ending X coordinate."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Ending Y coordinate."
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Ending Z coordinate."
                },
                { "name": "radius", "type": "float" },
                {
                    "name": "flags",
                    "type": "int",
                    "description": "See [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E)"
                },
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "An entity to ignore, or 0."
                },
                {
                    "name": "p9",
                    "type": "int",
                    "description": "A bit mask with bits 1, 2, 4, or 7 relating to collider types. 4 and 7 are usually used."
                }
            ],
            "results": "int",
            "description": "Performs the same type of trace as START_SHAPE_TEST_CAPSULE, but with some different hardcoded parameters.",
            "examples": [],
            "hash": "0xE6AC6C45FBE83004",
            "ns": "SHAPETEST",
            "aliases": ["0xE6AC6C45FBE83004", "_START_SHAPE_TEST_CAPSULE_2"],
            "jhash": "0x4559460A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFF6BE494C7987F34": {
            "name": "_START_SHAPE_TEST_SURROUNDING_COORDS",
            "params": [
                { "name": "pVec1", "type": "Vector3*" },
                { "name": "pVec2", "type": "Vector3*" },
                { "name": "flag", "type": "int" },
                { "name": "entity", "type": "Entity" },
                { "name": "flag2", "type": "int" }
            ],
            "results": "int",
            "description": "Since it is only used in the PC version, likely some mouse-friendly shape test. Uses **in** vector arguments.\n\nAsynchronous.\n\n```\nit returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.  \nIn its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7  \n```\n\nSee [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E) for flags.",
            "examples": [],
            "hash": "0xFF6BE494C7987F34",
            "ns": "SHAPETEST",
            "aliases": ["0xFF6BE494C7987F34"],
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "SOCIALCLUB": {
        "0xBC1CC91205EC8D6E": {
            "name": "_IS_ROCKSTAR_MESSAGE_READY_FOR_SCRIPT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBC1CC91205EC8D6E",
            "ns": "SOCIALCLUB",
            "aliases": ["0xBC1CC91205EC8D6E"],
            "jhash": "0x6C5738AB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x07DBD622D9533857": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x07DBD622D9533857",
            "ns": "SOCIALCLUB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x116FB94DC4B79F17": {
            "params": [{ "name": "p0", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x116FB94DC4B79F17",
            "ns": "SOCIALCLUB",
            "jhash": "0xAF3C081B",
            "manualHash": true
        },
        "0x19853B5B17D77BCA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x19853B5B17D77BCA",
            "ns": "SOCIALCLUB",
            "jhash": "0xD26CCA46",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3001BEF2FECA3680": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3001BEF2FECA3680",
            "ns": "SOCIALCLUB",
            "jhash": "0x4D4C37B3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x16DA8172459434AA": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x16DA8172459434AA",
            "ns": "SOCIALCLUB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1D12A56FC95BE92E": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Added Parameter 2: char* p1\nNativeDB Added Parameter 3: char* p2\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x1D12A56FC95BE92E",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x92452C0E",
            "manualHash": true
        },
        "0x487912FD248EFDDF": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x487912FD248EFDDF",
            "ns": "SOCIALCLUB",
            "jhash": "0x579B4510",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2D874D4AE612A65F": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x2D874D4AE612A65F",
            "ns": "SOCIALCLUB",
            "manualHash": true
        },
        "0x225798743970412B": {
            "params": [{ "name": "p0", "type": "int*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x225798743970412B",
            "ns": "SOCIALCLUB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44ACA259D67651DB": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x44ACA259D67651DB",
            "ns": "SOCIALCLUB",
            "manualHash": true
        },
        "0x50A8A36201DBF83E": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Added Parameter 2: float* p1\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x50A8A36201DBF83E",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x8DA93C3D",
            "manualHash": true
        },
        "0x2570E26BE63964E3": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Added Parameter 2: float* p1\nNativeDB Added Parameter 3: char* p2\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x2570E26BE63964E3",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x59394583",
            "manualHash": true
        },
        "0x4ED9C8D6DA297639": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x4ED9C8D6DA297639",
            "ns": "SOCIALCLUB",
            "jhash": "0xC5E08B66",
            "manualHash": true
        },
        "0x710BCDA8071EDED1": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Added Parameter 2: int* p1\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x710BCDA8071EDED1",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x04EE74A3",
            "manualHash": true
        },
        "0x33DF47CC0642061B": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Added Parameter 2: char* p1\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x33DF47CC0642061B",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xBBA8D34D",
            "manualHash": true
        },
        "0x4737980E8A283806": {
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4737980E8A283806",
            "ns": "SOCIALCLUB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x699E4A5C8C893A18": {
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x699E4A5C8C893A18",
            "ns": "SOCIALCLUB",
            "jhash": "0xCE7D50A8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x675721C9F644D161": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x675721C9F644D161",
            "ns": "SOCIALCLUB",
            "jhash": "0x486867E6",
            "manualHash": true
        },
        "0x450819D8CF90C416": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x450819D8CF90C416",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x0572EB5E",
            "manualHash": true
        },
        "0x7DB18CA8CAD5B098": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x7DB18CA8CAD5B098",
            "ns": "SOCIALCLUB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A4416C0DB05FA66": {
            "params": [{ "name": "newsStoryData", "type": "Any*" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x8A4416C0DB05FA66",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "manualHash": true
        },
        "0x8CC469AB4D349B7C": {
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8CC469AB4D349B7C",
            "ns": "SOCIALCLUB",
            "jhash": "0xE778B2A7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9237E334F6E43156": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x9237E334F6E43156",
            "ns": "SOCIALCLUB",
            "jhash": "0x65D84665",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4A7D6E727F941747": {
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x4A7D6E727F941747",
            "ns": "SOCIALCLUB",
            "jhash": "0x8E7AEEB7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9DE5D2F723575ED0": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Added Parameter 2: char* p1\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x9DE5D2F723575ED0",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x37DD48B5",
            "manualHash": true
        },
        "0x6BFB12CE158E3DD4": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6BFB12CE158E3DD4",
            "ns": "SOCIALCLUB",
            "jhash": "0x24D84334",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC2C97EA97711D1AE": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xC2C97EA97711D1AE",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xF929F61D",
            "manualHash": true
        },
        "0xD8122C407663B995": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xD8122C407663B995",
            "ns": "SOCIALCLUB",
            "jhash": "0x1C65B038",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x92DA6E70EF249BD1": {
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x92DA6E70EF249BD1",
            "ns": "SOCIALCLUB",
            "jhash": "0xAED95A6F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7FFCBFEE44ECFABF": {
            "params": [],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0x7FFCBFEE44ECFABF",
            "ns": "SOCIALCLUB",
            "manualHash": true
        },
        "0xE75A4A2E5E316D86": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: char* p0\nNativeDB Added Parameter 2: int* p1\nNativeDB Added Parameter 3: char* p2\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xE75A4A2E5E316D86",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x28C57FA0",
            "manualHash": true
        },
        "0xF22CA0FD74B80E7A": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF22CA0FD74B80E7A",
            "ns": "SOCIALCLUB",
            "jhash": "0xF379DCE4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE4F6E8D07A2F0F51": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xE4F6E8D07A2F0F51",
            "ns": "SOCIALCLUB",
            "manualHash": true
        },
        "0xA468E0BE12B12C70": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: int p0\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xA468E0BE12B12C70",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xB21288FA",
            "manualHash": true
        },
        "0xEA95C0853A27888E": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xEA95C0853A27888E",
            "ns": "SOCIALCLUB",
            "manualHash": true
        },
        "0xC5A35C73B68F3C49": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 1: int p0\nNativeDB Added Parameter 2: char* p1\nNativeDB Added Parameter 3: float* p2\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xC5A35C73B68F3C49",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x7E24BD6E",
            "manualHash": true
        },
        "0xFF8F3A92B75ED67A": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xFF8F3A92B75ED67A",
            "ns": "SOCIALCLUB",
            "jhash": "0xC96456BA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF6BAAAF762E1BF40": {
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF6BAAAF762E1BF40",
            "ns": "SOCIALCLUB",
            "jhash": "0x7AA36406",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFE4C1D0D3B9CC17E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFE4C1D0D3B9CC17E",
            "ns": "SOCIALCLUB",
            "jhash": "0x8A023024",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2330C12A7A605D16": {
            "name": "SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2330C12A7A605D16",
            "ns": "SOCIALCLUB",
            "jhash": "0x9A703A2B",
            "manualHash": true
        },
        "0x55DF6DB45179236E": {
            "name": "SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x55DF6DB45179236E",
            "ns": "SOCIALCLUB",
            "aliases": ["0x55DF6DB45179236E"],
            "jhash": "0xD094F11A",
            "manualHash": true
        },
        "0xDF649C4E9AFDD788": {
            "name": "_ROCKSTAR_MESSAGE_GET_STRING",
            "params": [],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xDF649C4E9AFDD788",
            "ns": "SOCIALCLUB",
            "aliases": ["0xDF649C4E9AFDD788"],
            "jhash": "0x468668F0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC85A7127E7AD02AA": {
            "name": "SC_GAMERDATA_GET_INT",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "outValue", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xC85A7127E7AD02AA",
            "ns": "SOCIALCLUB",
            "aliases": ["_0xC85A7127E7AD02AA"],
            "jhash": "0xF8BDA989",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8416FE4E4629D7D7": {
            "name": "SC_GAMERDATA_GET_BOOL",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nsfink: from scripts:\nfunc_720(socialclub::_0x8416FE4E4629D7D7(\"bIgnoreCheaterOverride\"));\nfunc_719(socialclub::_0x8416FE4E4629D7D7(\"bIgnoreBadSportOverride\"));\n```",
            "examples": [],
            "hash": "0x8416FE4E4629D7D7",
            "ns": "SOCIALCLUB",
            "aliases": [
                "0x8416FE4E4629D7D7",
                "_SC_GET_IS_PROFILE_ATTRIBUTE_SET"
            ],
            "jhash": "0xDF45B2A7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA770C8EEC6FB2AC5": {
            "name": "SC_GAMERDATA_GET_FLOAT",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "outValue", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v323\n```",
            "examples": [],
            "hash": "0xA770C8EEC6FB2AC5",
            "ns": "SOCIALCLUB",
            "aliases": ["_0xA770C8EEC6FB2AC5"],
            "jhash": "0x515AF67C",
            "manualHash": true
        },
        "0x418DC16FAE452C1C": {
            "name": "_SC_GET_HAS_ACHIEVEMENT_BEEN_PASSED",
            "params": [{ "name": "achievement", "type": "int" }],
            "results": "BOOL",
            "description": "```\nSame as HAS_ACHIEVEMENT_BEEN_PASSED\n```",
            "examples": [],
            "hash": "0x418DC16FAE452C1C",
            "ns": "SOCIALCLUB",
            "aliases": ["0x418DC16FAE452C1C"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x040ADDCBAFA1018A": {
            "name": "_SC_INBOX_GET_EMAILS",
            "params": [
                { "name": "offset", "type": "int" },
                { "name": "limit", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x040ADDCBAFA1018A",
            "ns": "SOCIALCLUB",
            "aliases": ["0x040ADDCBAFA1018A"],
            "manualHash": true
        },
        "0x9A2C8064B6C1E41A": {
            "name": "SC_INBOX_MESSAGE_DO_APPLY",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9A2C8064B6C1E41A",
            "ns": "SOCIALCLUB",
            "aliases": ["0x9A2C8064B6C1E41A", "_SC_INBOX_MESSAGE_PUSH"],
            "jhash": "0xEBE420A4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x198D161F458ECC7F": {
            "name": "_SC_GET_NICKNAME",
            "params": [],
            "results": "char*",
            "description": "```\nReturns the nickname of the logged-in Rockstar Social Club account.\n```",
            "examples": [],
            "hash": "0x198D161F458ECC7F",
            "ns": "SOCIALCLUB",
            "annotations": { "cs_type": "Entity" },
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x93028F1DB42BFD08": {
            "name": "SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX",
            "params": [{ "name": "msgIndex", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x93028F1DB42BFD08",
            "ns": "SOCIALCLUB",
            "aliases": ["0x93028F1DB42BFD08", "_IS_SC_INBOX_VALID"],
            "jhash": "0xD1ED1D48",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7572EF42FC6A9B6D": {
            "name": "SC_INBOX_MESSAGE_GET_DATA_STRING",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "context", "type": "char*" },
                { "name": "out", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7572EF42FC6A9B6D",
            "ns": "SOCIALCLUB",
            "jhash": "0x15607620",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x03A93FF1A2CA0864": {
            "name": "SC_INBOX_GET_TOTAL_NUM_MESSAGES",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x03A93FF1A2CA0864",
            "ns": "SOCIALCLUB",
            "aliases": ["0x03A93FF1A2CA0864", "_GET_TOTAL_SC_INBOX_IDS"],
            "jhash": "0x6BE5DF29",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBB8EA16ECBC976C4": {
            "name": "SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX",
            "params": [{ "name": "msgIndex", "type": "int" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xBB8EA16ECBC976C4",
            "ns": "SOCIALCLUB",
            "aliases": ["0xBB8EA16ECBC976C4", "_SC_INBOX_MESSAGE_INIT"],
            "jhash": "0x5ECF955D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2C015348CF19CA1D": {
            "name": "_SC_INBOX_MESSAGE_POP",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2C015348CF19CA1D",
            "ns": "SOCIALCLUB",
            "aliases": ["0x2C015348CF19CA1D"],
            "jhash": "0x19EE0CCB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x87E0052F08BD64E6": {
            "name": "_SC_INBOX_MESSAGE_GET_BOUNTY_DATA",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "outData", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x87E0052F08BD64E6",
            "ns": "SOCIALCLUB",
            "aliases": ["0x87E0052F08BD64E6"],
            "jhash": "0xAB3346B5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA00EFE4082C4056E": {
            "name": "SC_INBOX_MESSAGE_GET_DATA_INT",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "context", "type": "char*" },
                { "name": "out", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA00EFE4082C4056E",
            "ns": "SOCIALCLUB",
            "jhash": "0x88068C7C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFFE5C16F402D851D": {
            "name": "_SC_INBOX_MESSAGE_GET_DATA_BOOL",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFFE5C16F402D851D",
            "ns": "SOCIALCLUB",
            "aliases": ["0xFFE5C16F402D851D"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF3E31D16CBDCB304": {
            "name": "_SC_INBOX_MESSAGE_GET_STRING",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0xF3E31D16CBDCB304",
            "ns": "SOCIALCLUB",
            "aliases": ["0xF3E31D16CBDCB304"],
            "jhash": "0x2C959AF9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x69D82604A1A5A254": {
            "name": "SC_INBOX_MESSAGE_GET_UGCDATA",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x69D82604A1A5A254",
            "ns": "SOCIALCLUB",
            "jhash": "0x88CA3BFC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1989C6E6F67E76A8": {
            "name": "SC_LICENSEPLATE_ADD",
            "params": [
                { "name": "plateText", "type": "char*" },
                { "name": "plateData", "type": "char*" },
                { "name": "tokenOut", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "Social Club native to add license plate for the user",
            "examples": [],
            "hash": "0x1989C6E6F67E76A8",
            "ns": "SOCIALCLUB",
            "aliases": ["0x1989C6E6F67E76A8"],
            "jhash": "0xEEDE7FAB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6AFD2CD753FEEF83": {
            "name": "_SC_INBOX_MESSAGE_SEND_BOUNTY_PRESENCE_EVENT",
            "params": [{ "name": "data", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6AFD2CD753FEEF83",
            "ns": "SOCIALCLUB",
            "aliases": ["0x6AFD2CD753FEEF83"],
            "jhash": "0x628F489B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x700569DBA175A77C": {
            "name": "SC_LICENSEPLATE_GET_COUNT",
            "params": [{ "name": "token", "type": "int" }],
            "results": "int",
            "description": "Gets number of plates in the response of the get license plates request.\nRange: \\[0, count) can be used as second argument to \\_0x1D4446A62D35B0D0 and \\_0x2E89990DDFF670C3",
            "examples": [],
            "hash": "0x700569DBA175A77C",
            "ns": "SOCIALCLUB",
            "aliases": ["0x700569DBA175A77C"],
            "jhash": "0x159FE39C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x07C61676E5BB52CD": {
            "name": "SC_LICENSEPLATE_GET_ADD_IS_PENDING",
            "params": [{ "name": "token", "type": "int" }],
            "results": "BOOL",
            "description": "Returns true if the add license plate text request is still pending.",
            "examples": [],
            "hash": "0x07C61676E5BB52CD",
            "ns": "SOCIALCLUB",
            "aliases": ["0x07C61676E5BB52CD"],
            "jhash": "0xE190E45A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDA024BDBD600F44A": {
            "name": "_SC_INBOX_MESSAGE_PUSH_GAMER_TO_EVENT_RECIP_LIST",
            "params": [{ "name": "networkHandle", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDA024BDBD600F44A",
            "ns": "SOCIALCLUB",
            "aliases": ["0xDA024BDBD600F44A"],
            "jhash": "0x0B9A3512",
            "manualHash": true
        },
        "0xD302E99EDF0449CF": {
            "name": "SC_LICENSEPLATE_GET_ISVALID_IS_PENDING",
            "params": [{ "name": "token", "type": "int" }],
            "results": "BOOL",
            "description": "Checks if the \"is valid license plate\" request is still pending.",
            "examples": [],
            "hash": "0xD302E99EDF0449CF",
            "ns": "SOCIALCLUB",
            "aliases": ["0xD302E99EDF0449CF"],
            "jhash": "0x86DAE6D6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0F73393BAC7E6730": {
            "name": "SC_LICENSEPLATE_ISVALID",
            "params": [
                { "name": "plateText", "type": "char*" },
                { "name": "tokenOut", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "SC native to start a request for if license plate text is valid",
            "examples": [],
            "hash": "0x0F73393BAC7E6730",
            "ns": "SOCIALCLUB",
            "aliases": ["_0x0F73393BAC7E6730"],
            "jhash": "0x5298F472",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA68D3D229F4F3B06": {
            "name": "_SC_INBOX_MESSAGE_SEND_UGC_STAT_UPDATE_EVENT",
            "params": [{ "name": "data", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA68D3D229F4F3B06",
            "ns": "SOCIALCLUB",
            "aliases": ["0xA68D3D229F4F3B06"],
            "jhash": "0x75324674",
            "manualHash": true
        },
        "0x1D4446A62D35B0D0": {
            "name": "SC_LICENSEPLATE_GET_PLATE",
            "params": [
                { "name": "token", "type": "int" },
                {
                    "name": "plateIndex",
                    "type": "int",
                    "description": "The plate index from the list of result plates. Use SC_LICENSEPLATE_GET_COUNT for the number of plates."
                }
            ],
            "results": "char*",
            "description": "Gets license plate text related to the get license plate info request",
            "examples": [],
            "hash": "0x1D4446A62D35B0D0",
            "ns": "SOCIALCLUB",
            "jhash": "0x4CE9BAA7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2E89990DDFF670C3": {
            "name": "SC_LICENSEPLATE_GET_PLATE_DATA",
            "params": [
                { "name": "token", "type": "int" },
                {
                    "name": "plateIndex",
                    "type": "int",
                    "description": "The plate index from the list of result plates. Use SC_LICENSEPLATE_GET_COUNT for the number of plates."
                }
            ],
            "results": "char*",
            "description": "Gets license plate data related to the get license plate info request",
            "examples": [],
            "hash": "0x2E89990DDFF670C3",
            "ns": "SOCIALCLUB",
            "aliases": ["0x2E89990DDFF670C3"],
            "jhash": "0x05303FC8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8147FFF6A718E1AD": {
            "name": "SC_LICENSEPLATE_GET_ADD_STATUS",
            "params": [{ "name": "token", "type": "int" }],
            "results": "int",
            "description": "Returns a status for adding the license plate",
            "examples": [],
            "hash": "0x8147FFF6A718E1AD",
            "ns": "SOCIALCLUB",
            "aliases": ["0x8147FFF6A718E1AD"],
            "jhash": "0x930B3AE5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1F1E9682483697C7": {
            "name": "SC_PRESENCE_ATTR_SET_INT",
            "params": [
                { "name": "attrHash", "type": "Hash" },
                { "name": "value", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1F1E9682483697C7",
            "ns": "SOCIALCLUB",
            "aliases": ["0x1F1E9682483697C7"],
            "jhash": "0x90C74343",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC4C4575F62534A24": {
            "name": "SC_PRESENCE_ATTR_SET_FLOAT",
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v323\nNativeDB Added Parameter 1: Hash attrHash\nNativeDB Added Parameter 2: float value\n```",
            "examples": [],
            "hash": "0xC4C4575F62534A24",
            "ns": "SOCIALCLUB",
            "aliases": ["0xC4C4575F62534A24"],
            "jhash": "0x94BF0D35",
            "manualHash": true
        },
        "0xD0EE05FE193646EA": {
            "name": "SC_LICENSEPLATE_SET_PLATE_DATA",
            "params": [
                { "name": "oldPlateText", "type": "char*" },
                { "name": "newPlateText", "type": "char*" },
                { "name": "plateData", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "Changes the license plate for the user (no insert).",
            "examples": [],
            "hash": "0xD0EE05FE193646EA",
            "ns": "SOCIALCLUB",
            "aliases": ["0xD0EE05FE193646EA"],
            "jhash": "0x9F98FA5C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x287F1F75D2803595": {
            "name": "SC_PRESENCE_ATTR_SET_STRING",
            "params": [
                { "name": "attrHash", "type": "Hash" },
                { "name": "value", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x287F1F75D2803595",
            "ns": "SOCIALCLUB",
            "aliases": ["0x287F1F75D2803595"],
            "jhash": "0x3ACE6D6B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x75632C5ECD7ED843": {
            "name": "SC_PROFANITY_CHECK_STRING",
            "params": [
                { "name": "string", "type": "char*" },
                { "name": "token", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "Starts a task to check an entered string for profanity on the ROS/Social Club services.\n\nSee also: [`SC_PROFANITY_GET_CHECK_IS_VALID`](#\\_0x1753344C770358AE) and [`SC_PROFANITY_GET_CHECK_IS_PENDING`](#\\_0x82E4A58BABC15AE7).",
            "examples": [],
            "hash": "0x75632C5ECD7ED843",
            "ns": "SOCIALCLUB",
            "aliases": ["0x75632C5ECD7ED843", "_SC_START_CHECK_STRING_TASK"],
            "jhash": "0xDF084A6B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5C4EBFFA98BDB41C": {
            "name": "SC_LICENSEPLATE_GET_ISVALID_STATUS",
            "params": [{ "name": "token", "type": "int" }],
            "results": "int",
            "description": "Gets the status of the is valid license plate request",
            "examples": [],
            "hash": "0x5C4EBFFA98BDB41C",
            "ns": "SOCIALCLUB",
            "aliases": ["0x5C4EBFFA98BDB41C"],
            "jhash": "0x9AA2BA3F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEB2BF817463DFA28": {
            "name": "_SC_PROFANITY_CHECK_UGC_STRING",
            "params": [
                { "name": "string", "type": "char*" },
                { "name": "token", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEB2BF817463DFA28",
            "ns": "SOCIALCLUB",
            "aliases": ["0xEB2BF817463DFA28"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x85535ACF97FC0969": {
            "name": "SC_PROFANITY_GET_STRING_PASSED",
            "params": [{ "name": "token", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x85535ACF97FC0969",
            "ns": "SOCIALCLUB",
            "aliases": ["0x85535ACF97FC0969"],
            "jhash": "0x09497F31",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1753344C770358AE": {
            "name": "SC_PROFANITY_GET_CHECK_IS_VALID",
            "params": [{ "name": "token", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1753344C770358AE",
            "ns": "SOCIALCLUB",
            "aliases": [
                "0x1753344C770358AE",
                "_SC_HAS_CHECK_STRING_TASK_COMPLETED"
            ],
            "jhash": "0xFFED3676",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBFA0A56A817C6C7D": {
            "name": "_SET_HANDLE_ROCKSTAR_MESSAGE_VIA_SCRIPT",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBFA0A56A817C6C7D",
            "ns": "SOCIALCLUB",
            "aliases": ["0xBFA0A56A817C6C7D"],
            "jhash": "0x2FB9F53C",
            "manualHash": true
        },
        "0x82E4A58BABC15AE7": {
            "name": "SC_PROFANITY_GET_CHECK_IS_PENDING",
            "params": [{ "name": "token", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x82E4A58BABC15AE7",
            "ns": "SOCIALCLUB",
            "aliases": ["0x82E4A58BABC15AE7", "_SC_GET_CHECK_STRING_STATUS"],
            "annotations": { "cs_type": "int" },
            "jhash": "0xA796D7A7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x930DE22F07B1CCE3": {
            "name": "SC_PROFANITY_GET_STRING_STATUS",
            "params": [{ "name": "token", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x930DE22F07B1CCE3",
            "ns": "SOCIALCLUB",
            "aliases": ["0x930DE22F07B1CCE3"],
            "jhash": "0x4D8A6521",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "SYSTEM": {
        "0xD0FFB162F40A139C": {
            "name": "COS",
            "params": [
                {
                    "name": "value",
                    "type": "float",
                    "description": "The number of degrees (in degrees, not radians)"
                }
            ],
            "results": "float",
            "description": "Returns the cosine of the given number.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Get the heading\nlocal heading = GetEntityHeading(PlayerPedId())\nlocal cos = Cos(heading)\n\n-- equivalent in lua\nlocal cosLua = math.cos(heading * (math.pi / 180))"
                }
            ],
            "hash": "0xD0FFB162F40A139C",
            "ns": "SYSTEM",
            "jhash": "0x00238FE9",
            "manualHash": true,
            "resultsDescription": "The cosine of the given number"
        },
        "0xF34EE736CF047844": {
            "name": "FLOOR",
            "params": [{ "name": "value", "type": "float" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF34EE736CF047844",
            "ns": "SYSTEM",
            "jhash": "0x32E9BE04",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE3621CC40F31FE2E": {
            "name": "POW",
            "params": [
                { "name": "base", "type": "float" },
                { "name": "exponent", "type": "float" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xE3621CC40F31FE2E",
            "ns": "SYSTEM",
            "jhash": "0x85D134F8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC1B1E9A034A63A62": {
            "name": "SETTIMERA",
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC1B1E9A034A63A62",
            "ns": "SYSTEM",
            "jhash": "0x35785333",
            "manualHash": true
        },
        "0x42B65DEEF2EDF2A1": {
            "name": "_SET_THREAD_PRIORITY",
            "params": [{ "name": "priority", "type": "int" }],
            "results": "void",
            "description": "```\n0 = high\n1 = normal\n2 = low\n```",
            "examples": [],
            "hash": "0x42B65DEEF2EDF2A1",
            "ns": "SYSTEM",
            "aliases": ["0x42B65DEEF2EDF2A1"],
            "manualHash": true
        },
        "0x11E019C8F43ACC8A": {
            "name": "CEIL",
            "params": [{ "name": "value", "type": "float" }],
            "results": "int",
            "description": "```\nI'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down  \n```",
            "examples": [],
            "hash": "0x11E019C8F43ACC8A",
            "ns": "SYSTEM",
            "jhash": "0xD536A1DF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF2DB717A73826179": {
            "name": "ROUND",
            "params": [{ "name": "value", "type": "float" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF2DB717A73826179",
            "ns": "SYSTEM",
            "jhash": "0x323B0E24",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0BADBFA3B172435F": {
            "name": "SIN",
            "params": [
                {
                    "name": "value",
                    "type": "float",
                    "description": "The number of degrees (in degrees, not radians)"
                }
            ],
            "results": "float",
            "description": "Returns the sine of the given number.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Get the heading\nlocal heading = GetEntityHeading(PlayerPedId())\nlocal sin = Sin(heading)\n\n-- equivalent in lua\nlocal sinLua = math.sin(heading * (math.pi / 180))"
                }
            ],
            "hash": "0x0BADBFA3B172435F",
            "ns": "SYSTEM",
            "jhash": "0xBF987F58",
            "manualHash": true,
            "resultsDescription": "The sine of the given number"
        },
        "0xE816E655DE37FE20": {
            "name": "_LOG10",
            "params": [{ "name": "value", "type": "float" }],
            "results": "float",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xE816E655DE37FE20",
            "ns": "SYSTEM",
            "manualHash": true
        },
        "0x97EF1E5BCE9DC075": {
            "name": "SHIFT_RIGHT",
            "params": [
                { "name": "value", "type": "int" },
                { "name": "bitShift", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x97EF1E5BCE9DC075",
            "ns": "SYSTEM",
            "jhash": "0x352633CA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5AE11BC36633DE4E": {
            "name": "SETTIMERB",
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5AE11BC36633DE4E",
            "ns": "SYSTEM",
            "jhash": "0x27C1B7C6",
            "manualHash": true
        },
        "0xB8BA7F44DF1575E1": {
            "name": "START_NEW_SCRIPT_WITH_ARGS",
            "params": [
                { "name": "scriptName", "type": "char*" },
                { "name": "args", "type": "Any*" },
                { "name": "argCount", "type": "int" },
                { "name": "stackSize", "type": "int" }
            ],
            "results": "int",
            "description": "```\nreturn : script thread id, 0 if failed  \nPass pointer to struct of args in p1, size of struct goes into p2  \n```",
            "examples": [],
            "hash": "0xB8BA7F44DF1575E1",
            "ns": "SYSTEM",
            "jhash": "0x4A2100E4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE81651AD79516E48": {
            "name": "START_NEW_SCRIPT",
            "params": [
                { "name": "scriptName", "type": "char*" },
                { "name": "stackSize", "type": "int" }
            ],
            "results": "int",
            "description": "```\nExamples:\n g_384A = SYSTEM::START_NEW_SCRIPT(\"cellphone_flashhand\", 1424);\n l_10D = SYSTEM::START_NEW_SCRIPT(\"taxiService\", 1828);\n SYSTEM::START_NEW_SCRIPT(\"AM_MP_YACHT\", 5000);\n SYSTEM::START_NEW_SCRIPT(\"emergencycall\", 512);\n SYSTEM::START_NEW_SCRIPT(\"emergencycall\", 512);\n SYSTEM::START_NEW_SCRIPT(\"FM_maintain_cloud_header_data\", 1424);\n SYSTEM::START_NEW_SCRIPT(\"FM_Mission_Controller\", 31000);\n SYSTEM::START_NEW_SCRIPT(\"tennis_family\", 3650);\n SYSTEM::START_NEW_SCRIPT(\"Celebrations\", 3650);\nDecompiled examples of usage when starting a script:\n\n    SCRIPT::REQUEST_SCRIPT(a_0);\n    if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {\n        SYSTEM::START_NEW_SCRIPT(a_0, v_3);\n        SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);\n        return 1;\n    }\n\nor:\n    v_2 = \"MrsPhilips2\";\n    SCRIPT::REQUEST_SCRIPT(v_2);\n    while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {\n    SCRIPT::REQUEST_SCRIPT(v_2);\n    SYSTEM::WAIT(0);\n    }\n    sub_8792(36);\n    SYSTEM::START_NEW_SCRIPT(v_2, 17000);\n    SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);\nAll native script names: pastebin.com/K9adDsu4 and pastebin.com/yLNWicUi\n```",
            "examples": [],
            "hash": "0xE81651AD79516E48",
            "ns": "SYSTEM",
            "jhash": "0x3F166D0E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x71D93B57D07F9804": {
            "name": "SQRT",
            "params": [{ "name": "value", "type": "float" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x71D93B57D07F9804",
            "ns": "SYSTEM",
            "jhash": "0x145C7701",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEDD95A39E5544DE8": {
            "name": "SHIFT_LEFT",
            "params": [
                { "name": "value", "type": "int" },
                { "name": "bitShift", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xEDD95A39E5544DE8",
            "ns": "SYSTEM",
            "jhash": "0x314CC6CD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC4BB298BD441BE78": {
            "name": "START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS",
            "params": [
                { "name": "scriptHash", "type": "Hash" },
                { "name": "args", "type": "Any*" },
                { "name": "argCount", "type": "int" },
                { "name": "stackSize", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC4BB298BD441BE78",
            "ns": "SYSTEM",
            "aliases": ["_START_NEW_STREAMED_SCRIPT_WITH_ARGS"],
            "jhash": "0xE38A3AD4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEB1C67C3A5333A92": {
            "name": "START_NEW_SCRIPT_WITH_NAME_HASH",
            "params": [
                { "name": "scriptHash", "type": "Hash" },
                { "name": "stackSize", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xEB1C67C3A5333A92",
            "ns": "SYSTEM",
            "aliases": ["_START_NEW_STREAMED_SCRIPT"],
            "jhash": "0x8D15BE5D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x83666F9FB8FEBD4B": {
            "name": "TIMERA",
            "params": [],
            "results": "int",
            "description": "```\nCounts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).  \n```",
            "examples": [],
            "hash": "0x83666F9FB8FEBD4B",
            "ns": "SYSTEM",
            "jhash": "0x45C8C188",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2A488C176D52CCA5": {
            "name": "VDIST",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "float",
            "description": "```\nCalculates distance between vectors.  \n```",
            "examples": [],
            "hash": "0x2A488C176D52CCA5",
            "ns": "SYSTEM",
            "jhash": "0x3C08ECB7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC9D9444186B5A374": {
            "name": "TIMERB",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xC9D9444186B5A374",
            "ns": "SYSTEM",
            "jhash": "0x330A9C0C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0000000050597EE2": {
            "name": "TIMESTEP",
            "params": [],
            "results": "float",
            "description": "```\nGets the current frame time.  \n```",
            "examples": [],
            "hash": "0x0000000050597EE2",
            "ns": "SYSTEM",
            "jhash": "0x50597EE2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA8CEACB4F35AE058": {
            "name": "VMAG2",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "float",
            "description": "```\nCalculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)  \n```",
            "examples": [],
            "hash": "0xA8CEACB4F35AE058",
            "ns": "SYSTEM",
            "jhash": "0xE796E629",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x652D2EEEF1D3E62C": {
            "name": "VMAG",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "float",
            "description": "```\nCalculates the magnitude of a vector.  \n```",
            "examples": [],
            "hash": "0x652D2EEEF1D3E62C",
            "ns": "SYSTEM",
            "jhash": "0x1FCF1ECD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBBDA792448DB5A89": {
            "name": "TO_FLOAT",
            "params": [{ "name": "value", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xBBDA792448DB5A89",
            "ns": "SYSTEM",
            "jhash": "0x67116627",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4EDE34FBADD967A6": {
            "name": "WAIT",
            "params": [{ "name": "ms", "type": "int" }],
            "results": "void",
            "description": "```\nPauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use \"static void WAIT(DWORD time);\" found in main.h\n```",
            "examples": [],
            "hash": "0x4EDE34FBADD967A6",
            "ns": "SYSTEM",
            "jhash": "0x7715C03B",
            "manualHash": true
        },
        "0xB7A628320EFF8E47": {
            "name": "VDIST2",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "float",
            "description": "```\nCalculates distance between vectors but does not perform Sqrt operations. (Its way faster)  \n```",
            "examples": [],
            "hash": "0xB7A628320EFF8E47",
            "ns": "SYSTEM",
            "jhash": "0xC85DEF1F",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "STREAMING": {
        "0x74DE2E8739086740": {
            "name": "ALLOW_PLAYER_SWITCH_OUTRO",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x74DE2E8739086740",
            "ns": "STREAMING",
            "aliases": ["0x74DE2E8739086740"],
            "jhash": "0x1084F2F4",
            "manualHash": true
        },
        "0x8E2A065ABDAE6994": {
            "name": "ALLOW_PLAYER_SWITCH_ASCENT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8E2A065ABDAE6994",
            "ns": "STREAMING",
            "aliases": ["0x8E2A065ABDAE6994"],
            "jhash": "0x5B1E995D",
            "manualHash": true
        },
        "0x31B73D1EA9F01DA2": {
            "name": "CLEAR_FOCUS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x31B73D1EA9F01DA2",
            "ns": "STREAMING",
            "jhash": "0x34D91E7A",
            "manualHash": true
        },
        "0xCE58B1CFB9290813": {
            "name": "CLEAR_HD_AREA",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCE58B1CFB9290813",
            "ns": "STREAMING",
            "jhash": "0x7CAC6FA0",
            "manualHash": true
        },
        "0xAD5FDF34B81BFE79": {
            "name": "ALLOW_PLAYER_SWITCH_DESCENT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAD5FDF34B81BFE79",
            "ns": "STREAMING",
            "aliases": ["0xAD5FDF34B81BFE79"],
            "jhash": "0x4B4B9A13",
            "manualHash": true
        },
        "0x0BC3144DEB678666": {
            "name": "ADD_MODEL_TO_CREATOR_BUDGET",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0BC3144DEB678666",
            "ns": "STREAMING",
            "aliases": ["0x0BC3144DEB678666"],
            "jhash": "0xC0E83320",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0A41540E63C9EE17": {
            "name": "END_SRL",
            "params": [],
            "results": "void",
            "description": "Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.",
            "examples": [],
            "hash": "0x0A41540E63C9EE17",
            "ns": "STREAMING",
            "jhash": "0x1977C56A",
            "manualHash": true
        },
        "0x9BADDC94EF83B823": {
            "name": "BEGIN_SRL",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9BADDC94EF83B823",
            "ns": "STREAMING",
            "jhash": "0x24F49427",
            "manualHash": true
        },
        "0x43D1680C6D19A8E9": {
            "name": "ALLOW_PLAYER_SWITCH_PAN",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x43D1680C6D19A8E9",
            "ns": "STREAMING",
            "aliases": ["0x43D1680C6D19A8E9"],
            "jhash": "0x55CB21F9",
            "manualHash": true
        },
        "0xD4793DFF3AF2ABCD": {
            "name": "ENABLE_SWITCH_PAUSE_BEFORE_DESCENT",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD4793DFF3AF2ABCD",
            "ns": "STREAMING",
            "aliases": ["0xD4793DFF3AF2ABCD"],
            "jhash": "0x4062FF73",
            "manualHash": true
        },
        "0x2DA49C3B79856961": {
            "name": "DOES_ANIM_DICT_EXIST",
            "params": [{ "name": "animDict", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2DA49C3B79856961",
            "ns": "STREAMING",
            "jhash": "0xCD31C872",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBD605B8E0E18B3BB": {
            "name": "DISABLE_SWITCH_OUTRO_FX",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBD605B8E0E18B3BB",
            "ns": "STREAMING",
            "aliases": ["0xBD605B8E0E18B3BB"],
            "jhash": "0x59CC312D",
            "manualHash": true
        },
        "0xB5D7B26B45720E05": {
            "name": "GET_IDEAL_PLAYER_SWITCH_TYPE",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "int",
            "description": "```\nx1, y1, z1 -- Coords of your ped model  \nx2, y2, z2 -- Coords of the ped you want to switch to  \n```",
            "examples": [],
            "hash": "0xB5D7B26B45720E05",
            "ns": "STREAMING",
            "jhash": "0xD5A450F1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF741BD853611592D": {
            "name": "_GET_GLOBAL_WATER_TYPE",
            "params": [],
            "results": "int",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xF741BD853611592D",
            "ns": "STREAMING",
            "manualHash": true
        },
        "0x4060057271CEBC89": {
            "name": "GET_NUMBER_OF_STREAMING_REQUESTS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x4060057271CEBC89",
            "ns": "STREAMING",
            "jhash": "0xC2EE9A02",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x20F898A5D9782800": {
            "name": "GET_PLAYER_SHORT_SWITCH_STATE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x20F898A5D9782800",
            "ns": "STREAMING",
            "jhash": "0x9B7BA38F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B48A06DD0E792A5": {
            "name": "GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x5B48A06DD0E792A5",
            "ns": "STREAMING",
            "aliases": ["0x5B48A06DD0E792A5"],
            "jhash": "0xC7A3D279",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x78C0D93253149435": {
            "name": "GET_PLAYER_SWITCH_JUMP_CUT_INDEX",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x78C0D93253149435",
            "ns": "STREAMING",
            "aliases": ["0x78C0D93253149435"],
            "jhash": "0x02BA7AC2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0C15B0E443B2349D": {
            "name": "GET_LODSCALE",
            "params": [],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x0C15B0E443B2349D",
            "ns": "STREAMING",
            "aliases": ["0x0C15B0E443B2349D"],
            "jhash": "0x7154B6FD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3D3D8B3BE5A83D35": {
            "name": "_GET_USED_CREATOR_MODEL_MEMORY_PERCENTAGE",
            "params": [],
            "results": "float",
            "description": "```\n0.0 = no memory used\n1.0 = all memory used\n\nMaximum model memory (as defined in common\\data\\missioncreatordata.meta) is 100 MiB\n\nGET_*\n```",
            "examples": [],
            "hash": "0x3D3D8B3BE5A83D35",
            "ns": "STREAMING",
            "aliases": ["0x3D3D8B3BE5A83D35"],
            "jhash": "0x3E9C4CBE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x470555300D10B2A5": {
            "name": "GET_PLAYER_SWITCH_STATE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local stateSwitch = GetPlayerSwitchState()\nif stateSwitch == 5 then\n    -- Player is in the air\n    elseif stateSwitch == 12 then\n    -- Player is not in the air or switch is completed\nend"
                },
                {
                    "lang": "javascript",
                    "code": "const stateSwitch = GetPlayerSwitchState();\nif (stateSwitch == 5) {\n    // Player is in the air\n} else if (stateSwitch == 12) {\n    // Player is not in the air or switch is completed\n}"
                },
                {
                    "lang": "csharp",
                    "code": "using static CitizenFX.Core.Native.API;\n\nint stateSwitch = GetPlayerSwitchState();\nif (stateSwitch == 5) {\n    // Player is in the air\n} else if (stateSwitch == 12) {\n    // Player is not in the air or switch is completed\n}"
                }
            ],
            "hash": "0x470555300D10B2A5",
            "ns": "STREAMING",
            "jhash": "0x39A0E1F2",
            "manualHash": true,
            "resultsDescription": "*   Returns 5 if the player is in the air (in a state of switch).\n*   Returns 12 if the player is either not in the air or if the switch is completed."
        },
        "0xB3C94A90D9FC9E62": {
            "name": "GET_PLAYER_SWITCH_TYPE",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xB3C94A90D9FC9E62",
            "ns": "STREAMING",
            "jhash": "0x280DC015",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC4EA073D86FB29B0": {
            "name": "HAS_ANIM_SET_LOADED",
            "params": [{ "name": "animSet", "type": "char*" }],
            "results": "BOOL",
            "description": "Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped.\n\nAnimation set and clip set are synonymous. See [`SET_PED_MOVEMENT_CLIPSET`](#\\_0xAF8A94EDE7712BEF).",
            "examples": [],
            "hash": "0xC4EA073D86FB29B0",
            "ns": "STREAMING",
            "jhash": "0x4FFF397D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x318234F4F3738AF3": {
            "name": "HAS_CLIP_SET_LOADED",
            "params": [{ "name": "clipSet", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nAlias for HAS_ANIM_SET_LOADED.  \n```",
            "examples": [],
            "hash": "0x318234F4F3738AF3",
            "ns": "STREAMING",
            "jhash": "0x230D5455",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x08C2D6C52A3104BB": {
            "name": "GET_PLAYER_SWITCH_INTERP_OUT_DURATION",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x08C2D6C52A3104BB",
            "ns": "STREAMING",
            "aliases": ["SET_PLAYER_INVERTED_UP", "0x08C2D6C52A3104BB"],
            "jhash": "0x569847E3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8702416E512EC454": {
            "name": "HAS_NAMED_PTFX_ASSET_LOADED",
            "params": [{ "name": "fxName", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8702416E512EC454",
            "ns": "STREAMING",
            "jhash": "0x9ACC6446",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD031A9162D01088C": {
            "name": "HAS_ANIM_DICT_LOADED",
            "params": [{ "name": "animDict", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD031A9162D01088C",
            "ns": "STREAMING",
            "jhash": "0x05E6763C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA7D9B86ECA7481B": {
            "name": "HAS_PTFX_ASSET_LOADED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCA7D9B86ECA7481B",
            "ns": "STREAMING",
            "jhash": "0x3EFF96BE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2DDFF3FB9075D747": {
            "name": "IS_ENTITY_FOCUS",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2DDFF3FB9075D747",
            "ns": "STREAMING",
            "jhash": "0xB456D707",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x22CCA434E368F03A": {
            "name": "HAS_COLLISION_FOR_MODEL_LOADED",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x22CCA434E368F03A",
            "ns": "STREAMING",
            "jhash": "0x41A094F8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x98A4EB5D89A0C952": {
            "name": "HAS_MODEL_LOADED",
            "params": [
                {
                    "name": "model",
                    "type": "Hash",
                    "description": "The model hash to check for."
                }
            ],
            "results": "BOOL",
            "description": "Returns whether the specified model (archetype) is currently loaded.\n\nNote that this will return 'true' even if the model has been requested and loaded by something other than the current script, if you're intending to actually use the model in a later frame, you should call REQUEST_MODEL anyway.",
            "examples": [],
            "hash": "0x98A4EB5D89A0C952",
            "ns": "STREAMING",
            "jhash": "0x62BFDB37",
            "manualHash": true,
            "resultsDescription": "A boolean indicating whether the archetype is loaded (true) or not (false)."
        },
        "0xB5A4DB34FE89B88A": {
            "name": "INIT_CREATOR_BUDGET",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB5A4DB34FE89B88A",
            "ns": "STREAMING",
            "aliases": ["0xB5A4DB34FE89B88A", "_LOAD_MISSION_CREATOR_DATA"],
            "jhash": "0xE243B2AF",
            "manualHash": true
        },
        "0x75816577FEA6DAD5": {
            "name": "_IS_MODEL_A_PED",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x75816577FEA6DAD5",
            "ns": "STREAMING",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x19AAC8F07BFEC53E": {
            "name": "IS_MODEL_A_VEHICLE",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nReturns whether the specified model represents a vehicle.  \n```",
            "examples": [],
            "hash": "0x19AAC8F07BFEC53E",
            "ns": "STREAMING",
            "jhash": "0xFFFC85D4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD9D2CFFF49FAB35F": {
            "name": "IS_PLAYER_SWITCH_IN_PROGRESS",
            "params": [],
            "results": "BOOL",
            "description": "```\nReturns true if the player is currently switching, false otherwise.  \n(When the camera is in the sky moving from Trevor to Franklin for example)  \n```",
            "examples": [],
            "hash": "0xD9D2CFFF49FAB35F",
            "ns": "STREAMING",
            "aliases": ["0xD9D2CFFF49FAB35F"],
            "jhash": "0x56135ACC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x88A741E44A2B3495": {
            "name": "IS_IPL_ACTIVE",
            "params": [{ "name": "iplName", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x88A741E44A2B3495",
            "ns": "STREAMING",
            "jhash": "0xB2C33714",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x41CA5A33160EA4AB": {
            "name": "IS_NETWORK_LOADING_SCENE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x41CA5A33160EA4AB",
            "ns": "STREAMING",
            "jhash": "0x6DCFC021",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5B74EA8CFD5E3E7E": {
            "name": "IS_SWITCH_SKIPPING_DESCENT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5B74EA8CFD5E3E7E",
            "ns": "STREAMING",
            "aliases": ["DESTROY_PLAYER_IN_PAUSE_MENU"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x90F64284",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0296A2EDF545E92": {
            "name": "IS_MODEL_VALID",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nReturns whether the specified model exists in the game.  \n```",
            "examples": [],
            "hash": "0xC0296A2EDF545E92",
            "ns": "STREAMING",
            "jhash": "0xAF8F8E9D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x35B9E0803292B641": {
            "name": "IS_MODEL_IN_CDIMAGE",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nCheck if model is in cdimage(rpf)  \n```",
            "examples": [],
            "hash": "0x35B9E0803292B641",
            "ns": "STREAMING",
            "jhash": "0x1094782F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD0263801A4C5B0BB": {
            "name": "IS_SRL_LOADED",
            "params": [],
            "results": "BOOL",
            "description": "Returns true when the srl from BEGIN_SRL is loaded.",
            "examples": [],
            "hash": "0xD0263801A4C5B0BB",
            "ns": "STREAMING",
            "jhash": "0x670FA2A6",
            "manualHash": true,
            "resultsDescription": "*   A boolean once BeginSrl srl is loaded."
        },
        "0x4448EB75B4904BDB": {
            "name": "LOAD_SCENE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4448EB75B4904BDB",
            "ns": "STREAMING",
            "jhash": "0xB72403F5",
            "manualHash": true
        },
        "0x01B8247A7A8B9AD1": {
            "name": "IS_NEW_LOAD_SCENE_LOADED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x01B8247A7A8B9AD1",
            "ns": "STREAMING",
            "jhash": "0x3ECD839F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1E9057A74FD73E23": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E9057A74FD73E23",
            "ns": "STREAMING",
            "manualHash": true
        },
        "0xBD6E84632DD4CB3F": {
            "name": "LOAD_ALL_OBJECTS_NOW",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBD6E84632DD4CB3F",
            "ns": "STREAMING",
            "jhash": "0xC9DBDA90",
            "manualHash": true
        },
        "0xA41A05B6CB741B85": {
            "name": "IS_NEW_LOAD_SCENE_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA41A05B6CB741B85",
            "ns": "STREAMING",
            "jhash": "0xAD234B7F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDFA80CB25D0A19B3": {
            "name": "IS_SWITCH_READY_FOR_DESCENT",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDFA80CB25D0A19B3",
            "ns": "STREAMING",
            "aliases": ["0xDFA80CB25D0A19B3"],
            "jhash": "0x408F7148",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x03F1A106BDA7DD3E": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x03F1A106BDA7DD3E",
            "ns": "STREAMING",
            "manualHash": true
        },
        "0xBC9823AB80A3DCAC": {
            "name": "IS_STREAMVOL_ACTIVE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBC9823AB80A3DCAC",
            "ns": "STREAMING",
            "aliases": ["0xBC9823AB80A3DCAC"],
            "jhash": "0x56253356",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x20C6C7E4EB082A7F": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x20C6C7E4EB082A7F",
            "ns": "STREAMING",
            "jhash": "0xA6459CAA",
            "manualHash": true
        },
        "0x7E3F55ED251B76D3": {
            "name": "_LOAD_GLOBAL_WATER_TYPE",
            "params": [{ "name": "waterType", "type": "int" }],
            "results": "void",
            "description": "0 - default\n1 - HeistIsland\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x7E3F55ED251B76D3",
            "ns": "STREAMING",
            "manualHash": true
        },
        "0x4E52E752C76E7E7A": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x4E52E752C76E7E7A",
            "ns": "STREAMING",
            "jhash": "0xA07BAEB9",
            "manualHash": true
        },
        "0x5068F488DDB54DD8": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x5068F488DDB54DD8",
            "ns": "STREAMING",
            "jhash": "0xDAB4BAC0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x472397322E92A856": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x472397322E92A856",
            "ns": "STREAMING",
            "jhash": "0x4267DA87",
            "manualHash": true
        },
        "0x0811381EF5062FEC": {
            "params": [{ "name": "p0", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0811381EF5062FEC",
            "ns": "STREAMING",
            "manualHash": true
        },
        "0x95A7DABDDBB78AE7": {
            "params": [
                { "name": "iplName1", "type": "char*" },
                { "name": "iplName2", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x95A7DABDDBB78AE7",
            "ns": "STREAMING",
            "jhash": "0x9EF0A9CF",
            "manualHash": true
        },
        "0x71E7B2E657449AAD": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x71E7B2E657449AAD",
            "ns": "STREAMING",
            "jhash": "0xEAA51103",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFB199266061F820A": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFB199266061F820A",
            "ns": "STREAMING",
            "jhash": "0x17B0A1CD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x63EB2B972A218CAC": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x63EB2B972A218CAC",
            "ns": "STREAMING",
            "jhash": "0xF2CDD6A8",
            "manualHash": true
        },
        "0xC4582015556D1C46": {
            "name": "NETWORK_UPDATE_LOAD_SCENE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC4582015556D1C46",
            "ns": "STREAMING",
            "annotations": { "cs_type": "void" },
            "jhash": "0xC76E023C",
            "manualHash": true
        },
        "0xEF39EE20C537E98C": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEF39EE20C537E98C",
            "ns": "STREAMING",
            "jhash": "0x814D0752",
            "manualHash": true
        },
        "0xBED8CA5FF5E04113": {
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBED8CA5FF5E04113",
            "ns": "STREAMING",
            "jhash": "0x9CD6A451",
            "manualHash": true
        },
        "0x933BBEEB8C61B5F4": {
            "params": [],
            "results": "BOOL",
            "description": "```\nProbably IS_SWITCH_*\n```",
            "examples": [],
            "hash": "0x933BBEEB8C61B5F4",
            "ns": "STREAMING",
            "jhash": "0x74C16879",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC197616D221FF4A4": {
            "name": "NEW_LOAD_SCENE_STOP",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC197616D221FF4A4",
            "ns": "STREAMING",
            "jhash": "0x7C05B1F6",
            "manualHash": true
        },
        "0xF8155A7F03DDFC8E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF8155A7F03DDFC8E",
            "ns": "STREAMING",
            "jhash": "0xF8F515E4",
            "manualHash": true
        },
        "0xBEB2D9A1D9A8F55A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBEB2D9A1D9A8F55A",
            "ns": "STREAMING",
            "jhash": "0x62F02485",
            "manualHash": true
        },
        "0xF4A0DADB70F57FA6": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF4A0DADB70F57FA6",
            "ns": "STREAMING",
            "jhash": "0x3DA7AA5D",
            "manualHash": true
        },
        "0x212A8D0D2BABFAC2": {
            "name": "NEW_LOAD_SCENE_START",
            "params": [
                {
                    "name": "posX",
                    "type": "float",
                    "description": "World `x` coordinate."
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "World `y` coordinate."
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "World `z` coordinate."
                },
                {
                    "name": "offsetX",
                    "type": "float",
                    "description": "Offset `x` coordinate."
                },
                {
                    "name": "offsetY",
                    "type": "float",
                    "description": "Offset `y` coordinate."
                },
                {
                    "name": "offsetZ",
                    "type": "float",
                    "description": "Offset `z` coordinate."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "Action radius, value is usually between `3f` and `7000f` in original 1868 scripts."
                },
                {
                    "name": "p7",
                    "type": "int",
                    "description": "0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common."
                }
            ],
            "results": "BOOL",
            "description": "```\n`radius` value is usually between `3f` and `7000f` in original 1868 scripts.\n`p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.\nReturns True if success, used only 7 times in decompiled scripts of 1868\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "function func_8(vParam0)\n    return (-(Sin(vParam0.z)) * Cos(vParam0.x)), (Cos(vParam0.z) * Cos(vParam0.x)), Sin(vParam0.x)\nend\n\nCitizen.CreateThread(function()\n    local vLocal_43 = vector3(1691.228, 3251.785, 44.2574)\n    local vLocal_44 = vector3(2.5652, 0, -4.1481)\n\n    if NewLoadSceneStart(vLocal_43.x, vLocal_43.y, vLocal_43.z, func_8(vLocal_44), 4500.0, 0)) then\n          SetPlayerControl(PlayerId(), false, 0)\n          local gameTimer = GetGameTimer()\n\n          while not IsNewLoadSceneLoaded() and (GetGameTimer() - gameTimer < 20) do\n              Citizen.Wait(0)\n          end\n\n          NewLoadSceneStop()\n          SetFocusPosAndVel(vLocal_43.x, vLocal_43.y, vLocal_43.z, func_8(vLocal_44))\n    end\nend)"
                }
            ],
            "hash": "0x212A8D0D2BABFAC2",
            "ns": "STREAMING",
            "jhash": "0xDF9C38B6",
            "manualHash": true,
            "resultsDescription": "True if success, used only 7 times in decompiled scripts of 1868 (https://github.com/root-cause/v-decompiled-scripts)."
        },
        "0x64E630FAF5F60F44": {
            "name": "NETWORK_STOP_LOAD_SCENE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x64E630FAF5F60F44",
            "ns": "STREAMING",
            "jhash": "0x24857907",
            "manualHash": true
        },
        "0xA76359FC80B2438E": {
            "name": "OVERRIDE_LODSCALE_THIS_FRAME",
            "params": [{ "name": "scaling", "type": "float" }],
            "results": "void",
            "description": "```\nThis allows you to override \"extended distance scaling\" setting. Needs to be called each frame.\nMax scaling seems to be 200.0, normal is 1.0\nSee https://gfycat.com/DetailedHauntingIncatern\n```",
            "examples": [],
            "hash": "0xA76359FC80B2438E",
            "ns": "STREAMING",
            "aliases": ["0xA76359FC80B2438E"],
            "jhash": "0xE5612C1A",
            "manualHash": true
        },
        "0xACCFB4ACF53551B0": {
            "name": "NEW_LOAD_SCENE_START_SPHERE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nif (!sub_8f12(\"START LOAD SCENE SAFE\")) {\n    if (CUTSCENE::GET_CUTSCENE_TIME() > 4178) {\n        STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);\n        sub_8e9e(\"START LOAD SCENE SAFE\", 1);\n    }\n}\n(Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)\n```",
            "examples": [],
            "hash": "0xACCFB4ACF53551B0",
            "ns": "STREAMING",
            "aliases": ["0xACCFB4ACF53551B0"],
            "jhash": "0xFA037FEB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF66A602F829E2A06": {
            "name": "REMOVE_ANIM_DICT",
            "params": [{ "name": "animDict", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF66A602F829E2A06",
            "ns": "STREAMING",
            "jhash": "0x0AE050B5",
            "manualHash": true
        },
        "0xF086AD9354FAC3A3": {
            "name": "REMOVE_MODEL_FROM_CREATOR_BUDGET",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF086AD9354FAC3A3",
            "ns": "STREAMING",
            "aliases": ["0xF086AD9354FAC3A3"],
            "jhash": "0x1C576388",
            "manualHash": true
        },
        "0x01F73A131C18CD94": {
            "name": "REMOVE_CLIP_SET",
            "params": [{ "name": "clipSet", "type": "char*" }],
            "results": "void",
            "description": "```\nAlias for REMOVE_ANIM_SET.  \n```",
            "examples": [],
            "hash": "0x01F73A131C18CD94",
            "ns": "STREAMING",
            "jhash": "0x1E21F7AA",
            "manualHash": true
        },
        "0x3D245789CE12982C": {
            "name": "PREFETCH_SRL",
            "params": [
                { "name": "srl", "type": "char*", "description": "A SRL name." }
            ],
            "results": "void",
            "description": "This native is used to attribute the SRL that BeginSrl is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SetFocusArea because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.\nFor instance, GTA:O opening cutscene.\n\nhttps://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta\nhttps://pastebin.com/zd9XYUWY : here is the content of a SRL file opened with codewalker.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "PrefetchSrl('GTAO_INTRO_MALE')\nwhile not IsSrlLoaded() do\n\tCitizen.Wait(100)\nend\nBeginSrl()"
                }
            ],
            "hash": "0x3D245789CE12982C",
            "ns": "STREAMING",
            "jhash": "0x37BE2FBB",
            "manualHash": true
        },
        "0xEE6C5AD3ECE0A82D": {
            "name": "REMOVE_IPL",
            "params": [{ "name": "iplName", "type": "char*" }],
            "results": "void",
            "description": "IPL list can be found [here](https://gist.github.com/4mmonium/4c8a076b5f712a7cc64666003009a2e7).",
            "examples": [],
            "hash": "0xEE6C5AD3ECE0A82D",
            "ns": "STREAMING",
            "jhash": "0xDF7CBD36",
            "manualHash": true
        },
        "0x16350528F93024B3": {
            "name": "REMOVE_ANIM_SET",
            "params": [{ "name": "animSet", "type": "char*" }],
            "results": "void",
            "description": "Unloads the specified animation set. An animation set provides movement animations for a ped.\n\nAnimation set and clip set are synonymous. See [`SET_PED_MOVEMENT_CLIPSET`](#\\_0xAF8A94EDE7712BEF).",
            "examples": [],
            "hash": "0x16350528F93024B3",
            "ns": "STREAMING",
            "jhash": "0xD04A817A",
            "manualHash": true
        },
        "0x88C6814073DD4A73": {
            "name": "REMOVE_PTFX_ASSET",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x88C6814073DD4A73",
            "ns": "STREAMING",
            "jhash": "0xC10F178C",
            "manualHash": true
        },
        "0xD3BD40951412FEF6": {
            "name": "REQUEST_ANIM_DICT",
            "params": [{ "name": "animDict", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD3BD40951412FEF6",
            "ns": "STREAMING",
            "jhash": "0xDCA96950",
            "manualHash": true
        },
        "0x923CB32A3B874FCB": {
            "name": "REQUEST_COLLISION_FOR_MODEL",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x923CB32A3B874FCB",
            "ns": "STREAMING",
            "jhash": "0x3930C042",
            "manualHash": true
        },
        "0xC9156DC11411A9EA": {
            "name": "REQUEST_ADDITIONAL_COLLISION_AT_COORD",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC9156DC11411A9EA",
            "ns": "STREAMING",
            "jhash": "0xC2CC1DF2",
            "manualHash": true
        },
        "0x41B4893843BBDB74": {
            "name": "REQUEST_IPL",
            "params": [{ "name": "iplName", "type": "char*" }],
            "results": "void",
            "description": "```\nExemple: REQUEST_IPL(\"TrevorsTrailerTrash\");\n```",
            "examples": [],
            "hash": "0x41B4893843BBDB74",
            "ns": "STREAMING",
            "jhash": "0x3B70D1DB",
            "manualHash": true
        },
        "0x5F61EBBE1A00F96D": {
            "name": "REMOVE_NAMED_PTFX_ASSET",
            "params": [{ "name": "fxName", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F61EBBE1A00F96D",
            "ns": "STREAMING",
            "aliases": ["_REMOVE_NAMED_PTFX_ASSET"],
            "jhash": "0xC44762A1",
            "manualHash": true
        },
        "0xD2A71E1A77418A49": {
            "name": "REQUEST_CLIP_SET",
            "params": [{ "name": "clipSet", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2A71E1A77418A49",
            "ns": "STREAMING",
            "jhash": "0x546C627A",
            "manualHash": true
        },
        "0x6EA47DAE7FAD0EED": {
            "name": "REQUEST_ANIM_SET",
            "params": [{ "name": "animSet", "type": "char*" }],
            "results": "void",
            "description": "Starts loading the specified animation set. An animation set provides movement animations for a ped. See [`SET_PED_MOVEMENT_CLIPSET`](#\\_0xAF8A94EDE7712BEF).",
            "examples": [],
            "hash": "0x6EA47DAE7FAD0EED",
            "ns": "STREAMING",
            "jhash": "0x2988B3FC",
            "manualHash": true
        },
        "0x963D27A58DF860AC": {
            "name": "REQUEST_MODEL",
            "params": [
                {
                    "name": "model",
                    "type": "Hash",
                    "description": "The model to request."
                }
            ],
            "results": "void",
            "description": "Request a model (archetype) to be loaded for use by the current script. Use SET_MODEL_AS_NO_LONGER_NEEDED when done using the model in script.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modelHash = `adder`\nRequestModel(modelHash)\nwhile not HasModelLoaded(modelHash) do\n  Wait(0)\nend\n\n-- omitted: creating a vehicle\n\n-- when done using the model\nSetModelAsNoLongerNeeded(modelHash)"
                }
            ],
            "hash": "0x963D27A58DF860AC",
            "ns": "STREAMING",
            "jhash": "0xFFF1B500",
            "manualHash": true
        },
        "0x8A7A40100EDFEC58": {
            "name": "REQUEST_MODELS_IN_ROOM",
            "params": [
                { "name": "interior", "type": "int" },
                { "name": "roomName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, \"V_FIB01_cur_elev\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, \"limbo\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, \"V_Office_gnd_lifts\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, \"limbo\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, \"v_fib01_jan_elev\");\nSTREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, \"limbo\");\n```",
            "examples": [],
            "hash": "0x8A7A40100EDFEC58",
            "ns": "STREAMING",
            "aliases": ["0x8A7A40100EDFEC58", "_REQUEST_INTERIOR_ROOM_BY_NAME"],
            "jhash": "0x939243FB",
            "manualHash": true
        },
        "0xA0261AEF7ACFC51E": {
            "name": "REQUEST_MENU_PED_MODEL",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA0261AEF7ACFC51E",
            "ns": "STREAMING",
            "aliases": ["0xA0261AEF7ACFC51E"],
            "jhash": "0x48CEB6B4",
            "manualHash": true
        },
        "0x944955FB2A3935C8": {
            "name": "REQUEST_PTFX_ASSET",
            "params": [],
            "results": "void",
            "description": "```\nmaps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty\n```",
            "examples": [],
            "hash": "0x944955FB2A3935C8",
            "ns": "STREAMING",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x2C649263",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x07503F7948F491A7": {
            "name": "REQUEST_COLLISION_AT_COORD",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x07503F7948F491A7",
            "ns": "STREAMING",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xCD9805E7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB80D8756B4668AB6": {
            "name": "REQUEST_NAMED_PTFX_ASSET",
            "params": [{ "name": "fxName", "type": "char*" }],
            "results": "void",
            "description": "```\n From the b678d decompiled scripts:\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"core_snow\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"fm_mission_controler\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"proj_xmas_firework\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_apartment_mp\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_biolab_heist\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_fireworks\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_parachute\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_wheelsmoke\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_cig_plane\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_creator\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_tankbattle\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_ornate_heist\");\n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_prison_break_heist_station\");\n```",
            "examples": [],
            "hash": "0xB80D8756B4668AB6",
            "ns": "STREAMING",
            "jhash": "0xCFEA19A9",
            "manualHash": true
        },
        "0x42CBE54462D92634": {
            "name": "SET_DITCH_POLICE_MODELS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nThis is a NOP function. It does nothing at all.  \n```",
            "examples": [],
            "hash": "0x42CBE54462D92634",
            "ns": "STREAMING",
            "jhash": "0x3EA7FCE4",
            "manualHash": true
        },
        "0x717CD6E6FAEBBEDC": {
            "name": "SET_GAME_PAUSES_FOR_STREAMING",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x717CD6E6FAEBBEDC",
            "ns": "STREAMING",
            "jhash": "0x9211A28A",
            "manualHash": true
        },
        "0x198F77705FA0931D": {
            "name": "SET_FOCUS_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "```\nIt seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.  \n```",
            "examples": [],
            "hash": "0x198F77705FA0931D",
            "ns": "STREAMING",
            "jhash": "0x18DB04AC",
            "manualHash": true
        },
        "0xB85F26619073E775": {
            "name": "SET_HD_AREA",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB85F26619073E775",
            "ns": "STREAMING",
            "jhash": "0x80BAA035",
            "manualHash": true
        },
        "0xE37B76C387BE28ED": {
            "name": "SET_INTERIOR_ACTIVE",
            "params": [
                { "name": "interiorID", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE37B76C387BE28ED",
            "ns": "STREAMING",
            "jhash": "0xE1013910",
            "manualHash": true
        },
        "0xBB7454BAFF08FE25": {
            "name": "SET_FOCUS_POS_AND_VEL",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" }
            ],
            "results": "void",
            "description": "```\nOverride the area where the camera will render the terrain.\np3, p4 and p5 are usually set to 0.0\n```",
            "examples": [],
            "hash": "0xBB7454BAFF08FE25",
            "ns": "STREAMING",
            "aliases": ["_SET_FOCUS_AREA"],
            "jhash": "0x14680A60",
            "manualHash": true
        },
        "0x9A9D1BA639675CF1": {
            "name": "SET_ISLAND_ENABLED",
            "params": [
                {
                    "name": "islandName",
                    "type": "char*",
                    "description": "The name of the island to be enabled or disabled."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "A boolean value where `true` enables the island and `false` disables it."
                }
            ],
            "results": "void",
            "description": "Enables the specified island. For more information, see islandhopper.meta\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x9A9D1BA639675CF1",
            "ns": "STREAMING",
            "aliases": ["_SET_ISLAND_HOPPER_ENABLED"],
            "manualHash": true
        },
        "0xAF12610C644A35C9": {
            "name": "SET_MAPDATACULLBOX_ENABLED",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nPossible p0 values:  \n\"prologue\"  \n\"Prologue_Main\"  \n```",
            "examples": [],
            "hash": "0xAF12610C644A35C9",
            "ns": "STREAMING",
            "aliases": ["0xAF12610C644A35C9"],
            "jhash": "0x403CD434",
            "manualHash": true
        },
        "0x5F2013F8BC24EE69": {
            "name": "SET_PLAYER_SHORT_SWITCH_STYLE",
            "params": [
                { "name": "style", "type": "int", "description": "Always 0" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5F2013F8BC24EE69",
            "ns": "STREAMING",
            "aliases": ["0x5F2013F8BC24EE69"],
            "jhash": "0xF0BD420D",
            "manualHash": true
        },
        "0x8C95333CFC3340F3": {
            "name": "SET_PED_POPULATION_BUDGET",
            "params": [
                {
                    "name": "budgetLevel",
                    "type": "int",
                    "description": "Ranges from `0` to `3`, where `0` is lowest (no peds) and `3` is the full budget level."
                }
            ],
            "results": "void",
            "description": "Sets the memory budget level for ped population.",
            "examples": [],
            "hash": "0x8C95333CFC3340F3",
            "ns": "STREAMING",
            "jhash": "0xD2D026CD",
            "manualHash": true
        },
        "0xE532F5D78798DAAB": {
            "name": "SET_MODEL_AS_NO_LONGER_NEEDED",
            "params": [
                {
                    "name": "model",
                    "type": "Hash",
                    "description": "The model to release ownership of."
                }
            ],
            "results": "void",
            "description": "Releases the script ownership assigned by REQUEST_MODEL. This command should be used when done using a specific model hash in script.",
            "examples": [],
            "hash": "0xE532F5D78798DAAB",
            "ns": "STREAMING",
            "jhash": "0xAE0F069E",
            "manualHash": true
        },
        "0x40AEFD1A244741F2": {
            "name": "SET_RENDER_HD_ONLY",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x40AEFD1A244741F2",
            "ns": "STREAMING",
            "aliases": ["0x40AEFD1A244741F2"],
            "jhash": "0x9FA4AF99",
            "manualHash": true
        },
        "0x77B5F9A36BF96710": {
            "name": "SET_REDUCE_PED_MODEL_BUDGET",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x77B5F9A36BF96710",
            "ns": "STREAMING",
            "jhash": "0xAFCB2B86",
            "manualHash": true
        },
        "0xC208B673CE446B61": {
            "name": "SET_PLAYER_SWITCH_OUTRO",
            "params": [
                { "name": "cameraCoordX", "type": "float" },
                { "name": "cameraCoordY", "type": "float" },
                { "name": "cameraCoordZ", "type": "float" },
                { "name": "camRotationX", "type": "float" },
                { "name": "camRotationY", "type": "float" },
                { "name": "camRotationZ", "type": "float" },
                { "name": "camFov", "type": "float" },
                { "name": "camFarClip", "type": "float" },
                { "name": "rotationOrder", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC208B673CE446B61",
            "ns": "STREAMING",
            "aliases": ["0xC208B673CE446B61"],
            "jhash": "0x47352E14",
            "manualHash": true
        },
        "0x0FDE9DBFC0A6BC65": {
            "name": "SET_PLAYER_SWITCH_ESTABLISHING_SHOT",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "```\nAll names can be found in playerswitchestablishingshots.meta\n```",
            "examples": [],
            "hash": "0x0FDE9DBFC0A6BC65",
            "ns": "STREAMING",
            "aliases": ["0x0FDE9DBFC0A6BC65"],
            "jhash": "0x279077B0",
            "manualHash": true
        },
        "0x6E0C692677008888": {
            "name": "SET_STREAMING",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6E0C692677008888",
            "ns": "STREAMING",
            "jhash": "0x27EF6CB2",
            "manualHash": true
        },
        "0xA74A541C6884E7B8": {
            "name": "SET_SRL_TIME",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA74A541C6884E7B8",
            "ns": "STREAMING",
            "jhash": "0x30F8A487",
            "manualHash": true
        },
        "0xFAA23F2CBA159D67": {
            "name": "START_PLAYER_SWITCH",
            "params": [
                { "name": "from", "type": "Ped" },
                { "name": "to", "type": "Ped" },
                { "name": "flags", "type": "int" },
                { "name": "switchType", "type": "int" }
            ],
            "results": "void",
            "description": "```\n// this enum comes directly from R* so don't edit this  \nenum ePlayerSwitchType  \n{  \n\tSWITCH_TYPE_AUTO,  \n\tSWITCH_TYPE_LONG,  \n\tSWITCH_TYPE_MEDIUM,  \n\tSWITCH_TYPE_SHORT  \n};  \nUse GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type. Or just auto, because it calls the same function in executable.  \n----------------------------------------------------  \nExamples from the decompiled scripts:  \nSTREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);  \nSTREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);  \nSTREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);  \nSTREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);  \nNote: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.  \nFlag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.  \nFlag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.  \n```",
            "examples": [],
            "hash": "0xFAA23F2CBA159D67",
            "ns": "STREAMING",
            "jhash": "0x0829E975",
            "manualHash": true
        },
        "0xCCE26000E9A6FAD7": {
            "name": "SHUTDOWN_CREATOR_BUDGET",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCCE26000E9A6FAD7",
            "ns": "STREAMING",
            "aliases": ["0xCCE26000E9A6FAD7"],
            "jhash": "0x897A510F",
            "manualHash": true
        },
        "0x1F3F018BC3AFA77C": {
            "name": "STREAMVOL_CREATE_FRUSTUM",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nAlways returns zero.\n```",
            "examples": [],
            "hash": "0x1F3F018BC3AFA77C",
            "ns": "STREAMING",
            "aliases": ["0x1F3F018BC3AFA77C"],
            "jhash": "0x72344191",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x80C527893080CCF3": {
            "name": "SET_REDUCE_VEHICLE_MODEL_BUDGET",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x80C527893080CCF3",
            "ns": "STREAMING",
            "jhash": "0xCDB4FB7E",
            "manualHash": true
        },
        "0x1EE7D8DF4425F053": {
            "name": "STREAMVOL_DELETE",
            "params": [{ "name": "unused", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1EE7D8DF4425F053",
            "ns": "STREAMING",
            "aliases": ["0x1EE7D8DF4425F053"],
            "jhash": "0xE80F8ABE",
            "manualHash": true
        },
        "0xCB9E1EB3BE2AF4E9": {
            "name": "SET_VEHICLE_POPULATION_BUDGET",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCB9E1EB3BE2AF4E9",
            "ns": "STREAMING",
            "jhash": "0x1D56993C",
            "manualHash": true
        },
        "0x07C313F94746702C": {
            "name": "STREAMVOL_IS_VALID",
            "params": [{ "name": "unused", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x07C313F94746702C",
            "ns": "STREAMING",
            "aliases": ["0x07C313F94746702C"],
            "jhash": "0x42CFE9C0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x95C0A5BBDC189AA1": {
            "name": "STOP_PLAYER_SWITCH",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x95C0A5BBDC189AA1",
            "ns": "STREAMING",
            "jhash": "0x2832C010",
            "manualHash": true
        },
        "0xAAB3200ED59016BC": {
            "name": "SWITCH_TO_MULTI_FIRSTPART",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The Ped (player character) for which the switch is initiated."
                },
                {
                    "name": "flags",
                    "type": "int",
                    "description": "Flags control various functionalities: 0 for normal behavior, 1 for no transition, and 255 for Switch IN."
                },
                {
                    "name": "switchType",
                    "type": "int",
                    "description": "Specifies the type of switch (0 - 3): 0 for 1 step towards ped, 1 for 3 steps out from ped, 2 for 1 step out from ped, and 3 for 1 step towards ped."
                }
            ],
            "results": "void",
            "description": "You can check if the player is in a Switch state with [`IS_PLAYER_SWITCH_IN_PROGRESS`](#\\_0xD9D2CFFF49FAB35F).\n\n***Note:** Doesn't act normally when used on Mount Chiliad.*",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Check if the player is in a Switch \"state\"\nif not IsPlayerSwitchInProgress() then\n    -- If the player is not already in a Switch state, initiate a Switch\n    SwitchToMultiFirstPart(PlayerPedId(), 0, 1)\n    -- In this case, switchType is set to 1, which means \"3 steps out from ped\"\nend"
                },
                {
                    "lang": "js",
                    "code": "// Check if the player is in a Switch \"state\"\nif (!IsPlayerSwitchInProgress()) {\n    // If the player is not already in a Switch state, initiate a Switch\n    SwitchToMultiFirstPart(PlayerPedId(), 0, 1);\n    // In this case, switchType is set to 1, which means \"3 steps out from ped\" according to the documentation\n}"
                },
                {
                    "lang": "csharp",
                    "code": "using static CitizenFX.Core.Native.API;\n\n// Check if the player is in a Switch \"state\"\nif (!IsPlayerSwitchInProgress()) {\n    // If the player is not already in a Switch state, initiate a Switch\n    SwitchToMultiFirstPart(API.PlayerPedId(), 0, 1);\n    // In this case, switchType is set to 1, which means \"3 steps out from ped\" according to the documentation\n}"
                }
            ],
            "hash": "0xAAB3200ED59016BC",
            "ns": "STREAMING",
            "aliases": ["0xAAB3200ED59016BC", "_SWITCH_OUT_PLAYER"],
            "jhash": "0xFB4D062D",
            "manualHash": true
        },
        "0x7D41E9D2D17C5B2D": {
            "name": "STREAMVOL_HAS_LOADED",
            "params": [{ "name": "unused", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7D41E9D2D17C5B2D",
            "ns": "STREAMING",
            "aliases": ["0x7D41E9D2D17C5B2D"],
            "jhash": "0x1B3521F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0AD9710CEE2F590F": {
            "name": "STREAMVOL_CREATE_LINE",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nAlways returns zero.\n```",
            "examples": [],
            "hash": "0x0AD9710CEE2F590F",
            "ns": "STREAMING",
            "aliases": ["0x0AD9710CEE2F590F"],
            "jhash": "0xC0157255",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x219C7B8D53E429FD": {
            "name": "STREAMVOL_CREATE_SPHERE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "rad", "type": "float" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "Any",
            "description": "```\nAlways returns zero.\n```",
            "examples": [],
            "hash": "0x219C7B8D53E429FD",
            "ns": "STREAMING",
            "aliases": ["0x219C7B8D53E429FD", "FORMAT_FOCUS_HEADING"],
            "jhash": "0x10B6AB36",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD8295AF639FD9CB8": {
            "name": "SWITCH_TO_MULTI_SECONDPART",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "After using [`SWITCH_TO_MULTI_FIRSTPART`](#\\_0xAAB3200ED59016BC) , use this native to smoothly return the camera to the player's character.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterCommand(\"switchPlayer\", function()\n    if IsPlayerSwitchInProgress() then return end\n    local ped = PlayerPedId()\n    SwitchToMultiFirstPart(ped, 0, 1)\n    Citizen.Wait(5000)\n    SwitchToMultiSecondPart(ped)\nend, false)"
                },
                {
                    "lang": "javascript",
                    "code": "RegisterCommand(\"switchPlayer\", () => {\n    if (IsPlayerSwitchInProgress()) return;\n    const ped = PlayerPedId();\n    SwitchToMultiFirstPart(ped, 0, 1);\n    Delay(5000); // Delay doesn't exist, you have to make it yourself\n    SwitchToMultiSecondPart(ped);\n}, false);"
                },
                {
                    "lang": "csharp",
                    "code": "using static CitizenFX.Core.Native.API;\nRegisterCommand(\"switchPlayer\", new Action<int, List<object>, string>(async (user, args, raw) =>\n{\n    if (IsPlayerSwitchInProgress()) return;\n    Ped ped = PlayerPedId();\n    SwitchToMultiFirstPart(ped, 0, 1);\n    await Delay(5000);\n    SwitchToMultiSecondPart(ped);\n}), false);"
                }
            ],
            "hash": "0xD8295AF639FD9CB8",
            "ns": "STREAMING",
            "aliases": ["0xD8295AF639FD9CB8", "_SWITCH_IN_PLAYER"],
            "jhash": "0x2349373B",
            "manualHash": true
        }
    },
    "STATS": {
        "0x2B4CDCA6F07FF3DA": {
            "name": "_GET_NGSTAT_INT_HASH",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "spStat", "type": "BOOL" },
                { "name": "charStat", "type": "BOOL" },
                { "name": "character", "type": "int" },
                { "name": "section", "type": "char*" }
            ],
            "results": "Hash",
            "description": "```\nNeeds more research. Gets the stat name of a masked int?\nsection - values used in the decompiled scripts:\n\"_NGPSTAT_INT\"\n\"_MP_NGPSTAT_INT\"\n\"_MP_LRPSTAT_INT\"\n\"_MP_APAPSTAT_INT\"\n\"_MP_LR2PSTAT_INT\"\n\"_MP_BIKEPSTAT_INT\"\n\"_MP_IMPEXPPSTAT_INT\"\n\"_MP_GUNRPSTAT_INT\"\n\"_NGDLCPSTAT_INT\"\n\"_MP_NGDLCPSTAT_INT\"\n\"_DLCSMUGCHARPSTAT_INT\"\n\"_GANGOPSPSTAT_INT\"\n\"_BUSINESSBATPSTAT_INT\"\n\"_ARENAWARSPSTAT_INT\"\n\"_CASINOPSTAT_INT\"\n\"_CASINOHSTPSTAT_INT\"\n```",
            "examples": [],
            "hash": "0x2B4CDCA6F07FF3DA",
            "ns": "STATS",
            "aliases": ["0x2B4CDCA6F07FF3DA"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC4BB08EE7907471E": {
            "name": "GET_PACKED_TU_BOOL_STAT_KEY",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "spStat", "type": "BOOL" },
                { "name": "charStat", "type": "BOOL" },
                { "name": "character", "type": "int" }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xC4BB08EE7907471E",
            "ns": "STATS",
            "aliases": [
                "0xC4BB08EE7907471E",
                "_GET_TUPSTAT_BOOL_HASH",
                "_GET_PACKED_TITLE_UPDATE_BOOL_STAT_KEY"
            ],
            "jhash": "0x3F8E893B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x61E111E323419E07": {
            "name": "GET_PACKED_INT_STAT_KEY",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "spStat", "type": "BOOL" },
                { "name": "charStat", "type": "BOOL" },
                { "name": "character", "type": "int" }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x61E111E323419E07",
            "ns": "STATS",
            "aliases": ["0x61E111E323419E07", "_GET_PSTAT_INT_HASH"],
            "jhash": "0x1F938864",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5CE587FB5A42C8C4": {
            "name": "LEADERBOARDS2_READ_BY_RADIUS",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5CE587FB5A42C8C4",
            "ns": "STATS",
            "jhash": "0xC5B7E685",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA52FF538ED2BC71": {
            "name": "_GET_NGSTAT_BOOL_HASH",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "spStat", "type": "BOOL" },
                { "name": "charStat", "type": "BOOL" },
                { "name": "character", "type": "int" },
                { "name": "section", "type": "char*" }
            ],
            "results": "Hash",
            "description": "```\nNeeds more research. Gets the stat name of a masked bool?\nsection - values used in the decompiled scripts:\n\"_NGPSTAT_BOOL\"\n\"_NGTATPSTAT_BOOL\"\n\"_NGDLCPSTAT_BOOL\"\n\"_DLCBIKEPSTAT_BOOL\"\n\"_DLCGUNPSTAT_BOOL\"\n\"_GUNTATPSTAT_BOOL\"\n\"_DLCSMUGCHARPSTAT_BOOL\"\n\"_GANGOPSPSTAT_BOOL\"\n\"_BUSINESSBATPSTAT_BOOL\"\n\"_ARENAWARSPSTAT_BOOL\"\n\"_CASINOPSTAT_BOOL\"\n\"_CASINOHSTPSTAT_BOOL\"\n\"_HEIST3TATTOOSTAT_BOOL\"\n```",
            "examples": [],
            "hash": "0xBA52FF538ED2BC71",
            "ns": "STATS",
            "aliases": ["0xBA52FF538ED2BC71"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF1AE5DCDBFCA2721": {
            "name": "_LEADERBOARDS2_READ_BY_PLATFORM",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "gamerHandleCsv", "type": "char*" },
                { "name": "platformName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF1AE5DCDBFCA2721",
            "ns": "STATS",
            "aliases": ["0xF1AE5DCDBFCA2721"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD16C2AD6B8E32854": {
            "name": "GET_PACKED_TU_INT_STAT_KEY",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "spStat", "type": "BOOL" },
                { "name": "charStat", "type": "BOOL" },
                { "name": "character", "type": "int" }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xD16C2AD6B8E32854",
            "ns": "STATS",
            "aliases": [
                "0xD16C2AD6B8E32854",
                "_GET_TUPSTAT_INT_HASH",
                "_GET_PACKED_TITLE_UPDATE_INT_STAT_KEY"
            ],
            "jhash": "0xFB93C5A2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC30713A383BFBF0E": {
            "name": "LEADERBOARDS2_READ_BY_HANDLE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC30713A383BFBF0E",
            "ns": "STATS",
            "jhash": "0x6B553408",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA2C7DB0C129449A": {
            "name": "LEADERBOARDS2_READ_BY_RANK",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBA2C7DB0C129449A",
            "ns": "STATS",
            "jhash": "0x1B03F59F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7EEC7E4F6984A16A": {
            "name": "LEADERBOARDS2_READ_BY_SCORE_INT",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7EEC7E4F6984A16A",
            "ns": "STATS",
            "jhash": "0xAC020C18",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA9CDB1E3F0A49883": {
            "name": "LEADERBOARDS2_READ_BY_ROW",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any*" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA9CDB1E3F0A49883",
            "ns": "STATS",
            "jhash": "0xCA931F34",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x80C75307B1C42837": {
            "name": "GET_PACKED_BOOL_STAT_KEY",
            "params": [
                { "name": "index", "type": "int" },
                { "name": "spStat", "type": "BOOL" },
                { "name": "charStat", "type": "BOOL" },
                { "name": "character", "type": "int" }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x80C75307B1C42837",
            "ns": "STATS",
            "aliases": ["0x80C75307B1C42837", "_GET_PSTAT_BOOL_HASH"],
            "jhash": "0xB5BF87B2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAE2206545888AE49": {
            "name": "LEADERBOARDS2_WRITE_DATA",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAE2206545888AE49",
            "ns": "STATS",
            "jhash": "0x5F9DF634",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE662C8B759D08F3C": {
            "name": "LEADERBOARDS2_READ_BY_SCORE_FLOAT",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE662C8B759D08F3C",
            "ns": "STATS",
            "jhash": "0xC678B29F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x428EAF89E24F6C36": {
            "name": "_LEADERBOARDS_DEATHS",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x428EAF89E24F6C36",
            "ns": "STATS",
            "aliases": ["0x428EAF89E24F6C36"],
            "jhash": "0xEE292B91",
            "manualHash": true
        },
        "0x792271AB35C356A4": {
            "name": "_HIRED_LIMO",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x792271AB35C356A4",
            "ns": "STATS",
            "aliases": ["0x792271AB35C356A4"],
            "manualHash": true
        },
        "0x918B101666F9CB83": {
            "name": "LEADERBOARDS2_READ_FRIENDS_BY_ROW",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x918B101666F9CB83",
            "ns": "STATS",
            "jhash": "0xBD91B136",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x58A651CD201D89AD": {
            "name": "LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x58A651CD201D89AD",
            "ns": "STATS",
            "aliases": ["0x58A651CD201D89AD"],
            "jhash": "0xCE7CB520",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD4B02A6B476E1FDC": {
            "name": "LEADERBOARDS_CLEAR_CACHE_DATA",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD4B02A6B476E1FDC",
            "ns": "STATS",
            "jhash": "0x87F498C1",
            "manualHash": true
        },
        "0xB9BB18E2C40142ED": {
            "name": "LEADERBOARDS_CACHE_DATA_ROW",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB9BB18E2C40142ED",
            "ns": "STATS",
            "jhash": "0x44F7D82B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9C51349BE6CDFE2C": {
            "name": "LEADERBOARDS_GET_CACHE_EXISTS",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9C51349BE6CDFE2C",
            "ns": "STATS",
            "jhash": "0xFC8A71F3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC38DC1E90D22547C": {
            "name": "LEADERBOARDS2_READ_RANK_PREDICTION",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC38DC1E90D22547C",
            "ns": "STATS",
            "aliases": ["0xC38DC1E90D22547C"],
            "jhash": "0x9BEC3401",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9120E8DBA3D69273": {
            "name": "LEADERBOARDS_GET_CACHE_DATA_ROW",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9120E8DBA3D69273",
            "ns": "STATS",
            "jhash": "0xA11289EC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBF4FEF46DB7894D3": {
            "name": "LEADERBOARDS_GET_COLUMN_TYPE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xBF4FEF46DB7894D3",
            "ns": "STATS",
            "jhash": "0x6F2820F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC4B5467A1886EA7E": {
            "name": "LEADERBOARDS_GET_COLUMN_ID",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC4B5467A1886EA7E",
            "ns": "STATS",
            "jhash": "0x3821A334",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC980E62E33DF1D5C": {
            "name": "LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC980E62E33DF1D5C",
            "ns": "STATS",
            "aliases": ["0xC980E62E33DF1D5C"],
            "jhash": "0x62C19A3D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x117B45156D7EFF2E": {
            "name": "LEADERBOARDS_GET_NUMBER_OF_COLUMNS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x117B45156D7EFF2E",
            "ns": "STATS",
            "jhash": "0x0A56EE34",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA31FD15197B192BD": {
            "name": "LEADERBOARDS_READ_ANY_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA31FD15197B192BD",
            "ns": "STATS",
            "aliases": ["0xA31FD15197B192BD"],
            "jhash": "0x1789437B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF04C1C27DA35F6C8": {
            "name": "LEADERBOARDS_GET_CACHE_TIME",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xF04C1C27DA35F6C8",
            "ns": "STATS",
            "jhash": "0xEDF02302",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7CCE5C737A665701": {
            "name": "LEADERBOARDS_READ_CLEAR",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x7CCE5C737A665701",
            "ns": "STATS",
            "jhash": "0x7090012F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2E65248609523599": {
            "name": "LEADERBOARDS_WRITE_ADD_COLUMN_LONG",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2E65248609523599",
            "ns": "STATS",
            "aliases": ["0x2E65248609523599"],
            "jhash": "0x1C5CCC3A",
            "manualHash": true
        },
        "0xA34CB6E6F0DF4A0B": {
            "name": "LEADERBOARDS_READ_CLEAR_ALL",
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xA34CB6E6F0DF4A0B",
            "ns": "STATS",
            "jhash": "0x233E058A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAC392C8483342AC2": {
            "name": "LEADERBOARDS_READ_PENDING",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAC392C8483342AC2",
            "ns": "STATS",
            "jhash": "0xEEB8BF5C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0BCA1D2C47B0D269": {
            "name": "LEADERBOARDS_WRITE_ADD_COLUMN",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0BCA1D2C47B0D269",
            "ns": "STATS",
            "aliases": ["0x0BCA1D2C47B0D269"],
            "jhash": "0x7524E27B",
            "manualHash": true
        },
        "0x2FB19228983E832C": {
            "name": "LEADERBOARDS_READ_SUCCESSFUL",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2FB19228983E832C",
            "ns": "STATS",
            "jhash": "0x3AC5B2F1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x03C2EEBB04B3FB72": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x03C2EEBB04B3FB72",
            "ns": "STATS",
            "manualHash": true
        },
        "0x015B03EE1C43E6EC": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x015B03EE1C43E6EC",
            "ns": "STATS",
            "manualHash": true
        },
        "0x0077F15613D36993": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x0077F15613D36993",
            "ns": "STATS",
            "manualHash": true
        },
        "0x0B565B0AAE56A0E8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0B565B0AAE56A0E8",
            "ns": "STATS",
            "manualHash": true
        },
        "0x06EAF70AE066441E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x06EAF70AE066441E",
            "ns": "STATS",
            "manualHash": true
        },
        "0x0A9C7F36E5D7B683": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A9C7F36E5D7B683",
            "ns": "STATS",
            "manualHash": true
        },
        "0x0D01D20616FC73FB": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0D01D20616FC73FB",
            "ns": "STATS",
            "jhash": "0x2180AE13",
            "manualHash": true
        },
        "0x14E0B2D1AD1044E0": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x14E0B2D1AD1044E0",
            "ns": "STATS",
            "jhash": "0xDDD1F1F3",
            "manualHash": true
        },
        "0x0B8B7F74BF061C6D": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x0B8B7F74BF061C6D",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1A7CE7CD3E653485": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1A7CE7CD3E653485",
            "ns": "STATS",
            "manualHash": true
        },
        "0x1A8EA222F9C67DBB": {
            "params": [{ "name": "p0", "type": "float*" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x1A8EA222F9C67DBB",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x14EDA9EE27BD1626": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x14EDA9EE27BD1626",
            "ns": "STATS",
            "manualHash": true
        },
        "0x164C5FF663790845": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x164C5FF663790845",
            "ns": "STATS",
            "manualHash": true
        },
        "0x282B6739644F4347": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x282B6739644F4347",
            "ns": "STATS",
            "manualHash": true
        },
        "0x26D7399B9587FE89": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "```\nSTATS::0x343B27E2(0);  \nSTATS::0x343B27E2(1);  \nSTATS::0x343B27E2(2);  \nSTATS::0x343B27E2(3);  \nSTATS::0x343B27E2(4);  \nSTATS::0x343B27E2(5);  \nSTATS::0x343B27E2(6);  \nSTATS::0x343B27E2(7);  \nIdentical in ingamehud & maintransition.  \n```",
            "examples": [],
            "hash": "0x26D7399B9587FE89",
            "ns": "STATS",
            "jhash": "0x343B27E2",
            "manualHash": true
        },
        "0x2E0259BABC27A327": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x2E0259BABC27A327",
            "ns": "STATS",
            "manualHash": true
        },
        "0x2818FF6638CB09DE": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x2818FF6638CB09DE",
            "ns": "STATS",
            "manualHash": true
        },
        "0x2CD90358F67D0AA8": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2CD90358F67D0AA8",
            "ns": "STATS",
            "manualHash": true
        },
        "0x316DB59CD14C1774": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x316DB59CD14C1774",
            "ns": "STATS",
            "manualHash": true
        },
        "0x27AA1C973CACFE63": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x27AA1C973CACFE63",
            "ns": "STATS",
            "manualHash": true
        },
        "0x32CAC93C9DE73D32": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x32CAC93C9DE73D32",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x28ECB8AC2F607DB2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x28ECB8AC2F607DB2",
            "ns": "STATS",
            "manualHash": true
        },
        "0x34770B9CE0E03B91": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x34770B9CE0E03B91",
            "ns": "STATS",
            "jhash": "0x766A74FE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x38BAAA5DD4C9D19F": {
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "```\nSets profile setting 934  \n```",
            "examples": [],
            "hash": "0x38BAAA5DD4C9D19F",
            "ns": "STATS",
            "jhash": "0x726FAE66",
            "manualHash": true
        },
        "0x3EBEAC6C3F81F6BD": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3EBEAC6C3F81F6BD",
            "ns": "STATS",
            "manualHash": true
        },
        "0x2D7A9B577E72385E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x2D7A9B577E72385E",
            "ns": "STATS",
            "manualHash": true
        },
        "0x419615486BBF1956": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x419615486BBF1956",
            "ns": "STATS",
            "manualHash": true
        },
        "0x33D72899E24C3365": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x33D72899E24C3365",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4C89FE2BDEB3F169": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x4C89FE2BDEB3F169",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2FA3173480008493": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x2FA3173480008493",
            "ns": "STATS",
            "manualHash": true
        },
        "0x38491439B6BA7F7D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x38491439B6BA7F7D",
            "ns": "STATS",
            "jhash": "0x509A286F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x53C31853EC9531FF": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x53C31853EC9531FF",
            "ns": "STATS",
            "manualHash": true
        },
        "0x44919CC079BB60BF": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x44919CC079BB60BF",
            "ns": "STATS",
            "manualHash": true
        },
        "0x3DE3AA516FB126A4": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3DE3AA516FB126A4",
            "ns": "STATS",
            "manualHash": true
        },
        "0x53CAE13E9B426993": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x53CAE13E9B426993",
            "ns": "STATS",
            "manualHash": true
        },
        "0x4AFF7E02E485E92B": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x4AFF7E02E485E92B",
            "ns": "STATS",
            "manualHash": true
        },
        "0x5BD5F255321C4AAF": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x5BD5F255321C4AAF",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4DC416F246A41FC8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x4DC416F246A41FC8",
            "ns": "STATS",
            "manualHash": true
        },
        "0x5CDAED54B34B0ED0": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x5CDAED54B34B0ED0",
            "ns": "STATS",
            "manualHash": true
        },
        "0x55A8BECAF28A4EB7": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x55A8BECAF28A4EB7",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6551B1F7F6CD46EA": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6551B1F7F6CD46EA",
            "ns": "STATS",
            "manualHash": true
        },
        "0x55384438FC55AD8E": {
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "```\nSets profile setting 935  \n```",
            "examples": [],
            "hash": "0x55384438FC55AD8E",
            "ns": "STATS",
            "jhash": "0xF03895A4",
            "manualHash": true
        },
        "0x5BF29846C6527C54": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x5BF29846C6527C54",
            "ns": "STATS",
            "manualHash": true
        },
        "0x5688585E6D563CD8": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "```\nSTAT_SET_*\n```",
            "examples": [],
            "hash": "0x5688585E6D563CD8",
            "ns": "STATS",
            "jhash": "0xC62406A6",
            "manualHash": true
        },
        "0x5EAD2BF6484852E4": {
            "params": [],
            "results": "BOOL",
            "description": "```\nexample from completionpercentage_controller.ysc.c4\nif (STATS::_5EAD2BF6484852E4()) {\n            MISC::SET_BIT(g_17b95._f20df._ff10, 15);\n            STATS::_11FF1C80276097ED(0xe9ec4dd1, 200, 0);\n        }\n```",
            "examples": [],
            "hash": "0x5EAD2BF6484852E4",
            "ns": "STATS",
            "jhash": "0x23D70C39",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4FCDBD3F0A813C25": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x4FCDBD3F0A813C25",
            "ns": "STATS",
            "manualHash": true
        },
        "0x60EEDC12AF66E846": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x60EEDC12AF66E846",
            "ns": "STATS",
            "manualHash": true
        },
        "0x6BC0ACD0673ACEBE": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "valueA", "type": "int*" },
                { "name": "valueB", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6BC0ACD0673ACEBE",
            "ns": "STATS",
            "manualHash": true
        },
        "0x5A556B229A169402": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5A556B229A169402",
            "ns": "STATS",
            "jhash": "0x46F21343",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x678F86D8FC040BDB": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x678F86D8FC040BDB",
            "ns": "STATS",
            "manualHash": true
        },
        "0x629526ABA383BCAA": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x629526ABA383BCAA",
            "ns": "STATS",
            "manualHash": true
        },
        "0x6E0A5253375C4584": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x6E0A5253375C4584",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6A7F19756F1A9016": {
            "params": [],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x6A7F19756F1A9016",
            "ns": "STATS",
            "manualHash": true
        },
        "0x5FF2C33B13A02A11": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5FF2C33B13A02A11",
            "ns": "STATS",
            "manualHash": true
        },
        "0x6F361B8889A792A3": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6F361B8889A792A3",
            "ns": "STATS",
            "jhash": "0x3B4EF322",
            "manualHash": true
        },
        "0x6BCCF9948492FD85": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6BCCF9948492FD85",
            "ns": "STATS",
            "manualHash": true
        },
        "0x6483C25849031C4F": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6483C25849031C4F",
            "ns": "STATS",
            "jhash": "0x2FFD2FA5",
            "manualHash": true
        },
        "0x71B008056E5692D6": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x71B008056E5692D6",
            "ns": "STATS",
            "jhash": "0xF2DB6A82",
            "manualHash": true
        },
        "0x7033EEFD9B28088E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7033EEFD9B28088E",
            "ns": "STATS",
            "manualHash": true
        },
        "0x6A60E43998228229": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6A60E43998228229",
            "ns": "STATS",
            "manualHash": true
        },
        "0x723C1CE13FBFDB67": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x723C1CE13FBFDB67",
            "ns": "STATS",
            "jhash": "0x4C39CF10",
            "manualHash": true
        },
        "0x79D310A861697CC9": {
            "params": [
                { "name": "profileSetting", "type": "int" },
                { "name": "settingValue", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets profile setting 940 and 941\n\n_SET_F* - _SET_G*\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x79D310A861697CC9",
            "ns": "STATS",
            "manualHash": true
        },
        "0x6DEE77AFF8C21BD1": {
            "params": [
                {
                    "name": "playerAccountId",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                {
                    "name": "posixTime",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6DEE77AFF8C21BD1",
            "ns": "STATS",
            "jhash": "0x489E27E7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7D36291161859389": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7D36291161859389",
            "ns": "STATS",
            "manualHash": true
        },
        "0x7B18DA61F6BAE9D5": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7B18DA61F6BAE9D5",
            "ns": "STATS",
            "manualHash": true
        },
        "0x7F2C4CDF2E82DF4C": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7F2C4CDF2E82DF4C",
            "ns": "STATS",
            "jhash": "0x0BF0F4B2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x73001E34F85137F8": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x73001E34F85137F8",
            "ns": "STATS",
            "manualHash": true
        },
        "0x7E6946F68A38B74F": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7E6946F68A38B74F",
            "ns": "STATS",
            "jhash": "0x22804C20",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7D8BA05688AD64C7": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7D8BA05688AD64C7",
            "ns": "STATS",
            "manualHash": true
        },
        "0x84A810B375E69C0E": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x84A810B375E69C0E",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x88087EE1F28024AE": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x88087EE1F28024AE",
            "ns": "STATS",
            "manualHash": true
        },
        "0x7EEC2A316C250073": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\n_PLAYSTATS_ROB_ARMOURD_TRUCK  \n```",
            "examples": [],
            "hash": "0x7EEC2A316C250073",
            "ns": "STATS",
            "jhash": "0x30558CFD",
            "manualHash": true
        },
        "0x8B9CDBD6C566C38C": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x8B9CDBD6C566C38C",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x810B5FCC52EC7FF0": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x810B5FCC52EC7FF0",
            "ns": "STATS",
            "manualHash": true
        },
        "0x830C3A44EB3F2CF9": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x830C3A44EB3F2CF9",
            "ns": "STATS",
            "manualHash": true
        },
        "0x84DFC579C2FC214C": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x84DFC579C2FC214C",
            "ns": "STATS",
            "manualHash": true
        },
        "0x8989CBD7B4E82534": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8989CBD7B4E82534",
            "ns": "STATS",
            "manualHash": true
        },
        "0x92FC0EEDFAC04A14": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x92FC0EEDFAC04A14",
            "ns": "STATS",
            "manualHash": true
        },
        "0x88578F6EC36B4A3A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x88578F6EC36B4A3A",
            "ns": "STATS",
            "jhash": "0x6B90E730",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8C9D11605E59D955": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8C9D11605E59D955",
            "ns": "STATS",
            "manualHash": true
        },
        "0x8EC74CEB042E7CFF": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8EC74CEB042E7CFF",
            "ns": "STATS",
            "jhash": "0x88AE9667",
            "manualHash": true
        },
        "0x96E6D5150DBF1C09": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x96E6D5150DBF1C09",
            "ns": "STATS",
            "manualHash": true
        },
        "0x8D8ADB562F09A245": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8D8ADB562F09A245",
            "ns": "STATS",
            "manualHash": true
        },
        "0x9B4BD21D69B1E609": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9B4BD21D69B1E609",
            "ns": "STATS",
            "manualHash": true
        },
        "0x98E2BC1CA26287C3": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x98E2BC1CA26287C3",
            "ns": "STATS",
            "manualHash": true
        },
        "0x930F504203F561C9": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x930F504203F561C9",
            "ns": "STATS",
            "manualHash": true
        },
        "0x9EC8858184CD253A": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x9EC8858184CD253A",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0F93D5465B3094D": {
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA0F93D5465B3094D",
            "ns": "STATS",
            "jhash": "0xC977D6E2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9A62EC95AE10E011": {
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9A62EC95AE10E011",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA736CF7FB7C5BFF4": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA736CF7FB7C5BFF4",
            "ns": "STATS",
            "jhash": "0x31002201",
            "manualHash": true
        },
        "0xA8733668D1047B51": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA8733668D1047B51",
            "ns": "STATS",
            "jhash": "0x395D18B1",
            "manualHash": true
        },
        "0xA3C53804BDB68ED2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA3C53804BDB68ED2",
            "ns": "STATS",
            "manualHash": true
        },
        "0xA78B8FA58200DA56": {
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "```\nSTATS::0xE3247582(0);  \nSTATS::0xE3247582(1);  \nSTATS::0xE3247582(2);  \nSTATS::0xE3247582(3);  \nSTATS::0xE3247582(4);  \nSTATS::0xE3247582(5);  \nSTATS::0xE3247582(6);  \n```",
            "examples": [],
            "hash": "0xA78B8FA58200DA56",
            "ns": "STATS",
            "jhash": "0xE3247582",
            "manualHash": true
        },
        "0xA761D4AC6115623D": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xA761D4AC6115623D",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA6F54BB2FFCA35EA": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA6F54BB2FFCA35EA",
            "ns": "STATS",
            "manualHash": true
        },
        "0xAFF47709F1D5DCCE": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xAFF47709F1D5DCCE",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA525DFF66BB82F5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA525DFF66BB82F5",
            "ns": "STATS",
            "manualHash": true
        },
        "0xB1D2BB1E1631F5B1": {
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB1D2BB1E1631F5B1",
            "ns": "STATS",
            "jhash": "0x02F283CE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBA9749CC94C1FD85": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xBA9749CC94C1FD85",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA943FD1722E11EFD": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xA943FD1722E11EFD",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB26F670685631727": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xB26F670685631727",
            "ns": "STATS",
            "manualHash": true
        },
        "0xB3DA2606774A8E2D": {
            "params": [],
            "results": "BOOL",
            "description": "```\nThis function is hard-coded to always return 1.\nNETWORK_IS_*\n```",
            "examples": [],
            "hash": "0xB3DA2606774A8E2D",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBE3DB208333D9844": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xBE3DB208333D9844",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBAA2F0490E146BE8": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBAA2F0490E146BE8",
            "ns": "STATS",
            "manualHash": true
        },
        "0xBFAFDB5FAAA5C5AB": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBFAFDB5FAAA5C5AB",
            "ns": "STATS",
            "manualHash": true
        },
        "0xBED9F5693F34ED17": {
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "p1", "type": "int" },
                { "name": "outValue", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBED9F5693F34ED17",
            "ns": "STATS",
            "jhash": "0xC4110917",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBF371CD2B64212FD": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF371CD2B64212FD",
            "ns": "STATS",
            "manualHash": true
        },
        "0xC0E0D686DDFC6EAE": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC0E0D686DDFC6EAE",
            "ns": "STATS",
            "jhash": "0x099FCC86",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC03FAB2C2F92289B": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xC03FAB2C2F92289B",
            "ns": "STATS",
            "manualHash": true
        },
        "0xC67E2DA1CBE759E2": {
            "params": [],
            "results": "void",
            "description": "Sets profile setting 939\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xC67E2DA1CBE759E2",
            "ns": "STATS",
            "manualHash": true
        },
        "0xC141B8917E0017EC": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC141B8917E0017EC",
            "ns": "STATS",
            "jhash": "0x0AD43306",
            "manualHash": true
        },
        "0xC01D2470F22CDE5A": {
            "params": [],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**\n\n```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xC01D2470F22CDE5A",
            "ns": "STATS",
            "manualHash": true
        },
        "0xD1A1EE3B4FA8E760": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD1A1EE3B4FA8E760",
            "ns": "STATS",
            "manualHash": true
        },
        "0xC14BD9F5337219B2": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xC14BD9F5337219B2",
            "ns": "STATS",
            "manualHash": true
        },
        "0xC6E0E2616A7576BB": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xC6E0E2616A7576BB",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC1E963C58664B556": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xC1E963C58664B556",
            "ns": "STATS",
            "manualHash": true
        },
        "0xCC25A4553DFBF9EA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCC25A4553DFBF9EA",
            "ns": "STATS",
            "manualHash": true
        },
        "0xD6CA58B3B53A0F22": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xD6CA58B3B53A0F22",
            "ns": "STATS",
            "manualHash": true
        },
        "0xDFCDB14317A9B361": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xDFCDB14317A9B361",
            "ns": "STATS",
            "manualHash": true
        },
        "0xC847B43F369AC0B5": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC847B43F369AC0B5",
            "ns": "STATS",
            "manualHash": true
        },
        "0xD4367D310F079DB0": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xD4367D310F079DB0",
            "ns": "STATS",
            "manualHash": true
        },
        "0xD558BEC0BBA7E8D2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD558BEC0BBA7E8D2",
            "ns": "STATS",
            "manualHash": true
        },
        "0xD1C9B92BDD3F151D": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD1C9B92BDD3F151D",
            "ns": "STATS",
            "manualHash": true
        },
        "0xDFBD93BF2943E29B": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xDFBD93BF2943E29B",
            "ns": "STATS",
            "manualHash": true
        },
        "0xF534D94DFA2EAD26": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF534D94DFA2EAD26",
            "ns": "STATS",
            "manualHash": true
        },
        "0xDAF80797FC534BEC": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDAF80797FC534BEC",
            "ns": "STATS",
            "manualHash": true
        },
        "0xF9F2922717B819EC": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xF9F2922717B819EC",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE8853FBCE7D8D0D6": {
            "params": [],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xE8853FBCE7D8D0D6",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE3261D791EB44ACB": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE3261D791EB44ACB",
            "ns": "STATS",
            "manualHash": true
        },
        "0xA071E0ED98F91286": {
            "name": "PLAYSTATS_ACTIVITY_DONE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA071E0ED98F91286",
            "ns": "STATS",
            "aliases": ["0xA071E0ED98F91286"],
            "jhash": "0x1A66945F",
            "manualHash": true
        },
        "0xDEAAF77EB3687E97": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xDEAAF77EB3687E97",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xECB41AC6AB754401": {
            "params": [],
            "results": "BOOL",
            "description": "```\nSTAT_LOAD_*\n```",
            "examples": [],
            "hash": "0xECB41AC6AB754401",
            "ns": "STATS",
            "jhash": "0xED7000C8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEDBF6C9B0D2C65C8": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEDBF6C9B0D2C65C8",
            "ns": "STATS",
            "manualHash": true
        },
        "0xE496A53BA5F50A56": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xE496A53BA5F50A56",
            "ns": "STATS",
            "jhash": "0xCE6B62B5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF06A6F41CB445443": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF06A6F41CB445443",
            "ns": "STATS",
            "manualHash": true
        },
        "0xF1A1803D3476F215": {
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "```\nSets profile setting 933  \n```",
            "examples": [],
            "hash": "0xF1A1803D3476F215",
            "ns": "STATS",
            "jhash": "0xA3DAC790",
            "manualHash": true
        },
        "0x533A7D1EA58DF958": {
            "name": "_PLAYSTATS_ARCADEGAME",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x533A7D1EA58DF958",
            "ns": "STATS",
            "manualHash": true
        },
        "0xF8C54A461C3E11DC": {
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF8C54A461C3E11DC",
            "ns": "STATS",
            "jhash": "0x04181752",
            "manualHash": true
        },
        "0xF11F01D98113536A": {
            "params": [{ "name": "p0", "type": "float*" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xF11F01D98113536A",
            "ns": "STATS",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFCC228E07217FCAC": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFCC228E07217FCAC",
            "ns": "STATS",
            "manualHash": true
        },
        "0x46F917F6B4128FE4": {
            "name": "PLAYSTATS_AWARD_XP",
            "params": [
                { "name": "amount", "type": "int" },
                {
                    "name": "type",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "category",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x46F917F6B4128FE4",
            "ns": "STATS",
            "jhash": "0x8770017B",
            "manualHash": true
        },
        "0xCEA553E35C2246E1": {
            "name": "_ORDERED_BOSS_VEHICLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                {
                    "name": "vehicleHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCEA553E35C2246E1",
            "ns": "STATS",
            "aliases": ["0xCEA553E35C2246E1"],
            "manualHash": true
        },
        "0xF9096193DF1F99D4": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0xF9096193DF1F99D4",
            "ns": "STATS",
            "manualHash": true
        },
        "0x47B32F5611E6E483": {
            "name": "_PLAYSTATS_AWARD_BADSPORT",
            "params": [{ "name": "id", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x47B32F5611E6E483",
            "ns": "STATS",
            "aliases": ["0x47B32F5611E6E483"],
            "manualHash": true
        },
        "0x5009DFD741329729": {
            "name": "PLAYSTATS_BACKGROUND_SCRIPT_ACTION",
            "params": [
                { "name": "action", "type": "char*" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5009DFD741329729",
            "ns": "STATS",
            "aliases": ["0x5009DFD741329729"],
            "jhash": "0x61ECC465",
            "manualHash": true
        },
        "0x79AB33F0FBFAC40C": {
            "name": "PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x79AB33F0FBFAC40C",
            "ns": "STATS",
            "aliases": ["0x79AB33F0FBFAC40C"],
            "jhash": "0x8D5C7B37",
            "manualHash": true
        },
        "0xD6781E42755531F7": {
            "name": "_PLAYSTATS_BUY_CONTRABAND",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD6781E42755531F7",
            "ns": "STATS",
            "aliases": ["0xD6781E42755531F7"],
            "manualHash": true
        },
        "0xB479D9F0D48A1BC5": {
            "name": "_PLAYSTATS_ARENA_WARS_ENDED",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xB479D9F0D48A1BC5",
            "ns": "STATS",
            "manualHash": true
        },
        "0x6F4F599753F8200A": {
            "name": "_PLAYSTATS_ARENA_WAR_SPECTATOR",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" },
                { "name": "p4", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x6F4F599753F8200A",
            "ns": "STATS",
            "manualHash": true
        },
        "0x69C922B677621428": {
            "name": "_PLAYSTATS_CARCLUB_PRIZE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x69C922B677621428",
            "ns": "STATS",
            "aliases": ["0x69C922B677621428"],
            "manualHash": true
        },
        "0x3EAE97309727E7AD": {
            "name": "_PLAYSTATS_CASINO_BLACKJACK",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x3EAE97309727E7AD",
            "ns": "STATS",
            "manualHash": true
        },
        "0x23A3CBCD50D54E47": {
            "name": "_PLAYSTATS_CASINO_INSIDETRACK_LIGHT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x23A3CBCD50D54E47",
            "ns": "STATS",
            "manualHash": true
        },
        "0x516FC96EB88EEFE5": {
            "name": "_PLAYSTATS_BAN_ALERT",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x516FC96EB88EEFE5",
            "ns": "STATS",
            "aliases": ["0x516FC96EB88EEFE5"],
            "manualHash": true
        },
        "0x0999F3F090EC5012": {
            "name": "_PLAYSTATS_CASINO_CHIP",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x0999F3F090EC5012",
            "ns": "STATS",
            "manualHash": true
        },
        "0x0C432C1435F5E4FA": {
            "name": "_PLAYSTATS_CASINO_LUCKYSEVEN",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x0C432C1435F5E4FA",
            "ns": "STATS",
            "manualHash": true
        },
        "0x1187CB58D7F3BED7": {
            "name": "_PLAYSTATS_CARCLUB_CHALLENGE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x1187CB58D7F3BED7",
            "ns": "STATS",
            "aliases": ["0x1187CB58D7F3BED7"],
            "manualHash": true
        },
        "0xFF14D6FEEC507BBE": {
            "name": "_PLAYSTATS_CARCLUB_POINTS",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xFF14D6FEEC507BBE",
            "ns": "STATS",
            "aliases": ["0xFF14D6FEEC507BBE"],
            "manualHash": true
        },
        "0x95101C443A84E7F1": {
            "name": "_PLAYSTATS_CASINO_ROULETTE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x95101C443A84E7F1",
            "ns": "STATS",
            "manualHash": true
        },
        "0xF740FB339D471C35": {
            "name": "_PLAYSTATS_CASINO_THREECARDPOKER",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xF740FB339D471C35",
            "ns": "STATS",
            "manualHash": true
        },
        "0xD5451C7BF151EB6F": {
            "name": "_PLAYSTATS_CASINO_BLACKJACK_LIGHT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xD5451C7BF151EB6F",
            "ns": "STATS",
            "manualHash": true
        },
        "0x049F059625058A86": {
            "name": "_PLAYSTATS_CASINO_INSIDETRACK",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x049F059625058A86",
            "ns": "STATS",
            "manualHash": true
        },
        "0x6058665D72302D3F": {
            "name": "PLAYSTATS_CHEAT_APPLIED",
            "params": [{ "name": "cheat", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6058665D72302D3F",
            "ns": "STATS",
            "jhash": "0x345166F3",
            "manualHash": true
        },
        "0x6572ABA3DE1197FC": {
            "name": "_PLAYSTATS_CASINO_ROULETTE_LIGHT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x6572ABA3DE1197FC",
            "ns": "STATS",
            "manualHash": true
        },
        "0x1A0D4A6C336B7BC5": {
            "name": "_PLAYSTATS_CASINO_MISSION_ENDED",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x1A0D4A6C336B7BC5",
            "ns": "STATS",
            "manualHash": true
        },
        "0xFCCCAC2BD3C1F180": {
            "name": "_PLAYSTATS_CASINO_STORY_MISSION_ENDED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xFCCCAC2BD3C1F180",
            "ns": "STATS",
            "manualHash": true
        },
        "0xE60054A0FAE8227F": {
            "name": "_PLAYSTATS_CASINO_SLOTMACHINE_LIGHT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xE60054A0FAE8227F",
            "ns": "STATS",
            "manualHash": true
        },
        "0xB7257BA2550EA10A": {
            "name": "_PLAYSTATS_COPY_RANK_INTO_NEW_SLOT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB7257BA2550EA10A",
            "ns": "STATS",
            "aliases": ["0xB7257BA2550EA10A"],
            "manualHash": true
        },
        "0xEF5EC67D392B830A": {
            "name": "_PLAYSTATS_CASINO_SLOTMACHINE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xEF5EC67D392B830A",
            "ns": "STATS",
            "manualHash": true
        },
        "0xC9001364B4388F22": {
            "name": "_PLAYSTATS_CASINO_THREECARDPOKER_LIGHT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xC9001364B4388F22",
            "ns": "STATS",
            "manualHash": true
        },
        "0x0A50D2604E05CB94": {
            "name": "_PLAYSTATS_CHANGE_MC_EMBLEM",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A50D2604E05CB94",
            "ns": "STATS",
            "aliases": ["0x0A50D2604E05CB94"],
            "manualHash": true
        },
        "0x1CAE5D2E3F9A07F0": {
            "name": "PLAYSTATS_CRATE_DROP_MISSION_DONE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 7: Any p6\nNativeDB Added Parameter 8: Any p7\n```",
            "examples": [],
            "hash": "0x1CAE5D2E3F9A07F0",
            "ns": "STATS",
            "aliases": ["0x1CAE5D2E3F9A07F0", "_PLAYSTATS_CRATE_DROP"],
            "jhash": "0x6602CED6",
            "manualHash": true
        },
        "0xAFC7E5E075A96F46": {
            "name": "PLAYSTATS_CRATE_CREATED",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAFC7E5E075A96F46",
            "ns": "STATS",
            "aliases": [
                "0xAFC7E5E075A96F46",
                "_PLAYSTATS_AMBIENT_MISSION_CRATE_CREATED",
                "_PLAYSTATS_CRATE_CREATED",
                "_PLAYSTATS_CRATE_CREATED_MISSION_DONE"
            ],
            "jhash": "0xD003E648",
            "manualHash": true
        },
        "0x34B973047A2268B9": {
            "name": "PLAYSTATS_CLOTH_CHANGE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x34B973047A2268B9",
            "ns": "STATS",
            "jhash": "0x3AFF9E58",
            "manualHash": true
        },
        "0x66C7BB2416ED3FCE": {
            "name": "_PLAYSTATS_DRONE_USAGE",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x66C7BB2416ED3FCE",
            "ns": "STATS",
            "manualHash": true
        },
        "0x2605663BD4F23B5D": {
            "name": "_PLAYSTATS_DEFEND_CONTRABAND",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2605663BD4F23B5D",
            "ns": "STATS",
            "aliases": ["0x2605663BD4F23B5D"],
            "manualHash": true
        },
        "0x46326E13DA4E0546": {
            "name": "_PLAYSTATS_DIRECTOR_MODE",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x46326E13DA4E0546",
            "ns": "STATS",
            "aliases": ["0x46326E13DA4E0546"],
            "manualHash": true
        },
        "0xCD0A8A9338681CF2": {
            "name": "_PLAYSTATS_COLLECTIBLE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0xCD0A8A9338681CF2",
            "ns": "STATS",
            "manualHash": true
        },
        "0x501478855A6074CE": {
            "name": "_PLAYSTATS_EARNED_MC_POINTS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x501478855A6074CE",
            "ns": "STATS",
            "aliases": ["0x501478855A6074CE"],
            "manualHash": true
        },
        "0x0BC254FF3A911501": {
            "name": "_PLAYSTATS_DAR_MISSION_END",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x0BC254FF3A911501",
            "ns": "STATS",
            "manualHash": true
        },
        "0xFA5B74BAB8A7EF99": {
            "name": "_PLAYSTATS_EXTRA_EVENT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xFA5B74BAB8A7EF99",
            "ns": "STATS",
            "aliases": ["0xFA5B74BAB8A7EF99"],
            "manualHash": true
        },
        "0x878FF156D36E9956": {
            "name": "_PLAYSTATS_ENTER_SESSION_PACK",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x878FF156D36E9956",
            "ns": "STATS",
            "manualHash": true
        },
        "0x0EACDF8487D5155A": {
            "name": "_PLAYSTATS_GUNRUN_MISSION_ENDED",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0EACDF8487D5155A",
            "ns": "STATS",
            "aliases": ["0x0EACDF8487D5155A"],
            "manualHash": true
        },
        "0x848B66100EE33B05": {
            "name": "_PLAYSTATS_DUPE_DETECTION",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x848B66100EE33B05",
            "ns": "STATS",
            "aliases": ["0x848B66100EE33B05"],
            "manualHash": true
        },
        "0xD8AFB345A9C5CCBB": {
            "name": "_PLAYSTATS_H2_FMPREP_END",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xD8AFB345A9C5CCBB",
            "ns": "STATS",
            "manualHash": true
        },
        "0x0F71DE29AB2258F1": {
            "name": "PLAYSTATS_FRIEND_ACTIVITY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0F71DE29AB2258F1",
            "ns": "STATS",
            "jhash": "0xD1FA1BDB",
            "manualHash": true
        },
        "0xF4FF020A08BC8863": {
            "name": "PLAYSTATS_HEIST_SAVE_CHEAT",
            "params": [
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF4FF020A08BC8863",
            "ns": "STATS",
            "aliases": ["0xF4FF020A08BC8863", "_PLAYSTATS_HEIST_SAVE_CHEAT"],
            "jhash": "0xB731DF54",
            "manualHash": true
        },
        "0x5DA3A8DE8CB6226F": {
            "name": "PLAYSTATS_IDLE_KICK",
            "params": [{ "name": "time", "type": "int" }],
            "results": "void",
            "description": "```\nlongest time being ilde?  \n```",
            "examples": [],
            "hash": "0x5DA3A8DE8CB6226F",
            "ns": "STATS",
            "aliases": ["0x5DA3A8DE8CB6226F"],
            "jhash": "0x9E2B9522",
            "manualHash": true
        },
        "0x1E1497D0D2108115": {
            "name": "_PLAYSTATS_H2_INSTANCE_END",
            "params": [
                { "name": "data", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x1E1497D0D2108115",
            "ns": "STATS",
            "manualHash": true
        },
        "0x2B69F5074C894811": {
            "name": "PLAYSTATS_IMPORT_EXPORT_MISSION_DONE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B69F5074C894811",
            "ns": "STATS",
            "aliases": ["0x2B69F5074C894811", "_PLAYSTATS_IMP_EXP"],
            "jhash": "0x62073DF7",
            "manualHash": true
        },
        "0xC5BE134EC7BA96A0": {
            "name": "PLAYSTATS_LEAVE_JOB_CHAIN",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC5BE134EC7BA96A0",
            "ns": "STATS",
            "aliases": ["0xC5BE134EC7BA96A0"],
            "jhash": "0xC960E161",
            "manualHash": true
        },
        "0x887DAD63CF5B7908": {
            "name": "_PLAYSTATS_INVENTORY",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x887DAD63CF5B7908",
            "ns": "STATS",
            "manualHash": true
        },
        "0xF5BB8DAC426A52C0": {
            "name": "PLAYSTATS_JOB_BEND",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF5BB8DAC426A52C0",
            "ns": "STATS",
            "aliases": ["0xF5BB8DAC426A52C0"],
            "jhash": "0x40520E70",
            "manualHash": true
        },
        "0xBC80E22DED931E3D": {
            "name": "PLAYSTATS_MATCH_STARTED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Removed Parameter 4: Any p3\nNativeDB Removed Parameter 5: Any p4\nNativeDB Removed Parameter 6: Any p5\nNativeDB Removed Parameter 7: Any p6\n```",
            "examples": [],
            "hash": "0xBC80E22DED931E3D",
            "ns": "STATS",
            "jhash": "0x2BDE85C1",
            "manualHash": true
        },
        "0x7C4BB33A8CED7324": {
            "name": "PLAYSTATS_MISSION_OVER",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7C4BB33A8CED7324",
            "ns": "STATS",
            "jhash": "0x5B90B5FF",
            "manualHash": true
        },
        "0xCB00196B31C39EB1": {
            "name": "PLAYSTATS_HOLD_UP_MISSION_DONE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCB00196B31C39EB1",
            "ns": "STATS",
            "aliases": ["0xCB00196B31C39EB1", "_PLAYSTATS_HOLD_UP"],
            "jhash": "0x759E0EC9",
            "manualHash": true
        },
        "0x93054C88E6AA7C44": {
            "name": "PLAYSTATS_NPC_INVITE",
            "params": [{ "name": "p0", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x93054C88E6AA7C44",
            "ns": "STATS",
            "jhash": "0x598C06F3",
            "manualHash": true
        },
        "0xC900596A63978C1D": {
            "name": "PLAYSTATS_MISSION_CHECKPOINT",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC900596A63978C1D",
            "ns": "STATS",
            "jhash": "0xCDC52280",
            "manualHash": true
        },
        "0xC19A2925C34D2231": {
            "name": "PLAYSTATS_MISSION_STARTED",
            "params": [
                { "name": "p0", "type": "Any*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC19A2925C34D2231",
            "ns": "STATS",
            "jhash": "0x3AAB699C",
            "manualHash": true
        },
        "0x9572BD4DD6B72122": {
            "name": "_PLAYSTATS_PEGASAIRCRAFT",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x9572BD4DD6B72122",
            "ns": "STATS",
            "manualHash": true
        },
        "0x69DEA3E9DB727B4C": {
            "name": "PLAYSTATS_ODDJOB_DONE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0x69DEA3E9DB727B4C",
            "ns": "STATS",
            "jhash": "0xFE14A8EA",
            "manualHash": true
        },
        "0x35EEC6C2BC821A71": {
            "name": "_PLAYSTATS_PASSIVE_MODE",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x35EEC6C2BC821A71",
            "ns": "STATS",
            "manualHash": true
        },
        "0x90D0622866E80445": {
            "name": "PLAYSTATS_QUICKFIX_TOOL",
            "params": [
                { "name": "element", "type": "int" },
                { "name": "item", "type": "char*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x90D0622866E80445",
            "ns": "STATS",
            "aliases": ["0x90D0622866E80445"],
            "jhash": "0x66FEB701",
            "manualHash": true
        },
        "0x203B381133817079": {
            "name": "_PLAYSTATS_PI_MENU_HIDE_SETTINGS",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x203B381133817079",
            "ns": "STATS",
            "aliases": ["0x203B381133817079"],
            "manualHash": true
        },
        "0xBA739D6D5A05D6E7": {
            "name": "PLAYSTATS_PROP_CHANGE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA739D6D5A05D6E7",
            "ns": "STATS",
            "jhash": "0x25740A1D",
            "manualHash": true
        },
        "0x9C375C315099DDE4": {
            "name": "PLAYSTATS_RACE_CHECKPOINT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9C375C315099DDE4",
            "ns": "STATS",
            "jhash": "0x580D5508",
            "manualHash": true
        },
        "0x04D90BA8207ADA2D": {
            "name": "_PLAYSTATS_RECOVER_CONTRABAND",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x04D90BA8207ADA2D",
            "ns": "STATS",
            "aliases": ["0x04D90BA8207ADA2D"],
            "manualHash": true
        },
        "0x71862B1D855F32E1": {
            "name": "PLAYSTATS_RANDOM_MISSION_DONE",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x71862B1D855F32E1",
            "ns": "STATS",
            "aliases": ["0x71862B1D855F32E1"],
            "jhash": "0xAC2C7C63",
            "manualHash": true
        },
        "0xADDD1C754E2E2914": {
            "name": "PLAYSTATS_RACE_TO_POINT_MISSION_DONE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Removed Parameter 5: Any p4\nNativeDB Removed Parameter 6: Any p5\nNativeDB Removed Parameter 7: Any p6\nNativeDB Removed Parameter 8: Any p7\nNativeDB Removed Parameter 9: Any p8\nNativeDB Removed Parameter 10: Any p9\n```",
            "examples": [],
            "hash": "0xADDD1C754E2E2914",
            "ns": "STATS",
            "aliases": ["0xADDD1C754E2E2914", "_PLAYSTATS_RACE_TO_POINT"],
            "jhash": "0x06CE3692",
            "manualHash": true
        },
        "0xC729991A9065376E": {
            "name": "_PLAYSTATS_SELL_CONTRABAND",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC729991A9065376E",
            "ns": "STATS",
            "aliases": ["0xC729991A9065376E"],
            "manualHash": true
        },
        "0xC7F2DE41D102BFB4": {
            "name": "PLAYSTATS_RANK_UP",
            "params": [{ "name": "rank", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC7F2DE41D102BFB4",
            "ns": "STATS",
            "jhash": "0x56AFB9F5",
            "manualHash": true
        },
        "0x1A67DFBF1F5C3835": {
            "name": "_PLAYSTATS_ROBBERY_PREP",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x1A67DFBF1F5C3835",
            "ns": "STATS",
            "aliases": ["0x1A67DFBF1F5C3835"],
            "manualHash": true
        },
        "0x320C35147D5B5DDD": {
            "name": "_PLAYSTATS_SMUG_MISSION_ENDED",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x320C35147D5B5DDD",
            "ns": "STATS",
            "manualHash": true
        },
        "0xBBA55BE9AAAABF44": {
            "name": "_PLAYSTATS_ROBBERY_FINALE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xBBA55BE9AAAABF44",
            "ns": "STATS",
            "aliases": ["0xBBA55BE9AAAABF44"],
            "manualHash": true
        },
        "0xD1032E482629049E": {
            "name": "PLAYSTATS_SET_JOIN_TYPE",
            "params": [{ "name": "joinType", "type": "int" }],
            "results": "void",
            "description": "Sets a byte that is then used in session_host and session_join metrics when hosting or joining a session",
            "examples": [],
            "hash": "0xD1032E482629049E",
            "ns": "STATS",
            "aliases": ["0xD1032E482629049E"],
            "jhash": "0x1AC97138",
            "manualHash": true
        },
        "0x121FB4DDDC2D5291": {
            "name": "PLAYSTATS_ROS_BET",
            "params": [
                { "name": "amount", "type": "int" },
                { "name": "act", "type": "int" },
                { "name": "player", "type": "Player" },
                { "name": "cm", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x121FB4DDDC2D5291",
            "ns": "STATS",
            "aliases": ["0x121FB4DDDC2D5291"],
            "jhash": "0x413539BC",
            "manualHash": true
        },
        "0x6731DE84A38BFAD0": {
            "name": "_PLAYSTATS_SPECTATOR_WHEEL_SPIN",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x6731DE84A38BFAD0",
            "ns": "STATS",
            "manualHash": true
        },
        "0xBE509B0A3693DE8B": {
            "name": "_PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT",
            "params": [{ "name": "amount", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBE509B0A3693DE8B",
            "ns": "STATS",
            "aliases": ["0xBE509B0A3693DE8B"],
            "manualHash": true
        },
        "0x8A800DACCC0DA55D": {
            "name": "_PLAYSTATS_STUNT_PERFORMED_EVENT_DISALLOW_TRIGGER",
            "params": [],
            "results": "void",
            "description": "```\nDisallows CEventNetworkStuntPerformed to be triggered.\n```",
            "examples": [],
            "hash": "0x8A800DACCC0DA55D",
            "ns": "STATS",
            "aliases": ["0x8A800DACCC0DA55D"],
            "manualHash": true
        },
        "0x176852ACAAC173D1": {
            "name": "PLAYSTATS_SHOP_ITEM",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x176852ACAAC173D1",
            "ns": "STATS",
            "jhash": "0xA4746384",
            "manualHash": true
        },
        "0x928DBFB892638EF3": {
            "name": "_PLAYSTATS_STUNT_PERFORMED_EVENT_ALLOW_TRIGGER",
            "params": [],
            "results": "void",
            "description": "```\nAllows CEventNetworkStuntPerformed to be triggered.\n```",
            "examples": [],
            "hash": "0x928DBFB892638EF3",
            "ns": "STATS",
            "aliases": ["0x928DBFB892638EF3"],
            "manualHash": true
        },
        "0x35E39E5570358630": {
            "name": "_PLAYSTATS_STONE_HATCHET_END",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x35E39E5570358630",
            "ns": "STATS",
            "manualHash": true
        },
        "0xDDF24D535060F811": {
            "name": "PLAYSTATS_WEBSITE_VISITED",
            "params": [
                { "name": "scaleformHash", "type": "Hash" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDDF24D535060F811",
            "ns": "STATS",
            "aliases": ["0xDDF24D535060F811"],
            "jhash": "0x37D152BB",
            "manualHash": true
        },
        "0x098760C7461724CD": {
            "name": "_PLAYSTATS_START_OFFLINE_MODE",
            "params": [],
            "results": "void",
            "description": "```\nPLAYSTATS_START_INVITE_DESPAWNING?\n```",
            "examples": [],
            "hash": "0x098760C7461724CD",
            "ns": "STATS",
            "aliases": ["0x098760C7461724CD"],
            "jhash": "0x896CDF8D",
            "manualHash": true
        },
        "0xE95C8A1875A02CA4": {
            "name": "PLAYSTATS_WEAPON_MODE_CHANGE",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "componentHashTo",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "componentHashFrom",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE95C8A1875A02CA4",
            "ns": "STATS",
            "aliases": ["0xE95C8A1875A02CA4"],
            "jhash": "0x79716890",
            "manualHash": true
        },
        "0x11FF1C80276097ED": {
            "name": "PRESENCE_EVENT_UPDATESTAT_INT",
            "params": [
                {
                    "name": "statHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "charPtr" }
                },
                { "name": "value", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x11FF1C80276097ED",
            "ns": "STATS",
            "aliases": ["0x11FF1C80276097ED", "_UPDATE_STAT_INT"],
            "jhash": "0x4AC39C6C",
            "manualHash": true
        },
        "0x30A6614C1F7799B8": {
            "name": "PRESENCE_EVENT_UPDATESTAT_FLOAT",
            "params": [
                {
                    "name": "statHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "value", "type": "float" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x30A6614C1F7799B8",
            "ns": "STATS",
            "aliases": ["0x30A6614C1F7799B8", "_UPDATE_STAT_FLOAT"],
            "jhash": "0x3E69E7C3",
            "manualHash": true
        },
        "0xF6792800AC95350D": {
            "name": "_SET_SAVE_MIGRATION_TRANSACTION_ID",
            "params": [{ "name": "transactionId", "type": "int" }],
            "results": "void",
            "description": "```\nSets profile setting 501\n```",
            "examples": [],
            "hash": "0xF6792800AC95350D",
            "ns": "STATS",
            "aliases": ["0xF6792800AC95350D"],
            "manualHash": true
        },
        "0x49A49BED12794D70": {
            "name": "STAT_DELETE_SLOT",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x49A49BED12794D70",
            "ns": "STATS",
            "jhash": "0x2F171B94",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDAC073C7901F9E15": {
            "name": "_SET_HAS_CONTENT_UNLOCKS_FLAGS",
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "```\nSets profile setting 866\nSET_*\n```",
            "examples": [],
            "hash": "0xDAC073C7901F9E15",
            "ns": "STATS",
            "aliases": ["0xDAC073C7901F9E15"],
            "manualHash": true
        },
        "0xB475F27C6A994D65": {
            "name": "SET_PROFILE_SETTING_PROLOGUE_COMPLETE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB475F27C6A994D65",
            "ns": "STATS",
            "aliases": ["0xB475F27C6A994D65"],
            "jhash": "0xC7DE5C30",
            "manualHash": true
        },
        "0x11B5E6D2AE73F48E": {
            "name": "STAT_GET_BOOL",
            "params": [
                { "name": "statHash", "type": "Hash" },
                { "name": "outValue", "type": "BOOL*" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x11B5E6D2AE73F48E",
            "ns": "STATS",
            "jhash": "0x28A3DD2B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x10FE3F1B79F9B071": {
            "name": "STAT_GET_BOOL_MASKED",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "mask", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\np2 - Default value? Seems to be -1 most of the time.  \n```",
            "examples": [],
            "hash": "0x10FE3F1B79F9B071",
            "ns": "STATS",
            "jhash": "0x6ACE1B7D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEB0A72181D4AA4AD": {
            "name": "STAT_CLEAR_SLOT_FOR_RELOAD",
            "params": [{ "name": "statSlot", "type": "int" }],
            "results": "Any",
            "description": "```\nExample:\nfor (v_2 = 0; v_2 <= 4; v_2 += 1) {\n    STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);\n}\n```",
            "examples": [],
            "hash": "0xEB0A72181D4AA4AD",
            "ns": "STATS",
            "jhash": "0x84BDD475",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x567384DFA67029E6": {
            "name": "_STAT_GET_CANCEL_SAVE_MIGRATION_STATUS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x567384DFA67029E6",
            "ns": "STATS",
            "aliases": ["0x567384DFA67029E6"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x767FBC2AC802EF3D": {
            "name": "STAT_GET_INT",
            "params": [
                { "name": "statHash", "type": "Hash" },
                { "name": "outValue", "type": "int*" },
                { "name": "p2", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\np2 appears to always be -1  \n```",
            "examples": [],
            "hash": "0x767FBC2AC802EF3D",
            "ns": "STATS",
            "jhash": "0x1C6FE43E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8B0FACEFC36C824B": {
            "name": "STAT_GET_DATE",
            "params": [
                { "name": "statHash", "type": "Hash" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8B0FACEFC36C824B",
            "ns": "STATS",
            "jhash": "0xD762D16C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD7AE6C9C9C6AC54C": {
            "name": "STAT_GET_FLOAT",
            "params": [
                { "name": "statHash", "type": "Hash" },
                { "name": "outValue", "type": "float*" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD7AE6C9C9C6AC54C",
            "ns": "STATS",
            "jhash": "0xFCBDA612",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE0E854F5280FB769": {
            "name": "STAT_GET_NUMBER_OF_DAYS",
            "params": [{ "name": "statName", "type": "Hash" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xE0E854F5280FB769",
            "ns": "STATS",
            "aliases": ["0xE0E854F5280FB769"],
            "jhash": "0xFD66A429",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x655185A06D9EEAAB": {
            "name": "STAT_GET_MASKED_INT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x655185A06D9EEAAB",
            "ns": "STATS",
            "jhash": "0xE9D9B70F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2CE056FF3723F00B": {
            "name": "STAT_GET_NUMBER_OF_SECONDS",
            "params": [{ "name": "statName", "type": "Hash" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2CE056FF3723F00B",
            "ns": "STATS",
            "aliases": ["0x2CE056FF3723F00B"],
            "jhash": "0x2C1D6C31",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5473D4195058B2E4": {
            "name": "STAT_GET_LICENSE_PLATE",
            "params": [{ "name": "statName", "type": "Hash" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x5473D4195058B2E4",
            "ns": "STATS",
            "jhash": "0x1544B29F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF4D8E7AC2A27758C": {
            "name": "_STAT_GET_PACKED_BOOL_MASK",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "```\nNeeds more research. Possibly used to calculate the \"mask\" when calling \"STAT_SET_BOOL_MASKED\"?  \n```",
            "examples": [],
            "hash": "0xF4D8E7AC2A27758C",
            "ns": "STATS",
            "aliases": ["0xF4D8E7AC2A27758C"],
            "jhash": "0xDFC25D66",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCE5AA445ABA8DEE0": {
            "name": "_STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_UNLOCK_STATUS",
            "params": [
                {
                    "name": "p0",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xCE5AA445ABA8DEE0",
            "ns": "STATS",
            "aliases": ["0xCE5AA445ABA8DEE0"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x94F12ABF9C79E339": {
            "name": "_STAT_GET_PACKED_INT_MASK",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "int",
            "description": "```\nNeeds more research. Possibly used to calculate the \"mask\" when calling \"STAT_SET_MASKED_INT\"?  \n```",
            "examples": [],
            "hash": "0x94F12ABF9C79E339",
            "ns": "STATS",
            "aliases": ["0x94F12ABF9C79E339"],
            "jhash": "0xCA160BCC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE50384ACC2C3DB74": {
            "name": "STAT_GET_STRING",
            "params": [
                { "name": "statHash", "type": "Hash" },
                { "name": "p1", "type": "int" }
            ],
            "results": "char*",
            "description": "```\np1 is always -1 in the script files  \n```",
            "examples": [],
            "hash": "0xE50384ACC2C3DB74",
            "ns": "STATS",
            "jhash": "0x10CE4BDE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9B5A68C6489E9909": {
            "name": "STAT_INCREMENT",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9B5A68C6489E9909",
            "ns": "STATS",
            "jhash": "0xDFC5F71E",
            "manualHash": true
        },
        "0xF2D4B2FE415AAFC3": {
            "name": "STAT_GET_NUMBER_OF_HOURS",
            "params": [{ "name": "statName", "type": "Hash" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF2D4B2FE415AAFC3",
            "ns": "STATS",
            "aliases": ["0xF2D4B2FE415AAFC3"],
            "jhash": "0x9B431236",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x350F82CCB186AA1B": {
            "name": "STAT_GET_POS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x350F82CCB186AA1B",
            "ns": "STATS",
            "jhash": "0xC846ECCE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE07BCA305B82D2FD": {
            "name": "STAT_SAVE",
            "params": [
                { "name": "p0", "type": "int" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0xE07BCA305B82D2FD",
            "ns": "STATS",
            "jhash": "0xE10A7CA4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7583B4BE4C5A41B5": {
            "name": "STAT_GET_NUMBER_OF_MINUTES",
            "params": [{ "name": "statName", "type": "Hash" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x7583B4BE4C5A41B5",
            "ns": "STATS",
            "aliases": ["0x7583B4BE4C5A41B5"],
            "jhash": "0x347B4436",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA1750FFAFA181661": {
            "name": "STAT_LOAD_PENDING",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA1750FFAFA181661",
            "ns": "STATS",
            "jhash": "0x4E9AC983",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x886913BBEACA68C1": {
            "name": "STAT_GET_SAVE_MIGRATION_STATUS",
            "params": [{ "name": "data", "type": "Any*" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x886913BBEACA68C1",
            "ns": "STATS",
            "aliases": ["0x886913BBEACA68C1"],
            "jhash": "0xE3F0D62D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3270F67EED31FBC1": {
            "name": "_STAT_SAVE_MIGRATION_CONSUME_CONTENT_UNLOCK",
            "params": [
                {
                    "name": "contentId",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "srcPlatform", "type": "char*" },
                { "name": "srcGamerHandle", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3270F67EED31FBC1",
            "ns": "STATS",
            "aliases": ["0x3270F67EED31FBC1"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2365C388E393BBE2": {
            "name": "STAT_GET_USER_ID",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "char*",
            "description": "```\nNeeds more research. Seems to return \"STAT_UNKNOWN\" if no such user id exists.  \n```",
            "examples": [],
            "hash": "0x2365C388E393BBE2",
            "ns": "STATS",
            "jhash": "0xE2E8B6BA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA651443F437B1CE6": {
            "name": "STAT_LOAD",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA651443F437B1CE6",
            "ns": "STATS",
            "jhash": "0x9E5629F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA5C80D8E768A9E66": {
            "name": "_STAT_MIGRATE_SAVE",
            "params": [{ "name": "platformName", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nplatformName must be one of the following: ps3, xbox360, ps4, xboxone\n```",
            "examples": [],
            "hash": "0xA5C80D8E768A9E66",
            "ns": "STATS",
            "aliases": ["0xA5C80D8E768A9E66"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4FEF53183C3C6414": {
            "name": "_STAT_SAVE_MIGRATION_CANCEL",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4FEF53183C3C6414",
            "ns": "STATS",
            "aliases": ["0x4FEF53183C3C6414"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7D3A583856F2C5AC": {
            "name": "STAT_SAVE_PENDING",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7D3A583856F2C5AC",
            "ns": "STATS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xC3FD3822",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC70DDCE56D0D3A99": {
            "name": "STAT_SAVE_MIGRATION_STATUS_START",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC70DDCE56D0D3A99",
            "ns": "STATS",
            "aliases": ["0xC70DDCE56D0D3A99"],
            "jhash": "0x54E775E0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBBB6AD006F1BBEA3": {
            "name": "STAT_SAVE_PENDING_OR_REQUESTED",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBBB6AD006F1BBEA3",
            "ns": "STATS",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xA3407CA3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5BC62EC1937B9E5B": {
            "name": "STAT_SET_BOOL_MASKED",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "BOOL" },
                { "name": "mask", "type": "int" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5BC62EC1937B9E5B",
            "ns": "STATS",
            "jhash": "0x7842C4D6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF434A10BA01C37D0": {
            "name": "STAT_SET_BLOCK_SAVES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF434A10BA01C37D0",
            "ns": "STATS",
            "aliases": ["0xF434A10BA01C37D0"],
            "jhash": "0xCE7A2411",
            "manualHash": true
        },
        "0x4B33C4243DE0C432": {
            "name": "STAT_SET_BOOL",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "BOOL" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nExample:\n STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY(\"MPPLY_MELEECHLENGECOMPLETED\"), trur, true);\n```",
            "examples": [],
            "hash": "0x4B33C4243DE0C432",
            "ns": "STATS",
            "jhash": "0x55D79DFB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x047CBED6F6F8B63C": {
            "name": "STAT_SET_CHEAT_IS_ACTIVE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x047CBED6F6F8B63C",
            "ns": "STATS",
            "aliases": ["0x047CBED6F6F8B63C"],
            "jhash": "0xA063CABD",
            "manualHash": true
        },
        "0x17695002FD8B2AE0": {
            "name": "STAT_SET_GXT_LABEL",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "char*" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nThe following values have been found in the decompiled scripts:  \n\"RC_ABI1\"  \n\"RC_ABI2\"  \n\"RC_BA1\"  \n\"RC_BA2\"  \n\"RC_BA3\"  \n\"RC_BA3A\"  \n\"RC_BA3C\"  \n\"RC_BA4\"  \n\"RC_DRE1\"  \n\"RC_EPS1\"  \n\"RC_EPS2\"  \n\"RC_EPS3\"  \n\"RC_EPS4\"  \n\"RC_EPS5\"  \n\"RC_EPS6\"  \n\"RC_EPS7\"  \n\"RC_EPS8\"  \n\"RC_EXT1\"  \n\"RC_EXT2\"  \n\"RC_EXT3\"  \n\"RC_EXT4\"  \n\"RC_FAN1\"  \n\"RC_FAN2\"  \n\"RC_FAN3\"  \n\"RC_HAO1\"  \n\"RC_HUN1\"  \n\"RC_HUN2\"  \n\"RC_JOS1\"  \n\"RC_JOS2\"  \n\"RC_JOS3\"  \n\"RC_JOS4\"  \n\"RC_MAU1\"  \n\"RC_MIN1\"  \n\"RC_MIN2\"  \n\"RC_MIN3\"  \n\"RC_MRS1\"  \n\"RC_MRS2\"  \n\"RC_NI1\"  \n\"RC_NI1A\"  \n\"RC_NI1B\"  \n\"RC_NI1C\"  \n\"RC_NI1D\"  \n\"RC_NI2\"  \n\"RC_NI3\"  \n\"RC_OME1\"  \n\"RC_OME2\"  \n\"RC_PA1\"  \n\"RC_PA2\"  \n\"RC_PA3\"  \n\"RC_PA3A\"  \n\"RC_PA3B\"  \n\"RC_PA4\"  \n\"RC_RAM1\"  \n\"RC_RAM2\"  \n\"RC_RAM3\"  \n\"RC_RAM4\"  \n\"RC_RAM5\"  \n\"RC_SAS1\"  \n\"RC_TON1\"  \n\"RC_TON2\"  \n\"RC_TON3\"  \n\"RC_TON4\"  \n\"RC_TON5\"  \n```",
            "examples": [],
            "hash": "0x17695002FD8B2AE0",
            "ns": "STATS",
            "jhash": "0xC1224AA7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2C29BFB64F4FCBE4": {
            "name": "STAT_SET_DATE",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "Any*" },
                { "name": "numFields", "type": "int" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\n'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).  \nThe structure looks like this:  \nint year  \nint month  \nint day  \nint hour  \nint minute  \nint second  \nint millisecond  \nThe decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.  \n```",
            "examples": [],
            "hash": "0x2C29BFB64F4FCBE4",
            "ns": "STATS",
            "jhash": "0x36BE807B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC2F84B7F9C4D0C61": {
            "name": "STAT_SET_CURRENT_POSIX_TIME",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np1 always true.  \n```",
            "examples": [],
            "hash": "0xC2F84B7F9C4D0C61",
            "ns": "STATS",
            "jhash": "0xA286F015",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDB283FDE680FE72E": {
            "name": "STAT_SET_POS",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDB283FDE680FE72E",
            "ns": "STATS",
            "jhash": "0x1192C9A3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB3271D7AB655B441": {
            "name": "STAT_SET_INT",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "int" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "StatSetInt(`MPPLY_KILLS_PLAYERS`, 1337, true)\nStatSetInt(`MP0_SHOOTING_ABILITY`, 100, true)\nStatSetInt(`MP0_SHOOTING_ABILITY`, 100, true)\nStatSetInt(`MP0_STEALTH_ABILITY`, 10, true)\nStatSetInt(`MP0_FLYING_ABILITY`, 5, true)\nStatSetInt(`MP0_WHEELIE_ABILITY`, 25, true)\nStatSetInt(`MP0_LUNG_CAPACITY`, 35, true)\nStatSetInt(`MP0_STRENGTH`, 15, true)\nStatSetInt(`MP0_STAMINA`, 25, true)"
                }
            ],
            "hash": "0xB3271D7AB655B441",
            "ns": "STATS",
            "jhash": "0xC9CC1C5C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x69FF13266D7296DA": {
            "name": "STAT_SET_LICENSE_PLATE",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "str", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x69FF13266D7296DA",
            "ns": "STATS",
            "jhash": "0x3507D253",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4851997F37FE9B3C": {
            "name": "STAT_SET_FLOAT",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "float" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nExample:\n STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY(\"MP0_WEAPON_ACCURACY\"), 66.6f, true);\n```",
            "examples": [],
            "hash": "0x4851997F37FE9B3C",
            "ns": "STATS",
            "jhash": "0x6CEA96F2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA87B2335D12531D7": {
            "name": "STAT_SET_STRING",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "char*" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA87B2335D12531D7",
            "ns": "STATS",
            "jhash": "0xB1EF2E21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0D0A9F0E7BD91E3C": {
            "name": "STAT_SLOT_IS_LOADED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0D0A9F0E7BD91E3C",
            "ns": "STATS",
            "jhash": "0x7A299C13",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7BBB1B54583ED410": {
            "name": "STAT_SET_MASKED_INT",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "int" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7BBB1B54583ED410",
            "ns": "STATS",
            "jhash": "0x2CBAA739",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x68F01422BE1D838F": {
            "name": "STAT_SET_PROFILE_SETTING_VALUE",
            "params": [
                { "name": "profileSetting", "type": "int" },
                { "name": "value", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDoes not take effect immediately, unfortunately.\nprofileSetting seems to only be 936, 937 and 938 in scripts\n```",
            "examples": [],
            "hash": "0x68F01422BE1D838F",
            "ns": "STATS",
            "aliases": ["0x68F01422BE1D838F", "_STAT_SET_PROFILE_SETTING"],
            "jhash": "0x24DD4929",
            "manualHash": true
        },
        "0x8CDDF1E452BABE11": {
            "name": "STAT_SET_USER_ID",
            "params": [
                { "name": "statName", "type": "Hash" },
                { "name": "value", "type": "char*" },
                { "name": "save", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8CDDF1E452BABE11",
            "ns": "STATS",
            "jhash": "0xDBE78ED7",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "WATER": {
        "0xFDBF4CDBC07E1706": {
            "name": "ADD_EXTRA_CALMING_QUAD",
            "params": [
                { "name": "xLow", "type": "float" },
                { "name": "yLow", "type": "float" },
                { "name": "xHigh", "type": "float" },
                { "name": "yHigh", "type": "float" },
                { "name": "height", "type": "float" }
            ],
            "results": "int",
            "description": "Only 8 current rises can exist. If rises need to be changed, use REMOVE_EXTRA_CALMING_QUAD and then ADD_EXTRA_CALMING_QUAD again.\nAfter removing a rise, you will be able to add a rise again.",
            "examples": [],
            "hash": "0xFDBF4CDBC07E1706",
            "ns": "WATER",
            "aliases": ["0xFDBF4CDBC07E1706", "_ADD_CURRENT_RISE"],
            "jhash": "0xA9419B6D",
            "manualHash": true,
            "resultsDescription": "If succeeded to add, returns a rise index that can be used on REMOVE_EXTRA_CALMING_QUAD.\nIf failed to add, returns -1 (make sure you don't pass -1 to REMOVE_EXTRA_CALMING_QUAD)."
        },
        "0x2B2A2CC86778B619": {
            "name": "GET_DEEP_OCEAN_SCALER",
            "params": [],
            "results": "float",
            "description": "```\nGets the aggressiveness factor of the ocean waves.  \n```",
            "examples": [],
            "hash": "0x2B2A2CC86778B619",
            "ns": "WATER",
            "aliases": [
                "0x2B2A2CC86778B619",
                "_GET_WAVES_INTENSITY",
                "_GET_CURRENT_INTENSITY"
            ],
            "jhash": "0xBD0A67FB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8EE6B53CE13A9794": {
            "name": "GET_WATER_HEIGHT_NO_WAVES",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "height", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8EE6B53CE13A9794",
            "ns": "WATER",
            "jhash": "0x262017F8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF6829842C06AE524": {
            "name": "GET_WATER_HEIGHT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "height", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "```\nThis function set height to the value of z-axis of the water surface.  \nThis function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)  \nnote: seems to return true when you are in water  \n```",
            "examples": [],
            "hash": "0xF6829842C06AE524",
            "ns": "WATER",
            "jhash": "0xD864E17C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC443FD757C3BA637": {
            "name": "MODIFY_WATER",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "height", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets the water height for a given position and radius.  \n```",
            "examples": [],
            "hash": "0xC443FD757C3BA637",
            "ns": "WATER",
            "jhash": "0xC49E005A",
            "manualHash": true
        },
        "0x547237AA71AB44DE": {
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x547237AA71AB44DE",
            "ns": "WATER",
            "jhash": "0x6F5A07BA",
            "manualHash": true
        },
        "0x5E5E99285AE812DB": {
            "name": "RESET_DEEP_OCEAN_SCALER",
            "params": [],
            "results": "void",
            "description": "```\nSets the waves intensity back to original (1.0 in most cases). \n```",
            "examples": [],
            "hash": "0x5E5E99285AE812DB",
            "ns": "WATER",
            "aliases": [
                "0x5E5E99285AE812DB",
                "_RESET_WAVES_INTENSITY",
                "_RESET_CURRENT_INTENSITY"
            ],
            "jhash": "0x4AD23212",
            "manualHash": true
        },
        "0xFFA5D878809819DB": {
            "name": "TEST_PROBE_AGAINST_WATER",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "result", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFFA5D878809819DB",
            "ns": "WATER",
            "jhash": "0xAA4AE00C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB1252E3E59A82AAF": {
            "name": "_REMOVE_CURRENT_RISE",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "void",
            "description": "```\np0 is the handle returned from _0xFDBF4CDBC07E1706  \n```",
            "examples": [],
            "hash": "0xB1252E3E59A82AAF",
            "ns": "WATER",
            "aliases": ["0xB1252E3E59A82AAF"],
            "jhash": "0x7DBCEF6F",
            "manualHash": true
        },
        "0xB96B00E976BE977F": {
            "name": "SET_DEEP_OCEAN_SCALER",
            "params": [{ "name": "intensity", "type": "float" }],
            "results": "void",
            "description": "```\nSets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.  \nWorks only ~200 meters around the player.  \n```",
            "examples": [],
            "hash": "0xB96B00E976BE977F",
            "ns": "WATER",
            "aliases": [
                "0xB96B00E976BE977F",
                "_SET_WAVES_INTENSITY",
                "_SET_CURRENT_INTENSITY"
            ],
            "jhash": "0x53B694B1",
            "manualHash": true
        },
        "0x2B3451FA1E3142E2": {
            "name": "TEST_VERTICAL_PROBE_AGAINST_ALL_WATER",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "See [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E)"
                },
                { "name": "height", "type": "float*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2B3451FA1E3142E2",
            "ns": "WATER",
            "jhash": "0x4C71D143",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8974647ED222EA5F": {
            "name": "TEST_PROBE_AGAINST_ALL_WATER",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "See [`START_SHAPE_TEST_LOS_PROBE`](#\\_0x7EE9F5D83DD4F90E)"
                },
                { "name": "result", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "Flags are identical to START_SHAPE_TEST\\*, however, 128 is automatically set.",
            "examples": [],
            "hash": "0x8974647ED222EA5F",
            "ns": "WATER",
            "jhash": "0x4A962D55",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "TASK": {
        "0xD5C12A75C7B9497F": {
            "name": "ADD_COVER_POINT",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "ScrHandle",
            "description": "",
            "examples": [],
            "hash": "0xD5C12A75C7B9497F",
            "ns": "TASK",
            "jhash": "0xA0AF0B98",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x23083260DEC3A551": {
            "name": "ADD_PATROL_ROUTE_LINK",
            "params": [
                {
                    "name": "id1",
                    "type": "int",
                    "description": "the id representing the first route node"
                },
                {
                    "name": "id2",
                    "type": "int",
                    "description": "the id representing the second route node"
                }
            ],
            "results": "void",
            "description": "connects/links 2 [route nodes](#\\_0x8EDF950167586B7C)\\\nimage representing the cyclic example below:\\\n![image](https://user-images.githubusercontent.com/55803068/188470866-c32c6a9f-a25d-4772-9b18-5be46e2c14a1.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- these lines connect 1,2,3,4,5,6 in a cyclic manner (1 > 2 > 3 > 4 > 5 > 6 > 1)\n\n\nAddPatrolRouteLink(1,2)\nAddPatrolRouteLink(2,3)\nAddPatrolRouteLink(3,4)\nAddPatrolRouteLink(4,5)\nAddPatrolRouteLink(5,6)\nAddPatrolRouteLink(6,1)"
                }
            ],
            "hash": "0x23083260DEC3A551",
            "ns": "TASK",
            "jhash": "0xD8761BB3",
            "manualHash": true
        },
        "0x8EDF950167586B7C": {
            "name": "ADD_PATROL_ROUTE_NODE",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "is an integer that \"identifies\" the route node for linking to the route with ADD_PATROL_ROUTE_LINK."
                },
                {
                    "name": "guardScenario",
                    "type": "char*",
                    "description": "can be \"WORLD_HUMAN_GUARD_STAND\" or \"StandGuard\""
                },
                { "name": "x1", "type": "float", "description": "destination" },
                { "name": "y1", "type": "float", "description": "destination" },
                { "name": "z1", "type": "float", "description": "destination" },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "coordinates to which the ped should look"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "coordinates to which the ped should look"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "coordinates to which the ped should look"
                },
                {
                    "name": "waitTime",
                    "type": "int",
                    "description": "written in ms"
                }
            ],
            "results": "void",
            "description": "x2,y2 and z2 are the coordinates to which the ped should look at",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- the guard will go toward vector3(1.0, 1.0, 1.0) coordinates looking toward vector3(0.0, 0.0, 0.0) coordinates waiting 1000ms with the WORLD_HUMAN_GUARD_STAND animation\nAddPatrolRouteNode(1, \"WORLD_HUMAN_GUARD_STAND\", vector3(1.0, 1.0, 1.0), vector3(0.0, 0.0, 0.0), 1000)"
                }
            ],
            "hash": "0x8EDF950167586B7C",
            "ns": "TASK",
            "jhash": "0x21B48F10",
            "manualHash": true
        },
        "0x13945951E16EF912": {
            "name": "ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME",
            "params": [{ "name": "dist", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x13945951E16EF912",
            "ns": "TASK",
            "jhash": "0x8FB923EC",
            "manualHash": true
        },
        "0x45C597097DD7CB81": {
            "name": "ADD_COVER_BLOCKING_AREA",
            "params": [
                { "name": "playerX", "type": "float" },
                { "name": "playerY", "type": "float" },
                { "name": "playerZ", "type": "float" },
                { "name": "radiusX", "type": "float" },
                { "name": "radiusY", "type": "float" },
                { "name": "radiusZ", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x45C597097DD7CB81",
            "ns": "TASK",
            "jhash": "0x3536946F",
            "manualHash": true
        },
        "0x817268968605947A": {
            "name": "ASSISTED_MOVEMENT_REQUEST_ROUTE",
            "params": [{ "name": "route", "type": "char*" }],
            "results": "void",
            "description": "```\nRoutes: \"1_FIBStairs\", \"2_FIBStairs\", \"3_FIBStairs\", \"4_FIBStairs\", \"5_FIBStairs\", \"5_TowardsFire\", \"6a_FIBStairs\", \"7_FIBStairs\", \"8_FIBStairs\", \"Aprtmnt_1\", \"AssAfterLift\", \"ATM_1\", \"coroner2\", \"coroner_stairs\", \"f5_jimmy1\", \"fame1\", \"family5b\", \"family5c\", \"Family5d\", \"family5d\", \"FIB_Glass1\", \"FIB_Glass2\", \"FIB_Glass3\", \"finaBroute1A\", \"finalb1st\", \"finalB1sta\", \"finalbround\", \"finalbroute2\", \"Hairdresser1\", \"jan_foyet_ft_door\", \"Jo_3\", \"Lemar1\", \"Lemar2\", \"mansion_1\", \"Mansion_1\", \"pols_1\", \"pols_2\", \"pols_3\", \"pols_4\", \"pols_5\", \"pols_6\", \"pols_7\", \"pols_8\", \"Pro_S1\", \"Pro_S1a\", \"Pro_S2\", \"Towards_case\", \"trev_steps\", \"tunrs1\", \"tunrs2\", \"tunrs3\", \"Wave01457s\"  \n```",
            "examples": [],
            "hash": "0x817268968605947A",
            "ns": "TASK",
            "jhash": "0x48262EDA",
            "manualHash": true
        },
        "0x5CF0D8F9BBA0DD75": {
            "name": "ADD_VEHICLE_SUBTASK_ATTACK_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nx, y, z: offset in world coords from some entity.  \n```",
            "examples": [],
            "hash": "0x5CF0D8F9BBA0DD75",
            "ns": "TASK",
            "jhash": "0x50779A2C",
            "manualHash": true
        },
        "0x85F462BADC7DA47F": {
            "name": "ADD_VEHICLE_SUBTASK_ATTACK_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "ped2", "type": "Ped" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x85F462BADC7DA47F",
            "ns": "TASK",
            "jhash": "0x80461113",
            "manualHash": true
        },
        "0xE1EF3C1216AFF2CD": {
            "name": "CLEAR_PED_TASKS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id. Use PlayerPedId() for your own character."
                }
            ],
            "results": "void",
            "description": "Clear a ped's tasks. Stop animations and other tasks created by scripts.",
            "examples": [],
            "hash": "0xE1EF3C1216AFF2CD",
            "ns": "TASK",
            "jhash": "0xDE3316AB",
            "manualHash": true
        },
        "0xD5002D78B7162E1B": {
            "name": "ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES",
            "params": [
                { "name": "route", "type": "char*" },
                { "name": "props", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD5002D78B7162E1B",
            "ns": "TASK",
            "jhash": "0x01CAAFCC",
            "manualHash": true
        },
        "0x3548536485DD792B": {
            "name": "ASSISTED_MOVEMENT_REMOVE_ROUTE",
            "params": [{ "name": "route", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3548536485DD792B",
            "ns": "TASK",
            "jhash": "0xB3CEC06F",
            "manualHash": true
        },
        "0x60F9A4393A21F741": {
            "name": "ASSISTED_MOVEMENT_IS_ROUTE_LOADED",
            "params": [{ "name": "route", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x60F9A4393A21F741",
            "ns": "TASK",
            "jhash": "0x79B067AF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x176CECF6F920D707": {
            "name": "CLEAR_PED_SECONDARY_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x176CECF6F920D707",
            "ns": "TASK",
            "jhash": "0xA635F451",
            "manualHash": true
        },
        "0xC35B5CDB2824CF69": {
            "name": "CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC35B5CDB2824CF69",
            "ns": "TASK",
            "jhash": "0x9B76F7E6",
            "manualHash": true
        },
        "0xB043ECA801B8CBC1": {
            "name": "CLOSE_PATROL_ROUTE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB043ECA801B8CBC1",
            "ns": "TASK",
            "jhash": "0x67305E59",
            "manualHash": true
        },
        "0xDBBC7A2432524127": {
            "name": "_CLEAR_VEHICLE_TASKS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to have tasks cleared"
                }
            ],
            "results": "void",
            "description": "```\nCLEAR_*\n\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xDBBC7A2432524127",
            "ns": "TASK",
            "aliases": ["0xDBBC7A2432524127"],
            "manualHash": true
        },
        "0x3841422E9C488D8C": {
            "name": "CLEAR_SEQUENCE_TASK",
            "params": [{ "name": "taskSequenceId", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3841422E9C488D8C",
            "ns": "TASK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x47ED03CE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7767DD9D65E91319": {
            "name": "DELETE_PATROL_ROUTE",
            "params": [{ "name": "patrolRoute", "type": "char*" }],
            "results": "void",
            "description": "```\nFrom the b617d scripts:\nTASK::DELETE_PATROL_ROUTE(\"miss_merc0\");\nTASK::DELETE_PATROL_ROUTE(\"miss_merc1\");\nTASK::DELETE_PATROL_ROUTE(\"miss_merc2\");\nTASK::DELETE_PATROL_ROUTE(\"miss_dock\");\n```",
            "examples": [],
            "hash": "0x7767DD9D65E91319",
            "ns": "TASK",
            "jhash": "0x2A4E6706",
            "manualHash": true
        },
        "0xDCFE42068FE0135A": {
            "name": "CONTROL_MOUNTED_WEAPON",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nForces the ped to use the mounted weapon.  \nReturns false if task is not possible.  \n```",
            "examples": [],
            "hash": "0xDCFE42068FE0135A",
            "ns": "TASK",
            "jhash": "0x500D9244",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x39E72BC99E6360CB": {
            "name": "CLOSE_SEQUENCE_TASK",
            "params": [{ "name": "taskSequenceId", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x39E72BC99E6360CB",
            "ns": "TASK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x1A7CEBD0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAF8A443CCC8018DC": {
            "name": "CREATE_PATROL_ROUTE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAF8A443CCC8018DC",
            "ns": "TASK",
            "jhash": "0x0A6C7864",
            "manualHash": true
        },
        "0x0A9D0C2A3BBC86C1": {
            "name": "DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "char*" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0A9D0C2A3BBC86C1",
            "ns": "TASK",
            "jhash": "0x0FB138A5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF9034C136C9E00D3": {
            "name": "DOES_SCENARIO_GROUP_EXIST",
            "params": [{ "name": "scenarioGroup", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nOccurrences in the b617d scripts:\n\"ARMY_GUARD\",\n\"ARMY_HELI\",\n\"Cinema_Downtown\",\n\"Cinema_Morningwood\",\n\"Cinema_Textile\",\n\"City_Banks\",\n\"Countryside_Banks\",\n\"DEALERSHIP\",\n\"GRAPESEED_PLANES\",\n\"KORTZ_SECURITY\",\n\"LOST_BIKERS\",\n\"LSA_Planes\",\n\"LSA_Planes\",\n\"MP_POLICE\",\n\"Observatory_Bikers\",\n\"POLICE_POUND1\",\n\"POLICE_POUND2\",\n\"POLICE_POUND3\",\n\"POLICE_POUND4\",\n\"POLICE_POUND5\"\n\"QUARRY\",\n\"SANDY_PLANES\",\n\"SCRAP_SECURITY\",\n\"SEW_MACHINE\",\n\"SOLOMON_GATE\",\n\"Triathlon_1_Start\",\n\"Triathlon_2_Start\",\n\"Triathlon_3_Start\"\nSometimes used with IS_SCENARIO_GROUP_ENABLED:\nif (TASK::DOES_SCENARIO_GROUP_EXIST(\"Observatory_Bikers\") && (!TASK::IS_SCENARIO_GROUP_ENABLED(\"Observatory_Bikers\"))) {\nelse if (TASK::IS_SCENARIO_GROUP_ENABLED(\"BLIMP\")) {\n```",
            "examples": [],
            "hash": "0xF9034C136C9E00D3",
            "ns": "TASK",
            "jhash": "0x5F072EB9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x534AEBA6E5ED4CAB": {
            "name": "GET_ACTIVE_VEHICLE_MISSION_TYPE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nhttps://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt\n```",
            "examples": [],
            "hash": "0x534AEBA6E5ED4CAB",
            "ns": "TASK",
            "jhash": "0xAFA914EF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA98B8E3C088E5A31": {
            "name": "DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nChecks if there is a cover point at position  \n```",
            "examples": [],
            "hash": "0xA98B8E3C088E5A31",
            "ns": "TASK",
            "jhash": "0x29F97A71",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5A59271FFADD33C1": {
            "name": "DOES_SCENARIO_EXIST_IN_AREA",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "b", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5A59271FFADD33C1",
            "ns": "TASK",
            "jhash": "0xFA7F5047",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE6A877C64CAF1BC5": {
            "name": "GET_PED_WAYPOINT_DISTANCE",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xE6A877C64CAF1BC5",
            "ns": "TASK",
            "jhash": "0x084B35B0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A8CADC7D37AACC5": {
            "name": "GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK",
            "params": [{ "name": "p0", "type": "int" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x3A8CADC7D37AACC5",
            "ns": "TASK",
            "jhash": "0x249EB4EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCB4E8BE8A0063C5D": {
            "name": "GET_IS_WAYPOINT_RECORDING_LOADED",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCB4E8BE8A0063C5D",
            "ns": "TASK",
            "jhash": "0x87125F5D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB0760331C7AA4155": {
            "name": "GET_IS_TASK_ACTIVE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "taskIndex", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nTask index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt\n```",
            "examples": [],
            "hash": "0xB0760331C7AA4155",
            "ns": "TASK",
            "jhash": "0x86FDDF55",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC6F5C0BCDC74D62D": {
            "name": "GET_NAVMESH_ROUTE_DISTANCE_REMAINING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "distanceRemaining", "type": "float*" },
                { "name": "isPathReady", "type": "BOOL*" }
            ],
            "results": "int",
            "description": "```\nLooks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.\nReturn value of native is the same as GET_NAVMESH_ROUTE_RESULT\nLooks like the native returns an int for the path's state:\n1 - ???\n2 - ???\n3 - Finished Generating\n```",
            "examples": [],
            "hash": "0xC6F5C0BCDC74D62D",
            "ns": "TASK",
            "jhash": "0xD9281778",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x47619ABE8B268C60": {
            "name": "GET_PHONE_GESTURE_ANIM_CURRENT_TIME",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x47619ABE8B268C60",
            "ns": "TASK",
            "jhash": "0x7B72AFD1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x632E831F382A0FA8": {
            "name": "GET_NAVMESH_ROUTE_RESULT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "See [`GET_NAVMESH_ROUTE_DISTANCE_REMAINING`](#\\_0xC6F5C0BCDC74D62D) for more details.",
            "examples": [],
            "hash": "0x632E831F382A0FA8",
            "ns": "TASK",
            "jhash": "0x96491602",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x594A1028FC2A3E85": {
            "name": "GET_SCRIPTED_COVER_POINT_COORDS",
            "params": [{ "name": "coverpoint", "type": "ScrHandle" }],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x594A1028FC2A3E85",
            "ns": "TASK",
            "jhash": "0xC6B6CCC1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x00A9010CFE1E3533": {
            "name": "GET_SEQUENCE_PROGRESS",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "```\nreturned values:\n0 to 7 = task that's currently in progress, 0 meaning the first one.\n-1 no task sequence in progress.\n```",
            "examples": [],
            "hash": "0x00A9010CFE1E3533",
            "ns": "TASK",
            "jhash": "0xA3419909",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2720AAA75001E094": {
            "name": "GET_PED_WAYPOINT_PROGRESS",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2720AAA75001E094",
            "ns": "TASK",
            "jhash": "0x3595B104",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1EE0F68A7C25DEC6": {
            "name": "GET_PHONE_GESTURE_ANIM_TOTAL_TIME",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x1EE0F68A7C25DEC6",
            "ns": "TASK",
            "jhash": "0xEF8C3959",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44AB0B3AFECCE242": {
            "name": "_GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "signalName", "type": "char*" }
            ],
            "results": "float",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x44AB0B3AFECCE242",
            "ns": "TASK",
            "manualHash": true
        },
        "0x717E4D1F2048376D": {
            "name": "GET_TASK_MOVE_NETWORK_STATE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x717E4D1F2048376D",
            "ns": "TASK",
            "aliases": ["0x717E4D1F2048376D"],
            "jhash": "0x96C0277B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA5B769058763E497": {
            "name": "GET_WAYPOINT_DISTANCE_ALONG_ROUTE",
            "params": [
                { "name": "p0", "type": "char*" },
                { "name": "p1", "type": "int" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xA5B769058763E497",
            "ns": "TASK",
            "jhash": "0xE8422AC4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB4F47213DF45A64C": {
            "name": "GET_TASK_MOVE_NETWORK_EVENT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "eventName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB4F47213DF45A64C",
            "ns": "TASK",
            "aliases": ["0xB4F47213DF45A64C"],
            "jhash": "0x72FA5EF2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x77F1BEB8863288D5": {
            "name": "GET_SCRIPT_TASK_STATUS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped the task is running on"
                },
                {
                    "name": "taskHash",
                    "type": "Hash",
                    "description": "The hash of the task"
                }
            ],
            "results": "int",
            "description": "Gets the status of a spesifed script-assigned task on the given ped. The return value is always an int between 0-7.\n\nYou can set taskHash to `SCRIPT_TASK_ANY` to check if any task is active, it will return 1 for active, 3 for no active.\n`SCRIPT_TASK_INVALID` can be similarly used, it returns 7 if there are any active task, and 3 if there are no active tasks.\n\ntaskHash list: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt\n\nReturns:\n\n```\n0 = WAITING_TO_START_TASK\n1 = PERFORMING_TASK\n2 = DORMANT_TASK\n3 = VACANT_STAGE\n7 = TASK_FINISHED_OR_NOT_FOUND\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\nlocal coords = GetOffsetFromEntityInWorldCoords(playerPed, 0.0, 6.0, 0.0)\nTaskGoStraightToCoord(playerPed, coords, 1.0, 5000, GetEntityHeading(playerPed), 0.15)\n\nCitizen.CreateThread(function()\n    while true do\n        local taskStatus = GetScriptTaskStatus(PlayerPedId(), \"SCRIPT_TASK_GO_STRAIGHT_TO_COORD\")\n        print(taskStatus)\n        if taskStatus == 7 then print(\"task was finished!\"); break end\n        Citizen.Wait(250)\n    end\nend)"
                }
            ],
            "hash": "0x77F1BEB8863288D5",
            "ns": "TASK",
            "jhash": "0xB2477B23",
            "manualHash": true,
            "resultsDescription": "The status of the script-assigned task."
        },
        "0x416B62AC8B9E5BBD": {
            "name": "GET_VEHICLE_WAYPOINT_TARGET_POINT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x416B62AC8B9E5BBD",
            "ns": "TASK",
            "jhash": "0x81049608",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA320EF046186FA3B": {
            "name": "IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA320EF046186FA3B",
            "ns": "TASK",
            "jhash": "0x291E938C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9824CFF8FC66E159": {
            "name": "GET_VEHICLE_WAYPOINT_PROGRESS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9824CFF8FC66E159",
            "ns": "TASK",
            "jhash": "0xD3CCF64E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8785E6E40C7A8818": {
            "name": "IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8785E6E40C7A8818",
            "ns": "TASK",
            "jhash": "0xB23F46E6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA7FFBA498E4AAF67": {
            "name": "GET_TASK_MOVE_NETWORK_SIGNAL_BOOL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "signalName", "type": "char*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA7FFBA498E4AAF67",
            "ns": "TASK",
            "aliases": ["0xA7FFBA498E4AAF67"],
            "jhash": "0x1EBB6F3D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA135F9482C82CC3": {
            "name": "IS_PED_ACTIVE_IN_SCENARIO",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "When passing a ped parameter, the function returns true if the ped is currently in any scenario.",
            "examples": [],
            "hash": "0xAA135F9482C82CC3",
            "ns": "TASK",
            "jhash": "0x05038F1A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x349CE7B56DAFD95C": {
            "name": "IS_MOVE_BLEND_RATIO_STILL",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x349CE7B56DAFD95C",
            "ns": "TASK",
            "jhash": "0xE9DAF877",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD4D8636C0199A939": {
            "name": "IS_MOVE_BLEND_RATIO_RUNNING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD4D8636C0199A939",
            "ns": "TASK",
            "jhash": "0xE76A2353",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF133BBBE91E1691F": {
            "name": "IS_MOVE_BLEND_RATIO_WALKING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF133BBBE91E1691F",
            "ns": "TASK",
            "jhash": "0xD21639A8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x90A09F3A45FED688": {
            "name": "IS_PED_BEING_ARRESTED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nThis function is hard-coded to always return 0.  \n```",
            "examples": [],
            "hash": "0x90A09F3A45FED688",
            "ns": "TASK",
            "jhash": "0x5FF6C2ED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x24A2AD74FA9814E2": {
            "name": "IS_MOVE_BLEND_RATIO_SPRINTING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x24A2AD74FA9814E2",
            "ns": "TASK",
            "jhash": "0xDD616893",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x74E559B3BC910685": {
            "name": "IS_PED_CUFFED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x74E559B3BC910685",
            "ns": "TASK",
            "jhash": "0x511CE741",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x621C6E4729388E41": {
            "name": "IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x621C6E4729388E41",
            "ns": "TASK",
            "aliases": ["0x621C6E4729388E41"],
            "jhash": "0xA0DA6B1D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2A74E1D5F2F00EEC": {
            "name": "IS_PED_GETTING_UP",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2A74E1D5F2F00EEC",
            "ns": "TASK",
            "jhash": "0x320813E6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAC29253EEF8F0180": {
            "name": "IS_PED_STILL",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAC29253EEF8F0180",
            "ns": "TASK",
            "jhash": "0x09E3418D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3DC52677769B4AE0": {
            "name": "IS_PED_RUNNING_ARREST_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3DC52677769B4AE0",
            "ns": "TASK",
            "jhash": "0x6942DB7A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDEB6D52126E7D640": {
            "name": "IS_PED_IN_WRITHE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "This native checks if a ped is on the ground, in pain from a (gunshot) wound.",
            "examples": [],
            "hash": "0xDEB6D52126E7D640",
            "ns": "TASK",
            "jhash": "0x09E61921",
            "manualHash": true,
            "resultsDescription": "Returns `true` if the ped is in [writhe](https://dictionary.cambridge.org/dictionary/english/writhe), `false` otherwise."
        },
        "0xDE4C184B2B9B071A": {
            "name": "IS_PED_WALKING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDE4C184B2B9B071A",
            "ns": "TASK",
            "jhash": "0x4B865C4A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x367A09DED4E05B99": {
            "name": "IS_SCENARIO_GROUP_ENABLED",
            "params": [{ "name": "scenarioGroup", "type": "char*" }],
            "results": "BOOL",
            "description": "```\n Occurrences in the b617d scripts:\n \"ARMY_GUARD\",\n \"ARMY_HELI\",\n \"BLIMP\",\n \"Cinema_Downtown\",\n \"Cinema_Morningwood\",\n \"Cinema_Textile\",\n \"City_Banks\",\n \"Countryside_Banks\",\n \"DEALERSHIP\",\n \"KORTZ_SECURITY\",\n \"LSA_Planes\",\n \"MP_POLICE\",\n \"Observatory_Bikers\",\n \"POLICE_POUND1\",\n \"POLICE_POUND2\",\n \"POLICE_POUND3\",\n \"POLICE_POUND4\",\n \"POLICE_POUND5\",\n \"Rampage1\",\n \"SANDY_PLANES\",\n \"SCRAP_SECURITY\",\n \"SEW_MACHINE\",\n \"SOLOMON_GATE\"\nSometimes used with DOES_SCENARIO_GROUP_EXIST:\nif (TASK::DOES_SCENARIO_GROUP_EXIST(\"Observatory_Bikers\") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED(\"Observatory_Bikers\"))) {\nelse if (TASK::IS_SCENARIO_GROUP_ENABLED(\"BLIMP\")) {\n```",
            "examples": [],
            "hash": "0x367A09DED4E05B99",
            "ns": "TASK",
            "jhash": "0x90991122",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57E457CD2C0FC168": {
            "name": "IS_PED_SPRINTING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x57E457CD2C0FC168",
            "ns": "TASK",
            "jhash": "0x4F3E0633",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x921CE12C489C4C41": {
            "name": "IS_TASK_MOVE_NETWORK_ACTIVE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x921CE12C489C4C41",
            "ns": "TASK",
            "aliases": ["0x921CE12C489C4C41"],
            "jhash": "0x902656EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF5134943EA29868C": {
            "name": "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF5134943EA29868C",
            "ns": "TASK",
            "jhash": "0x80DD15DB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC5286FFC176F28A2": {
            "name": "IS_PED_RUNNING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC5286FFC176F28A2",
            "ns": "TASK",
            "jhash": "0xE9A5578F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x788756D73AC2E07C": {
            "name": "IS_SCENARIO_OCCUPIED",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x788756D73AC2E07C",
            "ns": "TASK",
            "jhash": "0x697FC008",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE45B7F222DE47E09": {
            "name": "IS_PED_STRAFING",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nWhat's strafing?  \n```",
            "examples": [],
            "hash": "0xE45B7F222DE47E09",
            "ns": "TASK",
            "jhash": "0xEFEED13C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE03B3F2D3DC59B64": {
            "name": "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE03B3F2D3DC59B64",
            "ns": "TASK",
            "jhash": "0x85B7725F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB8EBB1E9D3588C10": {
            "name": "IS_PLAYING_PHONE_GESTURE_ANIM",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB8EBB1E9D3588C10",
            "ns": "TASK",
            "jhash": "0x500B6805",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x30ED88D5E0C56A37": {
            "name": "IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x30ED88D5E0C56A37",
            "ns": "TASK",
            "aliases": ["0x30ED88D5E0C56A37"],
            "jhash": "0x92FDBAE6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A815DB3EA088722": {
            "name": "IS_SCENARIO_TYPE_ENABLED",
            "params": [{ "name": "scenarioType", "type": "char*" }],
            "results": "BOOL",
            "description": "```\nOccurrences in the b617d scripts:\n\"PROP_HUMAN_SEAT_CHAIR\",\n\"WORLD_HUMAN_DRINKING\",\n\"WORLD_HUMAN_HANG_OUT_STREET\",\n\"WORLD_HUMAN_SMOKING\",\n\"WORLD_MOUNTAIN_LION_WANDER\",\n\"WORLD_HUMAN_DRINKING\"\nSometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.\nscenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.\n```",
            "examples": [],
            "hash": "0x3A815DB3EA088722",
            "ns": "TASK",
            "jhash": "0xAE37E969",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1F351CF1C6475734": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1F351CF1C6475734",
            "ns": "TASK",
            "manualHash": true
        },
        "0x53DDC75BC3AC0A90": {
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to have tasks cleared"
                }
            ],
            "results": "void",
            "description": "Related to [`_CLEAR_VEHICLE_TASKS`](#\\_0xDBBC7A2432524127) and requires more research (e.g., \\_CLEAR_VEHICLE_SECONDARY_TASKS).\n\n```\nCLEAR_*\n\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x53DDC75BC3AC0A90",
            "ns": "TASK",
            "manualHash": true
        },
        "0x29682E2CCF21E9B5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "Any" },
                { "name": "p11", "type": "Any" },
                { "name": "p12", "type": "Any" },
                { "name": "p13", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x29682E2CCF21E9B5",
            "ns": "TASK",
            "manualHash": true
        },
        "0x0FFB3C758E8C07B9": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "Any",
            "description": "Doesn't actually return anything.\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x0FFB3C758E8C07B9",
            "ns": "TASK",
            "manualHash": true
        },
        "0xFA83CA6776038F64": {
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nREMOVE_*\n\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xFA83CA6776038F64",
            "ns": "TASK",
            "manualHash": true
        },
        "0x6100B3CEFD43452E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x6100B3CEFD43452E",
            "ns": "TASK",
            "manualHash": true
        },
        "0x8423541E8B3A1589": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x8423541E8B3A1589",
            "ns": "TASK",
            "manualHash": true
        },
        "0x3E38E28A1D80DDF6": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0x3E38E28A1D80DDF6",
            "ns": "TASK",
            "jhash": "0x54856309",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x748040460F8DF5DC": {
            "name": "PLAY_ANIM_ON_RUNNING_SCENARIO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animDict", "type": "char*" },
                { "name": "animName", "type": "char*" }
            ],
            "results": "void",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x748040460F8DF5DC",
            "ns": "TASK",
            "jhash": "0x1984A5D1",
            "manualHash": true
        },
        "0x9D252648778160DF": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x9D252648778160DF",
            "ns": "TASK",
            "manualHash": true
        },
        "0xAB13A5565480B6D9": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" }
            ],
            "results": "Any",
            "description": "```\nUsed only once in the scripts (fm_mission_controller) like so:\n\nTASK::_0xAB13A5565480B6D9(iLocal_3160, \"Cutting\");\n\nSET_*\n```",
            "examples": [],
            "hash": "0xAB13A5565480B6D9",
            "ns": "TASK",
            "jhash": "0x1E58A7AD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDB6708C0B46F56D8": {
            "name": "REMOVE_ALL_COVER_BLOCKING_AREAS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDB6708C0B46F56D8",
            "ns": "TASK",
            "jhash": "0xCF9221A7",
            "manualHash": true
        },
        "0x8634CEF2522D987B": {
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x8634CEF2522D987B",
            "ns": "TASK",
            "manualHash": true
        },
        "0x8517D4A6CA8513ED": {
            "name": "GET_PED_DESIRED_MOVE_BLEND_RATIO",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x8517D4A6CA8513ED",
            "ns": "TASK",
            "jhash": "0x5FEFAB72",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE8854A4326B9E12B": {
            "name": "OPEN_SEQUENCE_TASK",
            "params": [{ "name": "taskSequenceId", "type": "int*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE8854A4326B9E12B",
            "ns": "TASK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xABA6923E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA36BFB5EE89F3D82": {
            "name": "OPEN_PATROL_ROUTE",
            "params": [{ "name": "patrolRoute", "type": "char*" }],
            "results": "void",
            "description": "```\nThe patrol route name must starts with \"miss_\" to be properly created. \n\n patrolRoutes found in the b617d scripts:\n \"miss_Ass0\",\n \"miss_Ass1\",\n \"miss_Ass2\",\n \"miss_Ass3\",\n \"miss_Ass4\",\n \"miss_Ass5\",\n \"miss_Ass6\",\n \"MISS_PATROL_6\",\n \"MISS_PATROL_7\",\n \"MISS_PATROL_8\",\n \"MISS_PATROL_9\",\n \"miss_Tower_01\",\n \"miss_Tower_02\",\n \"miss_Tower_03\",\n \"miss_Tower_04\",\n \"miss_Tower_05\",\n \"miss_Tower_06\",\n \"miss_Tower_07\",\n \"miss_Tower_08\",\n \"miss_Tower_10\"\n```",
            "examples": [],
            "hash": "0xA36BFB5EE89F3D82",
            "ns": "TASK",
            "jhash": "0xF33F83CA",
            "manualHash": true
        },
        "0xAE287C923D891715": {
            "name": "REMOVE_COVER_POINT",
            "params": [{ "name": "coverpoint", "type": "ScrHandle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAE287C923D891715",
            "ns": "TASK",
            "jhash": "0x0776888B",
            "manualHash": true
        },
        "0xFF1B8B4AA1C25DC8": {
            "name": "REMOVE_WAYPOINT_RECORDING",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFF1B8B4AA1C25DC8",
            "ns": "TASK",
            "jhash": "0x624530B0",
            "manualHash": true
        },
        "0x77A1EEC547E7FCF1": {
            "name": "PLAY_ENTITY_SCRIPTED_ANIM",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x77A1EEC547E7FCF1",
            "ns": "TASK",
            "jhash": "0x02F72AE5",
            "manualHash": true
        },
        "0x295E3CCEC879CCD7": {
            "name": "PED_HAS_USE_SCENARIO_TASK",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x295E3CCEC879CCD7",
            "ns": "TASK",
            "jhash": "0x9BE9C691",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4202BBCB8684563D": {
            "name": "RESET_EXCLUSIVE_SCENARIO_GROUP",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4202BBCB8684563D",
            "ns": "TASK",
            "jhash": "0x17F9DFE8",
            "manualHash": true
        },
        "0x9EEFB62EB27B5792": {
            "name": "REQUEST_WAYPOINT_RECORDING",
            "params": [{ "name": "name", "type": "char*" }],
            "results": "void",
            "description": "```\nFor a full list of the points, see here: goo.gl/wIH0vn\nMax number of loaded recordings is 32.\n```",
            "examples": [],
            "hash": "0x9EEFB62EB27B5792",
            "ns": "TASK",
            "jhash": "0xAFABFB5D",
            "manualHash": true
        },
        "0xD01015C7316AE176": {
            "name": "REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "A ped handle."
                },
                {
                    "name": "name",
                    "type": "char*",
                    "description": "The name of the target request state in the move network file."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD01015C7316AE176",
            "ns": "TASK",
            "aliases": ["0xD01015C7316AE176"],
            "jhash": "0x885724DE",
            "manualHash": true,
            "resultsDescription": "Technically a `void`. Scripts treat this as a boolean, but the game never sets the result, so it will return the ped handle instead."
        },
        "0xDD902D0349AFAD3A": {
            "name": "RESET_SCENARIO_GROUPS_ENABLED",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDD902D0349AFAD3A",
            "ns": "TASK",
            "jhash": "0xBF55025D",
            "manualHash": true
        },
        "0x0D40EE2A7F2B2D6D": {
            "name": "RESET_SCENARIO_TYPES_ENABLED",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0D40EE2A7F2B2D6D",
            "ns": "TASK",
            "jhash": "0xF58FDEB4",
            "manualHash": true
        },
        "0x032D49C5E359C847": {
            "name": "SET_ANIM_RATE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x032D49C5E359C847",
            "ns": "TASK",
            "jhash": "0x6DB46584",
            "manualHash": true
        },
        "0xDACE1BE37D88AF67": {
            "name": "SET_DRIVE_TASK_DRIVING_STYLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "drivingStyle", "type": "int" }
            ],
            "results": "void",
            "description": "```\nThis native is used to set the driving style for specific ped.  \nDriving styles id seems to be:  \n786468  \n262144  \n786469  \nhttp://gtaforums.com/topic/822314-guide-driving-styles/  \n```",
            "examples": [],
            "hash": "0xDACE1BE37D88AF67",
            "ns": "TASK",
            "jhash": "0x59C5FAD7",
            "manualHash": true
        },
        "0x70033C3CC29A1FF4": {
            "name": "SET_ANIM_LOOPED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x70033C3CC29A1FF4",
            "ns": "TASK",
            "jhash": "0x095D61A4",
            "manualHash": true
        },
        "0xDDF3CB5A0A4C0B49": {
            "name": "SET_ANIM_PHASE",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xDDF3CB5A0A4C0B49",
            "ns": "TASK",
            "aliases": ["0xDDF3CB5A0A4C0B49", "_SET_ANIM_PLAYBACK_TIME"],
            "jhash": "0xB621E7E4",
            "manualHash": true
        },
        "0x535E97E1F7FC0C6A": {
            "name": "SET_EXCLUSIVE_SCENARIO_GROUP",
            "params": [{ "name": "scenarioGroup", "type": "char*" }],
            "results": "void",
            "description": "```\nGroups found in the scripts used with this native:  \n\"AMMUNATION\",  \n\"QUARRY\",  \n\"Triathlon_1\",  \n\"Triathlon_2\",  \n\"Triathlon_3\"  \n```",
            "examples": [],
            "hash": "0x535E97E1F7FC0C6A",
            "ns": "TASK",
            "jhash": "0x59DB8F26",
            "manualHash": true
        },
        "0x6C6B148586F934F7": {
            "name": "SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT",
            "params": [{ "name": "height", "type": "float" }],
            "results": "void",
            "description": "```\nBirds will try to reach the given height.  \n```",
            "examples": [],
            "hash": "0x6C6B148586F934F7",
            "ns": "TASK",
            "jhash": "0x2AFB14B8",
            "manualHash": true
        },
        "0x5C9B84BD7D31D908": {
            "name": "SET_DRIVE_TASK_CRUISE_SPEED",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "cruiseSpeed", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5C9B84BD7D31D908",
            "ns": "TASK",
            "jhash": "0x3CEC07B1",
            "manualHash": true
        },
        "0x207F1A47C0342F48": {
            "name": "SET_ANIM_WEIGHT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x207F1A47C0342F48",
            "ns": "TASK",
            "jhash": "0x17229D98",
            "manualHash": true
        },
        "0xF1B9F16E89E2C93A": {
            "name": "SET_NEXT_DESIRED_MOVE_STATE",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "**This native does absolutely nothing, just a nullsub**",
            "examples": [],
            "hash": "0xF1B9F16E89E2C93A",
            "ns": "TASK",
            "jhash": "0x4E937D57",
            "manualHash": true
        },
        "0x404A5AA9B9F0B746": {
            "name": "SET_DRIVE_TASK_MAX_CRUISE_SPEED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x404A5AA9B9F0B746",
            "ns": "TASK",
            "jhash": "0x7FDF6131",
            "manualHash": true
        },
        "0x8C825BDC7741D37C": {
            "name": "SET_HIGH_FALL_TASK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "duration", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8C825BDC7741D37C",
            "ns": "TASK",
            "jhash": "0xBBB26172",
            "manualHash": true
        },
        "0xE5B302114D8162EE": {
            "name": "SET_DRIVEBY_TASK_TARGET",
            "params": [
                { "name": "shootingPed", "type": "Ped" },
                { "name": "targetPed", "type": "Ped" },
                { "name": "targetVehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nFor p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.  \n```",
            "examples": [],
            "hash": "0xE5B302114D8162EE",
            "ns": "TASK",
            "jhash": "0xDA6A6FC1",
            "manualHash": true
        },
        "0x8FD89A6240813FD0": {
            "name": "SET_PED_CAN_PLAY_AMBIENT_IDLES",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAppears only in fm_mission_controller and used only 3 times.  \nped was always PLAYER_PED_ID()  \np1 was always true  \np2 was always true  \n```",
            "examples": [],
            "hash": "0x8FD89A6240813FD0",
            "ns": "TASK",
            "aliases": ["0x8FD89A6240813FD0"],
            "jhash": "0xB5AD044E",
            "manualHash": true
        },
        "0xC313379AF0FCEDA7": {
            "name": "SET_PARACHUTE_TASK_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC313379AF0FCEDA7",
            "ns": "TASK",
            "jhash": "0x6ED3AD81",
            "manualHash": true
        },
        "0xCCD892192C6D2BB9": {
            "name": "SET_MOUNTED_WEAPON_TARGET",
            "params": [
                { "name": "shootingPed", "type": "Ped" },
                { "name": "targetPed", "type": "Ped" },
                { "name": "targetVehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNote: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.  \n```\n\n```\nNativeDB Added Parameter 7: Any p6\nNativeDB Added Parameter 8: Any p7\n```",
            "examples": [],
            "hash": "0xCCD892192C6D2BB9",
            "ns": "TASK",
            "jhash": "0x98713C68",
            "manualHash": true
        },
        "0x4455517B28441E60": {
            "name": "SET_PED_PATH_AVOID_FIRE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "avoidFire", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4455517B28441E60",
            "ns": "TASK",
            "jhash": "0xDCC5B934",
            "manualHash": true
        },
        "0x1E982AC8716912C5": {
            "name": "SET_PED_DESIRED_MOVE_BLEND_RATIO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E982AC8716912C5",
            "ns": "TASK",
            "jhash": "0xC65FC712",
            "manualHash": true
        },
        "0x0729BAC1B8C64317": {
            "name": "SET_PARACHUTE_TASK_THRUST",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "thrust", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0729BAC1B8C64317",
            "ns": "TASK",
            "jhash": "0xD07C8AAA",
            "manualHash": true
        },
        "0x88E32DB8C1A4AA4B": {
            "name": "SET_PED_PATH_CLIMB_COST_MODIFIER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "modifier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nDefault modifier is 1.0, minimum is 0.0 and maximum is 10.0.\n```",
            "examples": [],
            "hash": "0x88E32DB8C1A4AA4B",
            "ns": "TASK",
            "aliases": ["0x88E32DB8C1A4AA4B"],
            "jhash": "0x55E06443",
            "manualHash": true
        },
        "0x8E06A6FE76C9EFF4": {
            "name": "SET_PED_PATH_CAN_USE_CLIMBOVERS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "Toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8E06A6FE76C9EFF4",
            "ns": "TASK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xB7B7D442",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xED98E10B0AFCE4B4": {
            "name": "SET_PED_WAYPOINT_ROUTE_OFFSET",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xED98E10B0AFCE4B4",
            "ns": "TASK",
            "jhash": "0xF867F747",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE361C5C71C431A4F": {
            "name": "SET_PED_PATH_CAN_DROP_FROM_HEIGHT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "Toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE361C5C71C431A4F",
            "ns": "TASK",
            "jhash": "0x394B7AC9",
            "manualHash": true
        },
        "0x77A5B103C87F476E": {
            "name": "SET_PED_PATH_CAN_USE_LADDERS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "Toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x77A5B103C87F476E",
            "ns": "TASK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x53A879EE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x38FE1EC73743793C": {
            "name": "SET_PED_PATH_PREFER_TO_AVOID_WATER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "avoidWater", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x38FE1EC73743793C",
            "ns": "TASK",
            "jhash": "0x0EA39A29",
            "manualHash": true
        },
        "0xF35425A4204367EC": {
            "name": "SET_PED_PATH_MAY_ENTER_WATER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "mayEnterWater", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF35425A4204367EC",
            "ns": "TASK",
            "aliases": ["SET_PED_PATHS_WIDTH_PLANT"],
            "jhash": "0x9C606EE3",
            "manualHash": true
        },
        "0xD5BB4025AE449A4E": {
            "name": "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped on which the task is playing."
                },
                {
                    "name": "signalName",
                    "type": "char*",
                    "description": "The property name."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The property value to set."
                }
            ],
            "results": "void",
            "description": "```\np0 - PLAYER::PLAYER_PED_ID();\np1 - \"Phase\", \"Wobble\", \"x_axis\",\"y_axis\",\"introphase\",\"speed\".\np2 - From what i can see it goes up to 1f (maybe).\n-LcGamingHD\nExample: TASK::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), \"Phase\", 0.5);\n```",
            "examples": [],
            "hash": "0xD5BB4025AE449A4E",
            "ns": "TASK",
            "aliases": ["0xD5BB4025AE449A4E", "_SET_TASK_PROPERTY_FLOAT"],
            "jhash": "0xA79BE783",
            "manualHash": true
        },
        "0xCC665AAC360D31E7": {
            "name": "SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "flag", "type": "int" },
                { "name": "set", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\n* Flag 1: Aggressive ramming of suspect\n* Flag 2: Ram attempts\n* Flag 8: Medium-aggressive boxing tactic with a bit of PIT\n* Flag 16: Ramming, seems to be slightly less aggressive than 1-2.\n* Flag 32: Stay back from suspect, no tactical contact. Convoy-like.\n```",
            "examples": [],
            "hash": "0xCC665AAC360D31E7",
            "ns": "TASK",
            "jhash": "0x2A83083F",
            "manualHash": true
        },
        "0xEB47EC4E34FB7EE1": {
            "name": "SET_SCENARIO_TYPE_ENABLED",
            "params": [
                { "name": "scenarioType", "type": "char*" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nseems to enable/disable specific scenario-types from happening in the game world.\nHere are some scenario types from the scripts:\n\"WORLD_MOUNTAIN_LION_REST\"\n\"WORLD_MOUNTAIN_LION_WANDER\"\n\"DRIVE\"\n\"WORLD_VEHICLE_POLICE_BIKE\"\n\"WORLD_VEHICLE_POLICE_CAR\"\n\"WORLD_VEHICLE_POLICE_NEXT_TO_CAR\"\n\"WORLD_VEHICLE_DRIVE_SOLO\"\n\"WORLD_VEHICLE_BIKER\"\n\"WORLD_VEHICLE_DRIVE_PASSENGERS\"\n\"WORLD_VEHICLE_SALTON_DIRT_BIKE\"\n\"WORLD_VEHICLE_BICYCLE_MOUNTAIN\"\n\"PROP_HUMAN_SEAT_CHAIR\"\n\"WORLD_VEHICLE_ATTRACTOR\"\n\"WORLD_HUMAN_LEANING\"\n\"WORLD_HUMAN_HANG_OUT_STREET\"\n\"WORLD_HUMAN_DRINKING\"\n\"WORLD_HUMAN_SMOKING\"\n\"WORLD_HUMAN_GUARD_STAND\"\n\"WORLD_HUMAN_CLIPBOARD\"\n\"WORLD_HUMAN_HIKER\"\n\"WORLD_VEHICLE_EMPTY\"\n\"WORLD_VEHICLE_BIKE_OFF_ROAD_RACE\"\n\"WORLD_HUMAN_PAPARAZZI\"\n\"WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN\"\n\"WORLD_VEHICLE_PARK_PARALLEL\"\n\"WORLD_VEHICLE_CONSTRUCTION_SOLO\"\n\"WORLD_VEHICLE_CONSTRUCTION_PASSENGERS\"\n\"WORLD_VEHICLE_TRUCK_LOGS\"\nscenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.\n```",
            "examples": [],
            "hash": "0xEB47EC4E34FB7EE1",
            "ns": "TASK",
            "jhash": "0xDB18E5DE",
            "manualHash": true
        },
        "0x58C70CF3A41E4AE7": {
            "name": "SET_SEQUENCE_TO_REPEAT",
            "params": [
                { "name": "taskSequenceId", "type": "int" },
                { "name": "repeat", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x58C70CF3A41E4AE7",
            "ns": "TASK",
            "jhash": "0xCDDF1508",
            "manualHash": true
        },
        "0x02C8E5B49848664E": {
            "name": "SET_SCENARIO_GROUP_ENABLED",
            "params": [
                { "name": "scenarioGroup", "type": "char*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOccurrences in the b617d scripts: pastebin.com/Tvg2PRHU  \n```",
            "examples": [],
            "hash": "0x02C8E5B49848664E",
            "ns": "TASK",
            "jhash": "0x116997B1",
            "manualHash": true
        },
        "0xB0A6CFD2C69C1088": {
            "name": "SET_TASK_MOVE_NETWORK_SIGNAL_BOOL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped that's performing the task."
                },
                {
                    "name": "signalName",
                    "type": "char*",
                    "description": "The property name."
                },
                {
                    "name": "value",
                    "type": "BOOL",
                    "description": "The property value to set."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB0A6CFD2C69C1088",
            "ns": "TASK",
            "aliases": ["0xB0A6CFD2C69C1088", "_SET_TASK_PROPERTY_BOOL"],
            "jhash": "0xF3538041",
            "manualHash": true
        },
        "0x373EF409B82697A3": {
            "name": "_SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_2",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "signalName", "type": "char*" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x373EF409B82697A3",
            "ns": "TASK",
            "manualHash": true
        },
        "0xAAA34F8A7CB32098": {
            "name": "CLEAR_PED_TASKS_IMMEDIATELY",
            "params": [
                { "name": "ped", "type": "Ped", "description": "Ped id." }
            ],
            "results": "void",
            "description": "Immediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.",
            "examples": [],
            "hash": "0xAAA34F8A7CB32098",
            "ns": "TASK",
            "jhash": "0xBC045625",
            "manualHash": true
        },
        "0x639B642FACBE4EDD": {
            "name": "SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "distance", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x639B642FACBE4EDD",
            "ns": "TASK",
            "jhash": "0x04FD3EE7",
            "manualHash": true
        },
        "0x93B93A37987F1F3D": {
            "name": "TASK_ACHIEVE_HEADING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "heading", "type": "float" },
                { "name": "timeout", "type": "int" }
            ],
            "results": "void",
            "description": "```\nMakes the specified ped achieve the specified heading.  \npedHandle: The handle of the ped to assign the task to.  \nheading: The desired heading.  \ntimeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.  \n```",
            "examples": [],
            "hash": "0x93B93A37987F1F3D",
            "ns": "TASK",
            "jhash": "0x0A0E9B42",
            "manualHash": true
        },
        "0x9B53BB6E8943AF53": {
            "name": "TASK_AIM_GUN_AT_ENTITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "entity", "type": "Entity" },
                { "name": "duration", "type": "int" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nduration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped  \n```",
            "examples": [],
            "hash": "0x9B53BB6E8943AF53",
            "ns": "TASK",
            "jhash": "0xBE32B3B6",
            "manualHash": true
        },
        "0xEE08C992D238C5D1": {
            "name": "STOP_ANIM_PLAYBACK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nLooks like p1 may be a flag, still need to do some research, though.\n```",
            "examples": [],
            "hash": "0xEE08C992D238C5D1",
            "ns": "TASK",
            "jhash": "0xE5F16398",
            "manualHash": true
        },
        "0x19D1B791CB3670FE": {
            "name": "_TASK_AGITATED_ACTION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "ped2", "type": "Ped" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x19D1B791CB3670FE",
            "ns": "TASK",
            "aliases": ["0x19D1B791CB3670FE"],
            "manualHash": true
        },
        "0x7A192BE16D373D00": {
            "name": "TASK_AIM_GUN_SCRIPTED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "scriptTask", "type": "Hash" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7A192BE16D373D00",
            "ns": "TASK",
            "jhash": "0x9D296BCD",
            "manualHash": true
        },
        "0xF3B9A78A178572B1": {
            "name": "TASK_ARREST_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" }
            ],
            "results": "void",
            "description": "```\nExample from \"me_amanda1.ysc.c4\":\nTASK::TASK_ARREST_PED(l_19F /* This is a Ped */ , PLAYER::PLAYER_PED_ID());\nExample from \"armenian1.ysc.c4\":\nif (!PED::IS_PED_INJURED(l_B18[0/*1*/])) {\n    TASK::TASK_ARREST_PED(l_B18[0/*1*/], PLAYER::PLAYER_PED_ID());\n}\nI would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.\nLooks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.\n```",
            "examples": [],
            "hash": "0xF3B9A78A178572B1",
            "ns": "TASK",
            "jhash": "0xBC0F153D",
            "manualHash": true
        },
        "0x97FF36A1D40EA00A": {
            "name": "STOP_ANIM_TASK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animDictionary", "type": "char*" },
                { "name": "animationName", "type": "char*" },
                {
                    "name": "animExitSpeed",
                    "type": "float",
                    "description": "Greater than `0.0`, higher is faster. Setting to `0.0` or using an integer, will cause animation lockout - requiring the animation to be played again or the player be killed."
                }
            ],
            "results": "void",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x97FF36A1D40EA00A",
            "ns": "TASK",
            "jhash": "0x2B520A57",
            "manualHash": true
        },
        "0x0F804F1DB19B9689": {
            "name": "TASK_CLEAR_LOOK_AT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nNot clear what it actually does, but here's how script uses it -\nif (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...)\n{\n if(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))\n    {\n     TASK::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID());\n  }\n ...\n}\nAnother one where it doesn't \"look\" at current player -\nTASK::TASK_PLAY_ANIM(l_3ED, \"missheist_agency2aig_2\", \"look_at_phone_a\", 1000.0, -2.0, -1, 48, v_2, 0, 0, 0);\nPED::_2208438012482A1A(l_3ED, 0, 0);\nTASK::TASK_CLEAR_LOOK_AT(l_3ED);\n```",
            "examples": [],
            "hash": "0x0F804F1DB19B9689",
            "ns": "TASK",
            "jhash": "0x60EB4054",
            "manualHash": true
        },
        "0x8605AF0DE8B3A5AC": {
            "name": "TASK_AIM_GUN_SCRIPTED_WITH_TARGET",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8605AF0DE8B3A5AC",
            "ns": "TASK",
            "jhash": "0xFD517CE3",
            "manualHash": true
        },
        "0x6671F3EEC681BDA1": {
            "name": "TASK_AIM_GUN_AT_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "time", "type": "int" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6671F3EEC681BDA1",
            "ns": "TASK",
            "jhash": "0xFBF44AD3",
            "manualHash": true
        },
        "0x95A6C46A31D1917D": {
            "name": "TASK_CLEAR_DEFENSIVE_AREA",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x95A6C46A31D1917D",
            "ns": "TASK",
            "jhash": "0x7A05BF0D",
            "manualHash": true
        },
        "0x8C338E0263E4FD19": {
            "name": "TASK_CHAT_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" }
            ],
            "results": "void",
            "description": "```\np2 tend to be 16, 17 or 1  \np3 to p7 tend to be 0.0  \n```",
            "examples": [],
            "hash": "0x8C338E0263E4FD19",
            "ns": "TASK",
            "jhash": "0xA2BE1821",
            "manualHash": true
        },
        "0x15C86013127CE63F": {
            "name": "TASK_BOAT_MISSION",
            "params": [
                { "name": "pedDriver", "type": "Ped" },
                { "name": "boat", "type": "Vehicle" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p7", "type": "Any" },
                { "name": "maxSpeed", "type": "float" },
                { "name": "drivingStyle", "type": "int" },
                { "name": "p10", "type": "float" },
                { "name": "p11", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nYou need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.\nWorking example\nfloat vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));\nTASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);\nPED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);\nP8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation\n```",
            "examples": [],
            "hash": "0x15C86013127CE63F",
            "ns": "TASK",
            "jhash": "0x5865B031",
            "manualHash": true
        },
        "0xB6C987F9285A3814": {
            "name": "TASK_CLIMB_LADDER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB6C987F9285A3814",
            "ns": "TASK",
            "jhash": "0x35BB4EE0",
            "manualHash": true
        },
        "0x2BBA30B854534A0C": {
            "name": "TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2BBA30B854534A0C",
            "ns": "TASK",
            "jhash": "0xF127AD6A",
            "manualHash": true
        },
        "0x89D9FCC2435112F1": {
            "name": "TASK_CLIMB",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "unused", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nClimbs or vaults the nearest thing.  \n```",
            "examples": [],
            "hash": "0x89D9FCC2435112F1",
            "ns": "TASK",
            "jhash": "0x90847790",
            "manualHash": true
        },
        "0x7BF835BB9E2698C8": {
            "name": "TASK_COMBAT_HATED_TARGETS_AROUND_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "radius", "type": "float" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDespite its name, it only attacks ONE hated target. The one closest hated target.  \np2 seems to be always 0  \n```",
            "examples": [],
            "hash": "0x7BF835BB9E2698C8",
            "ns": "TASK",
            "jhash": "0x2E7064E4",
            "manualHash": true
        },
        "0x944F30DCB7096BDE": {
            "name": "TASK_COMBAT_PED_TIMED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "ped", "type": "Ped" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x944F30DCB7096BDE",
            "ns": "TASK",
            "jhash": "0xF5CA2A45",
            "manualHash": true
        },
        "0x4CF5F55DAC3280A0": {
            "name": "TASK_COMBAT_HATED_TARGETS_IN_AREA",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nDespite its name, it only attacks ONE hated target. The one closest to the specified position.  \n```",
            "examples": [],
            "hash": "0x4CF5F55DAC3280A0",
            "ns": "TASK",
            "jhash": "0xDF099E18",
            "manualHash": true
        },
        "0xF166E48407BAC484": {
            "name": "TASK_COMBAT_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "targetPed", "type": "Ped" },
                { "name": "p2", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "```\nMakes the specified ped attack the target ped.  \np2 should be 0  \np3 should be 16  \n```",
            "examples": [],
            "hash": "0xF166E48407BAC484",
            "ns": "TASK",
            "jhash": "0xCB0D8932",
            "manualHash": true
        },
        "0x3EB1FE9E8E908E15": {
            "name": "TASK_COWER",
            "params": [
                { "name": "ped", "type": "Ped", "description": "Ped id." },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "Duration of the animation in ms. Set to -1 if you do not want a duration."
                }
            ],
            "results": "void",
            "description": "The ped will act like NPC's involved in a gunfight. The ped will squat down with their heads held in place and look around.",
            "examples": [],
            "hash": "0x3EB1FE9E8E908E15",
            "ns": "TASK",
            "jhash": "0x9CF1C19B",
            "manualHash": true
        },
        "0xC20E50AA46D09CA8": {
            "name": "TASK_ENTER_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "timeout", "type": "int" },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                },
                { "name": "speed", "type": "float" },
                { "name": "flag", "type": "int" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nspeed 1.0 = walk, 2.0 = run  \np5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle  \np6 is always 0  \n```",
            "examples": [],
            "hash": "0xC20E50AA46D09CA8",
            "ns": "TASK",
            "jhash": "0xB8689B4E",
            "manualHash": true
        },
        "0x2F8AF0E82773A171": {
            "name": "TASK_DRIVE_BY",
            "params": [
                { "name": "driverPed", "type": "Ped" },
                { "name": "targetPed", "type": "Ped" },
                { "name": "targetVehicle", "type": "Vehicle" },
                { "name": "targetX", "type": "float" },
                { "name": "targetY", "type": "float" },
                { "name": "targetZ", "type": "float" },
                { "name": "distanceToShoot", "type": "float" },
                { "name": "pedAccuracy", "type": "int" },
                { "name": "p8", "type": "BOOL" },
                { "name": "firingPattern", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nExample:\nTASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});\nNeeds working example. Doesn't seem to do anything.\nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.\nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.\nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.\n```",
            "examples": [],
            "hash": "0x2F8AF0E82773A171",
            "ns": "TASK",
            "jhash": "0x2B84D1C4",
            "manualHash": true
        },
        "0x1E7889778264843A": {
            "name": "TASK_EXTEND_ROUTE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "Adds a new point to the current point route; a maximum of 8 points can be added.\n\nCall [TASK_FLUSH_ROUTE](#\\_0x841142A1376E9006) before the first call to this. Call [TASK_FOLLOW_POINT_ROUTE](#\\_0x595583281858626E) to make the Ped go the route.",
            "examples": [],
            "hash": "0x1E7889778264843A",
            "ns": "TASK",
            "jhash": "0x43271F69",
            "manualHash": true
        },
        "0x79B258E397854D29": {
            "name": "TASK_EXIT_COVER",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x79B258E397854D29",
            "ns": "TASK",
            "jhash": "0xC829FAC9",
            "manualHash": true
        },
        "0x7F93691AB4B92272": {
            "name": "TASK_EVERYONE_LEAVE_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7F93691AB4B92272",
            "ns": "TASK",
            "jhash": "0xC1971F30",
            "manualHash": true
        },
        "0x595583281858626E": {
            "name": "TASK_FOLLOW_POINT_ROUTE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to give the task to."
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "The speed to move at in m/s."
                },
                {
                    "name": "unknown",
                    "type": "int",
                    "description": "Unknown. Can be 0, 1, 2 or 3."
                }
            ],
            "results": "void",
            "description": "```\nMulleKD19: Makes the ped go on the created point route.\nped: The ped to give the task to.\nspeed: The speed to move at in m/s.\nint: Unknown. Can be 0, 1, 2 or 3.\nExample:\nTASK_FLUSH_ROUTE();\nTASK_EXTEND_ROUTE(0f, 0f, 70f);\nTASK_EXTEND_ROUTE(10f, 0f, 70f);\nTASK_EXTEND_ROUTE(10f, 10f, 70f);\nTASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);\n```",
            "examples": [],
            "hash": "0x595583281858626E",
            "ns": "TASK",
            "jhash": "0xB837C816",
            "manualHash": true
        },
        "0x841142A1376E9006": {
            "name": "TASK_FLUSH_ROUTE",
            "params": [],
            "results": "void",
            "description": "Clears the current point route. Call this before [TASK_EXTEND_ROUTE](#\\_0x1E7889778264843A) and [TASK_FOLLOW_POINT_ROUTE](#\\_0x595583281858626E).",
            "examples": [],
            "hash": "0x841142A1376E9006",
            "ns": "TASK",
            "jhash": "0x34219154",
            "manualHash": true
        },
        "0x15D3A79D4E44B913": {
            "name": "TASK_FOLLOW_NAV_MESH_TO_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "timeout", "type": "int" },
                { "name": "stoppingRange", "type": "float" },
                { "name": "persistFollowing", "type": "BOOL" },
                { "name": "unk", "type": "float" }
            ],
            "results": "void",
            "description": "```\nIf no timeout, set timeout to -1.  \n```",
            "examples": [],
            "hash": "0x15D3A79D4E44B913",
            "ns": "TASK",
            "jhash": "0xFE4A10D9",
            "manualHash": true
        },
        "0x17F58B88D085DBAC": {
            "name": "TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "timeout", "type": "int" },
                { "name": "unkFloat", "type": "float" },
                { "name": "unkInt", "type": "int" },
                { "name": "unkX", "type": "float" },
                { "name": "unkY", "type": "float" },
                { "name": "unkZ", "type": "float" },
                { "name": "unk_40000f", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x17F58B88D085DBAC",
            "ns": "TASK",
            "jhash": "0x6BF6E296",
            "manualHash": true
        },
        "0x61E360B7E040D12E": {
            "name": "TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY",
            "params": [
                { "name": "entity1", "type": "Entity" },
                { "name": "entity2", "type": "Entity" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x61E360B7E040D12E",
            "ns": "TASK",
            "jhash": "0xD26CAC68",
            "manualHash": true
        },
        "0x0759591819534F7B": {
            "name": "TASK_FOLLOW_WAYPOINT_RECORDING",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0759591819534F7B",
            "ns": "TASK",
            "jhash": "0xADF9904D",
            "manualHash": true
        },
        "0x304AE42E357B8C7E": {
            "name": "TASK_FOLLOW_TO_OFFSET_OF_ENTITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "entity", "type": "Entity" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" },
                { "name": "movementSpeed", "type": "float" },
                { "name": "timeout", "type": "int" },
                { "name": "stoppingRange", "type": "float" },
                { "name": "persistFollowing", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np6 always -1  \np7 always 10.0  \np8 always 1  \n```",
            "examples": [],
            "hash": "0x304AE42E357B8C7E",
            "ns": "TASK",
            "jhash": "0x2DF5A6AC",
            "manualHash": true
        },
        "0x5BC448CB78FA3E88": {
            "name": "TASK_GO_TO_COORD_ANY_MEANS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "BOOL" },
                { "name": "walkingStyle", "type": "int" },
                { "name": "p8", "type": "float" }
            ],
            "results": "void",
            "description": "```\nexample from fm_mission_controller\nTASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);\n```",
            "examples": [],
            "hash": "0x5BC448CB78FA3E88",
            "ns": "TASK",
            "jhash": "0xF91DF93B",
            "manualHash": true
        },
        "0x4F056E1AFFEF17AB": {
            "name": "TASK_FORCE_MOTION_STATE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "state", "type": "Hash" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "See [`FORCE_PED_MOTION_STATE`](#\\_0xF28965D04F570DCA)",
            "examples": [],
            "hash": "0x4F056E1AFFEF17AB",
            "ns": "TASK",
            "jhash": "0xCAD2EF77",
            "manualHash": true
        },
        "0xD76B57B44F1E6F8B": {
            "name": "TASK_GO_STRAIGHT_TO_COORD",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z coordinate."
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "The ped movement speed."
                },
                {
                    "name": "timeout",
                    "type": "int",
                    "description": "\\-1 , other values appear to break the ped movement."
                },
                {
                    "name": "targetHeading",
                    "type": "float",
                    "description": "The heading you want the ped to be on x,y,z coord."
                },
                {
                    "name": "distanceToSlide",
                    "type": "float",
                    "description": "The distance from x,y,z where the ped will start sliding."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD76B57B44F1E6F8B",
            "ns": "TASK",
            "jhash": "0x80A9E7A7",
            "manualHash": true
        },
        "0x1DD45F9ECFDB1BC9": {
            "name": "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "BOOL" },
                { "name": "walkingStyle", "type": "int" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "Any" },
                { "name": "p11", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 13: Any p12\n```",
            "examples": [],
            "hash": "0x1DD45F9ECFDB1BC9",
            "ns": "TASK",
            "jhash": "0x094B75EF",
            "manualHash": true
        },
        "0xA55547801EB331FC": {
            "name": "TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD",
            "params": [
                { "name": "pedHandle", "type": "Ped" },
                { "name": "goToLocationX", "type": "float" },
                { "name": "goToLocationY", "type": "float" },
                { "name": "goToLocationZ", "type": "float" },
                { "name": "focusLocationX", "type": "float" },
                { "name": "focusLocationY", "type": "float" },
                { "name": "focusLocationZ", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "shootAtEnemies", "type": "BOOL" },
                { "name": "distanceToStopAt", "type": "float" },
                { "name": "noRoadsDistance", "type": "float" },
                { "name": "unkTrue", "type": "BOOL" },
                { "name": "unkFlag", "type": "int" },
                { "name": "aimingFlag", "type": "int" },
                { "name": "firingPattern", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nThe ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.\nIf the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.\nIf the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.\nThe ped will stop aiming when he is closer than distanceToStopAt to goToLocation.\nI still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.\nI think that unkFlag, like the driving styles, could be a flag that \"work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function\". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.\nNote: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.\nThe aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).\nExample:\nenum AimFlag\n{\n   AimAtFocusLocation,\n   AimAtGoToLocation\n};\nVector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.\nVector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.\nVector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground\n// 1st example\nTASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f /*run*/, true /*shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtGoToLocation, -957453492 /*FullAuto pattern*/);\n// 2nd example\nTASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f /*walk*/, false /*don't shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtFocusLocation, -957453492 /*FullAuto pattern*/);\n1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using \"FullAuto\" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.\n2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.\n```",
            "examples": [],
            "hash": "0xA55547801EB331FC",
            "ns": "TASK",
            "jhash": "0x3F91358E",
            "manualHash": true
        },
        "0x11315AB3385B8AC0": {
            "name": "TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD",
            "params": [
                { "name": "ped", "type": "Ped", "description": "Ped to task" },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Destination X position"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Destination Y position"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Destination Z position"
                },
                {
                    "name": "aimAtX",
                    "type": "float",
                    "description": "Aim at target x position"
                },
                {
                    "name": "aimAtY",
                    "type": "float",
                    "description": "Aim at target Y position"
                },
                {
                    "name": "aimAtZ",
                    "type": "float",
                    "description": "Aim at target Z position"
                },
                {
                    "name": "moveSpeed",
                    "type": "float",
                    "description": "mostly 2f, but also 1/1.2f, etc."
                },
                {
                    "name": "shoot",
                    "type": "BOOL",
                    "description": "If true ped will shoot; false - will not"
                },
                {
                    "name": "p9",
                    "type": "float",
                    "description": "Usually 2.0f"
                },
                {
                    "name": "p10",
                    "type": "float",
                    "description": "Usually 0.5f"
                },
                {
                    "name": "p11",
                    "type": "BOOL",
                    "description": "If true ped will stay still; false - will not"
                },
                {
                    "name": "flags",
                    "type": "Any",
                    "description": "0 / 512 / 513, etc"
                },
                { "name": "p13", "type": "BOOL" },
                {
                    "name": "firingPattern",
                    "type": "Hash",
                    "description": "${firing_pattern_full_auto}, 0xC6EE6B4C"
                }
            ],
            "results": "void",
            "description": "Will make the ped move to a coordinate while aiming (and optionally shooting) at given coordinates.",
            "examples": [],
            "hash": "0x11315AB3385B8AC0",
            "ns": "TASK",
            "jhash": "0x1552DC91",
            "manualHash": true
        },
        "0x04701832B739DCE5": {
            "name": "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "BOOL" },
                { "name": "p10", "type": "BOOL" },
                { "name": "p11", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x04701832B739DCE5",
            "ns": "TASK",
            "jhash": "0xD896CD82",
            "manualHash": true
        },
        "0x9C00E77AF14B2DFF": {
            "name": "TASK_GET_OFF_BOAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "boat", "type": "Vehicle" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9C00E77AF14B2DFF",
            "ns": "TASK",
            "aliases": ["_TASK_GET_OFF_BOAT"],
            "jhash": "0x4293601F",
            "manualHash": true
        },
        "0xE39B4FF4FDEBDE27": {
            "name": "TASK_GOTO_ENTITY_OFFSET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE39B4FF4FDEBDE27",
            "ns": "TASK",
            "jhash": "0x1A17A85E",
            "manualHash": true
        },
        "0x97465886D35210E9": {
            "name": "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "entityToWalkTo", "type": "Entity" },
                { "name": "entityToAimAt", "type": "Entity" },
                { "name": "speed", "type": "float" },
                { "name": "shootatEntity", "type": "BOOL" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "firingPattern", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nshootatEntity:  \nIf true, peds will shoot at Entity till it is dead.  \nIf false, peds will just walk till they reach the entity and will cease shooting.  \n```",
            "examples": [],
            "hash": "0x97465886D35210E9",
            "ns": "TASK",
            "jhash": "0x68E36B7A",
            "manualHash": true
        },
        "0xB8ECD61F531A7B02": {
            "name": "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "BOOL" },
                { "name": "walkingStyle", "type": "int" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "Any" },
                { "name": "p11", "type": "Any" },
                { "name": "p12", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 14: Any p13\n```",
            "examples": [],
            "hash": "0xB8ECD61F531A7B02",
            "ns": "TASK",
            "jhash": "0x86DC03F9",
            "manualHash": true
        },
        "0xB2A16444EAD9AE47": {
            "name": "TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "BOOL" },
                { "name": "p10", "type": "Any" },
                { "name": "p11", "type": "BOOL" },
                { "name": "p12", "type": "Any" },
                { "name": "p13", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB2A16444EAD9AE47",
            "ns": "TASK",
            "jhash": "0x9BD52ABD",
            "manualHash": true
        },
        "0x4A58A47A72E3FCB4": {
            "name": "TASK_GUARD_CURRENT_POSITION",
            "params": [
                { "name": "p0", "type": "Ped" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nFrom re_prisonvanbreak:\nTASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);\n```",
            "examples": [],
            "hash": "0x4A58A47A72E3FCB4",
            "ns": "TASK",
            "jhash": "0x2FB099E9",
            "manualHash": true
        },
        "0xD2A207EEBDF9889B": {
            "name": "TASK_GUARD_ASSIGNED_DEFENSIVE_AREA",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD2A207EEBDF9889B",
            "ns": "TASK",
            "jhash": "0x7AF0133D",
            "manualHash": true
        },
        "0x6A071245EB0D1882": {
            "name": "TASK_GO_TO_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "target", "type": "Entity" },
                { "name": "duration", "type": "int" },
                { "name": "distance", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "int" }
            ],
            "results": "void",
            "description": "```\nThe entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0\nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.\nExample: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)\nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).\n```",
            "examples": [],
            "hash": "0x6A071245EB0D1882",
            "ns": "TASK",
            "jhash": "0x374827C2",
            "manualHash": true
        },
        "0xA9DA48FAB8A76C12": {
            "name": "TASK_GOTO_ENTITY_AIMING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Entity" },
                { "name": "distanceToStopAt", "type": "float" },
                { "name": "StartAimingDist", "type": "float" }
            ],
            "results": "void",
            "description": "```\neg\n TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);\nped = Ped you want to perform this task.\ntarget = the Entity they should aim at.\ndistanceToStopAt = distance from the target, where the ped should stop to aim.\nStartAimingDist = distance where the ped should start to aim.\n```",
            "examples": [],
            "hash": "0xA9DA48FAB8A76C12",
            "ns": "TASK",
            "jhash": "0xF1C493CF",
            "manualHash": true
        },
        "0x338E7EF52B6095A9": {
            "name": "TASK_GOTO_ENTITY_OFFSET_XY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "entity", "type": "Entity" },
                { "name": "duration", "type": "int" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "moveBlendRatio", "type": "float" },
                { "name": "useNavmesh", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x338E7EF52B6095A9",
            "ns": "TASK",
            "jhash": "0xBC1E3D0A",
            "manualHash": true
        },
        "0xF2EAB31979A7F910": {
            "name": "TASK_HANDS_UP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "duration", "type": "int" },
                { "name": "facingPed", "type": "Ped" },
                { "name": "p3", "type": "int" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nIn the scripts, p3 was always -1.  \np3 seems to be duration or timeout of turn animation.  \nAlso facingPed can be 0 or -1 so ped will just raise hands up.  \n```",
            "examples": [],
            "hash": "0xF2EAB31979A7F910",
            "ns": "TASK",
            "jhash": "0x8DCC19C5",
            "manualHash": true
        },
        "0xC946FE14BE0EB5E2": {
            "name": "TASK_GUARD_SPHERE_DEFENSIVE_AREA",
            "params": [
                { "name": "p0", "type": "Ped" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "p10", "type": "float" }
            ],
            "results": "void",
            "description": "```\np0 - Guessing PedID  \np1, p2, p3 - XYZ?  \np4 - ???  \np5 - Maybe the size of sphere from XYZ?  \np6 - ???  \np7, p8, p9 - XYZ again?  \np10 - Maybe the size of sphere from second XYZ?  \n```",
            "examples": [],
            "hash": "0xC946FE14BE0EB5E2",
            "ns": "TASK",
            "jhash": "0x86B76CB7",
            "manualHash": true
        },
        "0xB385523325077210": {
            "name": "_TASK_HELI_ESCORT_HELI",
            "params": [
                { "name": "pilot", "type": "Ped" },
                { "name": "heli1", "type": "Vehicle" },
                { "name": "heli2", "type": "Vehicle" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xB385523325077210",
            "ns": "TASK",
            "manualHash": true
        },
        "0x504D54DF3F6F2247": {
            "name": "TASK_LEAVE_ANY_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\\_0xD3DBCE61A490BE02)",
            "examples": [],
            "hash": "0x504D54DF3F6F2247",
            "ns": "TASK",
            "jhash": "0xDBDD79FA",
            "manualHash": true
        },
        "0x0AE4086104E067B1": {
            "name": "TASK_JUMP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "unused", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nDefinition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).  \nv350: Ped ped, bool unused  \nv678: Ped ped, bool unused, bool flag1, bool flag2  \nflag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\nNativeDB Added Parameter 4: Any p3\n```",
            "examples": [],
            "hash": "0x0AE4086104E067B1",
            "ns": "TASK",
            "jhash": "0x0356E3CE",
            "manualHash": true
        },
        "0x6FA46612594F7973": {
            "name": "TASK_LOOK_AT_COORD",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                {
                    "name": "duration",
                    "type": "int",
                    "annotations": { "cs_type": "float" }
                },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6FA46612594F7973",
            "ns": "TASK",
            "jhash": "0x7B784DD8",
            "manualHash": true
        },
        "0xAC83B1DB38D0ADA0": {
            "name": "TASK_HELI_CHASE",
            "params": [
                { "name": "pilot", "type": "Ped" },
                { "name": "entityToFollow", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nPed pilot should be in a heli.  \nEntityToFollow can be a vehicle or Ped.  \nx,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)  \nNOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.  \n```",
            "examples": [],
            "hash": "0xAC83B1DB38D0ADA0",
            "ns": "TASK",
            "jhash": "0xAC290A21",
            "manualHash": true
        },
        "0x69F4BE8C8CC4796C": {
            "name": "TASK_LOOK_AT_ENTITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "lookAt", "type": "Entity" },
                { "name": "duration", "type": "int" },
                { "name": "unknown1", "type": "int" },
                { "name": "unknown2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nparam3: duration in ms, use -1 to look forever  \nparam4: using 2048 is fine  \nparam5: using 3 is fine  \n```",
            "examples": [],
            "hash": "0x69F4BE8C8CC4796C",
            "ns": "TASK",
            "jhash": "0x991D6619",
            "manualHash": true
        },
        "0x2D537BA194896636": {
            "name": "TASK_MOVE_NETWORK_BY_NAME",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "task", "type": "char*" },
                { "name": "multiplier", "type": "float" },
                { "name": "p3", "type": "BOOL" },
                { "name": "animDict", "type": "char*" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nExample:\nTASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), \"arm_wrestling_sweep_paired_a_rev3\", 0.0f, true, \"mini@arm_wrestling\", 0);\n```",
            "examples": [],
            "hash": "0x2D537BA194896636",
            "ns": "TASK",
            "aliases": ["0x2D537BA194896636", "_TASK_MOVE_NETWORK"],
            "jhash": "0x6F5D215F",
            "manualHash": true
        },
        "0xDAD029E187A2BEB4": {
            "name": "TASK_HELI_MISSION",
            "params": [
                { "name": "pilot", "type": "Ped" },
                { "name": "aircraft", "type": "Vehicle" },
                { "name": "targetVehicle", "type": "Vehicle" },
                { "name": "targetPed", "type": "Ped" },
                { "name": "destinationX", "type": "float" },
                { "name": "destinationY", "type": "float" },
                { "name": "destinationZ", "type": "float" },
                { "name": "missionFlag", "type": "int" },
                { "name": "maxSpeed", "type": "float" },
                { "name": "landingRadius", "type": "float" },
                { "name": "targetHeading", "type": "float" },
                { "name": "unk1", "type": "int" },
                { "name": "unk2", "type": "int" },
                {
                    "name": "unk3",
                    "type": "float",
                    "annotations": { "cs_type": "Hash" }
                },
                { "name": "landingFlags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNeeds more research.\nDefault value of p13 is -1.0 or 0xBF800000.\nDefault value of p14 is 0.\nModified examples from \"fm_mission_controller.ysc\", line ~203551:\nTASK::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 10, 10, 5.0, 0);\nTASK::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 0, ?, 5.0, 4096);\nint mode seams to set mission type 4 = coords target, 23 = ped target.\nint 14 set to 32 = ped will land at destination.\nMy findings:\nmode 4 or 7 forces heli to snap to the heading set\n8 makes the heli flee from the ped.\n9 circles around ped with angle set\n10, 11 normal + imitate ped heading\n20 makes the heli land when he's near the ped. It won't resume chasing.\n21 emulates an helicopter crash\n23 makes the heli circle erratically around ped\nI change p2 to 'vehicleToFollow' as it seems to work like the task natives to set targets. In the heli_taxi script where as the merryweather heli takes you to your waypoint it has no need to follow a vehicle or a ped, so of course both have 0 set.\n```",
            "examples": [],
            "hash": "0xDAD029E187A2BEB4",
            "ns": "TASK",
            "jhash": "0x0C143E97",
            "manualHash": true
        },
        "0x3D45B0B355C5E0C9": {
            "name": "_TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" },
                { "name": "data", "type": "Any*" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "animDict", "type": "char*" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nUsed only once in the scripts (am_mp_nightclub)\n```\n\n```\nUsed only once in the scripts (am_mp_nightclub)\n\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x3D45B0B355C5E0C9",
            "ns": "TASK",
            "aliases": ["_TASK_MOVE_NETWORK_SCRIPTED"],
            "manualHash": true
        },
        "0xD5B35BEA41919ACB": {
            "name": "TASK_MOVE_NETWORK_ADVANCED_BY_NAME",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "float" },
                { "name": "p10", "type": "BOOL" },
                { "name": "animDict", "type": "char*" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nExample:\nTASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), \"minigame_tattoo_michael_parts\", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);\n```",
            "examples": [],
            "hash": "0xD5B35BEA41919ACB",
            "ns": "TASK",
            "aliases": ["0xD5B35BEA41919ACB", "_TASK_MOVE_NETWORK_ADVANCED"],
            "jhash": "0x71A5C5DB",
            "manualHash": true
        },
        "0xD2F1C53C97EE81AB": {
            "name": "TASK_PARACHUTE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis function has a third parameter as well (bool).  \nSecond parameter is unused.  \nseconds parameter was for jetpack in the early stages of gta and the hard coded code is now removed  \n```\n\n```\nNativeDB Added Parameter 3: BOOL p2\n```",
            "examples": [],
            "hash": "0xD2F1C53C97EE81AB",
            "ns": "TASK",
            "jhash": "0xEC3060A2",
            "manualHash": true
        },
        "0xD3DBCE61A490BE02": {
            "name": "TASK_LEAVE_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "flags", "type": "int" }
            ],
            "results": "void",
            "description": "```\nFlags from decompiled scripts:  \n0 = normal exit and closes door.  \n1 = normal exit and closes door.  \n16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)\n64 = normal exit and closes door, maybe a bit slower animation than 0.  \n256 = normal exit but does not close the door.  \n4160 = ped is throwing himself out, even when the vehicle is still.  \n262144 = ped moves to passenger seat first, then exits normally  \nOthers to be tried out: 320, 512, 131072.  \n```",
            "examples": [],
            "hash": "0xD3DBCE61A490BE02",
            "ns": "TASK",
            "jhash": "0x7B1141C6",
            "manualHash": true
        },
        "0x965791A9A488A062": {
            "name": "TASK_OPEN_VEHICLE_DOOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to do the task"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle whose doors the ped shoud open"
                },
                {
                    "name": "timeOut",
                    "type": "int",
                    "description": "Sets a timeout to the task; doesn't work for 0"
                },
                {
                    "name": "seat",
                    "type": "int",
                    "description": "The seat index - the ped will attempt to open doors to get to the specified seat"
                },
                { "name": "speed", "type": "float" }
            ],
            "results": "void",
            "description": "The given ped will try to open the nearest door to 'seat'.\n\nExample: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.",
            "examples": [],
            "hash": "0x965791A9A488A062",
            "ns": "TASK",
            "jhash": "0x8EE06BF4",
            "manualHash": true
        },
        "0xB33E291AFA6BD03A": {
            "name": "TASK_PARACHUTE_TO_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nmakes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED  \n```",
            "examples": [],
            "hash": "0xB33E291AFA6BD03A",
            "ns": "TASK",
            "jhash": "0xE0104D6C",
            "manualHash": true
        },
        "0xD04FE6765D990A06": {
            "name": "TASK_PED_SLIDE_TO_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "duration", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD04FE6765D990A06",
            "ns": "TASK",
            "jhash": "0x225380EF",
            "manualHash": true
        },
        "0xBDA5DF49D080FE4E": {
            "name": "TASK_PATROL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "char*" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAfter looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:\n\"miss_Tower_01\" (this went from 01 - 10)\n\"miss_Ass0\" (0, 4, 6, 3)\n\"MISS_PATROL_8\"\nI think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.\nAs far as I can see the patrol routes names such as \"miss_Ass0\" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.\nFrom the scripts\n    TASK::OPEN_PATROL_ROUTE(\"miss_Ass0\");\n    TASK::ADD_PATROL_ROUTE_NODE(0, \"WORLD_HUMAN_GUARD_STAND\", l_738[0/*3*/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));\n    TASK::ADD_PATROL_ROUTE_NODE(1, \"WORLD_HUMAN_GUARD_STAND\", l_738[1/*3*/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));\n    TASK::ADD_PATROL_ROUTE_NODE(2, \"WORLD_HUMAN_GUARD_STAND\", l_738[2/*3*/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));\n    TASK::ADD_PATROL_ROUTE_LINK(0, 1);\n    TASK::ADD_PATROL_ROUTE_LINK(1, 2);\n    TASK::ADD_PATROL_ROUTE_LINK(2, 0);\n    TASK::CLOSE_PATROL_ROUTE();\n    TASK::CREATE_PATROL_ROUTE();\n```",
            "examples": [],
            "hash": "0xBDA5DF49D080FE4E",
            "ns": "TASK",
            "jhash": "0xB92E5AF6",
            "manualHash": true
        },
        "0x5A4A6A6D3DC64F52": {
            "name": "TASK_PED_SLIDE_TO_COORD_HDG_RATE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5A4A6A6D3DC64F52",
            "ns": "TASK",
            "jhash": "0x38A995C1",
            "manualHash": true
        },
        "0xE73A266DB0CA9042": {
            "name": "TASK_PAUSE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to pause. Set to this 0 when using task sequences."
                },
                {
                    "name": "ms",
                    "type": "int",
                    "description": "The amount of miliseconds to wait."
                }
            ],
            "results": "void",
            "description": "This tasks the ped to do nothing for the specified amount of miliseconds.\nThis is useful if you want to add a delay between tasks when using a sequence task.",
            "examples": [],
            "hash": "0xE73A266DB0CA9042",
            "ns": "TASK",
            "jhash": "0x17A64668",
            "manualHash": true
        },
        "0x5ABA3986D90D8A3B": {
            "name": "TASK_PERFORM_SEQUENCE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "taskSequenceId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5ABA3986D90D8A3B",
            "ns": "TASK",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x4D9FBD11",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x89221B16730234F0": {
            "name": "TASK_PERFORM_SEQUENCE_FROM_PROGRESS",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x89221B16730234F0",
            "ns": "TASK",
            "jhash": "0xFA60601B",
            "manualHash": true
        },
        "0xF7F9DCCA89E7505B": {
            "name": "_TASK_PLANE_GOTO_PRECISE_VTOL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xF7F9DCCA89E7505B",
            "ns": "TASK",
            "manualHash": true
        },
        "0x2D2386F273FF7A25": {
            "name": "TASK_PLANE_CHASE",
            "params": [
                { "name": "pilot", "type": "Ped" },
                { "name": "entityToFollow", "type": "Entity" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2D2386F273FF7A25",
            "ns": "TASK",
            "jhash": "0x12FA1C28",
            "manualHash": true
        },
        "0x8C33220C8D78CA0D": {
            "name": "_TASK_PERFORM_SEQUENCE_LOCALLY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "taskSequenceId", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8C33220C8D78CA0D",
            "ns": "TASK",
            "aliases": ["0x8C33220C8D78CA0D"],
            "manualHash": true
        },
        "0x23703CD154E83B88": {
            "name": "TASK_PLANE_MISSION",
            "params": [
                { "name": "pilot", "type": "Ped" },
                { "name": "aircraft", "type": "Vehicle" },
                { "name": "targetVehicle", "type": "Vehicle" },
                { "name": "targetPed", "type": "Ped" },
                { "name": "destinationX", "type": "float" },
                { "name": "destinationY", "type": "float" },
                { "name": "destinationZ", "type": "float" },
                { "name": "missionFlag", "type": "int" },
                { "name": "angularDrag", "type": "float" },
                { "name": "unk", "type": "float" },
                { "name": "targetHeading", "type": "float" },
                { "name": "maxZ", "type": "float" },
                { "name": "minZ", "type": "float" }
            ],
            "results": "void",
            "description": "```\nEDITED (7/13/2017)  \nNOTE: If you want air combat, AI::TASK_COMBAT_PED (while your pilot is in an aircraft) also does the same thing as this native.  \nDESCRIPTION:  \nEver wish your buddy could shoot down one of your enemies for you? Ever wanted an auto-pilot? Well look no further! This is the native for you! (Ped intelligence may vary)  \nUSAGE:  \n-- REQUIRED --  \n• pilot = The ped flying the aircraft.  \n• aircraft = The aircraft the pilot is flying  \n-- OPTIONAL -- [atleast 1 must be assigned]  \n• targetVehicle = The vehicle the pilot will target.  \n• targetPed = The ped the pilot will target.  \n• destinationX, destinationY, destinationZ = The location the pilot will target.  \n-- LOGIC --  \n• missionFlag = The type of mission. pastebin.com/R8x73dbv  \n• angularDrag = The higher the value, the slower the plane will rotate. Value ranges from 0 - Infinity.  \n• unk = Set to 0, and you'll be fine.  \n• targetHeading = The target angle (from world space north) that the pilot will try to acheive before executing an attack/landing.  \n• maxZ = Maximum Z coordinate height for flying.  \n• minZ = Minimum Z coordinate height for flying.  \nZ: 2,700 is the default max height a pilot will be able to fly. Anything greater and he will fly downward until reaching 2,700 again.  \nMission Types (incase you don't like links..):  \n0 = None  \n1 = Unk  \n2 = CTaskVehicleRam  \n3 = CTaskVehicleBlock  \n4 = CTaskVehicleGoToPlane  \n5 = CTaskVehicleStop  \n6 = CTaskVehicleAttack  \n7 = CTaskVehicleFollow  \n8 = CTaskVehicleFleeAirborne  \n9 = CTaskVehicleCircle  \n10 = CTaskVehicleEscort  \n15 = CTaskVehicleFollowRecording  \n16 = CTaskVehiclePoliceBehaviour  \n17 = CTaskVehicleCrash  \nExample C#:  \nFunction.Call(Hash.TASK_PLANE_MISSION, pilot, vehicle, 0, Game.Player.Character, 0, 0, 0, 6, 0f, 0f, 0f, 2500.0f, -1500f);  \nExample C++  \nAI::TASK_PLANE_MISSION(pilot, vehicle, 0, PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_INDEX()), 0, 0, 0, 6, 0.0, 0.0, 0.0, 2500.0, -1500.0);  \n[DEPRECATED] EXAMPLE USAGE:  \npastebin.com/gx7Finsk  \n```\n\n```\nNativeDB Added Parameter 14: Any p13\n```",
            "examples": [],
            "hash": "0x23703CD154E83B88",
            "ns": "TASK",
            "jhash": "0x1D007E65",
            "manualHash": true
        },
        "0xBF19721FA34D32C0": {
            "name": "TASK_PLANE_LAND",
            "params": [
                { "name": "pilot", "type": "Ped" },
                { "name": "plane", "type": "Vehicle" },
                { "name": "runwayStartX", "type": "float" },
                { "name": "runwayStartY", "type": "float" },
                { "name": "runwayStartZ", "type": "float" },
                { "name": "runwayEndX", "type": "float" },
                { "name": "runwayEndY", "type": "float" },
                { "name": "runwayEndZ", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF19721FA34D32C0",
            "ns": "TASK",
            "jhash": "0x5F7E23EA",
            "manualHash": true
        },
        "0x965FEC691D55E9BF": {
            "name": "TASK_PLANT_BOMB",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x965FEC691D55E9BF",
            "ns": "TASK",
            "jhash": "0x33457535",
            "manualHash": true
        },
        "0xEA47FE3719165B94": {
            "name": "TASK_PLAY_ANIM",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animDictionary", "type": "char*" },
                { "name": "animationName", "type": "char*" },
                { "name": "blendInSpeed", "type": "float" },
                { "name": "blendOutSpeed", "type": "float" },
                { "name": "duration", "type": "int" },
                { "name": "flag", "type": "int" },
                { "name": "playbackRate", "type": "float" },
                { "name": "lockX", "type": "BOOL" },
                { "name": "lockY", "type": "BOOL" },
                { "name": "lockZ", "type": "BOOL" }
            ],
            "results": "void",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)\n\n```\nfloat blendInSpeed > normal speed is 8.0f\n----------------------  \nfloat blendOutSpeed > normal speed is 8.0f\n----------------------  \nint duration: time in millisecond  \n----------------------  \n-1 _ _ _ _ _ _ _> Default (see flag)  \n0 _ _ _ _ _ _ _ > Not play at all  \nSmall value _ _ > Slow down animation speed  \nOther _ _ _ _ _ > freeze player control until specific time (ms) has   \n_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be   \n_ _ _ _ _ _ _ _ _ controllable.)  \nint flag:  \n----------------------  \nenum eAnimationFlags  \n{  \n ANIM_FLAG_NORMAL = 0,  \n   ANIM_FLAG_REPEAT = 1,  \n   ANIM_FLAG_STOP_LAST_FRAME = 2,  \n   ANIM_FLAG_UPPERBODY = 16,  \n   ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,  \n   ANIM_FLAG_CANCELABLE = 120,  \n};  \nOdd number : loop infinitely  \nEven number : Freeze at last frame  \nMultiple of 4: Freeze at last frame but controllable  \n01 to 15 > Full body  \n10 to 31 > Upper body  \n32 to 47 > Full body > Controllable  \n48 to 63 > Upper body > Controllable  \n...  \n001 to 255 > Normal  \n256 to 511 > Garbled  \n...  \nplaybackRate:  \nvalues are between 0.0 and 1.0  \nlockX:    \n0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3  \n> 1 for mini@sprunk  \nlockY:  \n0 in most cases   \n1 for missfam5_yoga, missfra1mcs_2_crew_react  \nlockZ:   \n    0 for single player   \n    Can be 1 but only for MP  \n```",
            "examples": [],
            "hash": "0xEA47FE3719165B94",
            "ns": "TASK",
            "jhash": "0x5AB552C6",
            "manualHash": true
        },
        "0x83CDB10EA29B370B": {
            "name": "TASK_PLAY_ANIM_ADVANCED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "animDict",
                    "type": "char*",
                    "description": "Name of the animation dictionary"
                },
                {
                    "name": "animName",
                    "type": "char*",
                    "description": "Name of the animation"
                },
                {
                    "name": "posX",
                    "type": "float",
                    "description": "Initial X position of the task"
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "Initial Y position of the task"
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "Initial Z position of the task"
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "Initial X rotation of the task, doesn't seem to have any effect"
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "Initial Y rotation of the task, doesn't seem to have any effect"
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "Initial Z rotation of the task"
                },
                {
                    "name": "animEnterSpeed",
                    "type": "float",
                    "description": "Adjust character speed to fully enter animation"
                },
                {
                    "name": "animExitSpeed",
                    "type": "float",
                    "description": "Adjust character speed to fully exit animation (useless `ClearPedTasksImmediately()` is called)"
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "Time in milliseconds"
                },
                { "name": "flag", "type": "Any" },
                {
                    "name": "animTime",
                    "type": "float",
                    "description": "Value between 0.0 and 1.0, lets you start an animation from the given point"
                },
                { "name": "p14", "type": "Any" },
                { "name": "p15", "type": "Any" }
            ],
            "results": "void",
            "description": "It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).\n\n[Animations list](https://alexguirre.github.io/animations-list/)",
            "examples": [],
            "hash": "0x83CDB10EA29B370B",
            "ns": "TASK",
            "jhash": "0x3DDEB0E6",
            "manualHash": true
        },
        "0x8FBB6758B3B3E9EC": {
            "name": "TASK_PLAY_PHONE_GESTURE_ANIMATION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animDict", "type": "char*" },
                { "name": "animation", "type": "char*" },
                { "name": "boneMaskType", "type": "char*" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nExample from the scripts:\nTASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);\n=========================================================\n^^ No offense, but Idk how that would really help anyone.\nAs for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.\nKnown boneMaskTypes'\n\"BONEMASK_HEADONLY\"\n\"BONEMASK_HEAD_NECK_AND_ARMS\"\n\"BONEMASK_HEAD_NECK_AND_L_ARM\"\n\"BONEMASK_HEAD_NECK_AND_R_ARM\"\np4 known args - 0.0f, 0.5f, 0.25f\np5 known args - 0.0f, 0.25f\np6 known args - 1 if a global if check is passed.\np7 known args - 1 if a global if check is passed.\nThe values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).\n=========================================================\n```",
            "examples": [],
            "hash": "0x8FBB6758B3B3E9EC",
            "ns": "TASK",
            "jhash": "0x1582162C",
            "manualHash": true
        },
        "0x4172393E6BE1FECE": {
            "name": "TASK_PUT_PED_DIRECTLY_INTO_COVER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "timeout", "type": "Any" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "BOOL" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "Any" },
                { "name": "p10", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4172393E6BE1FECE",
            "ns": "TASK",
            "jhash": "0xC9F00E68",
            "manualHash": true
        },
        "0x92C360B5F15D2302": {
            "name": "_TASK_PLANE_TAXI",
            "params": [
                { "name": "pilot", "type": "Ped" },
                { "name": "aircraft", "type": "Vehicle" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x92C360B5F15D2302",
            "ns": "TASK",
            "aliases": ["0x92C360B5F15D2302"],
            "manualHash": true
        },
        "0xEAF66ACDDC794793": {
            "name": "_TASK_RAPPEL_DOWN_WALL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped to perform the task"
                },
                {
                    "name": "x1",
                    "type": "float",
                    "description": "X coord to start the task"
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "Y coord to start the task"
                },
                {
                    "name": "z1",
                    "type": "float",
                    "description": "Z coord to start the task"
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "Second X coord, uses the same position as above in the scripts"
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Second Y coord"
                },
                {
                    "name": "z2",
                    "type": "float",
                    "description": "Second Z coord"
                },
                {
                    "name": "minZ",
                    "type": "float",
                    "description": "Minimum Z that the player can descend to"
                },
                {
                    "name": "ropeId",
                    "type": "int",
                    "description": "Rope to attach this task to, must be created with [ADD_ROPE](#\\_0xE832D760399EB220)"
                },
                {
                    "name": "clipset",
                    "type": "char*",
                    "description": "Clipset to use for the task"
                },
                {
                    "name": "p10",
                    "type": "Any",
                    "description": "Usually 1 in the scripts"
                }
            ],
            "results": "void",
            "description": "Attaches a ped to a rope and allows player control to rappel down a wall.\nDisables all collisions while on the rope.\n\nNativeDB Introduced: v1868",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local coords = vector3(258.68, -3311.5, 45.72)\nRopeLoadTextures()\nSetEntityCoords(PlayerPedId(), coords - vector3(0, 0, 10.0))\nlocal ropeId = AddRope(coords, -90.0, 90.0, -90.0, 78.0, 7, 78.0, 78.0, 1.2, false, false, true, 10.0, false, 0)\nTaskRappelDownWall(PlayerPedId(), coords, coords, -130.0, ropeId, \"clipset@anim_heist@hs3f@ig1_rappel@male\", 1)\nN_0xa1ae736541b0fca3(ropeId, true)\nPinRopeVertex(ropeId, (GetRopeVertexCount(ropeId) - 1), coords + vector3(0, 0, 1.0))\nRopeSetUpdateOrder(ropeId, 0)"
                }
            ],
            "hash": "0xEAF66ACDDC794793",
            "ns": "TASK",
            "aliases": ["0xEAF66ACDDC794793"],
            "manualHash": true
        },
        "0x09693B0312F91649": {
            "name": "TASK_RAPPEL_FROM_HELI",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "unused",
                    "type": "float",
                    "annotations": { "cs_type": "int" }
                }
            ],
            "results": "void",
            "description": "```\nOnly appears twice in the scripts.\nTASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 0x41200000);\nTASK::TASK_RAPPEL_FROM_HELI(a_0, 0x41200000);\n```",
            "examples": [],
            "hash": "0x09693B0312F91649",
            "ns": "TASK",
            "jhash": "0x2C7ADB93",
            "manualHash": true
        },
        "0x72C896464915D1B1": {
            "name": "TASK_REACT_AND_FLEE_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "fleeTarget", "type": "Ped" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x72C896464915D1B1",
            "ns": "TASK",
            "jhash": "0x8A632BD8",
            "manualHash": true
        },
        "0x1C6CD14A876FFE39": {
            "name": "TASK_PUT_PED_DIRECTLY_INTO_MELEE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "meleeTarget", "type": "Ped" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nfrom armenian3.c4\nTASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);\n```",
            "examples": [],
            "hash": "0x1C6CD14A876FFE39",
            "ns": "TASK",
            "jhash": "0x79E1D27D",
            "manualHash": true
        },
        "0x126EF75F1E17ABE5": {
            "name": "TASK_SCRIPTED_ANIMATION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" }
            ],
            "results": "void",
            "description": "```\nFrom fm_mission_controller.c:  \nreserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);  \n\tvVar28 = {0.094f, 0.02f, -0.005f};  \n\tvVar29 = {-92.24f, 63.64f, 150.24f};  \n\tfunc_253(&uVar30, joaat(\"prop_ld_case_01\"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);  \n\tset_entity_lod_dist(net_to_ent(uVar30), 500);  \n\tattach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);  \n\tVar31.imm_4 = 1065353216;  \n\tVar31.imm_5 = 1065353216;  \n\tVar31.imm_9 = 1065353216;  \n\tVar31.imm_10 = 1065353216;  \n\tVar31.imm_14 = 1065353216;  \n\tVar31.imm_15 = 1065353216;  \n\tVar31.imm_17 = 1040187392;  \n\tVar31.imm_18 = 1040187392;  \n\tVar31.imm_19 = -1;  \n\tVar32.imm_4 = 1065353216;  \n\tVar32.imm_5 = 1065353216;  \n\tVar32.imm_9 = 1065353216;  \n\tVar32.imm_10 = 1065353216;  \n\tVar32.imm_14 = 1065353216;  \n\tVar32.imm_15 = 1065353216;  \n\tVar32.imm_17 = 1040187392;  \n\tVar32.imm_18 = 1040187392;  \n\tVar32.imm_19 = -1;  \n\tVar31 = 1;  \n\tVar31.imm_1 = \"weapons@misc@jerrycan@mp_male\";  \n\tVar31.imm_2 = \"idle\";  \n\tVar31.imm_20 = 1048633;  \n\tVar31.imm_4 = 0.5f;  \n\tVar31.imm_16 = get_hash_key(\"BONEMASK_ARMONLY_R\");  \n\ttask_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);  \n\tset_model_as_no_longer_needed(joaat(\"prop_ld_case_01\"));  \n\tremove_anim_dict(\"anim@heists@biolab@\");  \n```",
            "examples": [],
            "hash": "0x126EF75F1E17ABE5",
            "ns": "TASK",
            "jhash": "0xFC2DCF47",
            "manualHash": true
        },
        "0x75AC2B60386D89F2": {
            "name": "TASK_SEEK_COVER_FROM_POS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "duration", "type": "int" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x75AC2B60386D89F2",
            "ns": "TASK",
            "jhash": "0x83F18EE9",
            "manualHash": true
        },
        "0x39246A6958EF072C": {
            "name": "TASK_SEEK_COVER_TO_COORDS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nfrom michael2:\nTASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);\nappears to be shorter variation\nfrom michael3:\nTASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);\n```",
            "examples": [],
            "hash": "0x39246A6958EF072C",
            "ns": "TASK",
            "jhash": "0xFFFE754E",
            "manualHash": true
        },
        "0x62D2916F56B9CD2D": {
            "name": "TASK_RELOAD_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "unused", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThe 2nd param (unused) is not implemented.\n-----------------------------------------------------------------------\nThe only occurrence I found in a R* script (\"assassin_construction.ysc.c4\"):\n            if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {\n                TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);\n            }\n```",
            "examples": [],
            "hash": "0x62D2916F56B9CD2D",
            "ns": "TASK",
            "jhash": "0xCA6E91FD",
            "manualHash": true
        },
        "0xEB8517DDA73720DA": {
            "name": "TASK_SET_DECISION_MAKER",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\np1 is always GET_HASH_KEY(\"empty\") in scripts, for the rare times this is used  \n```",
            "examples": [],
            "hash": "0xEB8517DDA73720DA",
            "ns": "TASK",
            "jhash": "0x830AD50C",
            "manualHash": true
        },
        "0xD43D95C7A869447F": {
            "name": "TASK_SEEK_COVER_TO_COVER_POINT",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD43D95C7A869447F",
            "ns": "TASK",
            "jhash": "0x3D026B29",
            "manualHash": true
        },
        "0x84D32B3BEC531324": {
            "name": "TASK_SEEK_COVER_FROM_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" },
                { "name": "duration", "type": "int" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x84D32B3BEC531324",
            "ns": "TASK",
            "jhash": "0xC1EC907E",
            "manualHash": true
        },
        "0x46A6CC01E0826106": {
            "name": "TASK_SHOOT_AT_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "duration", "type": "int" },
                { "name": "firingPattern", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```",
            "examples": [],
            "hash": "0x46A6CC01E0826106",
            "ns": "TASK",
            "jhash": "0x601C22E3",
            "manualHash": true
        },
        "0x933C06518B52A9A4": {
            "name": "TASK_SET_SPHERE_DEFENSIVE_AREA",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x933C06518B52A9A4",
            "ns": "TASK",
            "jhash": "0x9F3C5D6A",
            "manualHash": true
        },
        "0x90D2156198831D69": {
            "name": "TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nI cant believe I have to define this, this is one of the best natives.  \nIt makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.  \nSince it is a task, every time the native is called the ped will stop for a moment.  \n```",
            "examples": [],
            "hash": "0x90D2156198831D69",
            "ns": "TASK",
            "jhash": "0x1B54FB6B",
            "manualHash": true
        },
        "0x08DA95E8298AE772": {
            "name": "TASK_SHOOT_AT_ENTITY",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "target", "type": "Entity" },
                { "name": "duration", "type": "int" },
                { "name": "firingPattern", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\n//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds\nEntity aimedentity;\nPlayer player = PLAYER::PLAYER_ID();\nPLAYER::_GET_AIMED_ENTITY(player, &aimedentity);\n//bg is an array of peds\nTASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));\nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```",
            "examples": [],
            "hash": "0x08DA95E8298AE772",
            "ns": "TASK",
            "jhash": "0xAC0631C9",
            "manualHash": true
        },
        "0x7AA80209BDA643EB": {
            "name": "TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "void",
            "description": "```\nMakes the specified ped shuffle to the next vehicle seat.  \nThe ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0x7AA80209BDA643EB",
            "ns": "TASK",
            "jhash": "0xBEAF8F67",
            "manualHash": true
        },
        "0x452419CBD838065B": {
            "name": "TASK_SHOCKING_EVENT_REACT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "eventHandle", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x452419CBD838065B",
            "ns": "TASK",
            "jhash": "0x9BD00ACF",
            "manualHash": true
        },
        "0xAE032F8BBA959E90": {
            "name": "TASK_STAND_GUARD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "scenarioName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nscenarioName example: \"WORLD_HUMAN_GUARD_STAND\"  \n```",
            "examples": [],
            "hash": "0xAE032F8BBA959E90",
            "ns": "TASK",
            "jhash": "0xD130F636",
            "manualHash": true
        },
        "0x601736CFE536B0A0": {
            "name": "TASK_SKY_DIVE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: BOOL p1\n```",
            "examples": [],
            "hash": "0x601736CFE536B0A0",
            "ns": "TASK",
            "jhash": "0xD3874AFA",
            "manualHash": true
        },
        "0x94587F17E9C365D5": {
            "name": "TASK_SMART_FLEE_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "distance", "type": "float" },
                { "name": "time", "type": "int" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMakes the specified ped flee the specified distance from the specified position.  \n```",
            "examples": [],
            "hash": "0x94587F17E9C365D5",
            "ns": "TASK",
            "jhash": "0xB2E686FC",
            "manualHash": true
        },
        "0x22B0D0E37CCB840D": {
            "name": "TASK_SMART_FLEE_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "fleeTarget", "type": "Ped" },
                { "name": "distance", "type": "float" },
                { "name": "fleeTime", "type": "Any" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMakes a ped run away from another ped (fleeTarget).  \ndistance = ped will flee this distance.  \nfleeTime = ped will flee for this amount of time, set to \"-1\" to flee forever  \n```",
            "examples": [],
            "hash": "0x22B0D0E37CCB840D",
            "ns": "TASK",
            "jhash": "0xE52EB560",
            "manualHash": true
        },
        "0xAA5DC05579D60BD9": {
            "name": "TASK_STEALTH_KILL",
            "params": [
                { "name": "killer", "type": "Ped" },
                { "name": "target", "type": "Ped" },
                { "name": "actionType", "type": "Hash" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nStealth kill action name hashes:  \nstealth kills can be found here: Grand Theft Auto V\\common.rpf\\data\\action\\stealth_kills.meta  \n...  \n{  \n    \"ACT_stealth_kill_a\",  \n    \"ACT_stealth_kill_weapon\",  \n    \"ACT_stealth_kill_b\",  \n    \"ACT_stealth_kill_c\",  \n    \"ACT_stealth_kill_d\",  \n    \"ACT_stealth_kill_a_gardener\"  \n}  \nOnly known script using this native: fbi4_prep2  \nEXAMPLE:  \nai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key(\"AR_stealth_kill_a\"), 1f, 0);ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key(\"AR_stealth_kill_knife\"), 1f, 0);  \nAlso it may be important to note, that each time this task is called, it's followed by AI::CLEAR_PED_TASKS on the target  \n```",
            "examples": [],
            "hash": "0xAA5DC05579D60BD9",
            "ns": "TASK",
            "jhash": "0x0D64C2FA",
            "manualHash": true
        },
        "0x919BE13EED931959": {
            "name": "TASK_STAND_STILL",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "time", "type": "int" }
            ],
            "results": "void",
            "description": "```\nMakes the specified ped stand still for (time) milliseconds.  \n```",
            "examples": [],
            "hash": "0x919BE13EED931959",
            "ns": "TASK",
            "jhash": "0x6F80965D",
            "manualHash": true
        },
        "0xC22B40579A498CA4": {
            "name": "_TASK_SUBMARINE_GOTO_AND_STOP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "submarine", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.\np0 is always 0, p5 is always 1\np1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.\nSpeed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xC22B40579A498CA4",
            "ns": "TASK",
            "manualHash": true
        },
        "0xE5DA8615A6180789": {
            "name": "TASK_STAY_IN_COVER",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nMakes the ped run to take cover  \n```",
            "examples": [],
            "hash": "0xE5DA8615A6180789",
            "ns": "TASK",
            "jhash": "0xA27A9413",
            "manualHash": true
        },
        "0xFA4EFC79F69D4F07": {
            "name": "TASK_START_SCENARIO_AT_POSITION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "scenarioName", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "duration", "type": "int" },
                { "name": "sittingScenario", "type": "BOOL" },
                { "name": "teleport", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAlso a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.\n---------------\nThe first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.\nThe next 4 parameters were harder to decipher. After viewing \"hairdo_shop_mp.ysc.c4\", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.\nI haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.\nI have no idea what the last 3 parameters are, but I'll try to find out.\n-going on the last 3 parameters, they appear to always be \"0, 0, 1\"\np6 -1 also used in scrips\np7 used for sitting scenarios\np8 teleports ped to position\n```",
            "examples": [],
            "hash": "0xFA4EFC79F69D4F07",
            "ns": "TASK",
            "jhash": "0xAA2C4AC2",
            "manualHash": true
        },
        "0x142A02425FF02BD9": {
            "name": "TASK_START_SCENARIO_IN_PLACE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "scenarioName", "type": "char*" },
                { "name": "unkDelay", "type": "int" },
                { "name": "playEnterAnim", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nPlays a scenario on a Ped at their current location.  \nunkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.  \nplayEnterAnim - Plays the \"Enter\" anim if true, otherwise plays the \"Exit\" anim. Scenarios that don't have any \"Enter\" anims won't play if this is set to true.  \n\nList of scenarioNames: pastebin.com/6mrYTdQv  \n\nAlso these:  \nWORLD_FISH_FLEE  \nDRIVE  \nWORLD_HUMAN_HIKER  \nWORLD_VEHICLE_ATTRACTOR  \nWORLD_VEHICLE_BICYCLE_MOUNTAIN  \nWORLD_VEHICLE_BIKE_OFF_ROAD_RACE  \nWORLD_VEHICLE_BIKER  \nWORLD_VEHICLE_CONSTRUCTION_PASSENGERS  \nWORLD_VEHICLE_CONSTRUCTION_SOLO  \nWORLD_VEHICLE_DRIVE_PASSENGERS  \nWORLD_VEHICLE_DRIVE_SOLO  \nWORLD_VEHICLE_EMPTY  \nWORLD_VEHICLE_PARK_PARALLEL  \nWORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN  \nWORLD_VEHICLE_POLICE_BIKE  \nWORLD_VEHICLE_POLICE_CAR  \nWORLD_VEHICLE_POLICE_NEXT_TO_CAR  \nWORLD_VEHICLE_SALTON_DIRT_BIKE  \nWORLD_VEHICLE_TRUCK_LOGS  \n```",
            "examples": [],
            "hash": "0x142A02425FF02BD9",
            "ns": "TASK",
            "jhash": "0xE50D6DDE",
            "manualHash": true
        },
        "0x7AFE8FDC10BC07D2": {
            "name": "TASK_SWEEP_AIM_POSITION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any*" },
                { "name": "p3", "type": "Any*" },
                { "name": "p4", "type": "Any*" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "p10", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7AFE8FDC10BC07D2",
            "ns": "TASK",
            "jhash": "0x1683FE66",
            "manualHash": true
        },
        "0x3FA00D4F4641BFAE": {
            "name": "TASK_STOP_PHONE_GESTURE_ANIMATION",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x3FA00D4F4641BFAE",
            "ns": "TASK",
            "aliases": ["_TASK_STOP_PHONE_GESTURE_ANIMATION"],
            "jhash": "0x5A32D4B4",
            "manualHash": true
        },
        "0xA21C51255B205245": {
            "name": "TASK_SWAP_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA21C51255B205245",
            "ns": "TASK",
            "jhash": "0xDAF4F8FC",
            "manualHash": true
        },
        "0xEEA929141F699854": {
            "name": "TASK_SYNCHRONIZED_SCENE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "scene", "type": "int" },
                { "name": "animDictionary", "type": "char*" },
                { "name": "animationName", "type": "char*" },
                { "name": "speed", "type": "float" },
                { "name": "speedMultiplier", "type": "float" },
                { "name": "duration", "type": "int" },
                { "name": "flag", "type": "int" },
                { "name": "playbackRate", "type": "float" },
                { "name": "p9", "type": "Any" }
            ],
            "results": "void",
            "description": "```\n TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, \"creatures@rottweiler@in_vehicle@std_car\", \"get_in\", 1000.0, -8.0, 4, 0, 0x447a0000, 0);\n```",
            "examples": [],
            "hash": "0xEEA929141F699854",
            "ns": "TASK",
            "jhash": "0x4F217E7B",
            "manualHash": true
        },
        "0x2047C02158D6405A": {
            "name": "TASK_SWEEP_AIM_ENTITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "anim", "type": "char*" },
                { "name": "p2", "type": "char*" },
                { "name": "p3", "type": "char*" },
                { "name": "p4", "type": "char*" },
                { "name": "p5", "type": "int" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" }
            ],
            "results": "void",
            "description": "```\nThis function is called on peds in vehicles.  \nanim: animation name  \np2, p3, p4: \"sweep_low\", \"sweep_med\" or \"sweep_high\"  \np5: no idea what it does but is usually -1  \n```",
            "examples": [],
            "hash": "0x2047C02158D6405A",
            "ns": "TASK",
            "jhash": "0x4D210467",
            "manualHash": true
        },
        "0xAC96609B9995EDF8": {
            "name": "TASK_TOGGLE_DUCK",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nused in sequence task  \nboth parameters seems to be always 0  \n```",
            "examples": [],
            "hash": "0xAC96609B9995EDF8",
            "ns": "TASK",
            "jhash": "0x61CFBCBF",
            "manualHash": true
        },
        "0x1DDA930A0AC38571": {
            "name": "TASK_TURN_PED_TO_FACE_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "```\nduration in milliseconds  \n```",
            "examples": [],
            "hash": "0x1DDA930A0AC38571",
            "ns": "TASK",
            "jhash": "0x30463D73",
            "manualHash": true
        },
        "0x7285951DBF6B5A51": {
            "name": "TASK_THROW_PROJECTILE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "```\nIn every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.  \nThe last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.  \n---  \nIt seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).  \nIt is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.  \n----------------------------------------------------  \nThe first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.  \n```\n\n```\nNativeDB Added Parameter 5: Any p4\nNativeDB Added Parameter 6: Any p5\n```",
            "examples": [],
            "hash": "0x7285951DBF6B5A51",
            "ns": "TASK",
            "jhash": "0xF65C20A7",
            "manualHash": true
        },
        "0x9FDA1B3D7E7028B3": {
            "name": "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9FDA1B3D7E7028B3",
            "ns": "TASK",
            "jhash": "0xE32FFB22",
            "manualHash": true
        },
        "0xBD2A8EC3AF4DE7DB": {
            "name": "TASK_USE_MOBILE_PHONE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nActually has 3 params, not 2.  \np0: Ped  \np1: int (or bool?)  \np2: int  \n```\n\n```\nNativeDB Added Parameter 3: Any p2\n```",
            "examples": [],
            "hash": "0xBD2A8EC3AF4DE7DB",
            "ns": "TASK",
            "jhash": "0x225A38C8",
            "manualHash": true
        },
        "0x5EE02954A14C69DB": {
            "name": "TASK_USE_MOBILE_PHONE_TIMED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5EE02954A14C69DB",
            "ns": "TASK",
            "jhash": "0xC99C19F5",
            "manualHash": true
        },
        "0xE41885592B08B097": {
            "name": "TASK_VEHICLE_AIM_AT_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE41885592B08B097",
            "ns": "TASK",
            "jhash": "0x920AE6DB",
            "manualHash": true
        },
        "0x5AD23D40115353AC": {
            "name": "TASK_TURN_PED_TO_FACE_ENTITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "entity", "type": "Entity" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "```\nduration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped  \n```",
            "examples": [],
            "hash": "0x5AD23D40115353AC",
            "ns": "TASK",
            "jhash": "0x3C37C767",
            "manualHash": true
        },
        "0x277F471BA9DB000B": {
            "name": "TASK_USE_NEAREST_SCENARIO_TO_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "distance", "type": "float" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "```\nUpdated variables\nAn alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.\n```",
            "examples": [],
            "hash": "0x277F471BA9DB000B",
            "ns": "TASK",
            "jhash": "0x9C50FBF0",
            "manualHash": true
        },
        "0x158BB33F920D360C": {
            "name": "TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id for the task."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle entity id for the task."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Destination X coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Destination Y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Destination Z coordinate."
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "Speed of driving."
                },
                {
                    "name": "driveMode",
                    "type": "int",
                    "description": "More info can be found [here](https://vespura.com/fivem/drivingstyle/)"
                },
                {
                    "name": "stopRange",
                    "type": "float",
                    "description": "Stops in the specific range near the destination. 20.0 works fine."
                }
            ],
            "results": "void",
            "description": "You can let your character drive to the destination at the speed and driving style you set. You can use map marks to set the destination.",
            "examples": [
                {
                    "lang": "cs",
                    "code": "// A short example showcasing how this native works with map marks.\n\n// Get the map mark location.\nVector3 destination = GetBlipInfoIdCoord(GetFirstBlipInfoId(8));\n\n// If no mark is set, return immediately.\nif (destination == Vector3.Zero)\n{\n    return;\n}\n\nTaskVehicleDriveToCoordLongrange(Game.PlayerPed.Handle, Game.PlayerPed.CurrentVehicle.Handle, destination.X, destination.Y, destination.Z, 60f, 447, 20f);"
                }
            ],
            "hash": "0x158BB33F920D360C",
            "ns": "TASK",
            "jhash": "0x1490182A",
            "manualHash": true
        },
        "0x97A28E63F0BA5631": {
            "name": "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x97A28E63F0BA5631",
            "ns": "TASK",
            "jhash": "0xBAB4C0AE",
            "manualHash": true
        },
        "0x58E2E0F23F6B76C3": {
            "name": "TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x58E2E0F23F6B76C3",
            "ns": "TASK",
            "jhash": "0x1BE9D65C",
            "manualHash": true
        },
        "0x3C08A8E30363B353": {
            "name": "TASK_VEHICLE_CHASE",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "targetEnt", "type": "Entity" }
            ],
            "results": "void",
            "description": "```\nchases targetEnt fast and aggressively  \n--  \nMakes ped (needs to be in vehicle) chase targetEnt.  \n```",
            "examples": [],
            "hash": "0x3C08A8E30363B353",
            "ns": "TASK",
            "jhash": "0x55634798",
            "manualHash": true
        },
        "0xE2A2AA2F659D77A7": {
            "name": "TASK_VEHICLE_DRIVE_TO_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "p6", "type": "Any" },
                { "name": "vehicleModel", "type": "Hash" },
                { "name": "drivingMode", "type": "int" },
                { "name": "stopRange", "type": "float" },
                { "name": "p10", "type": "float" }
            ],
            "results": "void",
            "description": "```\ninfo about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/  \n---------------------------------------------------------------  \nPassing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something.  \nP10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.  \nHere the e.g. code I used  \nFunction.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);  \n```",
            "examples": [],
            "hash": "0xE2A2AA2F659D77A7",
            "ns": "TASK",
            "jhash": "0xE4AC0387",
            "manualHash": true
        },
        "0x447C1E9EF844BC0F": {
            "name": "TASK_VEHICLE_AIM_AT_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x447C1E9EF844BC0F",
            "ns": "TASK",
            "jhash": "0x010F47CE",
            "manualHash": true
        },
        "0x3123FAA6DB1CF7ED": {
            "name": "TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "WPRecording", "type": "char*" },
                { "name": "p3", "type": "int" },
                { "name": "p4", "type": "int" },
                { "name": "p5", "type": "int" },
                { "name": "p6", "type": "int" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "BOOL" },
                { "name": "p9", "type": "float" }
            ],
            "results": "void",
            "description": "```\ntask_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)\np2 = Waypoint recording string (found in update\\update.rpf\\x64\\levels\\gta5\\waypointrec.rpf\np3 = 786468\np4 = 0\np5 = 16\np6 = -1 (angle?)\np7/8/9 = usually v3.zero\np10 = bool (repeat?)\np11 = 1073741824\n-khorio\n```",
            "examples": [],
            "hash": "0x3123FAA6DB1CF7ED",
            "ns": "TASK",
            "jhash": "0x959818B6",
            "manualHash": true
        },
        "0x0FA6E4B75F302400": {
            "name": "TASK_VEHICLE_ESCORT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "targetVehicle", "type": "Vehicle" },
                { "name": "mode", "type": "int" },
                { "name": "speed", "type": "float" },
                { "name": "drivingStyle", "type": "int" },
                { "name": "minDistance", "type": "float" },
                { "name": "p7", "type": "int" },
                { "name": "noRoadsDistance", "type": "float" }
            ],
            "results": "void",
            "description": "```\nMakes a ped follow the targetVehicle with <minDistance> in between.  \nnote: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.  \nMode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.  \n-1 = behind  \n0 = ahead  \n1 = left  \n2 = right  \n3 = back left  \n4 = back right  \nif the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.  \nDriving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/  \n```",
            "examples": [],
            "hash": "0x0FA6E4B75F302400",
            "ns": "TASK",
            "jhash": "0x9FDCB250",
            "manualHash": true
        },
        "0x480142959D337D00": {
            "name": "TASK_VEHICLE_DRIVE_WANDER",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id for the task."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle entity id for the task."
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "Speed of driving."
                },
                {
                    "name": "drivingStyle",
                    "type": "int",
                    "description": "More info can be found [here](https://vespura.com/fivem/drivingstyle/)"
                }
            ],
            "results": "void",
            "description": "Drive randomly with no destination set.",
            "examples": [
                {
                    "lang": "cs",
                    "code": "TaskVehicleDriveWander(Game.PlayerPed.Handle, Game.PlayerPed.CurrentVehicle.Handle, 60f, 447);"
                }
            ],
            "hash": "0x480142959D337D00",
            "ns": "TASK",
            "jhash": "0x36EC0EB0",
            "manualHash": true
        },
        "0x659427E0EF36BCDE": {
            "name": "TASK_VEHICLE_MISSION",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "vehicleTarget", "type": "Vehicle" },
                { "name": "missionType", "type": "int" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "DriveAgainstTraffic", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nmissionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt\n```",
            "examples": [],
            "hash": "0x659427E0EF36BCDE",
            "ns": "TASK",
            "jhash": "0x20609E56",
            "manualHash": true
        },
        "0x1E09C32048FEFD1C": {
            "name": "TASK_VEHICLE_HELI_PROTECT",
            "params": [
                { "name": "pilot", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "entityToFollow", "type": "Entity" },
                { "name": "targetSpeed", "type": "float" },
                { "name": "p4", "type": "int" },
                { "name": "radius", "type": "float" },
                { "name": "altitude", "type": "int" },
                { "name": "p7", "type": "int" }
            ],
            "results": "void",
            "description": "```\npilot, vehicle and altitude are rather self-explanatory.  \np4: is unused variable in the function.  \nentityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.  \n'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.  \n'radius' isn't just \"stop within radius of X of target\" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.  \nNOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.  \nNOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.  \n```",
            "examples": [],
            "hash": "0x1E09C32048FEFD1C",
            "ns": "TASK",
            "jhash": "0x0CB415EE",
            "manualHash": true
        },
        "0xFC545A9F0626E3B6": {
            "name": "TASK_VEHICLE_FOLLOW",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "targetEntity", "type": "Entity" },
                { "name": "speed", "type": "float" },
                { "name": "drivingStyle", "type": "int" },
                { "name": "minDistance", "type": "int" }
            ],
            "results": "void",
            "description": "```\nMakes a ped in a vehicle follow an entity (ped, vehicle, etc.)\ndrivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/\n```",
            "examples": [],
            "hash": "0xFC545A9F0626E3B6",
            "ns": "TASK",
            "aliases": ["_TASK_VEHICLE_FOLLOW"],
            "jhash": "0xA8B917D7",
            "manualHash": true
        },
        "0x195AEEB13CEFE2EE": {
            "name": "TASK_VEHICLE_GOTO_NAVMESH",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "behaviorFlag", "type": "int" },
                { "name": "stoppingRange", "type": "float" }
            ],
            "results": "void",
            "description": "```\nDiffers from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other \"road laws\" into consideration.  \nWARNING:  \nA behaviorFlag value of 0 will result in a clunky, stupid driver!  \nRecommended settings:  \nspeed = 30.0f,  \nbehaviorFlag = 156,   \nstoppingRange = 5.0f;  \nIf you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.   \nIf using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an \"anti-stuck\" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.  \nEDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/  \n```",
            "examples": [],
            "hash": "0x195AEEB13CEFE2EE",
            "ns": "TASK",
            "jhash": "0x55CF3BCD",
            "manualHash": true
        },
        "0x0F3E34E968EA374E": {
            "name": "TASK_VEHICLE_PARK",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "mode", "type": "int" },
                { "name": "radius", "type": "float" },
                { "name": "keepEngineOn", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nModes:  \n0 - ignore heading  \n1 - park forward  \n2 - park backwards  \nDepending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.  \nRadius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.  \n```",
            "examples": [],
            "hash": "0x0F3E34E968EA374E",
            "ns": "TASK",
            "jhash": "0x5C85FF90",
            "manualHash": true
        },
        "0x9454528DF15D657A": {
            "name": "TASK_VEHICLE_MISSION_PED_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "pedTarget", "type": "Ped" },
                { "name": "missionType", "type": "int" },
                { "name": "maxSpeed", "type": "float" },
                { "name": "drivingStyle", "type": "int" },
                { "name": "minDistance", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "DriveAgainstTraffic", "type": "BOOL" }
            ],
            "results": "void",
            "description": "See [`TASK_VEHICLE_MISSION`](#\\_0x659427E0EF36BCDE).",
            "examples": [],
            "hash": "0x9454528DF15D657A",
            "ns": "TASK",
            "jhash": "0xC81C4677",
            "manualHash": true
        },
        "0xC429DCEEB339E129": {
            "name": "TASK_VEHICLE_TEMP_ACTION",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "action", "type": "int" },
                { "name": "time", "type": "int" }
            ],
            "results": "void",
            "description": "```\n'1 - brake\n'3 - brake + reverse\n'4 - turn left 90 + braking\n'5 - turn right 90 + braking\n'6 - brake strong (handbrake?) until time ends\n'7 - turn left + accelerate\n'7 - turn right + accelerate\n'9 - weak acceleration\n'10 - turn left + restore wheel pos to center in the end\n'11 - turn right + restore wheel pos to center in the end\n'13 - turn left + go reverse\n'14 - turn left + go reverse\n'16 - crash the game after like 2 seconds :)\n'17 - keep actual state, game crashed after few tries\n'18 - game crash\n'19 - strong brake + turn left/right\n'20 - weak brake + turn left then turn right\n'21 - weak brake + turn right then turn left\n'22 - brake + reverse\n'23 - accelerate fast\n'24 - brake\n'25 - brake turning left then when almost stopping it turns left more\n'26 - brake turning right then when almost stopping it turns right more\n'27 - brake until car stop or until time ends\n'28 - brake + strong reverse acceleration\n'30 - performs a burnout (brake until stop + brake and accelerate)\n'31 - accelerate + handbrake\n'32 - accelerate very strong\nSeems to be this:\nWorks on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), \"time\" will work, otherwise the task will be performed forever until tasked with something else\n```",
            "examples": [],
            "hash": "0xC429DCEEB339E129",
            "ns": "TASK",
            "jhash": "0x0679DFB8",
            "manualHash": true
        },
        "0x69F5C3BD0F3EBD89": {
            "name": "TASK_VEHICLE_PLAY_ANIM",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "animationSet", "type": "char*" },
                { "name": "animationName", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nMost probably plays a specific animation on vehicle. For example getting chop out of van etc...\nHere's how its used -\nTASK::TASK_VEHICLE_PLAY_ANIM(l_325, \"rcmnigel1b\", \"idle_speedo\");\nTASK::TASK_VEHICLE_PLAY_ANIM(l_556[0/*1*/], \"missfra0_chop_drhome\", \"InCar_GetOutofBack_Speedo\");\nFYI : Speedo is the name of van in which chop was put in the mission.\n```",
            "examples": [],
            "hash": "0x69F5C3BD0F3EBD89",
            "ns": "TASK",
            "jhash": "0x2B28F598",
            "manualHash": true
        },
        "0x5190796ED39C9B6D": {
            "name": "TASK_VEHICLE_SHOOT_AT_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5190796ED39C9B6D",
            "ns": "TASK",
            "jhash": "0xA7AAA4D6",
            "manualHash": true
        },
        "0xCDDC2B77CE54AC6E": {
            "name": "TASK_WRITHE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" },
                { "name": "time", "type": "int" },
                { "name": "p3", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 5: Any p4\nNativeDB Added Parameter 6: Any p5\n```",
            "examples": [],
            "hash": "0xCDDC2B77CE54AC6E",
            "ns": "TASK",
            "jhash": "0x0FDC54FC",
            "manualHash": true
        },
        "0xF0AF20AA7731F8C3": {
            "name": "TASK_VEHICLE_MISSION_COORS_TARGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p5", "type": "int" },
                { "name": "p6", "type": "int" },
                { "name": "p7", "type": "int" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                { "name": "DriveAgainstTraffic", "type": "BOOL" }
            ],
            "results": "void",
            "description": "See [`TASK_VEHICLE_MISSION`](#\\_0x659427E0EF36BCDE).",
            "examples": [],
            "hash": "0xF0AF20AA7731F8C3",
            "ns": "TASK",
            "jhash": "0x6719C109",
            "manualHash": true
        },
        "0x67406F2C8F87FC4F": {
            "name": "UNCUFF_PED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x67406F2C8F87FC4F",
            "ns": "TASK",
            "jhash": "0xA23A1D61",
            "manualHash": true
        },
        "0xA98FCAFD7893C834": {
            "name": "UPDATE_TASK_HANDS_UP_DURATION",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "duration", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA98FCAFD7893C834",
            "ns": "TASK",
            "jhash": "0x3AA39BE9",
            "manualHash": true
        },
        "0x10AB107B887214D8": {
            "name": "TASK_VEHICLE_SHOOT_AT_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "target", "type": "Ped" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x10AB107B887214D8",
            "ns": "TASK",
            "jhash": "0x59677BA0",
            "manualHash": true
        },
        "0xE4973DBDBE6E44B3": {
            "name": "UPDATE_TASK_SWEEP_AIM_ENTITY",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE4973DBDBE6E44B3",
            "ns": "TASK",
            "jhash": "0xF65F0F4F",
            "manualHash": true
        },
        "0xE054346CA3A0F315": {
            "name": "TASK_WANDER_IN_AREA",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped which will wander the area."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate"
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The radius of the area to wander around in"
                },
                {
                    "name": "minimalLength",
                    "type": "int",
                    "annotations": { "cs_type": "float" },
                    "description": "The minimal length it will wander before waiting timeBetweenWalks seconds before continuing"
                },
                {
                    "name": "timeBetweenWalks",
                    "type": "float",
                    "description": "The length of time the ped will stand still/rest between walks"
                }
            ],
            "results": "void",
            "description": "Makes a ped wander/patrol around the specified area.\n\nThe ped will continue to wander after getting distracted, but only if this additional task is temporary, ie. killing a target, after killing the target it will continue to wander around.\n\nUse `GetIsTaskActive(ped, 222)` to check if the ped is still wandering the area.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Load model for panther\nlocal model = `a_c_panther`\nRequestModel(model)\nwhile not HasModelLoaded(model) do\n  Citizen.Wait(0)\nend\n\n-- Spawn a panther at current coordinates\nlocal coords = GetEntityCoords(PlayerPedId())\nlocal ped = CreatePed(0, model, coords.x, coords.y, coords.z, 0.0, true)\n\n-- Make sure the ped doesn't flee or gets distracted\nSetBlockingOfNonTemporaryEvents(ped, true)\n\n-- Make ped wander in spawned area with radius of 100 meters, will wander at least 2 meters and wait for around 10 seconds between patrols\nTaskWanderInArea(ped, coords.x, coords.y, coords.z, 100.0, 2, 10.0)\n\n-- Check if the ped is wandering\n-- Tasks don't trigger instantly, so wait a bit before checking\nCitizen.Wait(1000)\nprint(GetIsTaskActive(ped, 222)) -- 1"
                }
            ],
            "hash": "0xE054346CA3A0F315",
            "ns": "TASK",
            "jhash": "0xC6981FB9",
            "manualHash": true
        },
        "0xBB106883F5201FC4": {
            "name": "UPDATE_TASK_SWEEP_AIM_POSITION",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBB106883F5201FC4",
            "ns": "TASK",
            "jhash": "0x6345EC80",
            "manualHash": true
        },
        "0x6919A2F136426098": {
            "name": "_TASK_WANDER_SPECIFIC",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x6919A2F136426098",
            "ns": "TASK",
            "manualHash": true
        },
        "0xBB9CE077274F6A1B": {
            "name": "TASK_WANDER_STANDARD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nMakes ped walk around the area.  \nset p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.  \n```",
            "examples": [],
            "hash": "0xBB9CE077274F6A1B",
            "ns": "TASK",
            "jhash": "0xAF59151A",
            "manualHash": true
        },
        "0x9A7D091411C5F684": {
            "name": "TASK_WARP_PED_INTO_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9A7D091411C5F684",
            "ns": "TASK",
            "jhash": "0x65D4A35D",
            "manualHash": true
        },
        "0x701375A7D43F01CB": {
            "name": "WAYPOINT_PLAYBACK_GET_IS_PAUSED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x701375A7D43F01CB",
            "ns": "TASK",
            "jhash": "0xA6BB5717",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8A4E6AC373666BC5": {
            "name": "VEHICLE_WAYPOINT_PLAYBACK_PAUSE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8A4E6AC373666BC5",
            "ns": "TASK",
            "jhash": "0x7C00B415",
            "manualHash": true
        },
        "0x8968400D900ED8B3": {
            "name": "WAYPOINT_PLAYBACK_START_AIMING_AT_COORD",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8968400D900ED8B3",
            "ns": "TASK",
            "jhash": "0xF120A34E",
            "manualHash": true
        },
        "0x5CEB25A7D2848963": {
            "name": "VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5CEB25A7D2848963",
            "ns": "TASK",
            "jhash": "0x923C3AA4",
            "manualHash": true
        },
        "0x5A353B8E6B1095B5": {
            "name": "USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE",
            "params": [
                {
                    "name": "name",
                    "type": "char*",
                    "description": "Waypoint recording name."
                },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5A353B8E6B1095B5",
            "ns": "TASK",
            "jhash": "0x4DFD5FEC",
            "manualHash": true
        },
        "0x9724FB59A3E72AD0": {
            "name": "UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET",
            "params": [
                { "name": "p0", "type": "Ped" },
                { "name": "p1", "type": "Ped" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9724FB59A3E72AD0",
            "ns": "TASK",
            "jhash": "0x67E73525",
            "manualHash": true
        },
        "0x47EFA040EBB8E2EA": {
            "name": "WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x47EFA040EBB8E2EA",
            "ns": "TASK",
            "jhash": "0x6D7CF40C",
            "manualHash": true
        },
        "0xDC04FCAA7839D492": {
            "name": "VEHICLE_WAYPOINT_PLAYBACK_RESUME",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDC04FCAA7839D492",
            "ns": "TASK",
            "jhash": "0xBEB14C82",
            "manualHash": true
        },
        "0x121F0593E0A431D7": {
            "name": "VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "speed", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x121F0593E0A431D7",
            "ns": "TASK",
            "jhash": "0xBE1E7BB4",
            "manualHash": true
        },
        "0x7D7D2B47FA788E85": {
            "name": "WAYPOINT_PLAYBACK_OVERRIDE_SPEED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7D7D2B47FA788E85",
            "ns": "TASK",
            "jhash": "0x23E6BA96",
            "manualHash": true
        },
        "0x244F70C84C547D2D": {
            "name": "WAYPOINT_PLAYBACK_RESUME",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x244F70C84C547D2D",
            "ns": "TASK",
            "jhash": "0x50F392EF",
            "manualHash": true
        },
        "0x0F342546AA06FED5": {
            "name": "WAYPOINT_PLAYBACK_PAUSE",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0F342546AA06FED5",
            "ns": "TASK",
            "jhash": "0xFE39ECF8",
            "manualHash": true
        },
        "0x20E330937C399D29": {
            "name": "WAYPOINT_PLAYBACK_START_AIMING_AT_PED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x20E330937C399D29",
            "ns": "TASK",
            "jhash": "0x75E60CF6",
            "manualHash": true
        },
        "0xE70BA7B90F8390DC": {
            "name": "WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE70BA7B90F8390DC",
            "ns": "TASK",
            "aliases": ["0xE70BA7B90F8390DC"],
            "jhash": "0xBD5F0EB8",
            "manualHash": true
        },
        "0x057A25CFCC9DB671": {
            "name": "WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x057A25CFCC9DB671",
            "ns": "TASK",
            "jhash": "0xCDDB44D5",
            "manualHash": true
        },
        "0x2FB897405C90B361": {
            "name": "WAYPOINT_RECORDING_GET_COORD",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "point", "type": "int" },
                { "name": "coord", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "```\nFor a full list of the points, see here: goo.gl/wIH0vn\n```",
            "examples": [],
            "hash": "0x2FB897405C90B361",
            "ns": "TASK",
            "jhash": "0x19266913",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB629A298081F876F": {
            "name": "WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "point", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\nFor a full list of the points, see here: goo.gl/wIH0vn\n```",
            "examples": [],
            "hash": "0xB629A298081F876F",
            "ns": "TASK",
            "jhash": "0xC4CD35AF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6599D834B12D0800": {
            "name": "WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6599D834B12D0800",
            "ns": "TASK",
            "jhash": "0x1BBB2CAC",
            "manualHash": true
        },
        "0x5343532C01A07234": {
            "name": "WAYPOINT_RECORDING_GET_NUM_POINTS",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "points", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "```\nFor a full list of the points, see here: goo.gl/wIH0vn\n```",
            "examples": [],
            "hash": "0x5343532C01A07234",
            "ns": "TASK",
            "jhash": "0xF5F9B71E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x005622AEBC33ACA9": {
            "name": "WAYPOINT_RECORDING_GET_SPEED_AT_POINT",
            "params": [
                { "name": "name", "type": "char*" },
                { "name": "point", "type": "int" }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x005622AEBC33ACA9",
            "ns": "TASK",
            "jhash": "0xC765633A",
            "manualHash": true,
            "resultsDescription": ""
        }
    },
    "WEAPON": {
        "0x78F0424C34306220": {
            "name": "ADD_AMMO_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ammo", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x78F0424C34306220",
            "ns": "WEAPON",
            "jhash": "0x7F0580C7",
            "manualHash": true
        },
        "0xAC678E40BE7C74D2": {
            "name": "CLEAR_ENTITY_LAST_WEAPON_DAMAGE",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAC678E40BE7C74D2",
            "ns": "WEAPON",
            "jhash": "0xCEC2732B",
            "manualHash": true
        },
        "0x9DA58CDBF6BDBC08": {
            "name": "_CREATE_AIR_DEFENSE_AREA",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" },
                { "name": "p7", "type": "float" },
                { "name": "p8", "type": "float" },
                { "name": "p9", "type": "float" },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9DA58CDBF6BDBC08",
            "ns": "WEAPON",
            "aliases": ["0x9DA58CDBF6BDBC08"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2472622CE1F2D45F": {
            "name": "_ADD_AMMO_TO_PED_BY_TYPE",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "ammoType",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "ammo", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2472622CE1F2D45F",
            "ns": "WEAPON",
            "aliases": ["0x2472622CE1F2D45F", "_ADD_PED_AMMO"],
            "manualHash": true
        },
        "0xBC7BE5ABC0879F74": {
            "name": "CAN_USE_WEAPON_ON_PARACHUTE",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nthis returns if you can use the weapon while using a parachute  \n```",
            "examples": [],
            "hash": "0xBC7BE5ABC0879F74",
            "ns": "WEAPON",
            "jhash": "0x135E7AD4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0E98F88A24C5F4B8": {
            "name": "CLEAR_PED_LAST_WEAPON_DAMAGE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.",
            "examples": [],
            "hash": "0x0E98F88A24C5F4B8",
            "ns": "WEAPON",
            "jhash": "0x52C68832",
            "manualHash": true
        },
        "0x91EF34584710BE99": {
            "name": "_CREATE_AIR_DEFENSE_SPHERE",
            "params": [
                { "name": "x", "type": "float", "description": "X coordinate" },
                { "name": "y", "type": "float", "description": "Y coordinate" },
                { "name": "z", "type": "float", "description": "Z coordinate" },
                {
                    "name": "radius",
                    "type": "float",
                    "annotations": { "cs_type": "int" },
                    "description": "Unknown float 150.0 is used in freemode script."
                },
                {
                    "name": "p4",
                    "type": "float",
                    "description": "X coordinate"
                },
                {
                    "name": "p5",
                    "type": "float",
                    "description": "Y coordinate"
                },
                {
                    "name": "p6",
                    "type": "float",
                    "description": "Z coordinate"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "weapon_air_defence_gun and 0 are used in the decompiled scripts."
                }
            ],
            "results": "int",
            "description": "Both coordinates are from objects in the decompiled scripts.\n\nNative related to [\\_0xECDC202B25E5CF48](#\\_0xECDC202B25E5CF48) p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.",
            "examples": [],
            "hash": "0x91EF34584710BE99",
            "ns": "WEAPON",
            "aliases": ["0x91EF34584710BE99"],
            "manualHash": true,
            "resultsDescription": "Seems to be some sort of handle, result is += 1 any time this native is called."
        },
        "0x9541D3CF0D398F36": {
            "name": "CREATE_WEAPON_OBJECT",
            "params": [
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ammoCount", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "showWorldModel", "type": "BOOL" },
                { "name": "scale", "type": "float" },
                { "name": "p7", "type": "Any" }
            ],
            "results": "Object",
            "description": "```\nNow has 8 params.  \n```\n\n```\nNativeDB Added Parameter 9: Any p8\nNativeDB Added Parameter 10: Any p9\n```",
            "examples": [],
            "hash": "0x9541D3CF0D398F36",
            "ns": "WEAPON",
            "jhash": "0x62F5987F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCD79A550999D7D4F": {
            "name": "_DOES_AIR_DEFENSE_ZONE_EXIST",
            "params": [{ "name": "zoneId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xCD79A550999D7D4F",
            "ns": "WEAPON",
            "aliases": ["0xCD79A550999D7D4F"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC8B46D7727D864AA": {
            "name": "ENABLE_LASER_SIGHT_RENDERING",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nEnables laser sight on any weapon.  \nIt doesn't work. Neither on tick nor OnKeyDown  \n```",
            "examples": [],
            "hash": "0xC8B46D7727D864AA",
            "ns": "WEAPON",
            "jhash": "0xE3438955",
            "manualHash": true
        },
        "0xFC4BD125DE7611E4": {
            "name": "EXPLODE_PROJECTILES",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nWEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);  \n```",
            "examples": [],
            "hash": "0xFC4BD125DE7611E4",
            "ns": "WEAPON",
            "jhash": "0x35A0B955",
            "manualHash": true
        },
        "0x5CEE3DF569CECAB0": {
            "name": "DOES_WEAPON_TAKE_WEAPON_COMPONENT",
            "params": [
                { "name": "weaponHash", "type": "Hash" },
                { "name": "componentHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5CEE3DF569CECAB0",
            "ns": "WEAPON",
            "jhash": "0xB1817BAA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x015A522136D7F951": {
            "name": "GET_AMMO_IN_PED_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponhash", "type": "Hash" }
            ],
            "results": "int",
            "description": "```\nWEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)  \nFrom decompiled scripts  \nReturns total ammo in weapon  \nGTALua Example :  \nnatives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)  \n```",
            "examples": [],
            "hash": "0x015A522136D7F951",
            "ns": "WEAPON",
            "jhash": "0x0C755733",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2E1202248937775C": {
            "name": "GET_AMMO_IN_CLIP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ammo", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2E1202248937775C",
            "ns": "WEAPON",
            "jhash": "0x73C100C3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8483E98E8B888AE2": {
            "name": "GET_BEST_PED_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "Hash",
            "description": "```\np1 is always 0 in the scripts.  \n```",
            "examples": [],
            "hash": "0x8483E98E8B888AE2",
            "ns": "WEAPON",
            "jhash": "0xB998D444",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A87E44BB9A01D54": {
            "name": "GET_CURRENT_PED_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash*" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nThe return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.  \np2 seems to be 1 most of the time; and is not implemented.\n```",
            "examples": [],
            "hash": "0x3A87E44BB9A01D54",
            "ns": "WEAPON",
            "jhash": "0xB0237302",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3B390A939AF0B5FC": {
            "name": "GET_CURRENT_PED_WEAPON_ENTITY_INDEX",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Entity",
            "description": "```\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0x3B390A939AF0B5FC",
            "ns": "WEAPON",
            "jhash": "0x5D73CD20",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x44F1012B69313374": {
            "name": "_FIRE_AIR_DEFENSE_WEAPON",
            "params": [
                { "name": "zoneId", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x44F1012B69313374",
            "ns": "WEAPON",
            "aliases": ["0x44F1012B69313374"],
            "manualHash": true
        },
        "0x840F03E9041E2C9C": {
            "name": "GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x840F03E9041E2C9C",
            "ns": "WEAPON",
            "aliases": [
                "0x840F03E9041E2C9C",
                "_GET_LOCKON_RANGE_OF_CURRENT_PED_WEAPON"
            ],
            "jhash": "0x3612110D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x814C9D19DFD69679": {
            "name": "GET_MAX_RANGE_OF_CURRENT_PED_WEAPON",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x814C9D19DFD69679",
            "ns": "WEAPON",
            "jhash": "0xB2B2BBAA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF731332072F5156C": {
            "name": "GET_IS_PED_GADGET_EQUIPPED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "gadgetHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "```\ngadgetHash - was always 0xFBAB5776 (\"GADGET_PARACHUTE\").  \n```",
            "examples": [],
            "hash": "0xF731332072F5156C",
            "ns": "WEAPON",
            "jhash": "0x8DDD0B5B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1017582BCD3832DC": {
            "name": "GET_CURRENT_PED_VEHICLE_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1017582BCD3832DC",
            "ns": "WEAPON",
            "jhash": "0xF26C5D65",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC16122C7A20C933": {
            "name": "GET_MAX_AMMO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ammo", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDC16122C7A20C933",
            "ns": "WEAPON",
            "jhash": "0x0B294796",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x39D22031557946C1": {
            "name": "GET_PED_AMMO_BY_TYPE",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "ammoType",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x39D22031557946C1",
            "ns": "WEAPON",
            "jhash": "0x54077C4D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x585847C5E4E11709": {
            "name": "_GET_MAX_AMMO_BY_TYPE",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "ammoType",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "ammo", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x585847C5E4E11709",
            "ns": "WEAPON",
            "aliases": ["0x585847C5E4E11709", "_GET_MAX_AMMO_2"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA38DCFFCEA8962FA": {
            "name": "GET_MAX_AMMO_IN_CLIP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\np2 is mostly 1 in the scripts.  \n```",
            "examples": [],
            "hash": "0xA38DCFFCEA8962FA",
            "ns": "WEAPON",
            "jhash": "0x6961E2A4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6C4D0409BA1A2BC2": {
            "name": "GET_PED_LAST_WEAPON_IMPACT_COORD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "coords", "type": "Vector3*" }
            ],
            "results": "BOOL",
            "description": "```\nPass ped. Pass address of Vector3.  \nThe coord will be put into the Vector3.  \nThe return will determine whether there was a coord found or not.  \n```",
            "examples": [],
            "hash": "0x6C4D0409BA1A2BC2",
            "ns": "WEAPON",
            "jhash": "0x9B266079",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7FEAD38B326B9F74": {
            "name": "GET_PED_AMMO_TYPE_FROM_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" }
            ],
            "results": "Hash",
            "description": "```\nReturns the current ammo type of the specified ped's specified weapon.\n\nMkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.\n\nUse 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.\n```",
            "examples": [],
            "hash": "0x7FEAD38B326B9F74",
            "ns": "WEAPON",
            "aliases": ["_GET_PED_AMMO_TYPE"],
            "jhash": "0x09337863",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF489B44DD5AF4BD9": {
            "name": "_GET_PED_AMMO_TYPE_FROM_WEAPON_2",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" }
            ],
            "results": "Hash",
            "description": "```\nReturns the base/default ammo type of the specified ped's specified weapon.\n\nUse GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)\n```",
            "examples": [],
            "hash": "0xF489B44DD5AF4BD9",
            "ns": "WEAPON",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF0A60040BE558F2D": {
            "name": "_GET_PED_WEAPON_LIVERY_COLOR",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "camoComponentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xF0A60040BE558F2D",
            "ns": "WEAPON",
            "aliases": ["0xF0A60040BE558F2D"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEFFED78E9011134D": {
            "name": "GET_PED_WEAPONTYPE_IN_SLOT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponSlot", "type": "Hash" }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xEFFED78E9011134D",
            "ns": "WEAPON",
            "jhash": "0x9BC64E16",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6558AC7C17BFEF58": {
            "name": "_GET_WEAPON_COMPONENT_VARIANT_EXTRA_COMPONENT_COUNT",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x6558AC7C17BFEF58",
            "ns": "WEAPON",
            "aliases": ["0x6558AC7C17BFEF58"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0A6DB4965674D243": {
            "name": "GET_SELECTED_PED_WEAPON",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x0A6DB4965674D243",
            "ns": "WEAPON",
            "jhash": "0xD240123E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2B9EEDC07BD06B9F": {
            "name": "GET_PED_WEAPON_TINT_INDEX",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2B9EEDC07BD06B9F",
            "ns": "WEAPON",
            "jhash": "0x3F9C90A7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0DB57B41EC1DB083": {
            "name": "GET_WEAPON_COMPONENT_TYPE_MODEL",
            "params": [{ "name": "componentHash", "type": "Hash" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x0DB57B41EC1DB083",
            "ns": "WEAPON",
            "jhash": "0x324FA47A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x583BE370B1EC6EB4": {
            "name": "GET_WEAPON_CLIP_SIZE",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "int",
            "description": "```\n// Returns the size of the default weapon component clip.  \nUse it like this:  \nchar cClipSize[32];  \nHash cur;  \nif (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))  \n{  \n    if (WEAPON::IS_WEAPON_VALID(cur))  \n    {  \n        int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);  \n        sprintf_s(cClipSize, \"ClipSize: %.d\", iClipSize);  \n        vDrawString(cClipSize, 0.5f, 0.5f);  \n    }  \n}  \n```",
            "examples": [],
            "hash": "0x583BE370B1EC6EB4",
            "ns": "WEAPON",
            "jhash": "0x8D515E66",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB3CAF387AE12E9F8": {
            "name": "GET_WEAPON_COMPONENT_HUD_STATS",
            "params": [
                { "name": "componentHash", "type": "Hash" },
                { "name": "outData", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB3CAF387AE12E9F8",
            "ns": "WEAPON",
            "jhash": "0xBB5498F4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB3EA4FEABF41464B": {
            "name": "_GET_WEAPON_OBJECT_LIVERY_COLOR",
            "params": [
                { "name": "weaponObject", "type": "Object" },
                {
                    "name": "camoComponentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xB3EA4FEABF41464B",
            "ns": "WEAPON",
            "aliases": ["0xB3EA4FEABF41464B"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3133B907D8B32053": {
            "name": "GET_WEAPON_DAMAGE",
            "params": [
                { "name": "weaponHash", "type": "Hash" },
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" },
                    "description": "0 in the decompiled scripts."
                }
            ],
            "results": "float",
            "description": "This native does not return damages of weapons from the melee and explosive group.",
            "examples": [],
            "hash": "0x3133B907D8B32053",
            "ns": "WEAPON",
            "aliases": ["0x3133B907D8B32053", "_GET_WEAPON_DAMAGE"],
            "jhash": "0xE81649C0",
            "manualHash": true,
            "resultsDescription": "Damages of the weapon."
        },
        "0x4D1CB8DC40208A17": {
            "name": "_GET_WEAPON_COMPONENT_VARIANT_EXTRA_COMPONENT_MODEL",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "extraComponentIndex", "type": "int" }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x4D1CB8DC40208A17",
            "ns": "WEAPON",
            "aliases": ["0x4D1CB8DC40208A17"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC3287EE3050FB74C": {
            "name": "GET_WEAPONTYPE_GROUP",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "The hash of the Weapon."
                }
            ],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xC3287EE3050FB74C",
            "ns": "WEAPON",
            "jhash": "0x5F2DE833",
            "manualHash": true,
            "resultsDescription": "*   **Melee**: 2685387236\n*   **Handgun**: 416676503\n*   **Submachine Gun**: -957766203\n*   **Shotgun**: 860033945\n*   **Assault Rifle**: 970310034\n*   **Light Machine Gun**: 1159398588\n*   **Sniper**: 3082541095\n*   **Heavy Weapon**: 2725924767\n*   **Throwables**: 1548507267\n*   **Misc**: 4257178988"
        },
        "0xCAE1DC9A0E22A16D": {
            "name": "GET_WEAPON_OBJECT_FROM_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "Object",
            "description": "```\nDrops the current weapon and returns the object  \nUnknown behavior when unarmed.  \n```",
            "examples": [],
            "hash": "0xCAE1DC9A0E22A16D",
            "ns": "WEAPON",
            "jhash": "0xDF939A38",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3BE0BB12D25FB305": {
            "name": "GET_WEAPON_DAMAGE_TYPE",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "int",
            "description": "```\n0=unknown (or incorrect weaponHash)  \n1= no damage (flare,snowball, petrolcan)  \n2=melee  \n3=bullet  \n4=force ragdoll fall  \n5=explosive (RPG, Railgun, grenade)  \n6=fire(molotov)  \n8=fall(WEAPON_HELI_CRASH)  \n10=electric  \n11=barbed wire  \n12=extinguisher  \n13=gas  \n14=water cannon(WEAPON_HIT_BY_WATER_CANNON)  \n```",
            "examples": [],
            "hash": "0x3BE0BB12D25FB305",
            "ns": "WEAPON",
            "jhash": "0x013AFC13",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4215460B9B8B7FA0": {
            "name": "GET_WEAPONTYPE_SLOT",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x4215460B9B8B7FA0",
            "ns": "WEAPON",
            "jhash": "0x2E3759AF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD92C739EE34C9EBA": {
            "name": "GET_WEAPON_HUD_STATS",
            "params": [
                { "name": "weaponHash", "type": "Hash" },
                { "name": "outData", "type": "Any*" }
            ],
            "results": "BOOL",
            "description": "```\n// members should be aligned to 8 bytes by default but it's best to use alignas here, just to be sure  \nstruct WeaponHudStatsData  \n{  \n\talignas(8) uint8_t hudDamage; // 0x0000  \n\talignas(8) uint8_t hudSpeed; // 0x0008  \n\talignas(8) uint8_t hudCapacity; // 0x0010  \n\talignas(8) uint8_t hudAccuracy; // 0x0018  \n\talignas(8) uint8_t hudRange; // 0x0020  \n};  \nUsage:  \nWeaponHudStatsData data;  \nif (GET_WEAPON_HUD_STATS(weaponHash, (Any*)&data))  \n{  \n    // uint8_t damagePercentage = data.hudDamage etc...  \n}  \n```",
            "examples": [],
            "hash": "0xD92C739EE34C9EBA",
            "ns": "WEAPON",
            "jhash": "0xA9AD3D98",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5DCF6C5CAB2E9BF7": {
            "name": "GET_WEAPON_TINT_COUNT",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x5DCF6C5CAB2E9BF7",
            "ns": "WEAPON",
            "jhash": "0x99E4EAAB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x065D2AACAD8CF7A4": {
            "name": "_GET_WEAPON_TIME_BETWEEN_SHOTS",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x065D2AACAD8CF7A4",
            "ns": "WEAPON",
            "aliases": ["0x065D2AACAD8CF7A4"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true
        },
        "0xF46CDC33180FDA94": {
            "name": "GET_WEAPONTYPE_MODEL",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "Hash",
            "description": "```\nReturns the model of any weapon.  \nCan also take an ammo hash?  \nsub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));  \n```",
            "examples": [],
            "hash": "0xF46CDC33180FDA94",
            "ns": "WEAPON",
            "jhash": "0x44E1C269",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCD183314F7CD2E57": {
            "name": "GET_WEAPON_OBJECT_TINT_INDEX",
            "params": [{ "name": "weapon", "type": "Object" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xCD183314F7CD2E57",
            "ns": "WEAPON",
            "jhash": "0xD91D9576",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB282DC6EBD803C75": {
            "name": "GIVE_DELAYED_WEAPON_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ammoCount", "type": "int" },
                { "name": "bForceInHand", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nGives a weapon to PED with a delay, example:\nWEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"WEAPON_PISTOL\"), 1000, false)\n```",
            "examples": [],
            "hash": "0xB282DC6EBD803C75",
            "ns": "WEAPON",
            "jhash": "0x5868D20D",
            "manualHash": true
        },
        "0xB1FA61371AF7C4B7": {
            "name": "GIVE_WEAPON_OBJECT_TO_PED",
            "params": [
                { "name": "weaponObject", "type": "Object" },
                { "name": "ped", "type": "Ped" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB1FA61371AF7C4B7",
            "ns": "WEAPON",
            "jhash": "0x639AF3EF",
            "manualHash": true
        },
        "0xD966D51AA5B28BB9": {
            "name": "GIVE_WEAPON_COMPONENT_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "componentHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD966D51AA5B28BB9",
            "ns": "WEAPON",
            "jhash": "0x3E1E286D",
            "manualHash": true
        },
        "0x8DECB02F88F428BC": {
            "name": "HAS_PED_GOT_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np2 should be FALSE, otherwise it seems to always return FALSE  \nBool does not check if the weapon is current equipped, unfortunately.  \n```",
            "examples": [],
            "hash": "0x8DECB02F88F428BC",
            "ns": "WEAPON",
            "jhash": "0x43D2FA82",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x76A18844E743BF91": {
            "name": "HAS_WEAPON_GOT_WEAPON_COMPONENT",
            "params": [
                { "name": "weapon", "type": "Object" },
                { "name": "addonHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x76A18844E743BF91",
            "ns": "WEAPON",
            "jhash": "0x1D368510",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x68F8BE6AF5CDF8A6": {
            "name": "_GIVE_LOADOUT_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "loadoutHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x68F8BE6AF5CDF8A6",
            "ns": "WEAPON",
            "aliases": ["0x68F8BE6AF5CDF8A6"],
            "manualHash": true
        },
        "0x36E353271F0E90EE": {
            "name": "HAS_WEAPON_ASSET_LOADED",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x36E353271F0E90EE",
            "ns": "WEAPON",
            "jhash": "0x1891D5BB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x33E179436C0B31DB": {
            "name": "GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT",
            "params": [
                { "name": "weaponObject", "type": "Object" },
                { "name": "addonHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\naddonHash:\n(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)\n${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}\n```",
            "examples": [],
            "hash": "0x33E179436C0B31DB",
            "ns": "WEAPON",
            "jhash": "0xF7612A37",
            "manualHash": true
        },
        "0x6F6981D2253C208F": {
            "name": "HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nHides the players weapon during a cutscene.  \n```",
            "examples": [],
            "hash": "0x6F6981D2253C208F",
            "ns": "WEAPON",
            "jhash": "0x00CFD6E9",
            "manualHash": true
        },
        "0x2D343D2219CD027A": {
            "name": "HAS_PED_BEEN_DAMAGED_BY_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "weaponType", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nIt determines what weapons caused damage:  \nIf you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0  \nIf you want to define any melee weapon, second parameter=0, third parameter=1.  \nIf you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.  \n```",
            "examples": [],
            "hash": "0x2D343D2219CD027A",
            "ns": "WEAPON",
            "jhash": "0xCDFBBCC6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4B7620C47217126C": {
            "name": "IS_FLASH_LIGHT_ON",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4B7620C47217126C",
            "ns": "WEAPON",
            "aliases": ["SET_WEAPON_SMOKEGRENADE_ASSIGNED"],
            "jhash": "0x76876154",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBF0FD6E56C964FCB": {
            "name": "GIVE_WEAPON_TO_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ammoCount", "type": "int" },
                { "name": "isHidden", "type": "BOOL" },
                { "name": "bForceInHand", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF0FD6E56C964FCB",
            "ns": "WEAPON",
            "jhash": "0xC4D88A85",
            "manualHash": true
        },
        "0x475768A975D5AD17": {
            "name": "IS_PED_ARMED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to check armed state on."
                },
                {
                    "name": "typeFlags",
                    "type": "int",
                    "description": "Type flags to check."
                }
            ],
            "results": "BOOL",
            "description": "Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.\n\n| Bit value | Effect            |\n|-----------|-------------------|\n| 1         | Melee weapons     |\n| 2         | Explosive weapons |\n| 4         | Any other weapons |\n\nNot specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.",
            "examples": [],
            "hash": "0x475768A975D5AD17",
            "ns": "WEAPON",
            "jhash": "0x0BFC892C",
            "manualHash": true,
            "resultsDescription": "Whether or not the ped is currently equipped with any weapon matching typeFlags."
        },
        "0xC593212475FAE340": {
            "name": "HAS_PED_GOT_WEAPON_COMPONENT",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "componentHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC593212475FAE340",
            "ns": "WEAPON",
            "jhash": "0xDC0FC145",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x131D401334815E94": {
            "name": "HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON",
            "params": [
                { "name": "entity", "type": "Entity" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "weaponType", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nIt determines what weapons caused damage:\nIf you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0\nIf you want to define any melee weapon, second parameter=0, third parameter=1.\nIf you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.\n```",
            "examples": [],
            "hash": "0x131D401334815E94",
            "ns": "WEAPON",
            "jhash": "0x6DAABB39",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0D78DE0572D3969E": {
            "name": "IS_PED_WEAPON_COMPONENT_ACTIVE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "componentHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0D78DE0572D3969E",
            "ns": "WEAPON",
            "jhash": "0x7565FB19",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x20AE33F3AC9C0033": {
            "name": "MAKE_PED_RELOAD",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.",
            "examples": [],
            "hash": "0x20AE33F3AC9C0033",
            "ns": "WEAPON",
            "jhash": "0x515292C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x717C8481234E3B88": {
            "name": "HAS_VEHICLE_GOT_PROJECTILE_ATTACHED",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "p3", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "```\nThird Parameter = unsure, but pretty sure it is weapon hash  \n--> get_hash_key(\"weapon_stickybomb\")  \nFourth Parameter = unsure, almost always -1  \n```",
            "examples": [],
            "hash": "0x717C8481234E3B88",
            "ns": "WEAPON",
            "jhash": "0xA57E2E80",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDAB963831DBFD3F4": {
            "name": "_IS_ANY_AIR_DEFENSE_ZONE_INSIDE_SPHERE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "SphereIndex", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDAB963831DBFD3F4",
            "ns": "WEAPON",
            "aliases": [
                "0xDAB963831DBFD3F4",
                "_IS_AIR_DEFENSE_ZONE_INSIDE_SPHERE"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x50276EF8172F5F12": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "Related to the ped's weapon - flag used when disabling ped vehicle weapon\n\nSET_PED_\\*\n\n```\nNativeDB Introduced: v1734\n```",
            "examples": [],
            "hash": "0x50276EF8172F5F12",
            "ns": "WEAPON",
            "jhash": "0xE3DB81AC",
            "manualHash": true
        },
        "0x65F0C5AE05943EC7": {
            "name": "IS_PED_CURRENT_WEAPON_SILENCED",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "```\nThis native returns a true or false value.  \nPed ped = The ped whose weapon you want to check.  \n```",
            "examples": [],
            "hash": "0x65F0C5AE05943EC7",
            "ns": "WEAPON",
            "jhash": "0xBAF7BFBE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x24C024BA8379A70A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x24C024BA8379A70A",
            "ns": "WEAPON",
            "manualHash": true
        },
        "0xB80CA294F2F26749": {
            "name": "IS_PED_WEAPON_READY_TO_SHOOT",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB80CA294F2F26749",
            "ns": "WEAPON",
            "jhash": "0x02A32CB0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA2C9AC24B4061285": {
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA2C9AC24B4061285",
            "ns": "WEAPON",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x937C71165CF334B3": {
            "name": "IS_WEAPON_VALID",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x937C71165CF334B3",
            "ns": "WEAPON",
            "jhash": "0x38CA2954",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x977CA98939E82E4B": {
            "params": [
                { "name": "weaponObject", "type": "Object" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSET_WEAPON_OBJECT_*\n```",
            "examples": [],
            "hash": "0x977CA98939E82E4B",
            "ns": "WEAPON",
            "manualHash": true
        },
        "0xFC52E0F37E446528": {
            "name": "REMOVE_ALL_PROJECTILES_OF_TYPE",
            "params": [
                { "name": "weaponHash", "type": "Hash" },
                { "name": "explode", "type": "BOOL" }
            ],
            "results": "void",
            "description": "If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.",
            "examples": [],
            "hash": "0xFC52E0F37E446528",
            "ns": "WEAPON",
            "jhash": "0xA5F89919",
            "manualHash": true
        },
        "0xE4DCEC7FD5B739A5": {
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE4DCEC7FD5B739A5",
            "ns": "WEAPON",
            "jhash": "0x64646F1D",
            "manualHash": true
        },
        "0x8C0D57EA686FAD87": {
            "name": "REFILL_AMMO_INSTANTLY",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8C0D57EA686FAD87",
            "ns": "WEAPON",
            "aliases": ["_PED_SKIP_NEXT_RELOADING"],
            "jhash": "0x82EEAF0F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4899CB088EDF59B8": {
            "name": "REMOVE_WEAPON_FROM_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nThis native removes a specified weapon from your selected ped.  \nWeapon Hashes: pastebin.com/0wwDZgkF  \nExample:  \nC#:  \nFunction.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);  \nC++:  \nWEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);  \nThe code above removes the knife from the player.  \n```",
            "examples": [],
            "hash": "0x4899CB088EDF59B8",
            "ns": "WEAPON",
            "jhash": "0x9C37F220",
            "manualHash": true
        },
        "0xE6D2CEDD370FF98E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xE6D2CEDD370FF98E",
            "ns": "WEAPON",
            "manualHash": true
        },
        "0x0ABF535877897560": {
            "name": "_REMOVE_AIR_DEFENSE_ZONE",
            "params": [{ "name": "zoneId", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x0ABF535877897560",
            "ns": "WEAPON",
            "aliases": ["0x0ABF535877897560"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x48164DBB970AC3F0": {
            "name": "REQUEST_WEAPON_HIGH_DETAIL_MODEL",
            "params": [{ "name": "weaponObject", "type": "Entity" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x48164DBB970AC3F0",
            "ns": "WEAPON",
            "jhash": "0xE3BD00F9",
            "manualHash": true
        },
        "0x1E45B34ADEBEE48E": {
            "name": "_REMOVE_ALL_AIR_DEFENSE_ZONES",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E45B34ADEBEE48E",
            "ns": "WEAPON",
            "aliases": ["0x1E45B34ADEBEE48E"],
            "manualHash": true
        },
        "0xF25DF915FA38C5F3": {
            "name": "REMOVE_ALL_PED_WEAPONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Parameter `p1` does not seem to be used or referenced in game binaries.\\\n**Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.",
            "examples": [],
            "hash": "0xF25DF915FA38C5F3",
            "ns": "WEAPON",
            "jhash": "0xA44CE817",
            "manualHash": true
        },
        "0xAA08EF13F341C8FC": {
            "name": "REMOVE_WEAPON_ASSET",
            "params": [{ "name": "weaponHash", "type": "Hash" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA08EF13F341C8FC",
            "ns": "WEAPON",
            "jhash": "0x2C0DFE3C",
            "manualHash": true
        },
        "0xF7D82B0D66777611": {
            "name": "REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT",
            "params": [
                { "name": "weaponObject", "type": "Object" },
                {
                    "name": "addonHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF7D82B0D66777611",
            "ns": "WEAPON",
            "jhash": "0xA6E7ED3C",
            "manualHash": true
        },
        "0x1E8BE90C74FB4C09": {
            "name": "REMOVE_WEAPON_COMPONENT_FROM_PED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "componentHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E8BE90C74FB4C09",
            "ns": "WEAPON",
            "jhash": "0x412AA00D",
            "manualHash": true
        },
        "0x5443438F033E29C3": {
            "name": "REQUEST_WEAPON_ASSET",
            "params": [
                { "name": "weaponHash", "type": "Hash" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.  \nREQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);  \n```",
            "examples": [],
            "hash": "0x5443438F033E29C3",
            "ns": "WEAPON",
            "jhash": "0x65D139A5",
            "manualHash": true
        },
        "0xDCD2A934D65CB497": {
            "name": "SET_AMMO_IN_CLIP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ammo", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDCD2A934D65CB497",
            "ns": "WEAPON",
            "jhash": "0xA54B0B10",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xADF692B254977C0C": {
            "name": "SET_CURRENT_PED_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "bForceInHand", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xADF692B254977C0C",
            "ns": "WEAPON",
            "jhash": "0xB8278882",
            "manualHash": true
        },
        "0xEFF296097FF1E509": {
            "name": "_SET_CAN_PED_EQUIP_ALL_WEAPONS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Does the same as [`_SET_CAN_PED_SELECT_WEAPON`](#\\_0xB4771B9AAF4E68E4) except for all weapons.",
            "examples": [],
            "hash": "0xEFF296097FF1E509",
            "ns": "WEAPON",
            "aliases": ["0xEFF296097FF1E509"],
            "manualHash": true
        },
        "0x75C55983C2C39DAA": {
            "name": "SET_CURRENT_PED_VEHICLE_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x75C55983C2C39DAA",
            "ns": "WEAPON",
            "jhash": "0x8E6F2AF1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB4771B9AAF4E68E4": {
            "name": "_SET_CAN_PED_EQUIP_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.",
            "examples": [],
            "hash": "0xB4771B9AAF4E68E4",
            "ns": "WEAPON",
            "aliases": ["0xB4771B9AAF4E68E4", "_SET_CAN_PED_SELECT_WEAPON"],
            "manualHash": true
        },
        "0xCEA66DAD478CD39B": {
            "name": "SET_FLASH_LIGHT_FADE_DISTANCE",
            "params": [{ "name": "distance", "type": "float" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xCEA66DAD478CD39B",
            "ns": "WEAPON",
            "jhash": "0xB0127EA7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x988DB6FE9B3AC000": {
            "name": "_SET_FLASH_LIGHT_ENABLED",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Enables/disables flashlight on ped's weapon.\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x988DB6FE9B3AC000",
            "ns": "WEAPON",
            "manualHash": true
        },
        "0x208A1888007FC0E6": {
            "name": "SET_PED_DROPS_INVENTORY_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "ammoCount", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x208A1888007FC0E6",
            "ns": "WEAPON",
            "jhash": "0x81FFB874",
            "manualHash": true
        },
        "0xA4EFEF9440A5B0EF": {
            "name": "SET_PED_AMMO_TO_DROP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "ammo", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA4EFEF9440A5B0EF",
            "ns": "WEAPON",
            "jhash": "0x2386A307",
            "manualHash": true
        },
        "0x5FD1E1F011E76D7E": {
            "name": "SET_PED_AMMO_BY_TYPE",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "ammoType",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "ammo", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5FD1E1F011E76D7E",
            "ns": "WEAPON",
            "jhash": "0x311C52BB",
            "manualHash": true
        },
        "0xD0D7B1E680ED4A1A": {
            "name": "SET_PED_GADGET",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "gadgetHash", "type": "Hash" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1/gadgetHash was always 0xFBAB5776 (\"GADGET_PARACHUTE\").  \np2 is always true.  \n```",
            "examples": [],
            "hash": "0xD0D7B1E680ED4A1A",
            "ns": "WEAPON",
            "jhash": "0x8A256D0A",
            "manualHash": true
        },
        "0x6B7513D9966FBEC0": {
            "name": "SET_PED_DROPS_WEAPON",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6B7513D9966FBEC0",
            "ns": "WEAPON",
            "jhash": "0x3D3329FA",
            "manualHash": true
        },
        "0x14E56BC5B5DB6A19": {
            "name": "SET_PED_AMMO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "ammo", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 4: BOOL p3\n```",
            "examples": [],
            "hash": "0x14E56BC5B5DB6A19",
            "ns": "WEAPON",
            "jhash": "0xBF90DF1A",
            "manualHash": true
        },
        "0x8378627201D5497D": {
            "name": "SET_PED_CHANCE_OF_FIRING_BLANKS",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "xBias", "type": "float" },
                { "name": "yBias", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8378627201D5497D",
            "ns": "WEAPON",
            "jhash": "0xB4F44C6E",
            "manualHash": true
        },
        "0x476AE72C1D19D1A8": {
            "name": "SET_PED_DROPS_WEAPONS_WHEN_DEAD",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x476AE72C1D19D1A8",
            "ns": "WEAPON",
            "jhash": "0x8A444056",
            "manualHash": true
        },
        "0x183DADC6AA953186": {
            "name": "SET_PED_INFINITE_AMMO_CLIP",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x183DADC6AA953186",
            "ns": "WEAPON",
            "jhash": "0x5A5E3B67",
            "manualHash": true
        },
        "0x0725A4CCFDED9A70": {
            "name": "SET_PED_CURRENT_WEAPON_VISIBLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "visible", "type": "BOOL" },
                { "name": "deselectWeapon", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nHas 5 parameters since latest patches.  \n```",
            "examples": [],
            "hash": "0x0725A4CCFDED9A70",
            "ns": "WEAPON",
            "jhash": "0x00BECD77",
            "manualHash": true
        },
        "0x3EDCB0505123623B": {
            "name": "SET_PED_INFINITE_AMMO",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "weaponHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3EDCB0505123623B",
            "ns": "WEAPON",
            "jhash": "0x9CB8D278",
            "manualHash": true
        },
        "0x50969B9B89ED5738": {
            "name": "SET_PED_WEAPON_TINT_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "The target weapon hash"
                },
                {
                    "name": "tintIndex",
                    "type": "int",
                    "description": "Tint for weapon hash"
                }
            ],
            "results": "void",
            "description": "```\ntintIndex can be the following:  \n0 : Default/Black\n1 : Green\n2 : Gold\n3 : Pink\n4 : Army\n5 : LSPD\n6 : Orange\n7 : Platinum\n\ntintIndex for MK2 weapons :\n0 : Classic Black\n1 : Classic Gray\n2 : Classic Two-Tone\n3 : Classic White\n4 : Classic Beige\n5 : Classic Green\n6 : Classic Blue\n7 : Classic Earth\n8 : Classic Brown & Black\n9 : Red Contrast\n10 : Blue Contrast\n11 : Yellow Contrast\n12 : Orange Contrast\n13 : Bold Pink\n14 : Bold Purple & Yellow\n15 : Bold Orange\n16 : Bold Green & Purple\n17 : Bold Red Features\n18 : Bold Green Features\n19 : Bold Cyan Features\n20 : Bold Yellow Features\n21 : Bold Red & White\n22 : Bold Blue & White\n23 : Metallic Gold\n24 : Metallic Platinum\n25 : Metallic Gray & Lilac\n26 : Metallic Purple & Lime\n27 : Metallic Red\n28 : Metallic Green\n29 : Metallic Blue\n30 : Metallic White & Aqua\n31 : Metallic Orange & Yellow\n32 : Mettalic Red and Yellow\n```",
            "examples": [],
            "hash": "0x50969B9B89ED5738",
            "ns": "WEAPON",
            "jhash": "0xEB2A7B23",
            "manualHash": true
        },
        "0x9FE5633880ECD8ED": {
            "name": "_SET_PED_WEAPON_LIVERY_COLOR",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                {
                    "name": "camoComponentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "colorIndex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9FE5633880ECD8ED",
            "ns": "WEAPON",
            "aliases": ["0x9FE5633880ECD8ED"],
            "manualHash": true
        },
        "0xECDC202B25E5CF48": {
            "name": "_SET_PLAYER_AIR_DEFENSE_ZONE_FLAG",
            "params": [
                { "name": "player", "type": "Player" },
                { "name": "zoneId", "type": "int" },
                { "name": "enable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xECDC202B25E5CF48",
            "ns": "WEAPON",
            "aliases": ["0xECDC202B25E5CF48"],
            "manualHash": true
        },
        "0xE620FD3512A04F18": {
            "name": "SET_PICKUP_AMMO_AMOUNT_SCALER",
            "params": [{ "name": "p0", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE620FD3512A04F18",
            "ns": "WEAPON",
            "aliases": ["0xE620FD3512A04F18"],
            "jhash": "0xD6460EA2",
            "manualHash": true
        },
        "0xB4C8D77C80C0421E": {
            "name": "SET_PED_SHOOT_ORDNANCE_WEAPON",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "p1", "type": "float" }
            ],
            "results": "Object",
            "description": "```\nReturns handle of the projectile.\n```",
            "examples": [],
            "hash": "0xB4C8D77C80C0421E",
            "ns": "WEAPON",
            "aliases": ["0xB4C8D77C80C0421E"],
            "jhash": "0xEC2E5304",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4757F00BC6323CFE": {
            "name": "_SET_WEAPON_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Hash of the weapon"
                },
                {
                    "name": "damageMultiplier",
                    "type": "float",
                    "description": "Damage Multiplier"
                }
            ],
            "results": "void",
            "description": "Changes the weapon damage output by the given multiplier value.\nDoes NOT need to be called every frame.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetWeaponDamageModifier(`WEAPON_CARBINERIFLE`, 0.8)"
                }
            ],
            "hash": "0x4757F00BC6323CFE",
            "ns": "WEAPON",
            "aliases": [
                "0x4757F00BC6323CFE",
                "_SET_WEAPON_DAMAGE_MODIFIER_THIS_FRAME"
            ],
            "manualHash": true
        },
        "0x1055AC3A667F09D9": {
            "name": "SET_WEAPON_ANIMATION_OVERRIDE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "animStyle", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nChanges the selected ped aiming animation style.   \nNote : You must use GET_HASH_KEY!  \nStrings to use with GET_HASH_KEY :  \n\t\"Ballistic\",  \n\t\"Default\",  \n\t\"Fat\",  \n\t\"Female\",  \n\t\"FirstPerson\",  \n\t\"FirstPersonAiming\",  \n\t\"FirstPersonFranklin\",  \n\t\"FirstPersonFranklinAiming\",  \n\t\"FirstPersonFranklinRNG\",  \n\t\"FirstPersonFranklinScope\",  \n\t\"FirstPersonMPFemale\",  \n\t\"FirstPersonMichael\",  \n\t\"FirstPersonMichaelAiming\",  \n\t\"FirstPersonMichaelRNG\",  \n\t\"FirstPersonMichaelScope\",  \n\t\"FirstPersonRNG\",  \n\t\"FirstPersonScope\",  \n\t\"FirstPersonTrevor\",  \n\t\"FirstPersonTrevorAiming\",  \n\t\"FirstPersonTrevorRNG\",  \n\t\"FirstPersonTrevorScope\",  \n\t\"Franklin\",  \n\t\"Gang\",  \n\t\"Gang1H\",  \n\t\"GangFemale\",  \n\t\"Hillbilly\",  \n\t\"MP_F_Freemode\",  \n\t\"Michael\",  \n\t\"SuperFat\",  \n\t\"Trevor\"  \n```",
            "examples": [],
            "hash": "0x1055AC3A667F09D9",
            "ns": "WEAPON",
            "jhash": "0xA5DF7484",
            "manualHash": true
        },
        "0x4AE5AC8B852D642C": {
            "name": "_SET_WEAPON_EXPLOSION_RADIUS_MULTIPLIER",
            "params": [
                { "name": "weaponHash", "type": "Hash" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x4AE5AC8B852D642C",
            "ns": "WEAPON",
            "manualHash": true
        },
        "0xF827589017D4E4A9": {
            "name": "SET_WEAPON_OBJECT_TINT_INDEX",
            "params": [
                { "name": "weapon", "type": "Object" },
                { "name": "tintIndex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF827589017D4E4A9",
            "ns": "WEAPON",
            "jhash": "0x44ACC1DA",
            "manualHash": true
        },
        "0x5DA825A85D0EA6E6": {
            "name": "_SET_WEAPON_OBJECT_LIVERY_COLOR",
            "params": [
                { "name": "weaponObject", "type": "Object" },
                {
                    "name": "camoComponentHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "colorIndex", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5DA825A85D0EA6E6",
            "ns": "WEAPON",
            "aliases": ["0x5DA825A85D0EA6E6"],
            "manualHash": true
        }
    },
    "ZONE": {
        "0x7EE64D51E8498728": {
            "name": "GET_HASH_OF_MAP_AREA_AT_COORDS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "Hash",
            "description": "```\nReturns a hash representing which part of the map the given coords are located.  \nPossible return values:  \n(Hash of) city -> -289320599  \n(Hash of) countryside -> 2072609373  \nC# Example :  \nPed player = Game.Player.Character;  \nHash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);  \n```",
            "examples": [],
            "hash": "0x7EE64D51E8498728",
            "ns": "ZONE",
            "jhash": "0xB5C5C99B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5C0DE367AA0D911C": {
            "name": "CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL",
            "params": [{ "name": "scheduleId", "type": "int" }],
            "results": "void",
            "description": "```\nOnly used once in the decompiled scripts. Seems to be related to scripted vehicle generators.  \nModified example from \"am_imp_exp.c4\", line 6418:  \n/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));  \netc.  \n*/  \nSTREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);  \nZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);  \n```",
            "examples": [],
            "hash": "0x5C0DE367AA0D911C",
            "ns": "ZONE",
            "jhash": "0x7A72A24E",
            "manualHash": true
        },
        "0x5F7D596BAC2E7777": {
            "name": "OVERRIDE_POPSCHEDULE_VEHICLE_MODEL",
            "params": [
                { "name": "scheduleId", "type": "int" },
                { "name": "vehicleHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nOnly used once in the decompiled scripts. Seems to be related to scripted vehicle generators.  \nModified example from \"am_imp_exp.c4\", line 6406:  \n/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));  \netc.  \n*/  \nZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);  \nSTREAMING::REQUEST_MODEL(vehicleHash);  \n```",
            "examples": [],
            "hash": "0x5F7D596BAC2E7777",
            "ns": "ZONE",
            "jhash": "0x3F0A3680",
            "manualHash": true
        },
        "0xCD90657D4C30E1CA": {
            "name": "GET_NAME_OF_ZONE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "char*",
            "description": "```\nAIRP = Los Santos International Airport  \nALAMO = Alamo Sea  \nALTA = Alta  \nARMYB = Fort Zancudo  \nBANHAMC = Banham Canyon Dr  \nBANNING = Banning  \nBEACH = Vespucci Beach  \nBHAMCA = Banham Canyon  \nBRADP = Braddock Pass  \nBRADT = Braddock Tunnel  \nBURTON = Burton  \nCALAFB = Calafia Bridge  \nCANNY = Raton Canyon  \nCCREAK = Cassidy Creek  \nCHAMH = Chamberlain Hills  \nCHIL = Vinewood Hills  \nCHU = Chumash  \nCMSW = Chiliad Mountain State Wilderness  \nCYPRE = Cypress Flats  \nDAVIS = Davis  \nDELBE = Del Perro Beach  \nDELPE = Del Perro  \nDELSOL = La Puerta  \nDESRT = Grand Senora Desert  \nDOWNT = Downtown  \nDTVINE = Downtown Vinewood  \nEAST_V = East Vinewood  \nEBURO = El Burro Heights  \nELGORL = El Gordo Lighthouse  \nELYSIAN = Elysian Island  \nGALFISH = Galilee  \nGOLF = GWC and Golfing Society  \nGRAPES = Grapeseed  \nGREATC = Great Chaparral  \nHARMO = Harmony  \nHAWICK = Hawick  \nHORS = Vinewood Racetrack  \nHUMLAB = Humane Labs and Research  \nJAIL = Bolingbroke Penitentiary  \nKOREAT = Little Seoul  \nLACT = Land Act Reservoir  \nLAGO = Lago Zancudo  \nLDAM = Land Act Dam  \nLEGSQU = Legion Square  \nLMESA = La Mesa  \nLOSPUER = La Puerta  \nMIRR = Mirror Park  \nMORN = Morningwood  \nMOVIE = Richards Majestic  \nMTCHIL = Mount Chiliad  \nMTGORDO = Mount Gordo  \nMTJOSE = Mount Josiah  \nMURRI = Murrieta Heights  \nNCHU = North Chumash  \nNOOSE = N.O.O.S.E  \nOCEANA = Pacific Ocean  \nPALCOV = Paleto Cove  \nPALETO = Paleto Bay  \nPALFOR = Paleto Forest  \nPALHIGH = Palomino Highlands  \nPALMPOW = Palmer-Taylor Power Station  \nPBLUFF = Pacific Bluffs  \nPBOX = Pillbox Hill  \nPROCOB = Procopio Beach  \nRANCHO = Rancho  \nRGLEN = Richman Glen  \nRICHM = Richman  \nROCKF = Rockford Hills  \nRTRAK = Redwood Lights Track  \nSANAND = San Andreas  \nSANCHIA = San Chianski Mountain Range  \nSANDY = Sandy Shores  \nSKID = Mission Row  \nSLAB = Stab City  \nSTAD = Maze Bank Arena  \nSTRAW = Strawberry  \nTATAMO = Tataviam Mountains  \nTERMINA = Terminal  \nTEXTI = Textile City  \nTONGVAH = Tongva Hills  \nTONGVAV = Tongva Valley  \nVCANA = Vespucci Canals  \nVESP = Vespucci  \nVINE = Vinewood  \nWINDF = Ron Alternates Wind Farm  \nWVINE = West Vinewood  \nZANCUDO = Zancudo River  \nZP_ORT = Port of South Los Santos  \nZQ_UAR = Davis Quartz  \nPROL = Prologue / North Yankton\nISHeist = Cayo Perico Island\n```",
            "examples": [],
            "hash": "0xCD90657D4C30E1CA",
            "ns": "ZONE",
            "jhash": "0x7875CE91",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x98CD1D2934B76CC1": {
            "name": "GET_ZONE_FROM_NAME_ID",
            "params": [{ "name": "zoneName", "type": "char*" }],
            "results": "int",
            "description": "```\n'zoneName' corresponds to an entry in 'popzone.ipl'.  \nAIRP = Los Santos International Airport  \nALAMO = Alamo Sea  \nALTA = Alta  \nARMYB = Fort Zancudo  \nBANHAMC = Banham Canyon Dr  \nBANNING = Banning  \nBEACH = Vespucci Beach  \nBHAMCA = Banham Canyon  \nBRADP = Braddock Pass  \nBRADT = Braddock Tunnel  \nBURTON = Burton  \nCALAFB = Calafia Bridge  \nCANNY = Raton Canyon  \nCCREAK = Cassidy Creek  \nCHAMH = Chamberlain Hills  \nCHIL = Vinewood Hills  \nCHU = Chumash  \nCMSW = Chiliad Mountain State Wilderness  \nCYPRE = Cypress Flats  \nDAVIS = Davis  \nDELBE = Del Perro Beach  \nDELPE = Del Perro  \nDELSOL = La Puerta  \nDESRT = Grand Senora Desert  \nDOWNT = Downtown  \nDTVINE = Downtown Vinewood  \nEAST_V = East Vinewood  \nEBURO = El Burro Heights  \nELGORL = El Gordo Lighthouse  \nELYSIAN = Elysian Island  \nGALFISH = Galilee  \nGOLF = GWC and Golfing Society  \nGRAPES = Grapeseed  \nGREATC = Great Chaparral  \nHARMO = Harmony  \nHAWICK = Hawick  \nHORS = Vinewood Racetrack  \nHUMLAB = Humane Labs and Research  \nJAIL = Bolingbroke Penitentiary  \nKOREAT = Little Seoul  \nLACT = Land Act Reservoir  \nLAGO = Lago Zancudo  \nLDAM = Land Act Dam  \nLEGSQU = Legion Square  \nLMESA = La Mesa  \nLOSPUER = La Puerta  \nMIRR = Mirror Park  \nMORN = Morningwood  \nMOVIE = Richards Majestic  \nMTCHIL = Mount Chiliad  \nMTGORDO = Mount Gordo  \nMTJOSE = Mount Josiah  \nMURRI = Murrieta Heights  \nNCHU = North Chumash  \nNOOSE = N.O.O.S.E  \nOCEANA = Pacific Ocean  \nPALCOV = Paleto Cove  \nPALETO = Paleto Bay  \nPALFOR = Paleto Forest  \nPALHIGH = Palomino Highlands  \nPALMPOW = Palmer-Taylor Power Station  \nPBLUFF = Pacific Bluffs  \nPBOX = Pillbox Hill  \nPROCOB = Procopio Beach  \nRANCHO = Rancho  \nRGLEN = Richman Glen  \nRICHM = Richman  \nROCKF = Rockford Hills  \nRTRAK = Redwood Lights Track  \nSANAND = San Andreas  \nSANCHIA = San Chianski Mountain Range  \nSANDY = Sandy Shores  \nSKID = Mission Row  \nSLAB = Stab City  \nSTAD = Maze Bank Arena  \nSTRAW = Strawberry  \nTATAMO = Tataviam Mountains  \nTERMINA = Terminal  \nTEXTI = Textile City  \nTONGVAH = Tongva Hills  \nTONGVAV = Tongva Valley  \nVCANA = Vespucci Canals  \nVESP = Vespucci  \nVINE = Vinewood  \nWINDF = Ron Alternates Wind Farm  \nWVINE = West Vinewood  \nZANCUDO = Zancudo River  \nZP_ORT = Port of South Los Santos  \nZQ_UAR = Davis Quartz  \n```",
            "examples": [],
            "hash": "0x98CD1D2934B76CC1",
            "ns": "ZONE",
            "jhash": "0x8EC68304",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x27040C25DE6CB2F4": {
            "name": "GET_ZONE_AT_COORDS",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x27040C25DE6CB2F4",
            "ns": "ZONE",
            "jhash": "0xC9018181",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4334BC40AA0CB4BB": {
            "name": "GET_ZONE_POPSCHEDULE",
            "params": [{ "name": "zoneId", "type": "int" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x4334BC40AA0CB4BB",
            "ns": "ZONE",
            "jhash": "0x20AB2FC9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5F7B268D15BA0739": {
            "name": "GET_ZONE_SCUMMINESS",
            "params": [
                {
                    "name": "zoneId",
                    "type": "int",
                    "description": "The zone id"
                }
            ],
            "results": "int",
            "description": "Gets the zone scumminess level, used to calculate the cellphone signal strength.\n\n```cpp\nenum eZoneScumminess\n{\n    SCUMMINESS_POSH = 0,\n    SCUMMINESS_NICE = 1,\n    SCUMMINESS_ABOVE_AVERAGE = 2,\n    SCUMMINESS_BELOW_AVERAGE = 3,\n    SCUMMINESS_CRAP = 4,\n    SCUMMINESS_SCUM = 5\n}\n```",
            "examples": [],
            "hash": "0x5F7B268D15BA0739",
            "ns": "ZONE",
            "jhash": "0xB2FB5C4C",
            "manualHash": true,
            "resultsDescription": "The zone scumminess level"
        },
        "0xBA5ECEEA120E5611": {
            "name": "SET_ZONE_ENABLED",
            "params": [
                { "name": "zoneId", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA5ECEEA120E5611",
            "ns": "ZONE",
            "jhash": "0x04E21B03",
            "manualHash": true
        }
    },
    "VEHICLE": {
        "0x54B0F614960F4A5F": {
            "name": "ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "p6", "type": "float" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x54B0F614960F4A5F",
            "ns": "VEHICLE",
            "aliases": [
                "0x54B0F614960F4A5F",
                "_ADD_VEHICLE_COMBAT_AVOIDANCE_AREA"
            ],
            "jhash": "0x5AB26C2B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB72E26D81006005B": {
            "name": "ADD_VEHICLE_UPSIDEDOWN_CHECK",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB72E26D81006005B",
            "ns": "VEHICLE",
            "jhash": "0x3A13D384",
            "manualHash": true
        },
        "0xB264C4D2F2B0A78B": {
            "name": "ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "This native it's a debug native. Won't do anything.",
            "examples": [],
            "hash": "0xB264C4D2F2B0A78B",
            "ns": "VEHICLE",
            "aliases": ["0xB264C4D2F2B0A78B"],
            "jhash": "0x45F72495",
            "manualHash": true
        },
        "0x99AD4CCCB128CBC9": {
            "name": "ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x99AD4CCCB128CBC9",
            "ns": "VEHICLE",
            "aliases": ["0x99AD4CCCB128CBC9"],
            "jhash": "0x811373DE",
            "manualHash": true
        },
        "0x2CE544C68FB812A0": {
            "name": "ADD_ROAD_NODE_SPEED_ZONE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "speed", "type": "float" },
                { "name": "p5", "type": "BOOL" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2CE544C68FB812A0",
            "ns": "VEHICLE",
            "aliases": ["0x2CE544C68FB812A0", "_ADD_SPEED_ZONE_FOR_COORD"],
            "jhash": "0xD6685803",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2D34FC3BC4ADB780": {
            "name": "ARE_ANY_VEHICLE_SEATS_FREE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns false if every seat is occupied.  \n```",
            "examples": [],
            "hash": "0x2D34FC3BC4ADB780",
            "ns": "VEHICLE",
            "aliases": ["_IS_ANY_VEHICLE_SEAT_EMPTY"],
            "jhash": "0x648E685A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x11D862A3E977A9EF": {
            "name": "ARE_ALL_VEHICLE_WINDOWS_INTACT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nAppears to return false if any window is broken.  \n```",
            "examples": [],
            "hash": "0x11D862A3E977A9EF",
            "ns": "VEHICLE",
            "aliases": ["_ARE_ALL_VEHICLE_WINDOWS_INTACT"],
            "jhash": "0xBB619744",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAEF12960FA943792": {
            "name": "_ARE_HELI_STUB_WINGS_DEPLOYED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "Only used with the \"akula\" in the decompiled native scripts.\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xAEF12960FA943792",
            "ns": "VEHICLE",
            "aliases": ["0xAEF12960FA943792"],
            "manualHash": true
        },
        "0x2FA9923062DD396C": {
            "name": "ADD_VEHICLE_STUCK_CHECK_WITH_WARP",
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" },
                { "name": "p5", "type": "BOOL" },
                { "name": "p6", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2FA9923062DD396C",
            "ns": "VEHICLE",
            "jhash": "0xC8B789AD",
            "manualHash": true
        },
        "0xD0917A423314BBA8": {
            "name": "_ARE_BOMB_BAY_DOORS_OPEN",
            "params": [
                {
                    "name": "aircraft",
                    "type": "Vehicle",
                    "description": "The vehicle to check the bomb bay doors on."
                }
            ],
            "results": "BOOL",
            "description": "Returns true when the bomb bay doors of this plane are open. False if they're closed.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\n\nif AreBombBayDoorsOpen(vehicle) then\n    print(\"The doors are open!\")\nelse\n    print(\"The doors are closed!\")\nend\n"
                },
                {
                    "lang": "cs",
                    "code": "int vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\n\nif (AreBombBayDoorsOpen(vehicle))\n{\n    Debug.WriteLine(\"The doors are open!\");\n}\nelse\n{\n    Debug.WriteLine(\"The doors are closed!\");\n}"
                }
            ],
            "hash": "0xD0917A423314BBA8",
            "ns": "VEHICLE",
            "aliases": ["0xD0917A423314BBA8", "_GET_ARE_BOMB_BAY_DOORS_OPEN"],
            "manualHash": true,
            "resultsDescription": "A bool indicating the state of the doors (true = open, false = closed)."
        },
        "0x755D6D5267CBBD7E": {
            "name": "ARE_PLANE_PROPELLERS_INTACT",
            "params": [{ "name": "plane", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x755D6D5267CBBD7E",
            "ns": "VEHICLE",
            "aliases": ["0x755D6D5267CBBD7E", "_ARE_PROPELLERS_UNDAMAGED"],
            "jhash": "0xABBDD5C6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x16B5E274BDE402F8": {
            "name": "ATTACH_VEHICLE_ON_TO_TRAILER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to attach to the trailer"
                },
                {
                    "name": "trailer",
                    "type": "Vehicle",
                    "description": "The trailer to attach the vehicle to"
                },
                {
                    "name": "offsetX",
                    "type": "float",
                    "description": "The x offset of the vehicle"
                },
                {
                    "name": "offsetY",
                    "type": "float",
                    "description": "The y offset of the vehicle"
                },
                {
                    "name": "offsetZ",
                    "type": "float",
                    "description": "The z offset of the vehicle"
                },
                {
                    "name": "coordsX",
                    "type": "float",
                    "description": "The x coords of where you want the vehicle placed (must be an offset from the trailer itself)"
                },
                {
                    "name": "coordsY",
                    "type": "float",
                    "description": "The y coords of where you want the vehicle placed (must be an offset from the trailer itself)"
                },
                {
                    "name": "coordsZ",
                    "type": "float",
                    "description": "The z coords of where you want the vehicle placed (must be an offset from the trailer itself)"
                },
                {
                    "name": "rotationX",
                    "type": "float",
                    "description": "The x rotation of where you want the vehicle placed"
                },
                {
                    "name": "rotationY",
                    "type": "float",
                    "description": "The y rotation of where you want the vehicle placed"
                },
                {
                    "name": "rotationZ",
                    "type": "float",
                    "description": "The z rotation of where you want the vehicle placed"
                },
                {
                    "name": "disableColls",
                    "type": "float",
                    "description": "Should actually be a boolean, this will disable the collision between the vehicle you're attaching and the trailer"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Request the model before creating it\nlocal truckTrailer = CreateVehicle(`tr2`, GetOffsetFromEntityInWorldCoords(PlayerPedId(), 0.0, 8.0, 0.0), true)\n\n-- Open the rear ramp so you can drive a vehicle on\nSetVehicleDoorOpen(truckTrailer, 5, false, false)\n\n-- Get the vehicle you're in and it's coords and rotation\nlocal veh = GetVehiclePedIsIn(PlayerPedId())\nlocal vehCoords = GetEntityCoords(veh)\nlocal vehRotation = GetEntityRotation(veh)\n\n-- Park the car where on the trailer you want it, you could make sure your vehicle is touching the trailer first using \"IsEntityTouchingEntity\"\nAttachVehicleOnToTrailer(veh, truckTrailer, 0.0, 0.0, 0.0, GetOffsetFromEntityGivenWorldCoords(truckTrailer, vehCoords), vehRotation, false)\n\n-- Do the following to detach the vehicle from the trailer\nDetachEntity(veh, true, false)"
                }
            ],
            "hash": "0x16B5E274BDE402F8",
            "ns": "VEHICLE",
            "aliases": ["0x16B5E274BDE402F8"],
            "jhash": "0x12AC1A16",
            "manualHash": true
        },
        "0xA1DD82F3CCF9A01E": {
            "name": "ATTACH_ENTITY_TO_CARGOBOB",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "entity", "type": "Entity" },
                { "name": "p2", "type": "int" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA1DD82F3CCF9A01E",
            "ns": "VEHICLE",
            "aliases": ["0xA1DD82F3CCF9A01E", "_ATTACH_ENTITY_TO_CARGOBOB"],
            "jhash": "0xAEB29F98",
            "manualHash": true
        },
        "0x26C10ECBDA5D043B": {
            "name": "CAN_ANCHOR_BOAT_HERE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x26C10ECBDA5D043B",
            "ns": "VEHICLE",
            "aliases": [
                "0x2467A2D807D37CA3",
                "_GET_BOAT_ANCHOR",
                "_CAN_BOAT_BE_ANCHORED"
            ],
            "jhash": "0xE97A4F5E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A9128352EAC9E85": {
            "name": "_ARE_OUTRIGGER_LEGS_DEPLOYED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "Returns whether the outrigger legs are deployed for the vehicle.\nThe Chernobog is one of the few vehicles with outrigger legs.\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nlocal deployed = AreOutriggerLegsDeployed(vehicle)\nprint(\"deploy state:\", deployed)"
                }
            ],
            "hash": "0x3A9128352EAC9E85",
            "ns": "VEHICLE",
            "aliases": ["0x3A9128352EAC9E85"],
            "manualHash": true,
            "resultsDescription": "The deployment state of the vehicle's outrigger legs"
        },
        "0x3C7D42D58F770B54": {
            "name": "ATTACH_VEHICLE_TO_TRAILER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "trailer", "type": "Vehicle" },
                { "name": "radius", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3C7D42D58F770B54",
            "ns": "VEHICLE",
            "jhash": "0x2133977F",
            "manualHash": true
        },
        "0x5991A01434CE9677": {
            "name": "_ARE_PLANE_WINGS_INTACT",
            "params": [{ "name": "plane", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5991A01434CE9677",
            "ns": "VEHICLE",
            "aliases": [
                "0x5991A01434CE9677",
                "ADD_A_MARKER_OVER_VEHICLE",
                "_ARE_VEHICLE_WINGS_INTACT"
            ],
            "jhash": "0xAF8CB3DF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x260BE8F09E326A20": {
            "name": "BRING_VEHICLE_TO_HALT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to stop."
                },
                {
                    "name": "distance",
                    "type": "float",
                    "description": "The distance from the initial coords at which the vehicle should come to rest."
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "The length of time in seconds to hold the car at rest after stopping."
                },
                {
                    "name": "bControlVerticalVelocity",
                    "type": "BOOL",
                    "description": "`false` by default which allows gravity to act normally in the z direction. Enable this option to halt the vehicle's vertical velocity as well."
                }
            ],
            "results": "void",
            "description": "This native makes the vehicle stop immediately, as it happens when we enter a multiplayer garage.",
            "examples": [],
            "hash": "0x260BE8F09E326A20",
            "ns": "VEHICLE",
            "aliases": ["0x260BE8F09E326A20", "_SET_VEHICLE_HALT"],
            "jhash": "0xCBC7D3C8",
            "manualHash": true
        },
        "0x6A98C2ECF57FA5D4": {
            "name": "_ATTACH_CONTAINER_TO_HANDLER_FRAME",
            "params": [
                { "name": "handler", "type": "Vehicle" },
                { "name": "container", "type": "Entity" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6A98C2ECF57FA5D4",
            "ns": "VEHICLE",
            "jhash": "0x20AB5783",
            "manualHash": true
        },
        "0x24F4121D07579880": {
            "name": "_CAN_ANCHOR_BOAT_HERE_2",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nDiffers from 0x26C10ECBDA5D043B in that 0x140EFCC10 (1604 retail) is called with a2 = true.\n\nNativeDB Introduced: v678\n```",
            "examples": [],
            "hash": "0x24F4121D07579880",
            "ns": "VEHICLE",
            "aliases": ["_CAN_BOAT_BE_ANCHORED_2"],
            "manualHash": true
        },
        "0x4127F1D84E347769": {
            "name": "ATTACH_VEHICLE_TO_CARGOBOB",
            "params": [
                {
                    "name": "cargobob",
                    "type": "Vehicle",
                    "description": "The cargobob"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle that will be attached"
                },
                {
                    "name": "vehicleBoneIndex",
                    "type": "int",
                    "description": "A Vehicle bone the hook/magnet should attach to or -1 for none/default [GET_ENTITY_BONE_INDEX_BY_NAME](#\\_0xFB71170B7E76ACBA)"
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "x hook/magnet Offset"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "y hook/magnet Offset"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "z hook/magnet Offset"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "function RequestVehicleModel(modelHash)\n    if not IsModelInCdimage(modelHash) then return end\n    RequestModel(modelHash)\n    while not HasModelLoaded(modelHash) do \n      Wait(0)\n    end\nend\n\nRegisterCommand('spawnCargobob', function(source, args)\n    local cargobobHash = `cargobob` \n    local carHash = `adder` \n    local myPed = PlayerPedId()\n\n    local spawnCoords = GetEntityCoords(myPed)\n\n    RequestVehicleModel(cargobobHash)\n    local cargobob = CreateVehicle(cargobobHash, spawnCoords+vec3(0.0,0.0, 10.0), GetEntityHeading(myPed), true, false) -- Spawns a cargobob above players location\n    SetHeliBladesSpeed(cargobob, 1.0) -- sets the helicoper blades to max spin speed\n    SetPedIntoVehicle(myPed, cargobob, -1) -- sets the player into the cargobob\n    SetModelAsNoLongerNeeded(cargobobHash) -- removes model from game memory as we no longer need it\n    CreatePickUpRopeForCargobob(cargobob, 1) -- 0 = hook, 1 = Magnet Enable rope from cargobob\n\n    RequestVehicleModel(carHash)\n    local vehicle = CreateVehicle(carHash, spawnCoords, GetEntityHeading(myPed), true, false) -- Spawns a vehicle for the cargobob to pickup\n    SetModelAsNoLongerNeeded(carHash)\n    Wait(1000)\n    AttachVehicleToCargobob(cargobob, vehicle, GetEntityBoneIndexByName(vehicle, 'bodyshell'), 0.0, 0.0, 0.0) --Attach the vehicle to the magnet or hook\nend)"
                }
            ],
            "hash": "0x4127F1D84E347769",
            "ns": "VEHICLE",
            "jhash": "0x607DC9D5",
            "manualHash": true
        },
        "0x30785D90C956BF35": {
            "name": "CAN_SHUFFLE_SEAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x30785D90C956BF35",
            "ns": "VEHICLE",
            "jhash": "0xB3EB01ED",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x29A16F8D621C4508": {
            "name": "ATTACH_VEHICLE_TO_TOW_TRUCK",
            "params": [
                { "name": "towTruck", "type": "Vehicle" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "rear", "type": "BOOL" },
                { "name": "hookOffsetX", "type": "float" },
                { "name": "hookOffsetY", "type": "float" },
                { "name": "hookOffsetZ", "type": "float" }
            ],
            "results": "void",
            "description": "```\nHookOffset defines where the hook is attached. leave at 0 for default attachment.\n```",
            "examples": [],
            "hash": "0x29A16F8D621C4508",
            "ns": "VEHICLE",
            "jhash": "0x8151571A",
            "manualHash": true
        },
        "0x55E1D2758F34E437": {
            "name": "CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x55E1D2758F34E437",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x51E1E33D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE01903C47C7AC89E": {
            "name": "CLEAR_LAST_DRIVEN_VEHICLE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE01903C47C7AC89E",
            "ns": "VEHICLE",
            "aliases": ["0xE01903C47C7AC89E"],
            "jhash": "0x07186AD9",
            "manualHash": true
        },
        "0x5FFBDEEC3E8E2009": {
            "name": "CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5FFBDEEC3E8E2009",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x7CE00B29",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3556041742A0DC74": {
            "name": "CLOSE_BOMB_BAY_DOORS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3556041742A0DC74",
            "ns": "VEHICLE",
            "aliases": ["0x3556041742A0DC74"],
            "jhash": "0xF8EC5751",
            "manualHash": true
        },
        "0x0A436B8643716D14": {
            "name": "CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST",
            "params": [],
            "results": "void",
            "description": "Removes the cargen area of interest and resumes normal cargen spawning.\n\nYou can set the area of interest with [`SET_VEHICLE_GENERATOR_AREA_OF_INTEREST`](#\\_0x9A75585FB2E54FAD)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example clears the area of interest (cargen) and resumes normal spawning\nClearVehicleGeneratorAreaOfInterest()"
                },
                {
                    "lang": "js",
                    "code": "// This example clears the area of interest (cargen) and resumes normal spawning\nClearVehicleGeneratorAreaOfInterest();"
                },
                {
                    "lang": "cs",
                    "code": "// This example clears the area of interest (cargen) and resumes normal spawning\nusing static CitizenFX.Core.Native.API;\n\nClearVehicleGeneratorAreaOfInterest();"
                }
            ],
            "hash": "0x0A436B8643716D14",
            "ns": "VEHICLE",
            "aliases": ["0x0A436B8643716D14"],
            "jhash": "0x6C73E45A",
            "manualHash": true
        },
        "0xCFC8BE9A5E1FE575": {
            "name": "CONTROL_LANDING_GEAR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "int" }
            ],
            "results": "void",
            "description": "```\nWorks for vehicles with a retractable landing gear  \nlanding gear states:  \n0: Deployed  \n1: Closing  \n2: Opening  \n3: Retracted  \n```",
            "examples": [],
            "hash": "0xCFC8BE9A5E1FE575",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_LANDING_GEAR"],
            "jhash": "0x24F873FB",
            "manualHash": true
        },
        "0x6D6AF961B72728AE": {
            "name": "CLEAR_VEHICLE_ROUTE_HISTORY",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6D6AF961B72728AE",
            "ns": "VEHICLE",
            "aliases": ["0x6D6AF961B72728AE"],
            "jhash": "0x8DD9AA0C",
            "manualHash": true
        },
        "0xAA3F739ABDDCF21F": {
            "name": "_CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA3F739ABDDCF21F",
            "ns": "VEHICLE",
            "aliases": ["0xAA3F739ABDDCF21F"],
            "manualHash": true
        },
        "0xE44A982368A4AF23": {
            "name": "COPY_VEHICLE_DAMAGES",
            "params": [
                {
                    "name": "sourceVehicle",
                    "type": "Vehicle",
                    "description": "The source to copy the vehicle damage."
                },
                {
                    "name": "targetVehicle",
                    "type": "Vehicle",
                    "description": "The target to paste the vehicle damage."
                }
            ],
            "results": "void",
            "description": "Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.",
            "examples": [],
            "hash": "0xE44A982368A4AF23",
            "ns": "VEHICLE",
            "aliases": ["0xE44A982368A4AF23"],
            "jhash": "0xBAE491C7",
            "manualHash": true
        },
        "0x7BEB0C7A235F6F3B": {
            "name": "CREATE_PICK_UP_ROPE_FOR_CARGOBOB",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "state", "type": "int" }
            ],
            "results": "void",
            "description": "```\nDrops the Hook/Magnet on a cargobob  \nstate  \nenum eCargobobHook  \n{  \n\tCARGOBOB_HOOK = 0,  \n\tCARGOBOB_MAGNET = 1,  \n};  \n```",
            "examples": [],
            "hash": "0x7BEB0C7A235F6F3B",
            "ns": "VEHICLE",
            "aliases": ["_ENABLE_CARGOBOB_HOOK"],
            "jhash": "0x4D3C9A99",
            "manualHash": true
        },
        "0xAF35D0D2583051B0": {
            "name": "CREATE_VEHICLE",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model of vehicle to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "Heading to face towards, in degrees."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the vehicle. If false, the vehicle exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the vehicle as pinned to the script host in the R\\* network model."
                }
            ],
            "results": "Vehicle",
            "description": "Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating\nscript as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n```\nNativeDB Added Parameter 8: BOOL p7\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ModelHash = `adder` -- Use Compile-time hashes to get the hash of this model\nif not IsModelInCdimage(ModelHash) then return end\nRequestModel(ModelHash) -- Request the model\nwhile not HasModelLoaded(ModelHash) do -- Waits for the model to load\n  Wait(0)\nend\nlocal MyPed = PlayerPedId()\nlocal Vehicle = CreateVehicle(ModelHash, GetEntityCoords(MyPed), GetEntityHeading(MyPed), true, false) -- Spawns a networked vehicle on your current coords\nSetModelAsNoLongerNeeded(ModelHash) -- removes model from game memory as we no longer need it"
                }
            ],
            "hash": "0xAF35D0D2583051B0",
            "ns": "VEHICLE",
            "jhash": "0xDD75460A",
            "manualHash": true,
            "resultsDescription": "A script handle (fwScriptGuid index) for the vehicle, or `0` if the vehicle failed to be created."
        },
        "0x5B76B14AE875C795": {
            "name": "DELETE_MISSION_TRAIN",
            "params": [{ "name": "train", "type": "Vehicle*" }],
            "results": "void",
            "description": "Used to delete mission trains created with [`CREATE_MISSION_TRAIN`](#\\_0x63C6CCA8E68AE8C8).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local train = CreateMissionTrain(21, 40.2, -1201.3, 31.0, false)\nDeleteMissionTrain(train)"
                }
            ],
            "hash": "0x5B76B14AE875C795",
            "ns": "VEHICLE",
            "jhash": "0x86C9497D",
            "manualHash": true
        },
        "0x63C6CCA8E68AE8C8": {
            "name": "CREATE_MISSION_TRAIN",
            "params": [
                {
                    "name": "variation",
                    "type": "int",
                    "description": "The variation id, these can range from 0 to 26 as of build 2802 (previously `0-25` in build 2372 and `0-24` before that)."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "direction",
                    "type": "BOOL",
                    "description": "The direction in which the train will go (true or false)"
                }
            ],
            "results": "Vehicle",
            "description": "Train models must be [requested](#\\_0x963D27A58DF860AC) before use. See trains.xml (located in `Grand Theft Auto V\\update\\update.rpf\\common\\data\\levels\\gta5\\trains.xml`) for freight and metro variations.\n\nModel names to request can be found by searching `model_name` in the file.\n\nThe `Lua` usage example provided down below has been provided in such way so users can test each and every train variation.\n\n### Newly added parameters (seen in 2372 build)\n\n```\nNativeDB Added Parameter 6: BOOL isNetwork\nNativeDB Added Parameter 7: BOOL netMissionEntity\n```\n\n*   **isNetwork**: Whether to create a network object for the train. If false, the train exists only locally.\n*   **netMissionEntity**: Whether to register the train as pinned to the script host in the R\\* network model.\n\n### Train Models:\n\n*   freight\n\n### Carriage Models:\n\n*   freightcar\n*   freightcar2 (Added v2372)\n*   freightcont1\n*   freightcont2\n*   freightgrain\n*   metrotrain\n*   tankercar\n\n### Some train variations (default from trains.xml as of build 2372)\n\n*   17. Very long train and freight variation.\n*   18. Freight train only.\n*   26. Double metro train (with both models flipped opposite to each other). This used to be `25` before the 2802 build, it also used to be `24` before the 2372 build.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "--[[ \n    This function needs to be invoked prior to calling CreateMissionTrain  or the trains (as well as its carriages) won't spawn.\n    Could also result in a game-crash when CreateMissionTrain is called without\n    loading the train model needed for the variation before-hand.\n]]\nfunction loadTrainModels()\n    local trainsAndCarriages = {\n        'freight', 'metrotrain', 'freightcont1', 'freightcar', \n        'freightcar2', 'freightcont2', 'tankercar', 'freightgrain'\n    }\n\n    for _, vehicleName in ipairs(trainsAndCarriages) do\n        local modelHashKey = GetHashKey(vehicleName)\n        RequestModel(modelHashKey) -- load the model\n        -- wait for the model to load\n        while not HasModelLoaded(modelHashKey) do\n            Citizen.Wait(500)\n        end\n    end\nend\n\nloadTrainModels()\n\nRegisterCommand(\"createtrain\", function(source, args, rawCommand)\n    if #args < 1 then\n        TriggerEvent('chat:addMessage', {\n            args = { \n                'Error, provide a variation id, you can find those in trains.xml. Variations range from 0 to 26.'\n            }\n        })\n        return\n    end\n    \n    local playerCoords = GetEntityCoords(PlayerPedId())\n     -- Now actually create a train using a variation\n     -- These coordinates were used for testing: 1438.98, 6405.92, 34.19\n    CreateMissionTrain(\n        tonumber(args[1]),\n        playerCoords.x, playerCoords.y, playerCoords.z,\n        true,\n        true,\n        true\n    )\nend, false)"
                }
            ],
            "hash": "0x63C6CCA8E68AE8C8",
            "ns": "VEHICLE",
            "jhash": "0xD4C2EAFD",
            "manualHash": true,
            "resultsDescription": "A script handle (fwScriptGuid index) for the train, or 0 if the train failed to be created."
        },
        "0x9DEF883114668116": {
            "name": "CREATE_SCRIPT_VEHICLE_GENERATOR",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "heading", "type": "float" },
                { "name": "p4", "type": "float" },
                { "name": "p5", "type": "float" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "p7", "type": "int" },
                { "name": "p8", "type": "int" },
                { "name": "p9", "type": "int" },
                { "name": "p10", "type": "int" },
                { "name": "p11", "type": "BOOL" },
                { "name": "p12", "type": "BOOL" },
                { "name": "p13", "type": "BOOL" },
                { "name": "p14", "type": "BOOL" },
                { "name": "p15", "type": "BOOL" },
                { "name": "p16", "type": "int" }
            ],
            "results": "int",
            "description": "```\nCreates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.  \nParameters:  \na/w/s - Generator position  \nheading - Generator heading  \np4 - Unknown (always 5.0)  \np5 - Unknown (always 3.0)  \nmodelHash - Vehicle model hash  \np7/8/9/10 - Unknown (always -1)  \np11 - Unknown (usually TRUE, only one instance of FALSE)  \np12/13 - Unknown (always FALSE)  \np14 - Unknown (usally FALSE, only two instances of TRUE)  \np15 - Unknown (always TRUE)  \np16 - Unknown (always -1)  \nVector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);\tCREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY(\"adder\"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);  \n```",
            "examples": [],
            "hash": "0x9DEF883114668116",
            "ns": "VEHICLE",
            "jhash": "0x25A9A261",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x736A718577F39C7D": {
            "name": "DELETE_ALL_TRAINS",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x736A718577F39C7D",
            "ns": "VEHICLE",
            "jhash": "0x83DE7ABF",
            "manualHash": true
        },
        "0xEA386986E786A54F": {
            "name": "DELETE_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle*" }],
            "results": "void",
            "description": "```\nDeletes a vehicle.  \nThe vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);  \neg how to use:  \nSET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);  \nDELETE_VEHICLE(&vehicle);  \nDeletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.  \n```",
            "examples": [],
            "hash": "0xEA386986E786A54F",
            "ns": "VEHICLE",
            "jhash": "0x9803AF60",
            "manualHash": true
        },
        "0x22102C9ABFCF125D": {
            "name": "DELETE_SCRIPT_VEHICLE_GENERATOR",
            "params": [{ "name": "vehicleGenerator", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x22102C9ABFCF125D",
            "ns": "VEHICLE",
            "jhash": "0xE4328E3F",
            "manualHash": true
        },
        "0x7C0043FDFF6436BC": {
            "name": "DETACH_CONTAINER_FROM_HANDLER_FRAME",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7C0043FDFF6436BC",
            "ns": "VEHICLE",
            "aliases": ["0x7C0043FDFF6436BC"],
            "jhash": "0x0F11D01F",
            "manualHash": true
        },
        "0x0E21D3DF1051399D": {
            "name": "DETACH_VEHICLE_FROM_CARGOBOB",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0E21D3DF1051399D",
            "ns": "VEHICLE",
            "jhash": "0x83D3D331",
            "manualHash": true
        },
        "0xD0E9CE05A1E68CD8": {
            "name": "DETACH_VEHICLE_FROM_ANY_TOW_TRUCK",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD0E9CE05A1E68CD8",
            "ns": "VEHICLE",
            "jhash": "0x3BF93651",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAF03011701811146": {
            "name": "_DETACH_ENTITY_FROM_CARGOBOB",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xAF03011701811146",
            "ns": "VEHICLE",
            "aliases": ["0xAF03011701811146"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xADF7BE450512C12F": {
            "name": "DETACH_VEHICLE_FROM_ANY_CARGOBOB",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xADF7BE450512C12F",
            "ns": "VEHICLE",
            "jhash": "0x50E0EABE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x500873A45724C863": {
            "name": "DISABLE_INDIVIDUAL_PLANE_PROPELLER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "propeller", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x500873A45724C863",
            "ns": "VEHICLE",
            "aliases": ["0x500873A45724C863", "_DISABLE_PLANE_PROPELLER"],
            "jhash": "0x004926A3",
            "manualHash": true
        },
        "0xC2DB6B6708350ED8": {
            "name": "DETACH_VEHICLE_FROM_TOW_TRUCK",
            "params": [
                { "name": "towTruck", "type": "Vehicle" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "void",
            "description": "```\nFirst two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.  \n```",
            "examples": [],
            "hash": "0xC2DB6B6708350ED8",
            "ns": "VEHICLE",
            "jhash": "0xC666CF33",
            "manualHash": true
        },
        "0x90532EDF0D2BDD86": {
            "name": "DETACH_VEHICLE_FROM_TRAILER",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x90532EDF0D2BDD86",
            "ns": "VEHICLE",
            "jhash": "0xB5DBF91D",
            "manualHash": true
        },
        "0x23428FC53C60919C": {
            "name": "DISABLE_PLANE_AILERON",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x23428FC53C60919C",
            "ns": "VEHICLE",
            "jhash": "0x7E84C45C",
            "manualHash": true
        },
        "0x1821D91AD4B56108": {
            "name": "DOES_CARGOBOB_HAVE_PICK_UP_ROPE",
            "params": [{ "name": "cargobob", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns true only when the hook is active, will return false if the magnet is active  \n```",
            "examples": [],
            "hash": "0x1821D91AD4B56108",
            "ns": "VEHICLE",
            "aliases": ["_IS_CARGOBOB_HOOK_ACTIVE"],
            "jhash": "0xAF769B81",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF49CF0270307CBE": {
            "name": "DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEF49CF0270307CBE",
            "ns": "VEHICLE",
            "aliases": [
                "0xEF49CF0270307CBE",
                "_REQUEST_VEHICLE_PHONE_EXPLOSION"
            ],
            "jhash": "0x65255524",
            "manualHash": true
        },
        "0x1262D55792428154": {
            "name": "DOES_EXTRA_EXIST",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "extraId", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nChecks via CVehicleModelInfo  \n```",
            "examples": [],
            "hash": "0x1262D55792428154",
            "ns": "VEHICLE",
            "jhash": "0x409411CC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x83F813570FF519DE": {
            "name": "_DISABLE_VEHICLE_NEON_LIGHTS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x83F813570FF519DE",
            "ns": "VEHICLE",
            "aliases": ["0x83F813570FF519DE"],
            "manualHash": true
        },
        "0x4E417C547182C84D": {
            "name": "_DOES_VEHICLE_ALLOW_RAPPEL",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.\n```",
            "examples": [],
            "hash": "0x4E417C547182C84D",
            "ns": "VEHICLE",
            "aliases": ["0x4E417C547182C84D"],
            "jhash": "0x0E28D3A6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE43701C36CAFF1A4": {
            "name": "_DOES_VEHICLE_HAVE_LANDING_GEAR",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0xE43701C36CAFF1A4",
            "ns": "VEHICLE",
            "aliases": ["0xE43701C36CAFF1A4", "_GET_VEHICLE_HAS_LANDING_GEAR"],
            "annotations": { "cs_type": "Any" },
            "manualHash": true
        },
        "0x32CAEDF24A583345": {
            "name": "_DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x32CAEDF24A583345",
            "ns": "VEHICLE",
            "aliases": ["0x32CAEDF24A583345"],
            "manualHash": true
        },
        "0x8AC862B0B32C5B80": {
            "name": "DOES_VEHICLE_HAVE_ROOF",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8AC862B0B32C5B80",
            "ns": "VEHICLE",
            "jhash": "0xDB817403",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF4FC6A6F67D8D856": {
            "name": "DISABLE_VEHICLE_WEAPON",
            "params": [
                { "name": "disabled", "type": "BOOL" },
                { "name": "weaponHash", "type": "Hash" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "owner", "type": "Ped" }
            ],
            "results": "void",
            "description": "```\nhow does this work?  \n```",
            "examples": [],
            "hash": "0xF4FC6A6F67D8D856",
            "ns": "VEHICLE",
            "jhash": "0xA688B7D1",
            "manualHash": true
        },
        "0x99015ED7DBEA5113": {
            "name": "DOES_VEHICLE_HAVE_SEARCHLIGHT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check for the presence of a searchlight."
                }
            ],
            "results": "BOOL",
            "description": "Determines whether the specified vehicle is equipped with a searchlight.\n\n```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x99015ED7DBEA5113",
            "ns": "VEHICLE",
            "aliases": ["_DOES_VEHICLE_HAVE_SEARCHLIGHT"],
            "manualHash": true,
            "resultsDescription": "Returns `true` if the vehicle has a searchlight, `false` otherwise."
        },
        "0x534E36D4DB9ECC5D": {
            "name": "_DOES_VEHICLE_TYRE_EXIST",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "tyreIndex", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nChecks if vehicle tyre at index exists. Also returns false if tyre was removed.\n```\n\n```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x534E36D4DB9ECC5D",
            "ns": "VEHICLE",
            "aliases": ["0x534E36D4DB9ECC5D"],
            "manualHash": true
        },
        "0x6E08BF5B3722BAC9": {
            "name": "DOES_CARGOBOB_HAVE_PICKUP_MAGNET",
            "params": [{ "name": "cargobob", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns true only when the magnet is active, will return false if the hook is active  \n```",
            "examples": [],
            "hash": "0x6E08BF5B3722BAC9",
            "ns": "VEHICLE",
            "aliases": [
                "_IS_CARGOBOB_MAGNET_ACTIVE",
                "_DOES_CARGOBOB_HAVE_PICKUP_MAGNET"
            ],
            "jhash": "0x4778CA0A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x75627043C6AA90AD": {
            "name": "_DISABLE_VEHICLE_WORLD_COLLISION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "the vehicle to disable world collisions for"
                }
            ],
            "results": "void",
            "description": "Disables collision for this vehicle (maybe it also supports other entities, not sure).\nOnly world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.\n\n[Example video](https://streamable.com/6n45d5)\n\nNot sure if there is a native (and if so, which one) that resets the collisions.",
            "examples": [],
            "hash": "0x75627043C6AA90AD",
            "ns": "VEHICLE",
            "aliases": ["0x75627043C6AA90AD"],
            "manualHash": true
        },
        "0x956B409B984D9BF7": {
            "name": "DOES_VEHICLE_EXIST_WITH_DECORATOR",
            "params": [{ "name": "decorator", "type": "char*" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x956B409B984D9BF7",
            "ns": "VEHICLE",
            "jhash": "0x39E68EDD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57E4C39DE5EE8470": {
            "name": "DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nMaximum amount of vehicles with vehicle stuck check appears to be 16.  \n```",
            "examples": [],
            "hash": "0x57E4C39DE5EE8470",
            "ns": "VEHICLE",
            "jhash": "0x5D91D9AC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF6086BC836400876": {
            "name": "DOES_SCRIPT_VEHICLE_GENERATOR_EXIST",
            "params": [{ "name": "vehicleGenerator", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF6086BC836400876",
            "ns": "VEHICLE",
            "jhash": "0xF6BDDA30",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8DC9675797123522": {
            "name": "_FIND_RANDOM_POINT_IN_SPACE",
            "params": [{ "name": "ped", "type": "Ped" }],
            "results": "Vector3",
            "description": "Native is significantly more complicated than simply generating a random vector & length.\n\nThe 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport\\_\\__IsSphereVisible.\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x8DC9675797123522",
            "ns": "VEHICLE",
            "aliases": ["0x8DC9675797123522"],
            "manualHash": true
        },
        "0xE38CB9D7D39FDBCC": {
            "name": "_EJECT_JB700_ROOF",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE38CB9D7D39FDBCC",
            "ns": "VEHICLE",
            "aliases": ["0xE38CB9D7D39FDBCC"],
            "jhash": "0xFDA7B6CA",
            "manualHash": true
        },
        "0x25ECB9F8017D98E0": {
            "name": "DOES_VEHICLE_HAVE_WEAPONS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x25ECB9F8017D98E0",
            "ns": "VEHICLE",
            "jhash": "0xB2E1E1FB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x375E7FC44F21C8AB": {
            "name": "_FIND_VEHICLE_CARRYING_THIS_ENTITY",
            "params": [{ "name": "entity", "type": "Entity" }],
            "results": "Vehicle",
            "description": "```\nFinds the vehicle that is carrying this entity with a handler frame.\nThe model of the entity must be prop_contr_03b_ld or the function will return 0.\n```",
            "examples": [],
            "hash": "0x375E7FC44F21C8AB",
            "ns": "VEHICLE",
            "aliases": [
                "0x375E7FC44F21C8AB",
                "_GET_VEHICLE_ATTACHED_TO_ENTITY"
            ],
            "jhash": "0x70DD5E25",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x786A4EB67B01BF0B": {
            "name": "EXPLODE_VEHICLE_IN_CUTSCENE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x786A4EB67B01BF0B",
            "ns": "VEHICLE",
            "jhash": "0xA85207B5",
            "manualHash": true
        },
        "0x1F2E4E06DEA8992B": {
            "name": "FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOften called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.\n```",
            "examples": [],
            "hash": "0x1F2E4E06DEA8992B",
            "ns": "VEHICLE",
            "aliases": ["0x1F2E4E06DEA8992B"],
            "jhash": "0x01B91CD0",
            "manualHash": true
        },
        "0x772282EBEB95E682": {
            "name": "FIX_VEHICLE_WINDOW",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "windowIndex", "type": "int" }
            ],
            "results": "void",
            "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1).\n\nThis function is coded to not work on vehicles of type: `CBike`, `Bmx`, `CBoat`, `CTrain`, and `CSubmarine`.",
            "examples": [],
            "hash": "0x772282EBEB95E682",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x6B8E990D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC1F981A6F74F0C23": {
            "name": "_GET_BOAT_BOOM_POSITION_RATIO_2",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSame call as VEHICLE::_0x0F3B4D4E43177236\n```",
            "examples": [],
            "hash": "0xC1F981A6F74F0C23",
            "ns": "VEHICLE",
            "aliases": ["0xC1F981A6F74F0C23"],
            "jhash": "0x00966934",
            "manualHash": true
        },
        "0xBA71116ADF5B514C": {
            "name": "EXPLODE_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "isAudible", "type": "BOOL" },
                { "name": "isInvisible", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nExplodes a selected vehicle.  \nVehicle vehicle = Vehicle you want to explode.  \nBOOL isAudible = If explosion makes a sound.  \nBOOL isInvisible = If the explosion is invisible or not.  \nFirst BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.  \n```",
            "examples": [],
            "hash": "0xBA71116ADF5B514C",
            "ns": "VEHICLE",
            "jhash": "0xBEDEACEB",
            "manualHash": true
        },
        "0x0F3B4D4E43177236": {
            "name": "_GET_BOAT_BOOM_POSITION_RATIO_3",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0F3B4D4E43177236",
            "ns": "VEHICLE",
            "aliases": ["0x0F3B4D4E43177236"],
            "jhash": "0x113DF5FD",
            "manualHash": true
        },
        "0x6636C535F6CC2725": {
            "name": "GET_BOAT_BOOM_POSITION_RATIO",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x6636C535F6CC2725",
            "ns": "VEHICLE",
            "aliases": ["0x6636C535F6CC2725"],
            "jhash": "0x7C8D6464",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCBDB9B923CACC92D": {
            "name": "_GET_CARGOBOB_HOOK_POSITION",
            "params": [{ "name": "cargobob", "type": "Vehicle" }],
            "results": "Vector3",
            "description": "Gets the position of the cargobob hook, in world coords.",
            "examples": [],
            "hash": "0xCBDB9B923CACC92D",
            "ns": "VEHICLE",
            "aliases": ["0xCBDB9B923CACC92D"],
            "jhash": "0xE6633DCF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x33506883545AC0DF": {
            "name": "FORCE_SUBMARINE_SURFACE_MODE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x33506883545AC0DF",
            "ns": "VEHICLE",
            "aliases": ["0x33506883545AC0DF"],
            "jhash": "0x54E9EE75",
            "manualHash": true
        },
        "0x5AA3F878A178C4FC": {
            "name": "GET_BOAT_VEHICLE_MODEL_AGILITY",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model hash of the boat."
                }
            ],
            "results": "float",
            "description": "Retrieves the agility for a specific boat model, including any vehicle mods. Unlike other vehicles where Rockstar Games typically assess performance based on traction, boats use agility as a measure. This static value is distinct from the traction metrics used for other vehicle types.\n\n```\nNativeDB Introduced: v323\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example prints the agility of the player's current boat.\n\n-- Retrieve the player ped.\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the vehicle the player is currently in.\nlocal vehicle = GetVehiclePedIsIn(playerPed, false)\n\n-- Retrieve the model hash of the boat.\nlocal boatHash = GetEntityModel(vehicle)\n\n-- If the vehicle does not exist or is not a boat, end the execution of the code here.\nif not DoesEntityExist(vehicle) or not IsThisModelABoat(boatHash) then \n    return \nend\n\n-- Retrieve the agility of the boat.\nlocal agility = GetBoatVehicleModelAgility(boatHash)\n\n-- Print the agility of the boat.\nprint(\"Boat Agility: \" .. agility)"
                },
                {
                    "lang": "js",
                    "code": "// This example prints the agility of the player's current boat.\n\n// Retrieve the player ped.\nconst playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nconst vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// Retrieve the model hash of the boat.\nconst boatHash = GetEntityModel(vehicle);\n\n// If the vehicle does not exist or is not a boat, end the execution of the code here.\nif (!DoesEntityExist(vehicle) || !IsThisModelABoat(boatHash)) {\n  return;\n}\n\n// Retrieve the agility of the boat.\nconst agility = GetBoatVehicleModelAgility(boatHash);\n\n// Print the agility of the boat.\nconsole.log(`Boat Agility: ${agility}`);"
                },
                {
                    "lang": "cs",
                    "code": "// This example prints the agility of the player's current boat.\nusing static CitizenFX.Core.Native.API;\n\n// Retrieve the player ped.\nPed playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nVehicle vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// Retrieve the model hash of the boat.\nuint boatHash = GetEntityModel(vehicle);\n\n// If the vehicle does not exist or is not a boat, end the execution of the code here.\nif (!DoesEntityExist(vehicle) || !IsThisModelABoat(boatHash)) {\n  return;\n}\n\n// Retrieve the agility of the boat.\nconst float agility = GetBoatVehicleModelAgility(boatHash);\n\n// Print the agility of the boat.\nDebug.WriteLine($\"Boat Agility: {agility}\");"
                }
            ],
            "hash": "0x5AA3F878A178C4FC",
            "ns": "VEHICLE",
            "aliases": [
                "0x5AA3F878A178C4FC",
                "_GET_VEHICLE_MODEL_MOVE_RESISTANCE"
            ],
            "jhash": "0x87C5D271",
            "manualHash": true,
            "resultsDescription": "Returns the agility value of the specified boat as a float number."
        },
        "0x9078C0C5EF8C19E9": {
            "name": "_GET_CAN_VEHICLE_JUMP",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns true if the vehicle has the FLAG_JUMPING_CAR flag set.\n```",
            "examples": [],
            "hash": "0x9078C0C5EF8C19E9",
            "ns": "VEHICLE",
            "aliases": [
                "_HAS_VEHICLE_JUMPING_ABILITY",
                "_DOES_VEHICLE_HAVE_JUMPING_ABILITY"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF8C397922FC03F41": {
            "name": "GET_CONVERTIBLE_ROOF_STATE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle to get the state of"
                }
            ],
            "results": "int",
            "description": "Returns the convertible state of the specified vehicle.\n\n```cpp\nenum RoofState\n{\n     ROOFSTATE_UP = 0,\n     ROOFSTATE_LOWERING = 1,\n     ROOFSTATE_DOWN = 2,\n     ROOFSTATE_RAISING = 3\n};\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId())\nprint(GetConvertibleRoofState(vehicle))"
                }
            ],
            "hash": "0xF8C397922FC03F41",
            "ns": "VEHICLE",
            "jhash": "0x1B09714D",
            "manualHash": true,
            "resultsDescription": "*   0 when closed/up, the vehicle is not a convertible or the vehicle is null/not provided\n*   1 when closing\n*   2 when open/down\n*   3 when opening\n*   6 unknown/unverified -- possibly stopped but not full open"
        },
        "0x9B8E1BF04B51F2E8": {
            "name": "_GET_ALL_VEHICLES",
            "params": [
                {
                    "name": "vehArray",
                    "type": "int*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9B8E1BF04B51F2E8",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB215AAC32D25D019": {
            "name": "GET_DISPLAY_NAME_FROM_VEHICLE_MODEL",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "A vehicle model to check."
                }
            ],
            "results": "char*",
            "description": "Returns the display name/text label (`gameName` in `vehicles.meta`) for the specified vehicle model.",
            "examples": [],
            "hash": "0xB215AAC32D25D019",
            "ns": "VEHICLE",
            "jhash": "0xEC86DF39",
            "manualHash": true,
            "resultsDescription": "The display name for the vehicle, or `'CARNOTFOUND'` if invalid."
        },
        "0xF73EB622C4F1689B": {
            "name": "GET_CLOSEST_VEHICLE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "flags", "type": "int" }
            ],
            "results": "Vehicle",
            "description": "```\nExample usage  \nVEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)   \nx, y, z: Position to get closest vehicle to.  \nradius: Max radius to get a vehicle.  \nmodelHash: Limit to vehicles with this model. 0 for any.  \nflags: The bitwise flags altering the function's behaviour.  \nDoes not return police cars or helicopters.  \nIt seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason  \nOnly returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.   \nThese flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.  \nConverted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles  \nConversion of found flags to binary: pastebin.com/kghNFkRi  \nAt exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.   \nIt's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT  \n-------------------------------------------------------------------------  \nConclusion: This native is not worth trying to use. Use something like this instead: pastebin.com/xiFdXa7h\nUse flag 127 to return police cars\n```",
            "examples": [],
            "hash": "0xF73EB622C4F1689B",
            "ns": "VEHICLE",
            "jhash": "0xD7E26B2C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x42BC05C27A946054": {
            "name": "GET_CURRENT_PLAYBACK_FOR_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x42BC05C27A946054",
            "ns": "VEHICLE",
            "jhash": "0xA3F44390",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x71AFB258CCED3A27": {
            "name": "_GET_DOES_VEHICLE_HAVE_TOMBSTONE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x71AFB258CCED3A27",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x99093F60746708CA": {
            "name": "_GET_ENTITY_ATTACHED_TO_CARGOBOB",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "Entity",
            "description": "",
            "examples": [],
            "hash": "0x99093F60746708CA",
            "ns": "VEHICLE",
            "aliases": ["0x99093F60746708CA"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2F5A72430E78C8D3": {
            "name": "_GET_DRIFT_TYRES_ENABLED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x2F5A72430E78C8D3",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xDCA174A42133F08C": {
            "name": "_GET_HAS_RETRACTABLE_WHEELS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDCA174A42133F08C",
            "ns": "VEHICLE",
            "aliases": [
                "_GET_HAS_LOWERABLE_WHEELS",
                "_DOES_VEHICLE_HAVE_RETRACTABLE_WHEELS"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0572928C0ABFDA3": {
            "name": "_GET_ENTRY_POSITION_OF_DOOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" }
            ],
            "results": "Vector3",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0xC0572928C0ABFDA3",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x36D782F68B309BDA": {
            "name": "_GET_HAS_ROCKET_BOOST",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x36D782F68B309BDA",
            "ns": "VEHICLE",
            "aliases": [
                "_HAS_VEHICLE_ROCKET_BOOST",
                "_DOES_VEHICLE_HAVE_ROCKET_BOOST"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEFEA18DCF10F8F75": {
            "name": "GET_ENTITY_ATTACHED_TO_TOW_TRUCK",
            "params": [{ "name": "towTruck", "type": "Vehicle" }],
            "results": "Entity",
            "description": "",
            "examples": [],
            "hash": "0xEFEA18DCF10F8F75",
            "ns": "VEHICLE",
            "jhash": "0x11EC7844",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE4CB7541F413D2C5": {
            "name": "GET_HELI_MAIN_ROTOR_HEALTH",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nMax 1000.  \nAt 0 the main rotor will stall.  \n```",
            "examples": [],
            "hash": "0xE4CB7541F413D2C5",
            "ns": "VEHICLE",
            "aliases": ["_GET_HELI_MAIN_ROTOR_HEALTH"],
            "jhash": "0xF01E2AAB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAC51915D27E4A5F7": {
            "name": "GET_HELI_TAIL_BOOM_HEALTH",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nMax 1000.\nAt -100 both helicopter rotors will stall.\n```",
            "examples": [],
            "hash": "0xAC51915D27E4A5F7",
            "ns": "VEHICLE",
            "aliases": ["_GET_HELI_ENGINE_HEALTH"],
            "jhash": "0x8A68388F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAE8CE82A4219AC8C": {
            "name": "GET_HELI_TAIL_ROTOR_HEALTH",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nMax 1000.  \nAt 0 the tail rotor will stall.  \n```",
            "examples": [],
            "hash": "0xAE8CE82A4219AC8C",
            "ns": "VEHICLE",
            "aliases": ["_GET_HELI_TAIL_ROTOR_HEALTH"],
            "jhash": "0xA41BC13D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0BB5CBDDD0F25AE3": {
            "name": "_GET_HYDRAULIC_WHEEL_VALUE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelId", "type": "int" }
            ],
            "results": "float",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x0BB5CBDDD0F25AE3",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xBA91D045575699AD": {
            "name": "GET_IS_BOAT_CAPSIZED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check. This should be a boat-type vehicle."
                }
            ],
            "results": "BOOL",
            "description": "Checks whether the specified boat vehicle is capsized, meaning it has overturned or is upside down in the water.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example checks if the player is in a boat and if the boat is capsized.\n\n-- Retrieve the LocalPlayer.\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the vehicle the player is in\nlocal vehicle = GetVehiclePedIsIn(playerPed, false)\n\n-- Retrieve the model of the vehicle\nlocal vehicleModel = GetEntityModel(vehicle)\n\n-- Check if the vehicle exists in the game world.\nif not DoesEntityExist(vehicle) then \n    -- If the vehicle does not exist, end the execution of the code here.\n    return \nend\n\n-- Check if the vehicle is a boat.\nif not IsThisModelABoat(vehicleModel) then\n    -- If the vehicle is not a boat, end the execution of the code here.\n    return\nend\n\n-- Check if the boat is capsized.\nif GetIsBoatCapsized(vehicle) then\n    print(\"The boat is capsized!\")\nelse\n    print(\"The boat is not capsized!\")\nend"
                },
                {
                    "lang": "js",
                    "code": "// This example checks if the player is in a boat and if the boat is capsized.\n\n// Retrieve the LocalPlayer.\nconst playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is in\nconst vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// Retrieve the model of the vehicle\nconst vehicleModel = GetEntityModel(vehicle);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle)) {\n  // If the vehicle does not exist, end the execution of the code here.\n  return;\n}\n\n// Check if the vehicle is a boat.\nif (!IsThisModelABoat(vehicleModel)) {\n  // If the vehicle is not a boat, end the execution of the code here.\n  return;\n}\n\n// Check if the boat is capsized\nif (GetIsBoatCapsized(vehicle)) {\n    console.log(\"The boat is capsized!\");\n} else {\n    console.log(\"The boat is not capsized!\");\n}"
                },
                {
                    "lang": "cs",
                    "code": "// This example checks if the player is in a boat and if the boat is capsized.\nusing static CitizenFX.Core.Native.API;\n\n// Retrieve the LocalPlayer.\nPed playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is in\nVehicle vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// Retrieve the model of the vehicle\nuint vehicleModel = (uint)GetEntityModel(vehicle);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle))\n{\n    // If the vehicle does not exist, end the execution of the code here.\n    return;\n}\n\n// Check if the vehicle is a boat.\nif (!IsThisModelABoat(vehicleModel))\n{\n    // If the vehicle is not a boat, end the execution of the code here.\n    return;\n}\n\n// Check if the boat is capsized\nif (GetIsBoatCapsized(vehicle))\n{\n    Debug.WriteLine(\"The boat is capsized!\");\n}\nelse\n{\n    Debug.WriteLine(\"The boat is not capsized!\");\n}"
                }
            ],
            "hash": "0xBA91D045575699AD",
            "ns": "VEHICLE",
            "aliases": ["0xBA91D045575699AD"],
            "manualHash": true,
            "resultsDescription": "Returns `true` if the specified boat is capsized, `false` otherwise."
        },
        "0x645F4B6E8499F632": {
            "name": "_GET_IS_DOOR_VALID",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" }
            ],
            "results": "BOOL",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0x645F4B6E8499F632",
            "ns": "VEHICLE",
            "aliases": ["_DOES_VEHICLE_HAVE_DOOR"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0506ED94363AD905": {
            "name": "_GET_IS_VEHICLE_EMP_DISABLED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns whether this vehicle is currently disabled by an EMP mine.\n\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x0506ED94363AD905",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x5EF77C9ADD3B11A3": {
            "name": "GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nFrom the driver's perspective, is the left headlight broken.  \n```",
            "examples": [],
            "hash": "0x5EF77C9ADD3B11A3",
            "ns": "VEHICLE",
            "aliases": ["_IS_HEADLIGHT_L_BROKEN"],
            "jhash": "0xA0777943",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAE31E7DF9B5B132E": {
            "name": "GET_IS_VEHICLE_ENGINE_RUNNING",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns true when in a vehicle, false whilst entering/exiting.  \n```",
            "examples": [],
            "hash": "0xAE31E7DF9B5B132E",
            "ns": "VEHICLE",
            "aliases": ["_IS_VEHICLE_ENGINE_ON"],
            "jhash": "0x7DC6D022",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA7ECB73355EB2F20": {
            "name": "GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nFrom the driver's perspective, is the right headlight broken.  \n```",
            "examples": [],
            "hash": "0xA7ECB73355EB2F20",
            "ns": "VEHICLE",
            "aliases": ["_IS_HEADLIGHT_R_BROKEN"],
            "jhash": "0xF178390B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA2459F72C14E2E8D": {
            "name": "_GET_IS_VEHICLE_SHUNT_BOOST_ACTIVE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xA2459F72C14E2E8D",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x910A32E7AAD2656C": {
            "name": "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nCheck if Vehicle Secondary is avaliable for customize  \n```",
            "examples": [],
            "hash": "0x910A32E7AAD2656C",
            "ns": "VEHICLE",
            "jhash": "0x288AD228",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF095C0405307B21B": {
            "name": "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF095C0405307B21B",
            "ns": "VEHICLE",
            "jhash": "0xD7EC8760",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB2D06FAEDE65B577": {
            "name": "GET_LAST_DRIVEN_VEHICLE",
            "params": [],
            "results": "Vehicle",
            "description": "",
            "examples": [],
            "hash": "0xB2D06FAEDE65B577",
            "ns": "VEHICLE",
            "aliases": ["0xB2D06FAEDE65B577"],
            "jhash": "0xFEB0C0C8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9B0F3DCA3DB0F4CD": {
            "name": "GET_LANDING_GEAR_STATE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                }
            ],
            "results": "int",
            "description": "```\nLanding gear states:  \n0: Deployed  \n1: Closing (Retracting)\n3: Opening (Deploying)\n4: Retracted  \n5: Broken\n```\n\nLanding gear state 2 is never used.",
            "examples": [],
            "hash": "0x9B0F3DCA3DB0F4CD",
            "ns": "VEHICLE",
            "aliases": ["_GET_VEHICLE_LANDING_GEAR"],
            "jhash": "0xA6F02670",
            "manualHash": true,
            "resultsDescription": "The current state of the vehicles landing gear."
        },
        "0x1DA0DA9CB3F0C8BF": {
            "name": "_GET_IS_WHEELS_LOWERED_STATE_ACTIVE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1DA0DA9CB3F0C8BF",
            "ns": "VEHICLE",
            "aliases": ["0x1DA0DA9CB3F0C8BF"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB4C7A93837C91A1F": {
            "name": "GET_LIVERY_NAME",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "liveryIndex", "type": "int" }
            ],
            "results": "char*",
            "description": "```\nSecond Param = LiveryIndex  \nexample   \nint count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);  \nfor (int i = 0; i < count; i++)    \n\t{  \nchar* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);  \n\t}  \nthis example will work fine to fetch all names   \nfor example for Sanchez we get   \nSANC_LV1  \nSANC_LV2  \nSANC_LV3  \nSANC_LV4  \nSANC_LV5  \nUse _GET_LABEL_TEXT, to get the localized livery name.  \n-----------  \nNOTE: You may need to set the vehicle's modKit to 0 by using this function: SET_VEHICLE_MOD_KIT() before getting the name, otherwise this native may return NULL.  \ndev-c.com/nativedb/func/info/1f2aa07f00b3217a  \n```",
            "examples": [],
            "hash": "0xB4C7A93837C91A1F",
            "ns": "VEHICLE",
            "jhash": "0xED80B5BE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x04F2FA6E234162F7": {
            "name": "_GET_LAST_RAMMED_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "Vehicle",
            "description": "```\nReturns last vehicle that was rammed by the given vehicle using the shunt boost.\n\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x04F2FA6E234162F7",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x8935624F8C5592CC": {
            "name": "GET_MOD_TEXT_LABEL",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                },
                { "name": "modValue", "type": "int" }
            ],
            "results": "char*",
            "description": "```\nReturns the text label of a mod type for a given vehicle  \nUse _GET_LABEL_TEXT to get the part name in the game's language  \n```",
            "examples": [],
            "hash": "0x8935624F8C5592CC",
            "ns": "VEHICLE",
            "jhash": "0x0BA39CA7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA551BE18C11A476D": {
            "name": "GET_NUM_MOD_COLORS",
            "params": [
                { "name": "paintType", "type": "int" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "int",
            "description": "```\npaintType:\n0: Normal\n1: Metallic\n2: Pearl\n3: Matte\n4: Metal\n5: Chrome\n```",
            "examples": [],
            "hash": "0xA551BE18C11A476D",
            "ns": "VEHICLE",
            "jhash": "0x73722CD9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x51F0FEB9F6AE98C0": {
            "name": "GET_MOD_SLOT_NAME",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                }
            ],
            "results": "char*",
            "description": "",
            "examples": [],
            "hash": "0x51F0FEB9F6AE98C0",
            "ns": "VEHICLE",
            "jhash": "0x5E113483",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x83F969AA1EE2A664": {
            "name": "GET_LAST_PED_IN_VEHICLE_SEAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to get the ped for."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "results": "Ped",
            "description": "",
            "examples": [],
            "hash": "0x83F969AA1EE2A664",
            "ns": "VEHICLE",
            "jhash": "0xF7C6792D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3B963160CD65D41E": {
            "name": "GET_NUMBER_OF_VEHICLE_COLOURS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nActually number of color combinations  \n```",
            "examples": [],
            "hash": "0x3B963160CD65D41E",
            "ns": "VEHICLE",
            "jhash": "0xF2442EE2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9D1224004B3A6707": {
            "name": "GET_NUM_VEHICLE_WINDOW_TINTS",
            "params": [],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x9D1224004B3A6707",
            "ns": "VEHICLE",
            "jhash": "0x625C7B66",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE38E9162A2500646": {
            "name": "GET_NUM_VEHICLE_MODS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                }
            ],
            "results": "int",
            "description": "```\nReturns how many possible mods a vehicle has for a given mod type  \n```",
            "examples": [],
            "hash": "0xE38E9162A2500646",
            "ns": "VEHICLE",
            "jhash": "0x8A814FF9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2DACD605FC681475": {
            "name": "GET_POSITION_IN_RECORDING",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nDistance traveled in the vehicles current recording.\n```",
            "examples": [],
            "hash": "0x2DACD605FC681475",
            "ns": "VEHICLE",
            "jhash": "0x7DCD644C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBB40DD2270B65366": {
            "name": "GET_PED_IN_VEHICLE_SEAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to get the ped for."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "results": "Ped",
            "description": "Gets the ped in the specified seat of the passed vehicle.\n\nIf there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.\n\n**NativeDB Added Parameter 3**: BOOL p2 (uses a different GetOccupant function)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Checks if the player ped is in the drivers seat of the vehicle they are in.\nif GetPedInVehicleSeat(GetVehiclePedIsIn(PlayerPedId()), -1) == PlayerPedId() then \n  print(\"The player is the driver of this vehicle.\")\nelse\n  print(\"The player is not the driver of this vehicle.\")\nend"
                }
            ],
            "hash": "0xBB40DD2270B65366",
            "ns": "VEHICLE",
            "jhash": "0x388FDE9A",
            "manualHash": true,
            "resultsDescription": "A handle to a ped in the specified vehicle seat, or 0 if no such ped existed."
        },
        "0xF7AF4F159FF99F97": {
            "name": "GET_MAKE_NAME_FROM_VEHICLE_MODEL",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model hash of the vehicle."
                }
            ],
            "results": "char*",
            "description": "Retrieves the manufacturer's name for a specified vehicle.\n\n```\nNativeDB Introduced: v1868\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example prints the manufacturer of the player's current vehicle.\n\n-- Retrieve the player ped.\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the vehicle the player is currently in.\nlocal vehicle = GetVehiclePedIsIn(playerPed, false)\n\n-- If the vehicle does not exist, end the execution of the code here.\nif not DoesEntityExist(vehicle) then \n    return \nend\n\n-- Retrieve the model hash of the vehicle.\nlocal vehicleHash = GetEntityModel(vehicle)\n\n-- Retrieve the manufacturer of the vehicle.\nlocal manufacturer = GetMakeNameFromVehicleModel(vehicleHash)\n\n-- Print the manufacturer of the vehicle.\nprint(\"Vehicle Manufacturer: \" .. manufacturer)"
                },
                {
                    "lang": "js",
                    "code": "// This example prints the manufacturer of the player's current vehicle.\n\n// Retrieve the player ped.\nconst playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nconst vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// If the vehicle does not exist, end the execution of the code here.\nif (!DoesEntityExist(vehicle)) {\n  return;\n}\n\n// Retrieve the model hash of the vehicle.\nconst vehicleHash = GetEntityModel(vehicle);\n\n// Retrieve the manufacturer of the vehicle.\nconst manufacturer = GetMakeNameFromVehicleModel(vehicleHash);\n\n// Print the manufacturer of the vehicle.\nconsole.log(`Vehicle Manufacturer: ${manufacturer}`);"
                },
                {
                    "lang": "cs",
                    "code": "// This example prints the manufacturer of the player's current vehicle.\nusing static CitizenFX.Core.Native.API;\n\n// Retrieve the player ped.\nPed playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nVehicle vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// If the vehicle does not exist, end the execution of the code here.\nif (!DoesEntityExist(vehicle)) {\n  return;\n}\n\n// Retrieve the model hash of the vehicle.\nuint vehicleHash = (uint)GetEntityModel(vehicle);\n\n// Retrieve the manufacturer of the vehicle.\nstring manufacturer = GetMakeNameFromVehicleModel(vehicleHash);\n\n// Print the manufacturer of the vehicle.\nDebug.WriteLine($\"Vehicle Manufacturer: {manufacturer}\");"
                }
            ],
            "hash": "0xF7AF4F159FF99F97",
            "ns": "VEHICLE",
            "aliases": ["_GET_MAKE_NAME_FROM_VEHICLE_MODEL"],
            "manualHash": true,
            "resultsDescription": "Returns the display label of the manufacturer if the vehicle model is recognized, or \"CARNOTFOUND\" if the hash does not correspond to any known vehicle model."
        },
        "0x4C4D6B2644F458CB": {
            "name": "GET_NUMBER_OF_VEHICLE_NUMBER_PLATES",
            "params": [],
            "results": "int",
            "description": "```\nReturns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.  \n```",
            "examples": [],
            "hash": "0x4C4D6B2644F458CB",
            "ns": "VEHICLE",
            "jhash": "0xD24BC1AE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x92523B76657A517D": {
            "name": "GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME",
            "params": [
                { "name": "id", "type": "int" },
                { "name": "time", "type": "float" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x92523B76657A517D",
            "ns": "VEHICLE",
            "aliases": ["0x92523B76657A517D"],
            "annotations": { "cs_type": "int" },
            "jhash": "0xF31973BB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x33F2E3FE70EAAE1D": {
            "name": "GET_NUM_MOD_KITS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x33F2E3FE70EAAE1D",
            "ns": "VEHICLE",
            "jhash": "0xE4903AA0",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD242728AA6F0FBA2": {
            "name": "GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME",
            "params": [
                { "name": "recording", "type": "int" },
                { "name": "time", "type": "float" },
                { "name": "script", "type": "char*" }
            ],
            "results": "Vector3",
            "description": "This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.\n\nSee [`REQUEST_VEHICLE_RECORDING`](#\\_0xAF514CABE74CBF15).",
            "examples": [],
            "hash": "0xD242728AA6F0FBA2",
            "ns": "VEHICLE",
            "jhash": "0x7178558D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x92922A607497B14D": {
            "name": "_GET_NUMBER_OF_VEHICLE_DOORS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x92922A607497B14D",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC5574E0AEB86BA68": {
            "name": "GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "int" },
                { "name": "p5", "type": "int" },
                { "name": "p6", "type": "int" }
            ],
            "results": "Vehicle",
            "description": "",
            "examples": [],
            "hash": "0xC5574E0AEB86BA68",
            "ns": "VEHICLE",
            "jhash": "0xDCADEB66",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x218297BF0CFD853B": {
            "name": "GET_PED_USING_VEHICLE_DOOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" }
            ],
            "results": "Ped",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0x218297BF0CFD853B",
            "ns": "VEHICLE",
            "aliases": ["0x218297BF0CFD853B", "_GET_PED_USING_VEHICLE_DOOR"],
            "jhash": "0x0630101F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2058206FBE79A8AD": {
            "name": "GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME",
            "params": [
                { "name": "recording", "type": "int" },
                { "name": "time", "type": "float" },
                {
                    "name": "script",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x2058206FBE79A8AD",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "int" },
            "jhash": "0xD96DEC68",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x386F6CE5BAF6091C": {
            "name": "GET_RANDOM_VEHICLE_IN_SPHERE",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" },
                { "name": "modelHash", "type": "Hash" },
                { "name": "flags", "type": "int" }
            ],
            "results": "Vehicle",
            "description": "```\nGets a random vehicle in a sphere at the specified position, of the specified radius.  \nx: The X-component of the position of the sphere.  \ny: The Y-component of the position of the sphere.  \nz: The Z-component of the position of the sphere.  \nradius: The radius of the sphere. Max is 9999.9004.  \nmodelHash: The vehicle model to limit the selection to. Pass 0 for any model.  \nflags: The bitwise flags that modifies the behaviour of this function.  \n```",
            "examples": [],
            "hash": "0x386F6CE5BAF6091C",
            "ns": "VEHICLE",
            "jhash": "0x57216D03",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF0F2103EFAF8CBA7": {
            "name": "GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME",
            "params": [
                { "name": "id", "type": "int" },
                { "name": "time", "type": "float" }
            ],
            "results": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xF0F2103EFAF8CBA7",
            "ns": "VEHICLE",
            "aliases": ["0xF0F2103EFAF8CBA7"],
            "jhash": "0x4D1C15C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x055BF0AC0C34F4FD": {
            "name": "GET_RANDOM_VEHICLE_MODEL_IN_MEMORY",
            "params": [
                { "name": "p0", "type": "BOOL" },
                { "name": "modelHash", "type": "Hash*" },
                { "name": "successIndicator", "type": "int*" }
            ],
            "results": "void",
            "description": "```\nNot present in the retail version! It's just a nullsub.  \np0 always true (except in one case)  \np1 a random vehicle hash loaded in memory  \nsuccessIndicator: 0 if success, -1 if failed\n```",
            "examples": [],
            "hash": "0x055BF0AC0C34F4FD",
            "ns": "VEHICLE",
            "jhash": "0xE2C45631",
            "manualHash": true
        },
        "0xB50807EABE20A8DC": {
            "name": "GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE",
            "params": [
                { "name": "p0", "type": "float" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" },
                { "name": "p4", "type": "int" },
                { "name": "p5", "type": "int" },
                { "name": "p6", "type": "int" }
            ],
            "results": "Vehicle",
            "description": "",
            "examples": [],
            "hash": "0xB50807EABE20A8DC",
            "ns": "VEHICLE",
            "jhash": "0xD6343F6B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5746F3A7AB7FE544": {
            "name": "GET_TIME_POSITION_IN_RECORDING",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nCan be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.\n```",
            "examples": [],
            "hash": "0x5746F3A7AB7FE544",
            "ns": "VEHICLE",
            "jhash": "0xF8C3E4A2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3E71D0B300B7AA79": {
            "name": "_GET_SUBMARINE_IS_BELOW_FIRST_CRUSH_DEPTH",
            "params": [{ "name": "submarine", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x3E71D0B300B7AA79",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x6E387895952F4F71": {
            "name": "_GET_TYRE_WEAR_MULTIPLIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelIndex", "type": "int" }
            ],
            "results": "float",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x6E387895952F4F71",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x093D6DDCA5B8FBAE": {
            "name": "_GET_SUBMARINE_CRUSH_DEPTH_WARNING_STATE",
            "params": [{ "name": "submarine", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x093D6DDCA5B8FBAE",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x102D125411A7B6E6": {
            "name": "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID",
            "params": [{ "name": "id", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x102D125411A7B6E6",
            "ns": "VEHICLE",
            "jhash": "0x7116785E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0E48D1C262390950": {
            "name": "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING",
            "params": [
                { "name": "recording", "type": "int" },
                {
                    "name": "script",
                    "type": "char*",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x0E48D1C262390950",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x5B35EEB7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x55EAB010FAEE9380": {
            "name": "_GET_TYRE_HEALTH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelIndex", "type": "int" }
            ],
            "results": "float",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x55EAB010FAEE9380",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x5DD35C8D074E57AE": {
            "name": "GET_VEHICLE_ACCELERATION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle for which to obtain the acceleration."
                }
            ],
            "results": "float",
            "description": "Retrieves a static value representing the maximum drive force of specific a vehicle, including any vehicle mods. This value does not change dynamically during gameplay. This value provides an approximation and should be considered alongside other performance metrics like top speed for a more comprehensive understanding of the vehicle's capabilities.\n\n```\nNativeDB Introduced: v323\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example prints the acceleration of the player's current vehicle.\n\n-- Retrieve the player ped.\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the vehicle the player is currently in.\nlocal vehicle = GetVehiclePedIsIn(playerPed, false)\n\n-- If the vehicle does not exist, end the execution of the code here.\nif not DoesEntityExist(vehicle) then \n    return \nend\n\n-- Retrieve the acceleration of the vehicle.\nlocal acceleration = GetVehicleAcceleration(vehicle)\n\n-- Print the acceleration of the vehicle.\nprint(\"Vehicle Acceleration: \" .. acceleration)"
                },
                {
                    "lang": "js",
                    "code": "// This example prints the acceleration of the player's current vehicle.\n\n// Retrieve the player ped.\nconst playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nconst vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// If the vehicle does not exist, end the execution of the code here.\nif (!DoesEntityExist(vehicle)) {\n  return;\n}\n\n// Retrieve the acceleration of the vehicle.\nconst acceleration = GetVehicleAcceleration(vehicle);\n\n// Print the acceleration of the vehicle.\nconsole.log(`Vehicle Acceleration: ${acceleration}`);"
                },
                {
                    "lang": "cs",
                    "code": "// This example prints the acceleration of the player's current vehicle.\nusing static CitizenFX.Core.Native.API;\n\n// Retrieve the player ped.\nPed playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nVehicle vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// If the vehicle does not exist, end the execution of the code here.\nif (!DoesEntityExist(vehicle)) {\n  return;\n}\n\n// Retrieve the acceleration of the vehicle.\nconst float acceleration = GetVehicleAcceleration(vehicle);\n\n// Print the acceleration of the vehicle.\nDebug.WriteLine($\"Vehicle Acceleration: {acceleration}\");"
                }
            ],
            "hash": "0x5DD35C8D074E57AE",
            "ns": "VEHICLE",
            "jhash": "0x00478321",
            "manualHash": true,
            "resultsDescription": "Returns the acceleration value of the specified vehicle as a float number."
        },
        "0x08AAFD0814722BC3": {
            "name": "GET_TRAIN_CARRIAGE",
            "params": [
                { "name": "train", "type": "Vehicle" },
                { "name": "trailerNumber", "type": "int" }
            ],
            "results": "Entity",
            "description": "```\nCorrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.  \n```",
            "examples": [],
            "hash": "0x08AAFD0814722BC3",
            "ns": "VEHICLE",
            "jhash": "0x2544E7A6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA916396DF4154EE3": {
            "name": "_GET_VEHICLE_CAN_ACTIVATE_PARACHUTE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA916396DF4154EE3",
            "ns": "VEHICLE",
            "aliases": ["_CAN_VEHICLE_PARACHUTE_BE_ACTIVATED"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x00C09F246ABEDD82": {
            "name": "GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED",
            "params": [{ "name": "vehicleClass", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x00C09F246ABEDD82",
            "ns": "VEHICLE",
            "aliases": ["0x00C09F246ABEDD82", "_GET_VEHICLE_CLASS_MAX_SPEED"],
            "jhash": "0xCE67162C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x873B82D42AC2B9E5": {
            "name": "GET_VEHICLE_ATTACHED_TO_CARGOBOB",
            "params": [{ "name": "cargobob", "type": "Vehicle" }],
            "results": "Vehicle",
            "description": "```\nReturns attached vehicle (Vehicle in parameter must be cargobob)  \n```",
            "examples": [],
            "hash": "0x873B82D42AC2B9E5",
            "ns": "VEHICLE",
            "jhash": "0x301A1D24",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEA12BD130D7569A1": {
            "name": "_GET_VEHICLE_BOMB_COUNT",
            "params": [
                {
                    "name": "aircraft",
                    "type": "Vehicle",
                    "description": "The vehicle to get the amount of bombs from."
                }
            ],
            "results": "int",
            "description": "Gets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.\n\nIn decompiled scripts this is used to check if the vehicle has enough bombs before a bomb can be dropped (bombs are dropped by using [`_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_WITH_EXTRA_PARAMS`](#\\_0xBFE5756E7407064A)).\n\nUse [`_SET_AIRCRAFT_BOMB_COUNT`](#\\_0xF4B2ED59DEB5D774) to set the amount of bombs on that vehicle.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nprint(\"This plane has \" .. GetAircraftBombCount(vehicle) .. \" bombs left.\")"
                },
                {
                    "lang": "cs",
                    "code": "int vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nDebug.WriteLine(\"This plane has \" + GetAircraftBombCount(vehicle) + \" bombs left.\");"
                }
            ],
            "hash": "0xEA12BD130D7569A1",
            "ns": "VEHICLE",
            "aliases": ["0xEA12BD130D7569A1", "_GET_AIRCRAFT_BOMB_COUNT"],
            "manualHash": true,
            "resultsDescription": "An int indicating the amount of bombs remaining on that plane."
        },
        "0xF271147EB7B40F12": {
            "name": "GET_VEHICLE_BODY_HEALTH",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nSeems related to vehicle health, like the one in IV.  \nMax 1000, min 0.  \nVehicle does not necessarily explode or become undrivable at 0.  \n```",
            "examples": [],
            "hash": "0xF271147EB7B40F12",
            "ns": "VEHICLE",
            "jhash": "0x2B2FCC28",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDEDF1C8BD47C2200": {
            "name": "GET_VEHICLE_CLASS_FROM_NAME",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "int",
            "description": "```\nFor a full enum, see here : pastebin.com/i2GGAjY0\nchar buffer[128];\nstd::sprintf(buffer, \"VEH_CLASS_%i\", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));\nconst char* className = HUD::_GET_LABEL_TEXT(buffer);\n```",
            "examples": [],
            "hash": "0xDEDF1C8BD47C2200",
            "ns": "VEHICLE",
            "jhash": "0xEA469980",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE495D1EF4C91FD20": {
            "name": "GET_VEHICLE_CAUSE_OF_DESTRUCTION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to get the cause of destruction of."
                }
            ],
            "results": "Hash",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local destructionCauseHash = GetVehicleCauseOfDestruction(GetVehiclePedIsIn(PlayerPedId(), true))\nif destructionCauseHash == GetHashKey(\"weapon_stickybomb\") then\n     -- It looks like the vehicle was destroyed by a sticky bomb\n     Citizen.Trace('Vehicle was destroyed by a sticky bomb!')\nelseif destructionCauseHash ~= 0 then\n     -- It looks like the vehicle was destroyed by something else!\n     Citizen.Trace('Vehicle was destroyed by: ' .. destructionCauseHash)\nend"
                }
            ],
            "hash": "0xE495D1EF4C91FD20",
            "ns": "VEHICLE",
            "jhash": "0x7F8C20DD",
            "manualHash": true,
            "resultsDescription": "A hash representing the destruction cause. These can be weapon hashes."
        },
        "0x29439776AAA00A62": {
            "name": "GET_VEHICLE_CLASS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nReturns an int  \nVehicle Classes:  \n0: Compacts  \n1: Sedans  \n2: SUVs  \n3: Coupes  \n4: Muscle  \n5: Sports Classics  \n6: Sports  \n7: Super  \n8: Motorcycles  \n9: Off-road  \n10: Industrial  \n11: Utility  \n12: Vans  \n13: Cycles  \n14: Boats  \n15: Helicopters  \n16: Planes  \n17: Service  \n18: Emergency  \n19: Military  \n20: Commercial  \n21: Trains  \n22: Open Wheel\nchar buffer[128];  \nstd::sprintf(buffer, \"VEH_CLASS_%i\", VEHICLE::GET_VEHICLE_CLASS(vehicle));  \nchar* className = UI::_GET_LABEL_TEXT(buffer);  \n```",
            "examples": [],
            "hash": "0x29439776AAA00A62",
            "ns": "VEHICLE",
            "jhash": "0xC025338E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4BF54C16EC8FEC03": {
            "name": "GET_VEHICLE_CLASS_MAX_BRAKING",
            "params": [{ "name": "vehicleClass", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x4BF54C16EC8FEC03",
            "ns": "VEHICLE",
            "jhash": "0xD08CC1A5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4F930AD022D6DE3B": {
            "name": "GET_VEHICLE_CLASS_MAX_AGILITY",
            "params": [{ "name": "vehicleClass", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x4F930AD022D6DE3B",
            "ns": "VEHICLE",
            "jhash": "0x45F2BD83",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2F83E7E45D9EA7AE": {
            "name": "GET_VEHICLE_CLASS_MAX_ACCELERATION",
            "params": [{ "name": "vehicleClass", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0x2F83E7E45D9EA7AE",
            "ns": "VEHICLE",
            "jhash": "0x3E220A9B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6A842D197F845D56": {
            "name": "GET_VEHICLE_COLOUR_COMBINATION",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x6A842D197F845D56",
            "ns": "VEHICLE",
            "jhash": "0x77AC1B4C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF3CC740D36221548": {
            "name": "GET_VEHICLE_COLOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle"
                },
                { "name": "r", "type": "int*" },
                { "name": "g", "type": "int*" },
                { "name": "b", "type": "int*" }
            ],
            "results": "void",
            "description": "See [`SET_VEHICLE_CUSTOM_PRIMARY_COLOUR`](#\\_0x7141766F91D15BEA) and [`SET_VEHICLE_CUSTOM_SECONDARY_COLOUR`](#\\_0x36CED73BFED89754).",
            "examples": [],
            "hash": "0xF3CC740D36221548",
            "ns": "VEHICLE",
            "jhash": "0x03BC8F1B",
            "manualHash": true
        },
        "0xDBC86D85C5059461": {
            "name": "GET_VEHICLE_CLASS_MAX_TRACTION",
            "params": [{ "name": "vehicleClass", "type": "int" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xDBC86D85C5059461",
            "ns": "VEHICLE",
            "jhash": "0x5B4FDC16",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA19435F193E081AC": {
            "name": "GET_VEHICLE_COLOURS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "colorPrimary", "type": "int*" },
                { "name": "colorSecondary", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA19435F193E081AC",
            "ns": "VEHICLE",
            "jhash": "0x40D82D88",
            "manualHash": true
        },
        "0x8389CD56CA8072DC": {
            "name": "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "r", "type": "int*" },
                { "name": "g", "type": "int*" },
                { "name": "b", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8389CD56CA8072DC",
            "ns": "VEHICLE",
            "jhash": "0x3FF247A2",
            "manualHash": true
        },
        "0x36492C2F0D134C56": {
            "name": "_GET_VEHICLE_CURRENT_SLIPSTREAM_DRAFT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nReturns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).\nGET_VEHICLE_*\n```",
            "examples": [],
            "hash": "0x36492C2F0D134C56",
            "ns": "VEHICLE",
            "aliases": ["0x36492C2F0D134C56"],
            "jhash": "0xA4A75FCF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB64CF2CCA9D95F52": {
            "name": "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "r", "type": "int*" },
                { "name": "g", "type": "int*" },
                { "name": "b", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB64CF2CCA9D95F52",
            "ns": "VEHICLE",
            "jhash": "0x1C2B9FEF",
            "manualHash": true
        },
        "0xF846AA63DF56B804": {
            "name": "_GET_VEHICLE_COUNTERMEASURE_COUNT",
            "params": [
                {
                    "name": "aircraft",
                    "type": "Vehicle",
                    "description": "The vehicle to get the amount of countermeasures from."
                }
            ],
            "results": "int",
            "description": "Similar to [`_GET_AIRCRAFT_BOMB_COUNT`](#\\_0xEA12BD130D7569A1), this gets the amount of countermeasures that are present on this vehicle.\n\nUse [`_SET_AIRCRAFT_COUNTERMEASURE_COUNT`](#\\_0x9BDA23BF666F0855) to set the current amount.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nprint(\"This plane has \" .. GetAircraftCountermeasureCount(vehicle) .. \" countermeasures left.\")"
                },
                {
                    "lang": "cs",
                    "code": "int vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nDebug.WriteLine(\"This plane has \" + GetAircraftCountermeasureCount(vehicle) + \" countermeasures left.\");"
                }
            ],
            "hash": "0xF846AA63DF56B804",
            "ns": "VEHICLE",
            "aliases": [
                "0xF846AA63DF56B804",
                "_GET_AIRCRAFT_COUNTERMEASURE_COUNT"
            ],
            "manualHash": true,
            "resultsDescription": "An int indicating the amount of countermeasures remaining on that plane."
        },
        "0x4EC6CFBC7B2E9536": {
            "name": "GET_VEHICLE_DEFORMATION_AT_POS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "offsetX", "type": "float" },
                { "name": "offsetY", "type": "float" },
                { "name": "offsetZ", "type": "float" }
            ],
            "results": "Vector3",
            "description": "```\nThe only example I can find of this function in the scripts, is this:  \nstruct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);  \n-----------------------------------------------------------------------------------------------------------------------------------------  \nPC scripts:  \nv_5/*{3}*/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);  \n```",
            "examples": [],
            "hash": "0x4EC6CFBC7B2E9536",
            "ns": "VEHICLE",
            "jhash": "0xABF02075",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB7635E80A5C31BFF": {
            "name": "_GET_VEHICLE_DASHBOARD_COLOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "color", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB7635E80A5C31BFF",
            "ns": "VEHICLE",
            "aliases": ["_GET_VEHICLE_DASHBOARD_COLOUR"],
            "manualHash": true
        },
        "0x8F17BC8BA08DA62B": {
            "name": "GET_VEHICLE_DIRT_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                }
            ],
            "results": "float",
            "description": "A getter for [`SET_VEHICLE_DIRT_LEVEL`](#\\_0x79D3B596FE44EE8B).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local Vehicle = GetVehiclePedIsUsing(PlayerPedId())\nif GetVehicleDirtLevel(Vehicle) > 0.0 then -- if the cars dirt level is more than 0.0 then clean it.\n  SetVehicleDirtLevel(Vehicle, 0.0) -- set the vehicle dirt level to 0.0\nend"
                }
            ],
            "hash": "0x8F17BC8BA08DA62B",
            "ns": "VEHICLE",
            "jhash": "0xFD15C065",
            "manualHash": true,
            "resultsDescription": "A number between 0.0 and 15.0 representing the vehicles dirt level."
        },
        "0xFE3F9C29F7B32BD5": {
            "name": "GET_VEHICLE_DOOR_ANGLE_RATIO",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle"
                },
                {
                    "name": "doorIndex",
                    "type": "int",
                    "description": "Index of door to check"
                }
            ],
            "results": "float",
            "description": "Checks the angle of the door mapped from 0.0 - 1.0 where 0.0 is fully closed and 1.0 is fully open.\n\nSee eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local veh = GetVehiclePedIsIn(PlayerPedId()\n-- check if driver door is open\nif GetVehicleDoorAngleRatio(veh, 0) > 0.0 then\n  print(\"Driver door is open!)\nend"
                }
            ],
            "hash": "0xFE3F9C29F7B32BD5",
            "ns": "VEHICLE",
            "jhash": "0x0E399C26",
            "manualHash": true,
            "resultsDescription": "A float representing angle of door mapped from 0.0 to 1.0"
        },
        "0x25BC98A59C2EA962": {
            "name": "GET_VEHICLE_DOOR_LOCK_STATUS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nenum VehicleLockStatus = {\n    None = 0,\n    Unlocked = 1,\n    Locked = 2,\n    LockedForPlayer = 3,\n    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.\n    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1\n    CanBeBrokenIntoPersist = 8, -- Can be broken into persist\n    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).\n}\n```",
            "examples": [],
            "hash": "0x25BC98A59C2EA962",
            "ns": "VEHICLE",
            "jhash": "0x0D72CEF2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF6AF6CB341349015": {
            "name": "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "player", "type": "Player" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF6AF6CB341349015",
            "ns": "VEHICLE",
            "jhash": "0x1DC50247",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC45D23BAF168AAB8": {
            "name": "GET_VEHICLE_ENGINE_HEALTH",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nReturns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.  \nMinimum: -4000  \nMaximum: 1000  \n-4000: Engine is destroyed  \n0 and below: Engine catches fire and health rapidly declines  \n300: Engine is smoking and losing functionality  \n1000: Engine is perfect  \n```",
            "examples": [],
            "hash": "0xC45D23BAF168AAB8",
            "ns": "VEHICLE",
            "jhash": "0x8880038A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDA62027C8BDB326E": {
            "name": "GET_VEHICLE_FLIGHT_NOZZLE_POSITION",
            "params": [
                {
                    "name": "aircraft",
                    "type": "Vehicle",
                    "description": "The vehicle to check the hover mode on."
                }
            ],
            "results": "float",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\n\nif GetVehicleFlightNozzlePosition(vehicle) == 0.0 then\n    print(\"Flying normally!\")\nelseif GetVehicleFlightNozzlePosition(vehicle) == 1.0 then\n    print(\"Flying in VTOL mode!\")\nelse\n    print(\"Currently switching hover mode!\")\nend\n"
                },
                {
                    "lang": "cs",
                    "code": "int vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\n\nif (GetVehicleFlightNozzlePosition(vehicle) == 0f)\n{\n    Debug.WriteLine(\"Flying normally!\");\n}\nelse if (GetVehicleFlightNozzlePosition(vehicle) == 1f)\n{\n    Debug.WriteLine(\"Flying in VTOL mode!\");\n}\nelse\n{\n    Debug.WriteLine(\"Currently switching hover mode!\");\n}"
                },
                {
                    "lang": "js",
                    "code": "let vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\n\nif (GetVehicleFlightNozzlePosition(vehicle) === 0.0) {\n    console.log(\"Flying normally!\");\n}\nelse if (GetVehicleFlightNozzlePosition(vehicle) === 1.0) {\n    console.log(\"Flying in VTOL mode!\");\n}\nelse {\n    console.log(\"Currently switching hover mode!\");\n}"
                }
            ],
            "hash": "0xDA62027C8BDB326E",
            "ns": "VEHICLE",
            "aliases": [
                "0xDA62027C8BDB326E",
                "_GET_PLANE_HOVER_MODE_PERCENTAGE",
                "_GET_VEHICLE_HOVER_MODE_PERCENTAGE",
                "_GET_PLANE_VTOL_DIRECTION"
            ],
            "jhash": "0xAD40AD55",
            "manualHash": true,
            "resultsDescription": "A float indicating the percentage of the hover mode. 1.0 = in VTOL mode, 0.0 = in normal flying mode."
        },
        "0x3BC4245933A166F7": {
            "name": "GET_VEHICLE_EXTRA_COLOURS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "pearlescentColor", "type": "int*" },
                { "name": "wheelColor", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3BC4245933A166F7",
            "ns": "VEHICLE",
            "jhash": "0x80E4659B",
            "manualHash": true
        },
        "0xA82819CAC9C4C403": {
            "name": "GET_VEHICLE_ENVEFF_SCALE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nformerly known as _GET_VEHICLE_PAINT_FADE\nThe result is a value from 0-1, where 0 is fresh paint.\n```",
            "examples": [],
            "hash": "0xA82819CAC9C4C403",
            "ns": "VEHICLE",
            "aliases": ["_GET_VEHICLE_PAINT_FADE"],
            "jhash": "0xD5F1EEE1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x50634E348C8D44EF": {
            "name": "GET_VEHICLE_HAS_KERS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x50634E348C8D44EF",
            "ns": "VEHICLE",
            "aliases": ["0x50634E348C8D44EF", "_HAS_VEHICLE_KERS_BOOST"],
            "jhash": "0x0761E635",
            "manualHash": true,
            "resultsDescription": "Returns true if the vehicle has a kers boost (for instance the lectro or the vindicator)"
        },
        "0x53AF99BAA671CA47": {
            "name": "GET_VEHICLE_ESTIMATED_MAX_SPEED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle for which to obtain the estimated max speed."
                }
            ],
            "results": "float",
            "description": "Retrieves a static value representing the estimated max speed of a specific vehicle, including any vehicle mods. This value does not change dynamically during gameplay.\n\n```\nNativeDB Introduced: v323\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example prints the estimated max speed of the player's current vehicle.\n\n-- Retrieve the player ped.\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the vehicle the player is currently in.\nlocal vehicle = GetVehiclePedIsIn(playerPed, false)\n\n-- If the vehicle does not exist, end the execution of the code here.\nif not DoesEntityExist(vehicle) then \n    return \nend\n\n-- Retrieve the estimated max speed of the vehicle.\nlocal estimatedMaxSpeed = GetVehicleEstimatedMaxSpeed(vehicle)\n\n-- Print the estimated max speed of the vehicle.\nprint(\"Estimated Max Speed: \" .. estimatedMaxSpeed)"
                },
                {
                    "lang": "js",
                    "code": "// This example prints the estimated max speed of the player's current vehicle.\n\n// Retrieve the player ped.\nconst playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nconst vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// If the vehicle does not exist, end the execution of the code here.\nif (!DoesEntityExist(vehicle)) {\n  return;\n}\n\n// Retrieve the estimated max speed of the vehicle.\nconst estimatedMaxSpeed = GetVehicleEstimatedMaxSpeed(vehicle);\n\n// Print the estimated max speed of the vehicle.\nconsole.log(`Estimated Max Speed: ${estimatedMaxSpeed}`);"
                },
                {
                    "lang": "cs",
                    "code": "// This example prints the estimated max speed of the player's current vehicle.\nusing static CitizenFX.Core.Native.API;\n\n// Retrieve the player ped.\nPed playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nVehicle vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// If the vehicle does not exist, end the execution of the code here.\nif (!DoesEntityExist(vehicle)) {\n  return;\n}\n\n// Retrieve the estimated max speed of the vehicle.\nconst float estimatedMaxSpeed = GetVehicleEstimatedMaxSpeed(vehicle);\n\n// Print the estimated max speed of the vehicle.\nDebug.WriteLine($\"Estimated Max Speed: {estimatedMaxSpeed}\");"
                }
            ],
            "hash": "0x53AF99BAA671CA47",
            "ns": "VEHICLE",
            "aliases": ["0x53AF99BAA671CA47", "_GET_VEHICLE_MAX_SPEED"],
            "jhash": "0x7D1A0616",
            "manualHash": true,
            "resultsDescription": "Returns the estimated maximum speed of the specified vehicle as a float number."
        },
        "0xBC9CFF381338CB4F": {
            "name": "_GET_VEHICLE_HAS_PARACHUTE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBC9CFF381338CB4F",
            "ns": "VEHICLE",
            "aliases": [
                "_HAS_VEHICLE_PARACHUTE",
                "_DOES_VEHICLE_HAVE_PARACHUTE"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCA4AC3EAAE46EC7B": {
            "name": "GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" }
            ],
            "results": "int",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0xCA4AC3EAAE46EC7B",
            "ns": "VEHICLE",
            "aliases": ["0xCA4AC3EAAE46EC7B", "_GET_VEHICLE_DOOR_DESTROY_TYPE"],
            "manualHash": true,
            "resultsDescription": "Returns vehicle door lock state previously set with [`SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED`](#\\_0xBE70724027F85BCD)"
        },
        "0xB8EF61207C2393A9": {
            "name": "GET_VEHICLE_HEALTH_PERCENTAGE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nNativeDB Added Parameter 2: float maxEngineHealth\nNativeDB Added Parameter 3: float maxPetrolTankHealth\nNativeDB Added Parameter 4: float maxBodyHealth\nNativeDB Added Parameter 5: float maxMainRotorHealth\nNativeDB Added Parameter 6: float maxTailRotorHealth\nNativeDB Added Parameter 7: float maxUnkHealth\n```",
            "examples": [],
            "hash": "0xB8EF61207C2393A9",
            "ns": "VEHICLE",
            "aliases": ["_GET_VEHICLE_BODY_HEALTH_2"],
            "jhash": "0x196BA503",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE6B0E8CFC3633BF0": {
            "name": "GET_VEHICLE_HOMING_LOCKON_STATE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nReturns a value depending on the lock-on state of vehicle weapons.\n0: not locked on\n1: locking on\n2: locked on\n```",
            "examples": [],
            "hash": "0xE6B0E8CFC3633BF0",
            "ns": "VEHICLE",
            "aliases": ["0xE6B0E8CFC3633BF0"],
            "jhash": "0xFBDE9FD8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7D1464D472D32136": {
            "name": "_GET_VEHICLE_INTERIOR_COLOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "color", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7D1464D472D32136",
            "ns": "VEHICLE",
            "aliases": ["_GET_VEHICLE_INTERIOR_COLOUR"],
            "manualHash": true
        },
        "0xD4C4642CB7F50B5D": {
            "name": "GET_VEHICLE_IS_MERCENARY",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check for mercenary status."
                }
            ],
            "results": "BOOL",
            "description": "Returns whether the specified vehicle is designated as a mercenary vehicle",
            "examples": [],
            "hash": "0xD4C4642CB7F50B5D",
            "ns": "VEHICLE",
            "aliases": ["0xD4C4642CB7F50B5D"],
            "jhash": "0x575504DE",
            "manualHash": true,
            "resultsDescription": "Returns `true` if the vehicle is a mercenary vehicle, `false` otherwise."
        },
        "0xB91B4C20085BD12F": {
            "name": "GET_VEHICLE_LIGHTS_STATE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "lightsOn", "type": "BOOL*" },
                { "name": "highbeamsOn", "type": "BOOL*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB91B4C20085BD12F",
            "ns": "VEHICLE",
            "jhash": "0x7C278621",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2BB9230590DA5E8A": {
            "name": "GET_VEHICLE_LIVERY",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\n-1 = no livery  \n```",
            "examples": [],
            "hash": "0x2BB9230590DA5E8A",
            "ns": "VEHICLE",
            "jhash": "0xEC82A51D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x28D37D4F71AC5C58": {
            "name": "GET_VEHICLE_LAYOUT_HASH",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x28D37D4F71AC5C58",
            "ns": "VEHICLE",
            "jhash": "0xE0B35187",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAD7E85FC227197C4": {
            "name": "GET_VEHICLE_MAX_BRAKING",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xAD7E85FC227197C4",
            "ns": "VEHICLE",
            "jhash": "0x03B926F6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8F5EBAB1F260CFCE": {
            "name": "GET_VEHICLE_LOCK_ON_TARGET",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "entity", "type": "Entity*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8F5EBAB1F260CFCE",
            "ns": "VEHICLE",
            "aliases": ["_GET_VEHICLE_OWNER"],
            "jhash": "0x4A557117",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x87B63E25A529D526": {
            "name": "GET_VEHICLE_LIVERY_COUNT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nReturns -1 if the vehicle has no livery  \n```",
            "examples": [],
            "hash": "0x87B63E25A529D526",
            "ns": "VEHICLE",
            "jhash": "0xFB0CA947",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA7C4F2C6E744A550": {
            "name": "GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xA7C4F2C6E744A550",
            "ns": "VEHICLE",
            "jhash": "0x0A2FC08C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x772960298DA26FDB": {
            "name": "GET_VEHICLE_MOD",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to get the mod of."
                },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x772960298DA26FDB",
            "ns": "VEHICLE",
            "jhash": "0xDC520069",
            "manualHash": true,
            "resultsDescription": "Returns the current modIndex, or `-1` if the mod is stock."
        },
        "0xA132FB5370554DB0": {
            "name": "GET_VEHICLE_MAX_TRACTION",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xA132FB5370554DB0",
            "ns": "VEHICLE",
            "jhash": "0x7E5A1587",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x81592BE4E3878728": {
            "name": "GET_VEHICLE_MOD_COLOR_2",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "paintType", "type": "int*" },
                { "name": "color", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x81592BE4E3878728",
            "ns": "VEHICLE",
            "jhash": "0x9B76BB8E",
            "manualHash": true
        },
        "0x4967A516ED23A5A1": {
            "name": "GET_VEHICLE_MOD_COLOR_2_NAME",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "char*",
            "description": "```\nreturns a string which is the codename of the vehicle's currently selected secondary color  \n```",
            "examples": [],
            "hash": "0x4967A516ED23A5A1",
            "ns": "VEHICLE",
            "aliases": ["0x4967A516ED23A5A1"],
            "jhash": "0x9BDC0B49",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB45085B721EFD38C": {
            "name": "GET_VEHICLE_MOD_COLOR_1_NAME",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "char*",
            "description": "```\nreturns a string which is the codename of the vehicle's currently selected primary color  \np1 is always 0  \n```",
            "examples": [],
            "hash": "0xB45085B721EFD38C",
            "ns": "VEHICLE",
            "aliases": ["0xB45085B721EFD38C"],
            "jhash": "0x9A0840FD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4593CF82AA179706": {
            "name": "GET_VEHICLE_MOD_IDENTIFIER_HASH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                },
                { "name": "modIndex", "type": "int" }
            ],
            "results": "Hash",
            "description": "```\nCan be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF\n```",
            "examples": [],
            "hash": "0x4593CF82AA179706",
            "ns": "VEHICLE",
            "aliases": ["0x4593CF82AA179706", "_GET_VEHICLE_MOD_DATA"],
            "annotations": { "cs_type": "Any" },
            "jhash": "0x94850968",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6325D1A044AE510D": {
            "name": "GET_VEHICLE_MOD_KIT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x6325D1A044AE510D",
            "ns": "VEHICLE",
            "jhash": "0x9FE60927",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB3924ECD70E095DC": {
            "name": "GET_VEHICLE_MOD_VARIATION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                }
            ],
            "results": "BOOL",
            "description": "```\nOnly used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels\n```",
            "examples": [],
            "hash": "0xB3924ECD70E095DC",
            "ns": "VEHICLE",
            "jhash": "0xC1B92003",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE8D65CA700C9A693": {
            "name": "GET_VEHICLE_MOD_COLOR_1",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "paintType", "type": "int*" },
                { "name": "color", "type": "int*" },
                { "name": "pearlescentColor", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE8D65CA700C9A693",
            "ns": "VEHICLE",
            "jhash": "0xE625510A",
            "manualHash": true
        },
        "0x90A38E9838E0A8C1": {
            "name": "GET_VEHICLE_MOD_MODIFIER_VALUE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                },
                { "name": "modIndex", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x90A38E9838E0A8C1",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "float" },
            "jhash": "0x73AE5505",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF417C2502FFFED43": {
            "name": "GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "float",
            "description": "```\nReturns max speed (without mods) of the specified vehicle model in m/s.\n```",
            "examples": [],
            "hash": "0xF417C2502FFFED43",
            "ns": "VEHICLE",
            "aliases": ["_GET_VEHICLE_MODEL_MAX_SPEED"],
            "jhash": "0x8F291C4A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x53409B5163D5B846": {
            "name": "_GET_VEHICLE_MODEL_ESTIMATED_AGILITY",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "float",
            "description": "```\nGET_VEHICLE_MODEL_*\n9.8 * thrust if air vehicle, else 0.38 + drive force?\n```",
            "examples": [],
            "hash": "0x53409B5163D5B846",
            "ns": "VEHICLE",
            "aliases": ["0x53409B5163D5B846", "_GET_VEHICLE_MODEL_DOWN_FORCE"],
            "jhash": "0x37FBA7BC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFC058F5121E54C32": {
            "name": "GET_VEHICLE_MOD_KIT_TYPE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0xFC058F5121E54C32",
            "ns": "VEHICLE",
            "jhash": "0xE5F76765",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDC53FD41B4ED944C": {
            "name": "GET_VEHICLE_MODEL_MAX_BRAKING",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "float",
            "description": "```\nReturns max braking of the specified vehicle model.\n```",
            "examples": [],
            "hash": "0xDC53FD41B4ED944C",
            "ns": "VEHICLE",
            "jhash": "0x7EF02883",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBFBA3BA79CFF7EBF": {
            "name": "GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "float",
            "description": "",
            "examples": [],
            "hash": "0xBFBA3BA79CFF7EBF",
            "ns": "VEHICLE",
            "aliases": ["0xBFBA3BA79CFF7EBF", "_GET_VEHICLE_MODEL_HAND_BRAKE"],
            "jhash": "0xF3A7293F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC6AD107DDC9054CC": {
            "name": "_GET_VEHICLE_MODEL_MAX_KNOTS",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "float",
            "description": "```\nGET_VEHICLE_MODEL_*\nFunction pertains only to aviation vehicles.\n```",
            "examples": [],
            "hash": "0xC6AD107DDC9054CC",
            "ns": "VEHICLE",
            "aliases": ["0xC6AD107DDC9054CC"],
            "jhash": "0x95BB67EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8C044C5C84505B6A": {
            "name": "GET_VEHICLE_MODEL_ACCELERATION",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "float",
            "description": "Returns the acceleration of the specified model.",
            "examples": [],
            "hash": "0x8C044C5C84505B6A",
            "ns": "VEHICLE",
            "jhash": "0x29CB3537",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5873C14A52D74236": {
            "name": "GET_VEHICLE_MODEL_VALUE",
            "params": [
                {
                    "name": "vehicleModel",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "int",
            "description": "```\nReturns `nMonetaryValue` from handling.meta for specific model, which is the vehicle's monetary value.\n```",
            "examples": [],
            "hash": "0x5873C14A52D74236",
            "ns": "VEHICLE",
            "aliases": [
                "0x5873C14A52D74236",
                "_GET_VEHICLE_MODEL_MONETARY_VALUE"
            ],
            "jhash": "0x58FEFC3D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x539DE94D44FDFD0D": {
            "name": "GET_VEHICLE_MODEL_MAX_TRACTION",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "float",
            "description": "```\nReturns max traction of the specified vehicle model.\n```",
            "examples": [],
            "hash": "0x539DE94D44FDFD0D",
            "ns": "VEHICLE",
            "jhash": "0x7F985597",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7619EEE8C886757F": {
            "name": "_GET_VEHICLE_NEON_LIGHTS_COLOUR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "r", "type": "int*" },
                { "name": "g", "type": "int*" },
                { "name": "b", "type": "int*" }
            ],
            "results": "void",
            "description": "Gets the color of the neon lights of the specified vehicle.\n\nSee [`_SET_VEHICLE_NEON_LIGHTS_COLOUR`](#\\_0x8E0A582209A62695) for more information",
            "examples": [],
            "hash": "0x7619EEE8C886757F",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x24CB2137731FFE89": {
            "name": "GET_VEHICLE_NUMBER_OF_PASSENGERS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nGets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver  \n```",
            "examples": [],
            "hash": "0x24CB2137731FFE89",
            "ns": "VEHICLE",
            "jhash": "0x1EF20849",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2AD93716F184EDA4": {
            "name": "GET_VEHICLE_MODEL_NUMBER_OF_SEATS",
            "params": [{ "name": "modelHash", "type": "Hash" }],
            "results": "int",
            "description": "```\nReturns max number of passengers (including the driver) for the specified vehicle model.\n```",
            "examples": [],
            "hash": "0x2AD93716F184EDA4",
            "ns": "VEHICLE",
            "aliases": ["_GET_VEHICLE_MODEL_MAX_NUMBER_OF_PASSENGERS"],
            "jhash": "0x838F7BF7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2C8CBFE1EA5FC631": {
            "name": "_GET_VEHICLE_NUMBER_OF_BROKEN_BONES",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x2C8CBFE1EA5FC631",
            "ns": "VEHICLE",
            "aliases": ["0x2C8CBFE1EA5FC631"],
            "jhash": "0xABC99E21",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x42A4BEB35D372407": {
            "name": "_GET_VEHICLE_NUMBER_OF_BROKEN_OFF_BONES",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nAlso includes some \"turnOffBones\" when vehicle mods are installed.\n```",
            "examples": [],
            "hash": "0x42A4BEB35D372407",
            "ns": "VEHICLE",
            "aliases": ["0x42A4BEB35D372407"],
            "jhash": "0x8CDB0C09",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9CCC9525BF2408E0": {
            "name": "GET_VEHICLE_PLATE_TYPE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "Returns the plates a vehicle has.\n\n```\nenum eVehiclePlateType\n{\n\tVPT_FRONT_AND_BACK_PLATES = 0,\n\tVPT_FRONT_PLATES = 1,\n\tVPT_BACK_PLATES = 2,\n\tVPT_NONE = 3,\n};\n```\n\nMotorcycles with no visible plates will sometimes return a 2 for unknown reasons.",
            "examples": [],
            "hash": "0x9CCC9525BF2408E0",
            "ns": "VEHICLE",
            "jhash": "0x65CA9286",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7CE1CCB9B293020E": {
            "name": "GET_VEHICLE_NUMBER_PLATE_TEXT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "char*",
            "description": "```\nReturns the license plate text from a vehicle.  8 chars maximum.  \n```",
            "examples": [],
            "hash": "0x7CE1CCB9B293020E",
            "ns": "VEHICLE",
            "jhash": "0xE8522D58",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5ECB40269053C0D4": {
            "name": "_GET_VEHICLE_ROOF_LIVERY_COUNT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                }
            ],
            "results": "int",
            "description": "Returns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available.",
            "examples": [],
            "hash": "0x5ECB40269053C0D4",
            "ns": "VEHICLE",
            "aliases": ["0x5ECB40269053C0D4"],
            "manualHash": true,
            "resultsDescription": "A number of available rooftop liveries for vehicle."
        },
        "0x21543C612379DB3C": {
            "name": "GET_VEHICLE_RECORDING_ID",
            "params": [
                { "name": "recording", "type": "int" },
                { "name": "script", "type": "char*" }
            ],
            "results": "int",
            "description": "See [`REQUEST_VEHICLE_RECORDING`](#\\_0xAF514CABE74CBF15).",
            "examples": [],
            "hash": "0x21543C612379DB3C",
            "ns": "VEHICLE",
            "jhash": "0x328D601D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7D5DABE888D2D074": {
            "name": "GET_VEHICLE_PETROL_TANK_HEALTH",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\n1000 is max health  \nBegins leaking gas at around 650 health  \n```",
            "examples": [],
            "hash": "0x7D5DABE888D2D074",
            "ns": "VEHICLE",
            "jhash": "0xE41595CE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF11BC2DD9A3E7195": {
            "name": "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nReturns the PlateType of a vehicle  \nBlue_on_White_1 = 3,  \nBlue_on_White_2 = 0,  \nBlue_on_White_3 = 4,  \nYellow_on_Blue = 2,  \nYellow_on_Black = 1,  \nNorth_Yankton = 5,  \n```",
            "examples": [],
            "hash": "0xF11BC2DD9A3E7195",
            "ns": "VEHICLE",
            "jhash": "0x499747B6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDF7E3EEB29642C38": {
            "name": "_GET_VEHICLE_SUSPENSION_BOUNDS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "out1", "type": "Vector3*" },
                { "name": "out2", "type": "Vector3*" }
            ],
            "results": "void",
            "description": "```\nOutputs 2 Vector3's.\nScripts check if out2.x - out1.x > something.x\nCould be suspension related, as in max suspension height and min suspension height, considering the natives location.\n```",
            "examples": [],
            "hash": "0xDF7E3EEB29642C38",
            "ns": "VEHICLE",
            "aliases": ["0xDF7E3EEB29642C38"],
            "manualHash": true
        },
        "0x1CDD6BADC297830D": {
            "name": "GET_VEHICLE_TRAILER_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "trailer", "type": "Vehicle*" }
            ],
            "results": "BOOL",
            "description": "```\nGets the trailer of a vehicle and puts it into the trailer parameter.  \n```",
            "examples": [],
            "hash": "0x1CDD6BADC297830D",
            "ns": "VEHICLE",
            "jhash": "0xAE84D758",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x60190048C0764A26": {
            "name": "_GET_VEHICLE_ROOF_LIVERY",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                }
            ],
            "results": "int",
            "description": "Returns index of the current vehicle's rooftop livery.\nA getter for [\\_SET_VEHICLE_ROOF_LIVERY](#\\_0xA6D3A8750DC73270).",
            "examples": [],
            "hash": "0x60190048C0764A26",
            "ns": "VEHICLE",
            "aliases": ["0x60190048C0764A26"],
            "manualHash": true,
            "resultsDescription": "An index of the current vehicle's rooftop livery."
        },
        "0x678B9BB8C3F58FEB": {
            "name": "GET_VEHICLE_TYRES_CAN_BURST",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x678B9BB8C3F58FEB",
            "ns": "VEHICLE",
            "jhash": "0x4D76CD2F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0EE21293DAD47C95": {
            "name": "GET_VEHICLE_WINDOW_TINT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x0EE21293DAD47C95",
            "ns": "VEHICLE",
            "jhash": "0x13D53892",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB635392A4938B3C3": {
            "name": "GET_VEHICLE_TYRE_SMOKE_COLOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "r", "type": "int*" },
                { "name": "g", "type": "int*" },
                { "name": "b", "type": "int*" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB635392A4938B3C3",
            "ns": "VEHICLE",
            "jhash": "0x75280015",
            "manualHash": true
        },
        "0xB3ED1BFB4BE636DC": {
            "name": "GET_VEHICLE_WHEEL_TYPE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```cpp\nenum eVehicleWheelType\n{\n    VWT_SPORT = 0,\n    VWT_MUSCLE = 1,\n    VWT_LOWRIDER = 2,\n    VWT_SUV = 3,\n    VWT_OFFROAD = 4,\n    VWT_TUNER = 5,\n    VWT_BIKE = 6,\n    VWT_HIEND = 7,\n    VWT_SUPERMOD1 = 8, // Benny's Original\n    VWT_SUPERMOD2 = 9, // Benny's Bespoke\n    VWT_SUPERMOD3 = 10, // Open Wheel\n    VWT_SUPERMOD4 = 11, // Street\n    VWT_SUPERMOD5 = 12, // Track\n};\n```",
            "examples": [],
            "hash": "0xB3ED1BFB4BE636DC",
            "ns": "VEHICLE",
            "jhash": "0xDA58D7AE",
            "manualHash": true,
            "resultsDescription": "Returns an eVehicleWheelType integer value."
        },
        "0x53952FD2BAA19F17": {
            "name": "_GET_VEHICLE_SUSPENSION_HEIGHT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "float",
            "description": "```\nGets the height of the vehicle's suspension.  \nThe higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.  \n0.000 is the stock suspension.  \n0.008 is Ultra Suspension.  \n```",
            "examples": [],
            "hash": "0x53952FD2BAA19F17",
            "ns": "VEHICLE",
            "jhash": "0xB73A1486",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3DFF319A831E0CDB": {
            "name": "_GET_VEHICLE_XENON_LIGHTS_COLOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to get the headlight color from."
                }
            ],
            "results": "int",
            "description": "Returns the headlight color index from the vehicle. Value between 0, 12.\nUse [\\_SET_VEHICLE_HEADLIGHTS_COLOUR](#\\_0xE41033B25D003A07) to set the headlights color for the vehicle.\nMust enable xenon headlights before it'll take affect.\n\nList of colors and ids:\n\n```\nenum headlightColors {\n    Default = -1,\n    White = 0,\n    Blue = 1,\n    Electric_Blue = 2,\n    Mint_Green = 3,\n    Lime_Green = 4,\n    Yellow = 5,\n    Golden_Shower = 6,\n    Orange = 7,\n    Red = 8,\n    Pony_Pink = 9,\n    Hot_Pink = 10,\n    Purple = 11,\n    Blacklight = 12\n}\n```",
            "examples": [],
            "hash": "0x3DFF319A831E0CDB",
            "ns": "VEHICLE",
            "aliases": [
                "0x3DFF319A831E0CDB",
                "_GET_VEHICLE_HEADLIGHTS_COLOUR",
                "_GET_VEHICLE_XENON_LIGHTS_COLOUR"
            ],
            "manualHash": true,
            "resultsDescription": "Returns an int, value between 0-12 or 255 if no color is set."
        },
        "0x8181CE2F25CB9BB7": {
            "name": "_GET_VEHICLE_WEAPON_CAPACITY",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "weaponIndex", "type": "int" }
            ],
            "results": "int",
            "description": "",
            "examples": [],
            "hash": "0x8181CE2F25CB9BB7",
            "ns": "VEHICLE",
            "aliases": ["0x8181CE2F25CB9BB7"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x06F43E5175EB6D96": {
            "name": "HAS_PRELOAD_MODS_FINISHED",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x06F43E5175EB6D96",
            "ns": "VEHICLE",
            "jhash": "0xA8A0D246",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x91D6DD290888CBAB": {
            "name": "_HAS_FILLED_VEHICLE_POPULATION",
            "params": [],
            "results": "BOOL",
            "description": "```\nHAS_*\n```",
            "examples": [],
            "hash": "0x91D6DD290888CBAB",
            "ns": "VEHICLE",
            "aliases": ["0x91D6DD290888CBAB"],
            "jhash": "0x71D898EF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1BBE0523B8DB9A21": {
            "name": "HAS_VEHICLE_ASSET_LOADED",
            "params": [{ "name": "vehicleAsset", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1BBE0523B8DB9A21",
            "ns": "VEHICLE",
            "jhash": "0x8DAAC3CB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x300D614A4C785FC4": {
            "name": "HAS_VEHICLE_RECORDING_BEEN_LOADED",
            "params": [
                { "name": "recording", "type": "int" },
                {
                    "name": "script",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x300D614A4C785FC4",
            "ns": "VEHICLE",
            "jhash": "0xF52CD7F5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6ADAABD3068C5235": {
            "name": "HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE",
            "params": [],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x6ADAABD3068C5235",
            "ns": "VEHICLE",
            "aliases": ["0x6ADAABD3068C5235"],
            "jhash": "0xA4E69134",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9A83F5F9963775EF": {
            "name": "HAVE_VEHICLE_MODS_STREAMED_IN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9A83F5F9963775EF",
            "ns": "VEHICLE",
            "aliases": ["0x9A83F5F9963775EF", "_IS_VEHICLE_MOD_LOAD_DONE"],
            "jhash": "0x112D637A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x62CA17B74C435651": {
            "name": "IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x62CA17B74C435651",
            "ns": "VEHICLE",
            "aliases": ["0x62CA17B74C435651"],
            "jhash": "0x593143B9",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAE71FB656C600587": {
            "name": "_HIDE_VEHICLE_TOMBSTONE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xAE71FB656C600587",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x48ADC8A773564670": {
            "name": "INSTANTLY_FILL_VEHICLE_POPULATION",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x48ADC8A773564670",
            "ns": "VEHICLE",
            "aliases": ["0x48ADC8A773564670"],
            "jhash": "0x37BC6ACB",
            "manualHash": true
        },
        "0x291E373D483E7EE7": {
            "name": "IS_ANY_PED_RAPPELLING_FROM_HELI",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x291E373D483E7EE7",
            "ns": "VEHICLE",
            "aliases": [
                "0x291E373D483E7EE7",
                "_ANY_PASSENGERS_RAPPELING",
                "_IS_ANY_PASSENGER_RAPPELING_FROM_VEHICLE"
            ],
            "jhash": "0xD656E7E5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9F243D3919F442FE": {
            "name": "IS_BIG_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9F243D3919F442FE",
            "ns": "VEHICLE",
            "jhash": "0x9CDBA8DE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB0AD1238A709B1A2": {
            "name": "_IS_BOAT_ANCHORED_AND_FROZEN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nIS_*\n```",
            "examples": [],
            "hash": "0xB0AD1238A709B1A2",
            "ns": "VEHICLE",
            "aliases": ["0xB0AD1238A709B1A2"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x61E1DD6125A3EEE6": {
            "name": "IS_ANY_VEHICLE_NEAR_POINT",
            "params": [
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "radius", "type": "float" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x61E1DD6125A3EEE6",
            "ns": "VEHICLE",
            "jhash": "0x2867A834",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBC74B4BE25EB6C8A": {
            "name": "IS_HELI_PART_BROKEN",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBC74B4BE25EB6C8A",
            "ns": "VEHICLE",
            "jhash": "0xF4E4C439",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7EEF65D5F153E26A": {
            "name": "IS_COP_VEHICLE_IN_AREA_3D",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "z2", "type": "float" }
            ],
            "results": "BOOL",
            "description": "```\nUsage:  \npublic bool isCopInRange(Vector3 Location, float Range)  \n        {  \n            return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);  \n        }  \n```",
            "examples": [],
            "hash": "0x7EEF65D5F153E26A",
            "ns": "VEHICLE",
            "jhash": "0xFB16C6D1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x634148744F385576": {
            "name": "IS_HELI_LANDING_AREA_BLOCKED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x634148744F385576",
            "ns": "VEHICLE",
            "aliases": ["0x634148744F385576"],
            "jhash": "0x6346B7CC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x89D630CF5EA96D23": {
            "name": "_IS_HANDLER_FRAME_ABOVE_CONTAINER",
            "params": [
                { "name": "handler", "type": "Vehicle" },
                { "name": "container", "type": "Entity" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x89D630CF5EA96D23",
            "ns": "VEHICLE",
            "aliases": ["0x89D630CF5EA96D23"],
            "jhash": "0xFBF5536A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x57715966069157AD": {
            "name": "IS_ENTITY_ATTACHED_TO_HANDLER_FRAME",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "entity", "type": "Entity" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x57715966069157AD",
            "ns": "VEHICLE",
            "aliases": [
                "SET_PED_ENABLED_BIKE_RINGTONE",
                "_IS_VEHICLE_NEAR_ENTITY"
            ],
            "jhash": "0x7FB25568",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAD464F2E18836BFC": {
            "name": "_IS_MISSION_TRAIN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xAD464F2E18836BFC",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xB09D25E77C33EB3F": {
            "name": "_IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "outIndex", "type": "int*" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB09D25E77C33EB3F",
            "ns": "VEHICLE",
            "aliases": ["0xB09D25E77C33EB3F"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1C8A4C2C19E68EEC": {
            "name": "IS_PLAYBACK_GOING_ON_FOR_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1C8A4C2C19E68EEC",
            "ns": "VEHICLE",
            "jhash": "0x61F7650D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF7F203E31F96F6A1": {
            "name": "IS_SEAT_WARP_ONLY",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" },
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF7F203E31F96F6A1",
            "ns": "VEHICLE",
            "aliases": ["0xF7F203E31F96F6A1"],
            "jhash": "0x769E5CF2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAEA8FD591FAD4106": {
            "name": "IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAEA8FD591FAD4106",
            "ns": "VEHICLE",
            "jhash": "0x63022C58",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x45A9187928F4B9E3": {
            "name": "IS_THIS_MODEL_A_BOAT",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x45A9187928F4B9E3",
            "ns": "VEHICLE",
            "jhash": "0x10F6085C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4198AB0022B15F87": {
            "name": "IS_PLANE_LANDING_GEAR_INTACT",
            "params": [{ "name": "plane", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4198AB0022B15F87",
            "ns": "VEHICLE",
            "aliases": ["0x4198AB0022B15F87", "_VEHICLE_HAS_LANDING_GEAR"],
            "jhash": "0xBD085DCA",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBF94DD42F63BDED2": {
            "name": "IS_THIS_MODEL_A_BICYCLE",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBF94DD42F63BDED2",
            "ns": "VEHICLE",
            "jhash": "0x328E6FF5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDCE4334788AF94EA": {
            "name": "IS_THIS_MODEL_A_HELI",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDCE4334788AF94EA",
            "ns": "VEHICLE",
            "jhash": "0x8AF7F568",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9537097412CF75FE": {
            "name": "_IS_THIS_MODEL_A_JETSKI",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nChecks if model is a boat, then checks for FLAG_IS_JETSKI.\n```",
            "examples": [],
            "hash": "0x9537097412CF75FE",
            "ns": "VEHICLE",
            "aliases": [
                "_IS_THIS_MODEL_A_SUBMERSIBLE",
                "_IS_THIS_MODEL_AN_EMERGENCY_BOAT"
            ],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAB935175B22E822B": {
            "name": "IS_THIS_MODEL_A_TRAIN",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAB935175B22E822B",
            "ns": "VEHICLE",
            "jhash": "0xF87DCFFD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7F6DB52EEFC96DF8": {
            "name": "IS_THIS_MODEL_A_CAR",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "```\nTo check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)  \n```",
            "examples": [],
            "hash": "0x7F6DB52EEFC96DF8",
            "ns": "VEHICLE",
            "jhash": "0x60E4C22F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7504C0F113AB50FC": {
            "name": "IS_TAXI_LIGHT_ON",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7504C0F113AB50FC",
            "ns": "VEHICLE",
            "jhash": "0x6FC4924A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA0948AB42D7BA0DE": {
            "name": "IS_THIS_MODEL_A_PLANE",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA0948AB42D7BA0DE",
            "ns": "VEHICLE",
            "jhash": "0x3B3907BB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x633F6F44A537EBB6": {
            "name": "_IS_THIS_MODEL_AN_AMPHIBIOUS_CAR",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x633F6F44A537EBB6",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA1A9FC1C76A6730D": {
            "name": "_IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE",
            "params": [
                {
                    "name": "model",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA1A9FC1C76A6730D",
            "ns": "VEHICLE",
            "aliases": ["0xA1A9FC1C76A6730D"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB50C0B0CEDC6CE84": {
            "name": "IS_THIS_MODEL_A_BIKE",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB50C0B0CEDC6CE84",
            "ns": "VEHICLE",
            "jhash": "0x7E702CDD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x84B233A8C8FC8AE7": {
            "name": "IS_TOGGLE_MOD_ON",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x84B233A8C8FC8AE7",
            "ns": "VEHICLE",
            "jhash": "0xF0E1689F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x39DAC362EE65FA28": {
            "name": "IS_THIS_MODEL_A_QUADBIKE",
            "params": [{ "name": "model", "type": "Hash" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x39DAC362EE65FA28",
            "ns": "VEHICLE",
            "jhash": "0xC1625277",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x52F357A30698BCCE": {
            "name": "IS_VEHICLE_A_CONVERTIBLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np1 is false almost always.  \nHowever, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF  \n```",
            "examples": [],
            "hash": "0x52F357A30698BCCE",
            "ns": "VEHICLE",
            "jhash": "0x6EF54490",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4319E335B71FFF34": {
            "name": "IS_VEHICLE_ALARM_ACTIVATED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4319E335B71FFF34",
            "ns": "VEHICLE",
            "jhash": "0xF2630A4C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE7CF3C4F9F489F0C": {
            "name": "IS_VEHICLE_ATTACHED_TO_TRAILER",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE7CF3C4F9F489F0C",
            "ns": "VEHICLE",
            "jhash": "0xE142BBCC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xE33FFA906CE74880": {
            "name": "IS_TURRET_SEAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE33FFA906CE74880",
            "ns": "VEHICLE",
            "aliases": ["0xE33FFA906CE74880"],
            "jhash": "0x7C43D32A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x146DF9EC4C4B9FD4": {
            "name": "IS_VEHICLE_ATTACHED_TO_TOW_TRUCK",
            "params": [
                { "name": "towTruck", "type": "Vehicle" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "BOOL",
            "description": "```\nScripts verify that towTruck is the first parameter, not the second.  \n```",
            "examples": [],
            "hash": "0x146DF9EC4C4B9FD4",
            "ns": "VEHICLE",
            "jhash": "0x9699CFDC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC69BB1D832A710EF": {
            "name": "_IS_VEHICLE_BEING_HALTED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns true if vehicle is halted by BRING_VEHICLE_TO_HALT\n_IS_VEHICLE_*\n```\n\n```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xC69BB1D832A710EF",
            "ns": "VEHICLE",
            "aliases": ["0xC69BB1D832A710EF"],
            "manualHash": true
        },
        "0xD40148F22E81A1D9": {
            "name": "IS_VEHICLE_ATTACHED_TO_CARGOBOB",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "vehicleAttached", "type": "Vehicle" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD40148F22E81A1D9",
            "ns": "VEHICLE",
            "jhash": "0x5DEEC76C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBCDC5017D3CE1E9E": {
            "name": "_IS_VEHICLE_DAMAGED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nAppears to return true if the vehicle has any damage, including cosmetically.\nGET_*\n```",
            "examples": [],
            "hash": "0xBCDC5017D3CE1E9E",
            "ns": "VEHICLE",
            "jhash": "0xDAC523BC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x27B926779DEB502D": {
            "name": "IS_VEHICLE_BUMPER_BOUNCING",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "frontBumper", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x27B926779DEB502D",
            "ns": "VEHICLE",
            "aliases": ["0x27B926779DEB502D"],
            "jhash": "0xB3A2CC4F",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4C241E39B23DF959": {
            "name": "IS_VEHICLE_DRIVEABLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "isOnFireCheck", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\np1 is always 0 in the scripts.  \np1 = check if vehicle is on fire  \n```",
            "examples": [],
            "hash": "0x4C241E39B23DF959",
            "ns": "VEHICLE",
            "jhash": "0x41A7267A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3E933CFF7B111C22": {
            "name": "IS_VEHICLE_DOOR_FULLY_OPEN",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                },
                {
                    "name": "doorIndex",
                    "type": "int",
                    "description": "The index of the door to check."
                }
            ],
            "results": "BOOL",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0x3E933CFF7B111C22",
            "ns": "VEHICLE",
            "jhash": "0xC2385B6F",
            "manualHash": true,
            "resultsDescription": "A bool indiciating if the specified door is fully open on the specified vehicle."
        },
        "0x468056A6BB6F3846": {
            "name": "IS_VEHICLE_BUMPER_BROKEN_OFF",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "front", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x468056A6BB6F3846",
            "ns": "VEHICLE",
            "jhash": "0xAF25C027",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCEE4490CD57BB3C2": {
            "name": "IS_VEHICLE_IN_GARAGE_AREA",
            "params": [
                { "name": "garageName", "type": "char*" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "BOOL",
            "description": "```\ngarageName example \"Michael - Beverly Hills\"\n```",
            "examples": [],
            "hash": "0xCEE4490CD57BB3C2",
            "ns": "VEHICLE",
            "jhash": "0xA90EC257",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB8E181E559464527": {
            "name": "IS_VEHICLE_DOOR_DAMAGED",
            "params": [
                { "name": "veh", "type": "Vehicle" },
                { "name": "doorID", "type": "int" }
            ],
            "results": "BOOL",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0xB8E181E559464527",
            "ns": "VEHICLE",
            "jhash": "0x4999E3C3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEC69ADF931AAE0C3": {
            "name": "_IS_VEHICLE_ENGINE_ON_FIRE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                }
            ],
            "results": "BOOL",
            "description": "Only ever used once in decompiled scripts: **am_pi_menu**:\nReturns true if the engine is on fire, or if the vehicle engine health is < 0 and it **has been** on fire.\n\nIt sometimes doesn't return true when the vehicle engine has been on fire, and has since been fixed. I'm not really sure what the exact conditions are.\n\nThis usually returns true even if there are no visible flames yet (engine health > 0). However if you monitor engine health you'll see that it starts decreasing as soon as this returns true.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nSetVehicleEngineHealth(vehicle, 99)\n\nCreateThread(function()\n    -- waiting for the vehicle to be on fire, usually takes one small\n    -- crash into a wall or something to do this if engine health < 100.\n    while IsVehicleEngineOnFire(vehicle) ~= 1 do\n        Wait(0)\n    end\n    print(\"Vehicle is now on fire!\")\nend)"
                }
            ],
            "hash": "0xEC69ADF931AAE0C3",
            "ns": "VEHICLE",
            "aliases": ["0xEC69ADF931AAE0C3"],
            "manualHash": true,
            "resultsDescription": "Returns true when the engine of your vehicle is on fire. Returns false if it's not on fire."
        },
        "0x1F25887F3C104278": {
            "name": "IS_VEHICLE_HIGH_DETAIL",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1F25887F3C104278",
            "ns": "VEHICLE",
            "jhash": "0x55D41928",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x423E8DE37D934D89": {
            "name": "IS_VEHICLE_MODEL",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "model", "type": "Hash" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x423E8DE37D934D89",
            "ns": "VEHICLE",
            "jhash": "0x013B10B6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xD2E6822DBFD6C8BD": {
            "name": "IS_VEHICLE_EXTRA_TURNED_ON",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "extraId", "type": "int" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD2E6822DBFD6C8BD",
            "ns": "VEHICLE",
            "jhash": "0x042098B5",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA77DC70BD689A1E5": {
            "name": "IS_VEHICLE_IN_SUBMARINE_MODE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xA77DC70BD689A1E5",
            "ns": "VEHICLE",
            "aliases": ["_GET_IS_SUBMARINE_VEHICLE_TRANSFORMED"],
            "jhash": "0xE2FF06DB",
            "manualHash": true
        },
        "0x00834EAC4A96E010": {
            "name": "_IS_VEHICLE_MOD_HSW_EXCLUSIVE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "modType", "type": "int" },
                { "name": "modIndex", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nmpsum2_g9ec\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0x00834EAC4A96E010",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x8C4B92553E4766A5": {
            "name": "_IS_VEHICLE_NEON_LIGHT_ENABLED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "index", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\nindices:  \n0 = Left  \n1 = Right  \n2 = Front  \n3 = Back  \n```",
            "examples": [],
            "hash": "0x8C4B92553E4766A5",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1297A88E081430EB": {
            "name": "IS_VEHICLE_IN_BURNOUT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns whether the specified vehicle is currently in a burnout.  \nvb.net  \nPublic Function isVehicleInBurnout(vh As Vehicle) As Boolean  \n        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)  \n    End Function  \n```",
            "examples": [],
            "hash": "0x1297A88E081430EB",
            "ns": "VEHICLE",
            "jhash": "0x6632BC12",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB5CC40FBCB586380": {
            "name": "IS_VEHICLE_SIREN_AUDIO_ON",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB5CC40FBCB586380",
            "ns": "VEHICLE",
            "aliases": ["0xB5CC40FBCB586380", "_IS_VEHICLE_SIREN_SOUND_ON"],
            "jhash": "0xC9458688",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3DE51E9C80B116CF": {
            "name": "_IS_VEHICLE_PARACHUTE_ACTIVE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "Does not work for vehicle of type: CBike, CBmx, CBoat, CTrain, CSubmarine.",
            "examples": [],
            "hash": "0x3DE51E9C80B116CF",
            "ns": "VEHICLE",
            "aliases": ["0x3DE51E9C80B116CF"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB104CD1BABF302E2": {
            "name": "IS_VEHICLE_ON_ALL_WHEELS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nPublic Function isVehicleOnAllWheels(vh As Vehicle) As Boolean  \nReturn Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)  \n\t\t    End Function  \n```",
            "examples": [],
            "hash": "0xB104CD1BABF302E2",
            "ns": "VEHICLE",
            "jhash": "0x10089F8E",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4AF9BD80EEBEB453": {
            "name": "IS_VEHICLE_STOLEN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4AF9BD80EEBEB453",
            "ns": "VEHICLE",
            "jhash": "0x20B61DDE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3D34E80EED4AE3BE": {
            "name": "_IS_VEHICLE_ROCKET_BOOST_ACTIVE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3D34E80EED4AE3BE",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2959F696AE390A99": {
            "name": "IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nIs this for red lights only?  more testing required.\n```",
            "examples": [],
            "hash": "0x2959F696AE390A99",
            "ns": "VEHICLE",
            "jhash": "0x69200FA4",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xC0F97FCE55094987": {
            "name": "IS_VEHICLE_SEARCHLIGHT_ON",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nPossibly: Returns whether the searchlight (found on police vehicles) is toggled on.  \n```",
            "examples": [],
            "hash": "0xC0F97FCE55094987",
            "ns": "VEHICLE",
            "jhash": "0xADAF3513",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x22AC59A870E6A669": {
            "name": "IS_VEHICLE_SEAT_FREE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "The eSeatPosition or -2 for **any** vehicle seat."
                }
            ],
            "results": "BOOL",
            "description": "Seat indices range from -1 to [`GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS`](#\\_0xA7C4F2C6E744A550) minus one.\n\n```cpp\n// CTaskExitVehicleSeat::eSeatPosition - 1\nenum eSeatPosition\n{\n    SF_FrontDriverSide = -1,\n    SF_FrontPassengerSide = 0,\n    SF_BackDriverSide = 1,\n    SF_BackPassengerSide = 2,\n    SF_AltFrontDriverSide = 3,\n    SF_AltFrontPassengerSide = 4,\n    SF_AltBackDriverSide = 5,\n    SF_AltBackPassengerSide = 6,\n};\n```\n\n```\nNativeDB Added Parameter 3: BOOL isTaskRunning\n\nisTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.\n```",
            "examples": [],
            "hash": "0x22AC59A870E6A669",
            "ns": "VEHICLE",
            "jhash": "0xDAF42B02",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4C9BF537BE2634B2": {
            "name": "IS_VEHICLE_SIREN_ON",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "Returns whether the vehicle's lights and sirens are on.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local veh = GetVehiclePedIsIn(PlayerPedId())\nprint(tostring(IsVehicleSirenOn(veh))"
                }
            ],
            "hash": "0x4C9BF537BE2634B2",
            "ns": "VEHICLE",
            "jhash": "0x25EB5873",
            "manualHash": true,
            "resultsDescription": "Returns false if siren and lights are disabled or true if they are enabled."
        },
        "0x639431E895B9AA57": {
            "name": "_IS_VEHICLE_SEAT_ACCESSIBLE",
            "params": [
                { "name": "ped", "type": "Ped" },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" },
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                },
                { "name": "side", "type": "BOOL" },
                { "name": "onEnter", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nCheck if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).\nside = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.\nonEnter = check if you can enter (true) or exit (false) a vehicle.\n```",
            "examples": [],
            "hash": "0x639431E895B9AA57",
            "ns": "VEHICLE",
            "aliases": ["0x639431E895B9AA57"],
            "jhash": "0xAB0E79EB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x679BE1DAF71DA874": {
            "name": "IS_VEHICLE_STUCK_TIMER_UP",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "BOOL",
            "description": "```\np1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.  \n```",
            "examples": [],
            "hash": "0x679BE1DAF71DA874",
            "ns": "VEHICLE",
            "jhash": "0x2FCF58C1",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x5721B434AD84D57A": {
            "name": "IS_VEHICLE_STOPPED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns true if the vehicle's current speed is less than, or equal to 0.0025f.\nFor some vehicles it returns true if the current speed is <= 0.00039999999.\n```",
            "examples": [],
            "hash": "0x5721B434AD84D57A",
            "ns": "VEHICLE",
            "jhash": "0x655F072C",
            "manualHash": true,
            "resultsDescription": "True if the vehicle's speed is equal to, or less than 0.02 meters per second, or 0.05 meters per second, if the vehicle's handbrake is engaged."
        },
        "0x48C633E94A8142A7": {
            "name": "_IS_VEHICLE_SLIPSTREAM_LEADER",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x48C633E94A8142A7",
            "ns": "VEHICLE",
            "aliases": ["0x48C633E94A8142A7"],
            "manualHash": true,
            "resultsDescription": "True if the vehicle is being slipstreamed by another vehicle"
        },
        "0xBA291848A0815CA9": {
            "name": "IS_VEHICLE_TYRE_BURST",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelID", "type": "int" },
                { "name": "completely", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "```\nwheelID used for 4 wheelers seem to be (0, 1, 4, 5)  \ncompletely - is to check if tire completely gone from rim.  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n```",
            "examples": [],
            "hash": "0xBA291848A0815CA9",
            "ns": "VEHICLE",
            "jhash": "0x48C80210",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x563B65A643ED072E": {
            "name": "_IS_VEHICLE_WEAPON_DISABLED",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                },
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "owner", "type": "Ped" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x563B65A643ED072E",
            "ns": "VEHICLE",
            "aliases": ["0x563B65A643ED072E"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x8D474C8FAEFF6CDE": {
            "name": "IS_VEHICLE_SPRAYABLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nReturns false if the vehicle has the FLAG_NO_RESPRAY flag set.\n```",
            "examples": [],
            "hash": "0x8D474C8FAEFF6CDE",
            "ns": "VEHICLE",
            "aliases": [
                "0x8D474C8FAEFF6CDE",
                "_IS_VEHICLE_SHOP_RESPRAY_ALLOWED"
            ],
            "jhash": "0x5EB00A6A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAA0A52D24FB98293": {
            "name": "IS_VEHICLE_VISIBLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAA0A52D24FB98293",
            "ns": "VEHICLE",
            "jhash": "0x7E0D6056",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xB497F06B288DCFDF": {
            "name": "IS_VEHICLE_STUCK_ON_ROOF",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB497F06B288DCFDF",
            "ns": "VEHICLE",
            "jhash": "0x18D07C6C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDED51F703D0FA83D": {
            "name": "LOWER_CONVERTIBLE_ROOF",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "instantlyLower", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDED51F703D0FA83D",
            "ns": "VEHICLE",
            "jhash": "0xC5F72EAE",
            "manualHash": true
        },
        "0x5335BE58C083E74E": {
            "name": "_LOWER_RETRACTABLE_WHEELS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5335BE58C083E74E",
            "ns": "VEHICLE",
            "aliases": ["0x5335BE58C083E74E"],
            "manualHash": true
        },
        "0x46E571A0E20D01F1": {
            "name": "IS_VEHICLE_WINDOW_INTACT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle"
                },
                {
                    "name": "windowIndex",
                    "type": "int",
                    "description": "The index of the window"
                }
            ],
            "results": "BOOL",
            "description": "```cpp\nenum eWindowId {\n\tVEH_EXT_WINDOW_LF = 0,\n\tVEH_EXT_WINDOW_RF = 1,\n\tVEH_EXT_WINDOW_LR = 2,\n\tVEH_EXT_WINDOW_RR = 3,\n\tVEH_EXT_WINDOW_LM = 4,\n\tVEH_EXT_WINDOW_RM = 5,\n\tVEH_EXT_WINDSCREEN = 6,\n\tVEH_EXT_WINDSCREEN_R = 7,\n}\n```",
            "examples": [],
            "hash": "0x46E571A0E20D01F1",
            "ns": "VEHICLE",
            "jhash": "0xAC4EF23D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0205F5365292D2EB": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x0205F5365292D2EB",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x065D03A9D6B2C6B5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x065D03A9D6B2C6B5",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x93A3996368C94158": {
            "name": "MODIFY_VEHICLE_TOP_SPEED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x93A3996368C94158",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_ENGINE_POWER_MULTIPLIER"],
            "jhash": "0xE943B09C",
            "manualHash": true
        },
        "0x063AE2B2CC273588": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nA vehicle recording playback flag only used in jewelry_heist\n```",
            "examples": [],
            "hash": "0x063AE2B2CC273588",
            "ns": "VEHICLE",
            "jhash": "0x2EF8435C",
            "manualHash": true
        },
        "0x107A473D7A6647A9": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x107A473D7A6647A9",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x0419B167EE128F33": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x0419B167EE128F33",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x0581730AB9380412": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0581730AB9380412",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x2C1D8B3B19E517CC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x2C1D8B3B19E517CC",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1F34B0626C594380": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1F34B0626C594380",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x1312DDD8385AEE4E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1312DDD8385AEE4E",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x2C4A1590ABF43E8B": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_VEHICLE_W* (next character is either H or I)\n```",
            "examples": [],
            "hash": "0x2C4A1590ABF43E8B",
            "ns": "VEHICLE",
            "jhash": "0x2EC19A8B",
            "manualHash": true
        },
        "0x182F266C2D9E2BEB": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x182F266C2D9E2BEB",
            "ns": "VEHICLE",
            "jhash": "0x7D0DE7EA",
            "manualHash": true
        },
        "0x26E13D440E7F6064": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x26E13D440E7F6064",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x26D99D5A82FD18E8": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x26D99D5A82FD18E8",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x2310A8F9421EBF43": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x2310A8F9421EBF43",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x3441CAD2F2231923": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3441CAD2F2231923",
            "ns": "VEHICLE",
            "jhash": "0xC306A9A3",
            "manualHash": true
        },
        "0x35BB21DE06784373": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x35BB21DE06784373",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x2311DD7159F00582": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2311DD7159F00582",
            "ns": "VEHICLE",
            "jhash": "0x758C5E2E",
            "manualHash": true
        },
        "0x36DE109527A2C0C4": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nDoes nothing. It's a nullsub.\n\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x36DE109527A2C0C4",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x3B458DDB57038F08": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nUsually used alongside other vehicle door natives.\n```",
            "examples": [],
            "hash": "0x3B458DDB57038F08",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x35E0654F4BAD7971": {
            "params": [{ "name": "p0", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x35E0654F4BAD7971",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x2FA2494B47FDD009": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2FA2494B47FDD009",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x407DC5E97DB1A4D3": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x407DC5E97DB1A4D3",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x430A7631A84C9BE7": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x430A7631A84C9BE7",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x4419966C9936071A": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nCLEAR_VEHICLE_*\n```",
            "examples": [],
            "hash": "0x4419966C9936071A",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x41290B40FA63E6DA": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x41290B40FA63E6DA",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x4D9D109F63FEE1D4": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4D9D109F63FEE1D4",
            "ns": "VEHICLE",
            "jhash": "0x900C878C",
            "manualHash": true
        },
        "0x428AD3E26C8D9EB0": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSET_*\n```",
            "examples": [],
            "hash": "0x428AD3E26C8D9EB0",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x56EB5E94318D3FB6": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x56EB5E94318D3FB6",
            "ns": "VEHICLE",
            "jhash": "0x30F43FE3",
            "manualHash": true
        },
        "0x4AD280EB48B2D8E6": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "togle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x4AD280EB48B2D8E6",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x5BA68A0840D546AC": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x5BA68A0840D546AC",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x51DB102F4A3BA5E0": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x51DB102F4A3BA5E0",
            "ns": "VEHICLE",
            "jhash": "0x0B0523B0",
            "manualHash": true
        },
        "0x51F30DB60626A20E": {
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "the target vehicle"
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "vehicle location"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "vehicle location"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "vehicle location"
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "some kind of vehicle rotation value"
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "some kind of vehicle rotation value"
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "some kind of vehicle rotation value"
                },
                { "name": "p7", "type": "int", "description": "usually 2" },
                { "name": "p8", "type": "Any", "description": "usually 1" }
            ],
            "results": "BOOL",
            "description": "Usex in decompiled scripts in combination with [`_GET_VEHICLE_SUSPENSION_BOUNDS`](#\\_0xDF7E3EEB29642C38).\n\nNativeDB Introduced: v1180\n\n```\n// Example from fm_bj_race_controller.c\nif (!VEHICLE::_0x51F30DB60626A20E(uParam0->f_26, uParam0->f_12.f_3, uParam0->f_12, 2, 1) && !func_282(uParam0->f_6))\n{\n    VEHICLE::_GET_VEHICLE_SUSPENSION_BOUNDS(*uParam0, &vVar15, &uVar16);\n    VEHICLE::_GET_VEHICLE_SUSPENSION_BOUNDS(uParam0->f_26, &vVar17, &uVar18);\n    fVar19 = SYSTEM::VDIST2(0f, 0f, vVar15.z, 0f, 0f, vVar17.z);\n    uParam0->f_12.f_3.f_2 = (uParam0->f_12.f_3.f_2 + fVar19);\n    if (!VEHICLE::_0x51F30DB60626A20E(uParam0->f_26, uParam0->f_12.f_3, uParam0->f_12, 2, 1))\n    {\n        uParam0->f_12.f_3 = { uParam0->f_6 };\n        uParam0->f_12 = { uParam0->f_9 };\n    }\n}\n```",
            "examples": [],
            "hash": "0x51F30DB60626A20E",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": "A BOOL value, purpose unknown."
        },
        "0x5845066D8A1EA7F7": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5845066D8A1EA7F7",
            "ns": "VEHICLE",
            "jhash": "0x943A58EB",
            "manualHash": true
        },
        "0x5E569EC46EC21CAE": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5E569EC46EC21CAE",
            "ns": "VEHICLE",
            "jhash": "0xBC649C49",
            "manualHash": true
        },
        "0x5BBCF35BF6E456F7": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x5BBCF35BF6E456F7",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x59C3757B3B7408E8": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0x59C3757B3B7408E8",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x5EE5632F47AE9695": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "health", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets some health value. Looks like it's used for helis.\n```",
            "examples": [],
            "hash": "0x5EE5632F47AE9695",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x6501129C9E0FFA05": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6501129C9E0FFA05",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x65B080555EA48149": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x65B080555EA48149",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x6A973569BA094650": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x6A973569BA094650",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x66E3AAFACE2D1EB8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x66E3AAFACE2D1EB8",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x72BECCF4B829522E": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x72BECCF4B829522E",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x6EAAEFC76ACC311F": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x6EAAEFC76ACC311F",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x73561D4425A021A2": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x73561D4425A021A2",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x78CEEE41F49F421F": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x78CEEE41F49F421F",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x725012A415DBA050": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any*" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "Last named native above this one is `TRACK_VEHICLE_VISIBILITY` and first named native below is `UNCUFF_PED`.\nUnknown what it does, couldn't find good examples in the decompiled scripts.",
            "examples": [],
            "hash": "0x725012A415DBA050",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x76D26A22750E849E": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nSET_VEHICLE_*\n```",
            "examples": [],
            "hash": "0x76D26A22750E849E",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x80E3357FDEF45C21": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x80E3357FDEF45C21",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x7BBE7FF626A591FE": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x7BBE7FF626A591FE",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x6EBFB22D646FFC18": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6EBFB22D646FFC18",
            "ns": "VEHICLE",
            "jhash": "0x847F1304",
            "manualHash": true
        },
        "0x82E0AC411E41A5B4": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nDoes nothing. It's a nullsub.\n\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x82E0AC411E41A5B4",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x8533CAFDE1F0F336": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x8533CAFDE1F0F336",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x7D6F9A3EF26136A0": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_VEHICLE_AL*\n```",
            "examples": [],
            "hash": "0x7D6F9A3EF26136A0",
            "ns": "VEHICLE",
            "jhash": "0xBB54ECCA",
            "manualHash": true
        },
        "0x737E398138550FFF": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x737E398138550FFF",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x8664170EF165C4A6": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0x8664170EF165C4A6",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x796A877E459B99EA": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x796A877E459B99EA",
            "ns": "VEHICLE",
            "jhash": "0x5C9F477C",
            "manualHash": true
        },
        "0x8235F1BEAD557629": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x8235F1BEAD557629",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x88BC673CA9E0AE99": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x88BC673CA9E0AE99",
            "ns": "VEHICLE",
            "jhash": "0xF0E5C41D",
            "manualHash": true
        },
        "0x887FA38787DE8C72": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x887FA38787DE8C72",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x870B8B7A766615C8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x870B8B7A766615C8",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x8821196D91FA2DE5": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x8821196D91FA2DE5",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x97841634EF7DF1D6": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x97841634EF7DF1D6",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x8F0D5BA1C2CC91D7": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x8F0D5BA1C2CC91D7",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x9849DE24FCF23CCC": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x9849DE24FCF23CCC",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x8AA9180DE2FEDD45": {
            "name": "_ENABLE_AIRCRAFT_OBSTACLE_AVOIDANCE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle to toggle obstacle avoidance for."
                },
                {
                    "name": "avoidObstacles",
                    "type": "BOOL",
                    "description": "`true` / `false` to enable/disable heightmap obstacle avoidance respectively!"
                }
            ],
            "results": "void",
            "description": "Will disable a plane or a helicopter's need to swerve around object in its heightmap when using TASK_PLANE_MISSION or other AI / Pilot behavior.  Will ensure plane flys directly to it's destination or die trying! This native does NOT need to be called every frame, but instead, just called once on the vehicle (NOT THE PED) you're trying to disable avoidance for!",
            "examples": [],
            "hash": "0x8AA9180DE2FEDD45",
            "ns": "VEHICLE",
            "aliases": ["_0x8AA9180DE2FEDD45"],
            "jhash": "0xAE040377",
            "manualHash": true
        },
        "0x9D30687C57BAA0BB": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9D30687C57BAA0BB",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x9640E30A7F395E4B": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x9640E30A7F395E4B",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x99A05839C46CE316": {
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nDoes nothing. It's a nullsub.\n\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x99A05839C46CE316",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x9BDDC73CC6A115D4": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9BDDC73CC6A115D4",
            "ns": "VEHICLE",
            "jhash": "0x50CDB295",
            "manualHash": true
        },
        "0x99CAD8E7AFDB60FA": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x99CAD8E7AFDB60FA",
            "ns": "VEHICLE",
            "jhash": "0x1128A45B",
            "manualHash": true
        },
        "0x9F3F689B814F2599": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9F3F689B814F2599",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x9BECD4B9FEF3F8A6": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9BECD4B9FEF3F8A6",
            "ns": "VEHICLE",
            "jhash": "0xACAB8FF3",
            "manualHash": true
        },
        "0xA4822F1CF23F4810": {
            "params": [
                { "name": "outVec", "type": "Vector3*" },
                { "name": "p1", "type": "Vector3*" },
                { "name": "outVec1", "type": "Vector3*" },
                { "name": "p3", "type": "Any" },
                { "name": "p4", "type": "Any" },
                { "name": "p5", "type": "Any" },
                { "name": "p6", "type": "Any" },
                { "name": "p7", "type": "Any" },
                { "name": "p8", "type": "Any" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA4822F1CF23F4810",
            "ns": "VEHICLE",
            "jhash": "0x34E02FCD",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xA247F9EF01D8082E": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA247F9EF01D8082E",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xA7DCDF4DED40A8F4": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA7DCDF4DED40A8F4",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xA01BC64DD4BFBBAC": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "seatIndex", "type": "int" }
            ],
            "results": "Hash",
            "description": "Gets hash related to task happening with seat index\nNative name: GET_I\\*",
            "examples": [],
            "hash": "0xA01BC64DD4BFBBAC",
            "ns": "VEHICLE",
            "jhash": "0x5ED1EECC",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xEF9D388F8D377F44": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOnly used in R* Script fm_content_cargo\n```\n\n```\nNativeDB Introduced: v2699\n```",
            "examples": [],
            "hash": "0xEF9D388F8D377F44",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xA4A9A4C40E615885": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xA4A9A4C40E615885",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xAB04325045427AAE": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAB04325045427AAE",
            "ns": "VEHICLE",
            "jhash": "0x1984F88D",
            "manualHash": true
        },
        "0xAA653AE61924B0A0": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xAA653AE61924B0A0",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xB68CFAF83A02768D": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xB68CFAF83A02768D",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xAF60E6A2936F982A": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAF60E6A2936F982A",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xAB31EF4DE6800CE9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAB31EF4DE6800CE9",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xAE3FEE8709B39DCB": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAE3FEE8709B39DCB",
            "ns": "VEHICLE",
            "jhash": "0xE39DAF36",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xBB2333BB87DDD87F": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBB2333BB87DDD87F",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xC361AA040D6637A8": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Vehicle must be a plane.\nNative name is between SET_VEHICLE_BRAKE_LIGHTS and SET_VEHICLE_BULLDOZER_ARM_POSITION alphabetically.",
            "examples": [],
            "hash": "0xC361AA040D6637A8",
            "ns": "VEHICLE",
            "jhash": "0x819CD954",
            "manualHash": true
        },
        "0xB2E0C0D6922D31F2": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_C*\n```",
            "examples": [],
            "hash": "0xB2E0C0D6922D31F2",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xC67DB108A9ADE3BE": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2189\n```",
            "examples": [],
            "hash": "0xC67DB108A9ADE3BE",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xB9562064627FF9DB": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB9562064627FF9DB",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xBE5C1255A1830FF5": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBE5C1255A1830FF5",
            "ns": "VEHICLE",
            "jhash": "0xA6D8D7A5",
            "manualHash": true
        },
        "0xCF9159024555488C": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCF9159024555488C",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xC0ED6438E6D39BA8": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC0ED6438E6D39BA8",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xD3301660A57C9272": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD3301660A57C9272",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xC50CE861B55EAB8B": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_VEHICLE_LI*\n```",
            "examples": [],
            "hash": "0xC50CE861B55EAB8B",
            "ns": "VEHICLE",
            "jhash": "0x40C323AE",
            "manualHash": true
        },
        "0xC4B3347BD68BD609": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC4B3347BD68BD609",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xD565F438137F0E10": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD565F438137F0E10",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xD3E51C0AB8C26EEE": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xD3E51C0AB8C26EEE",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDCE97BDF8A0EABC8": {
            "params": [],
            "results": "void",
            "description": "```\nNativeDB Added Parameter 1: Vehicle vehicle\nNativeDB Added Parameter 2: Any p1\n```",
            "examples": [],
            "hash": "0xDCE97BDF8A0EABC8",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xCFD778E7904C255E": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nwhat does this do?  \n```",
            "examples": [],
            "hash": "0xCFD778E7904C255E",
            "ns": "VEHICLE",
            "jhash": "0x3FBE904F",
            "manualHash": true
        },
        "0xD4196117AF7BB974": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xD4196117AF7BB974",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDBC631F109350B8C": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nRelated to locking the vehicle or something similar.  \nIn the decompiled scripts, its always called after  \nVEHICLE::_SET_EXCLUSIVE_DRIVER(a_0, 0, 0);  \nVEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(a_0, 1);  \nVEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a_0, PLAYER::PLAYER_ID(), 0);  \n```",
            "examples": [],
            "hash": "0xDBC631F109350B8C",
            "ns": "VEHICLE",
            "jhash": "0x486C1280",
            "manualHash": true
        },
        "0xE2F53F172B45EDE1": {
            "params": [],
            "results": "void",
            "description": "```\nRESET_*\n\nResets the effect of 0x428AD3E26C8D9EB0\n```",
            "examples": [],
            "hash": "0xE2F53F172B45EDE1",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xE05DD0E9707003A3": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE05DD0E9707003A3",
            "ns": "VEHICLE",
            "jhash": "0x123E5B90",
            "manualHash": true
        },
        "0xE5810AC70602F2F5": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE5810AC70602F2F5",
            "ns": "VEHICLE",
            "jhash": "0xB6BE07E0",
            "manualHash": true
        },
        "0xE851E480B814D4BA": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE851E480B814D4BA",
            "ns": "VEHICLE",
            "jhash": "0x2F98B4B7",
            "manualHash": true
        },
        "0xEDBC8405B3895CC9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEDBC8405B3895CC9",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xE8718FAF591FD224": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nGET_H*\n\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0xE8718FAF591FD224",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xF051D9BFB6BA39C0": {
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF051D9BFB6BA39C0",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xEEBFC7A7EFDC35B4": {
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "int",
            "description": "```\nSome kind of flags.  \n```",
            "examples": [],
            "hash": "0xEEBFC7A7EFDC35B4",
            "ns": "VEHICLE",
            "jhash": "0x749DEEA2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xED5EDE9E676643C9": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED5EDE9E676643C9",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xF8B49F5BA7F850E7": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xF8B49F5BA7F850E7",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xF3B0E0AED097A3F5": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xF3B0E0AED097A3F5",
            "ns": "VEHICLE",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xF25E02CB9C5818F8": {
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF25E02CB9C5818F8",
            "ns": "VEHICLE",
            "jhash": "0xF0E59BC1",
            "manualHash": true
        },
        "0xFAF2A78061FD9EF4": {
            "params": [
                { "name": "p0", "type": "Any" },
                { "name": "p1", "type": "float" },
                { "name": "p2", "type": "float" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFAF2A78061FD9EF4",
            "ns": "VEHICLE",
            "jhash": "0xCD83C393",
            "manualHash": true
        },
        "0xF78F94D60248C737": {
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF78F94D60248C737",
            "ns": "VEHICLE",
            "jhash": "0x3B51B348",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x6D645D59FB5F5AD3": {
            "name": "POP_OUT_VEHICLE_WINDSCREEN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "Detaches the vehicle's windscreen.",
            "examples": [],
            "hash": "0x6D645D59FB5F5AD3",
            "ns": "VEHICLE",
            "aliases": ["_DETACH_VEHICLE_WINDSCREEN"],
            "jhash": "0xCC95C96B",
            "manualHash": true
        },
        "0x87E7F24270732CB1": {
            "name": "OPEN_BOMB_BAY_DOORS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x87E7F24270732CB1",
            "ns": "VEHICLE",
            "aliases": ["_OPEN_VEHICLE_BOMB_BAY"],
            "jhash": "0x6574041D",
            "manualHash": true
        },
        "0xEC0C1D4922AF9754": {
            "name": "_NETWORK_USE_HIGH_PRECISION_VEHICLE_BLENDING",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nImplemented only for Trains.\n```\n\n```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xEC0C1D4922AF9754",
            "ns": "VEHICLE",
            "aliases": ["0xEC0C1D4922AF9754"],
            "manualHash": true
        },
        "0x758F49C24925568A": {
            "name": "PRELOAD_VEHICLE_MOD",
            "params": [
                { "name": "p0", "type": "Any" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                },
                { "name": "p2", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x758F49C24925568A",
            "ns": "VEHICLE",
            "jhash": "0x6EA5F4A8",
            "manualHash": true
        },
        "0xF660602546D27BA8": {
            "name": "_RAISE_RETRACTABLE_WHEELS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF660602546D27BA8",
            "ns": "VEHICLE",
            "aliases": ["_RAISE_LOWERABLE_WHEELS"],
            "manualHash": true
        },
        "0x632A689BF42301B1": {
            "name": "PAUSE_PLAYBACK_RECORDED_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x632A689BF42301B1",
            "ns": "VEHICLE",
            "jhash": "0xCCF54912",
            "manualHash": true
        },
        "0x8F5FB35D7E88FC70": {
            "name": "RAISE_CONVERTIBLE_ROOF",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "instantlyRaise", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8F5FB35D7E88FC70",
            "ns": "VEHICLE",
            "jhash": "0xA4E4CBA3",
            "manualHash": true
        },
        "0x00689CDE5F7C6787": {
            "name": "REMOVE_VEHICLE_HIGH_DETAIL_MODEL",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x00689CDE5F7C6787",
            "ns": "VEHICLE",
            "jhash": "0x382BE070",
            "manualHash": true
        },
        "0x445D79F995508307": {
            "name": "RELEASE_PRELOAD_MODS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x445D79F995508307",
            "ns": "VEHICLE",
            "jhash": "0xD442521F",
            "manualHash": true
        },
        "0x1033371FC8E842A7": {
            "name": "REMOVE_ROAD_NODE_SPEED_ZONE",
            "params": [{ "name": "speedzone", "type": "int" }],
            "results": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1033371FC8E842A7",
            "ns": "VEHICLE",
            "aliases": ["0x1033371FC8E842A7", "_REMOVE_SPEED_ZONE"],
            "jhash": "0x0C0332A6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xACE699C71AB9DEB5": {
            "name": "REMOVE_VEHICLE_ASSET",
            "params": [{ "name": "vehicleAsset", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xACE699C71AB9DEB5",
            "ns": "VEHICLE",
            "jhash": "0x9620E9C6",
            "manualHash": true
        },
        "0xC53EB42A499A7E90": {
            "name": "REMOVE_VEHICLE_UPSIDEDOWN_CHECK",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC53EB42A499A7E90",
            "ns": "VEHICLE",
            "jhash": "0xF390BA1B",
            "manualHash": true
        },
        "0xE30524E1871F481D": {
            "name": "REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA",
            "params": [{ "name": "p0", "type": "Any" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE30524E1871F481D",
            "ns": "VEHICLE",
            "aliases": ["0xE30524E1871F481D"],
            "jhash": "0xEF05F807",
            "manualHash": true
        },
        "0x9768CF648F54C804": {
            "name": "REMOVE_PICK_UP_ROPE_FOR_CARGOBOB",
            "params": [{ "name": "cargobob", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nRetracts the hook on the cargobob.  \nNote: after you retract it the natives for dropping the hook no longer work  \n```",
            "examples": [],
            "hash": "0x9768CF648F54C804",
            "ns": "VEHICLE",
            "aliases": ["_RETRACT_CARGOBOB_HOOK"],
            "jhash": "0xA8211EE9",
            "manualHash": true
        },
        "0x46A1E1A299EC4BBA": {
            "name": "REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "unk", "type": "Any" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x46A1E1A299EC4BBA",
            "ns": "VEHICLE",
            "jhash": "0x42CC15E0",
            "manualHash": true
        },
        "0x92D619E420858204": {
            "name": "REMOVE_VEHICLE_MOD",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x92D619E420858204",
            "ns": "VEHICLE",
            "jhash": "0x9CC80A43",
            "manualHash": true
        },
        "0xAF514CABE74CBF15": {
            "name": "REQUEST_VEHICLE_RECORDING",
            "params": [
                { "name": "recording", "type": "int" },
                { "name": "script", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nRequest the vehicle recording defined by the lowercase format string \"%s%03d.yvr\". For example, REQUEST_VEHICLE_RECORDING(1, \"FBIs1UBER\") corresponds to fbis1uber001.yvr.\nFor all vehicle recording/playback natives, \"script\" is a common prefix that usually corresponds to the script/mission the recording is used in, \"recording\" is its int suffix, and \"id\" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.\nNote that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.\n```",
            "examples": [],
            "hash": "0xAF514CABE74CBF15",
            "ns": "VEHICLE",
            "jhash": "0x91AFEFD9",
            "manualHash": true
        },
        "0x8386BFB614D06749": {
            "name": "REMOVE_VEHICLE_STUCK_CHECK",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8386BFB614D06749",
            "ns": "VEHICLE",
            "jhash": "0x81594917",
            "manualHash": true
        },
        "0xF1160ACCF98A3FC8": {
            "name": "REMOVE_VEHICLE_RECORDING",
            "params": [
                { "name": "recording", "type": "int" },
                { "name": "script", "type": "char*" }
            ],
            "results": "void",
            "description": "See [REQUEST_VEHICLE_RECORDING](#\\_0xAF514CABE74CBF15)",
            "examples": [],
            "hash": "0xF1160ACCF98A3FC8",
            "ns": "VEHICLE",
            "jhash": "0xD3C05B00",
            "manualHash": true
        },
        "0x81A15811460FAB3A": {
            "name": "REQUEST_VEHICLE_ASSET",
            "params": [
                { "name": "vehicleHash", "type": "Hash" },
                { "name": "vehicleAsset", "type": "int" }
            ],
            "results": "void",
            "description": "```\nREQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);  \nvehicle found that have asset's:  \ncargobob3  \nsubmersible  \nblazer  \n```",
            "examples": [],
            "hash": "0x81A15811460FAB3A",
            "ns": "VEHICLE",
            "jhash": "0x902B4F06",
            "manualHash": true
        },
        "0xD7591B0065AFAA7A": {
            "name": "RESET_VEHICLE_STUCK_TIMER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "nullAttributes", "type": "int" }
            ],
            "results": "void",
            "description": "```\nThe inner function has a switch on the second parameter. It's the stuck timer index.  \nHere's some pseudo code I wrote for the inner function:  \nvoid __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)  \n{  \n\tswitch (timerIndex)  \n\t{  \n\tcase 0:  \nunknownClassInVehicle->FirstStuckTimer = (WORD)0u;  \n\tcase 1:  \nunknownClassInVehicle->SecondStuckTimer = (WORD)0u;  \n\tcase 2:  \nunknownClassInVehicle->ThirdStuckTimer = (WORD)0u;  \n\tcase 3:  \nunknownClassInVehicle->FourthStuckTimer = (WORD)0u;  \n\tcase 4:  \nunknownClassInVehicle->FirstStuckTimer = (WORD)0u;  \nunknownClassInVehicle->SecondStuckTimer = (WORD)0u;  \nunknownClassInVehicle->ThirdStuckTimer = (WORD)0u;  \nunknownClassInVehicle->FourthStuckTimer = (WORD)0u;  \nbreak;  \n\t};  \n}  \n```",
            "examples": [],
            "hash": "0xD7591B0065AFAA7A",
            "ns": "VEHICLE",
            "jhash": "0xEF2A6016",
            "manualHash": true
        },
        "0xF87D9F2301F7D206": {
            "name": "_REMOVE_VEHICLE_SHADOW_EFFECT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "Remove the weird shadow applied by [\\_SET_VEHICLE_SHADOW_EFFECT](#\\_0x2A70BAE8883E4C81)",
            "examples": [],
            "hash": "0xF87D9F2301F7D206",
            "ns": "VEHICLE",
            "aliases": ["0xF87D9F2301F7D206"],
            "jhash": "0x450AD03A",
            "manualHash": true
        },
        "0xA711568EEDB43069": {
            "name": "REMOVE_VEHICLE_WINDOW",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "windowIndex", "type": "int" }
            ],
            "results": "void",
            "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1).",
            "examples": [],
            "hash": "0xA711568EEDB43069",
            "ns": "VEHICLE",
            "jhash": "0xBB8104A3",
            "manualHash": true
        },
        "0x7AD9E6CE657D69E3": {
            "name": "ROLL_DOWN_WINDOW",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "windowIndex", "type": "int" }
            ],
            "results": "void",
            "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1).",
            "examples": [],
            "hash": "0x7AD9E6CE657D69E3",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xF840134C",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDBA3C090E3D74690": {
            "name": "_REQUEST_VEHICLE_DASHBOARD_SCALEFORM_MOVIE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nREQUEST_VEHICLE_*  \n```",
            "examples": [],
            "hash": "0xDBA3C090E3D74690",
            "ns": "VEHICLE",
            "aliases": ["0xDBA3C090E3D74690"],
            "manualHash": true
        },
        "0x602E548F46E24D59": {
            "name": "ROLL_UP_WINDOW",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "windowIndex", "type": "int" }
            ],
            "results": "void",
            "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1).",
            "examples": [],
            "hash": "0x602E548F46E24D59",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x83B7E06A",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x21D2E5662C1F6FED": {
            "name": "RESET_VEHICLE_WHEELS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x21D2E5662C1F6FED",
            "ns": "VEHICLE",
            "jhash": "0xD5FFE779",
            "manualHash": true
        },
        "0x90B6DA738A9A25DA": {
            "name": "SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME",
            "params": [
                {
                    "name": "range",
                    "type": "float",
                    "description": "Most likely a value between 0.0 and 1.0."
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x90B6DA738A9A25DA",
            "ns": "VEHICLE",
            "aliases": [
                "0x90B6DA738A9A25DA",
                "_SET_SOME_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME"
            ],
            "jhash": "0xDAE2A2BE",
            "manualHash": true
        },
        "0xA6E9FDCB2C76785E": {
            "name": "REQUEST_VEHICLE_HIGH_DETAIL_MODEL",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA6E9FDCB2C76785E",
            "ns": "VEHICLE",
            "jhash": "0x9DA21956",
            "manualHash": true
        },
        "0x608207E7A8FB787C": {
            "name": "SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE",
            "params": [{ "name": "active", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x608207E7A8FB787C",
            "ns": "VEHICLE",
            "jhash": "0x87F767F2",
            "manualHash": true
        },
        "0x0A6A279F3AA4FD70": {
            "name": "SET_BOAT_DISABLE_AVOIDANCE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0A6A279F3AA4FD70",
            "ns": "VEHICLE",
            "aliases": ["0x0A6A279F3AA4FD70"],
            "jhash": "0x4C0E4031",
            "manualHash": true
        },
        "0x85796B0549DDE156": {
            "name": "ROLL_DOWN_WINDOWS",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nRoll down all the windows of the vehicle passed through the first parameter.  \n```",
            "examples": [],
            "hash": "0x85796B0549DDE156",
            "ns": "VEHICLE",
            "jhash": "0x51A16DC6",
            "manualHash": true
        },
        "0xC12321827687FE4D": {
            "name": "SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA",
            "params": [
                { "name": "x1", "type": "float" },
                { "name": "y1", "type": "float" },
                { "name": "z1", "type": "float" },
                { "name": "x2", "type": "float" },
                { "name": "y2", "type": "float" },
                { "name": "z2", "type": "float" },
                { "name": "p6", "type": "BOOL" },
                { "name": "p7", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC12321827687FE4D",
            "ns": "VEHICLE",
            "jhash": "0xB4E0E69A",
            "manualHash": true
        },
        "0x8F719973E1445BA2": {
            "name": "SET_BOAT_SINKS_WHEN_WRECKED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Vehicle" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8F719973E1445BA2",
            "ns": "VEHICLE",
            "aliases": [
                "0x8F719973E1445BA2",
                "_SET_BOAT_EXPLODES_ON_WRECKED_ACTION"
            ],
            "jhash": "0x35614622",
            "manualHash": true
        },
        "0xE842A9398079BD82": {
            "name": "_SET_BOAT_MOVEMENT_RESISTANCE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE842A9398079BD82",
            "ns": "VEHICLE",
            "aliases": [
                "0xE842A9398079BD82",
                "_SET_BOAT_ANCHOR_BUOYANCY_COEFFICIENT"
            ],
            "jhash": "0x66FA450C",
            "manualHash": true
        },
        "0xF488C566413B4232": {
            "name": "_SET_BOAT_BOOM_POSITION_RATIO",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The TR3 vehicle."
                },
                {
                    "name": "ratio",
                    "type": "float",
                    "description": "A value between 0.0 (left) and 1.0 (back)"
                }
            ],
            "results": "void",
            "description": "Sets the boat boom position for the `TR3` trailer.\n\nRatio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.\n\nTo get the current boom position ratio, use [GET_BOAT_BOOM_POSITION_RATIO](#\\_0x6636C535F6CC2725).",
            "examples": [],
            "hash": "0xF488C566413B4232",
            "ns": "VEHICLE",
            "aliases": ["0xF488C566413B4232"],
            "jhash": "0xA25CCB8C",
            "manualHash": true
        },
        "0x34AD89078831A4BC": {
            "name": "SET_ALL_VEHICLE_GENERATORS_ACTIVE",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x34AD89078831A4BC",
            "ns": "VEHICLE",
            "jhash": "0xAB1FDD76",
            "manualHash": true
        },
        "0xBD32E46AA95C1DD2": {
            "name": "_SET_BOAT_IS_SINKING",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBD32E46AA95C1DD2",
            "ns": "VEHICLE",
            "aliases": ["0xBD32E46AA95C1DD2", "_SET_BOAT_SINKING"],
            "manualHash": true
        },
        "0x9CFA4896C3A53CBB": {
            "name": "SET_BIKE_ON_STAND",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" }
            ],
            "results": "void",
            "description": "```\nOnly works on bikes, both X and Y work in the -1 - 1 range.\nX forces the bike to turn left or right (-1, 1)\nY forces the bike to lean to the left or to the right (-1, 1)\nExample with X -1/Y 1\nhttp://i.imgur.com/TgIuAPJ.jpg\n```",
            "examples": [],
            "hash": "0x9CFA4896C3A53CBB",
            "ns": "VEHICLE",
            "aliases": ["_SET_BIKE_LEAN_ANGLE"],
            "jhash": "0x15D40761",
            "manualHash": true
        },
        "0xE3EBAAE484798530": {
            "name": "_SET_BOAT_FROZEN_WHEN_ANCHORED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE3EBAAE484798530",
            "ns": "VEHICLE",
            "aliases": ["0xE3EBAAE484798530"],
            "jhash": "0x0ED84792",
            "manualHash": true
        },
        "0x75DBEC174AEEAD10": {
            "name": "SET_BOAT_ANCHOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x75DBEC174AEEAD10",
            "ns": "VEHICLE",
            "jhash": "0xA3906284",
            "manualHash": true
        },
        "0xFC40CBF7B90CA77C": {
            "name": "SET_CAR_BOOT_OPEN",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFC40CBF7B90CA77C",
            "ns": "VEHICLE",
            "aliases": ["0xFC40CBF7B90CA77C"],
            "manualHash": true
        },
        "0x84FD40F56075E816": {
            "name": "_SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER",
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "```\nSomething to do with \"high speed bump severity\"?  \nif (!sub_87a46(\"SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER\")) {  \n    VEHICLE::_84FD40F56075E816(0.0);  \n    sub_8795b(\"SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER\", 1);  \n}  \n```",
            "examples": [],
            "hash": "0x84FD40F56075E816",
            "ns": "VEHICLE",
            "aliases": ["0x84FD40F56075E816"],
            "manualHash": true
        },
        "0x94A68DA412C4007D": {
            "name": "_SET_CARGOBOB_HOOK_CAN_ATTACH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nStops the cargobob from being able to attach any vehicle\n```\n\n```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x94A68DA412C4007D",
            "ns": "VEHICLE",
            "aliases": ["0x94A68DA412C4007D"],
            "manualHash": true
        },
        "0x52BBA29D5EC69356": {
            "name": "SET_CAN_RESPRAY_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nHardcoded to not work in multiplayer.  \n```",
            "examples": [],
            "hash": "0x52BBA29D5EC69356",
            "ns": "VEHICLE",
            "jhash": "0x37677590",
            "manualHash": true
        },
        "0x1201E8A3290A3B98": {
            "name": "_SET_CAMBERED_WHEELS_DISABLED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1201E8A3290A3B98",
            "ns": "VEHICLE",
            "aliases": ["0x1201E8A3290A3B98"],
            "manualHash": true
        },
        "0x9A665550F8DA349B": {
            "name": "SET_CARGOBOB_PICKUP_MAGNET_ACTIVE",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "isActive", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nWon't attract or magnetize to any helicopters or planes of course, but that's common sense.  \n```",
            "examples": [],
            "hash": "0x9A665550F8DA349B",
            "ns": "VEHICLE",
            "aliases": [
                "_CARGOBOB_MAGNET_GRAB_VEHICLE",
                "_SET_CARGOBOB_PICKUP_MAGNET_ACTIVE"
            ],
            "jhash": "0xF57066DA",
            "manualHash": true
        },
        "0x571FEB383F629926": {
            "name": "SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Stops cargobob from being able to detach the attached vehicle.",
            "examples": [],
            "hash": "0x571FEB383F629926",
            "ns": "VEHICLE",
            "aliases": ["0x571FEB383F629926", "_SET_CARGOBOB_HOOK_CAN_DETACH"],
            "jhash": "0x49949FDA",
            "manualHash": true
        },
        "0x685D5561680D088B": {
            "name": "SET_CARGOBOB_PICKUP_MAGNET_FALLOFF",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x685D5561680D088B",
            "ns": "VEHICLE",
            "aliases": ["0x685D5561680D088B"],
            "jhash": "0x91C80401",
            "manualHash": true
        },
        "0x66979ACF5102FD2F": {
            "name": "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x66979ACF5102FD2F",
            "ns": "VEHICLE",
            "aliases": ["0x66979ACF5102FD2F"],
            "jhash": "0x1CF139C6",
            "manualHash": true
        },
        "0xA17BAD153B51547E": {
            "name": "SET_CARGOBOB_PICKUP_MAGNET_EFFECT_RADIUS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA17BAD153B51547E",
            "ns": "VEHICLE",
            "aliases": ["0xA17BAD153B51547E"],
            "jhash": "0xE5DCD62F",
            "manualHash": true
        },
        "0xED8286F71A819BAA": {
            "name": "SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xED8286F71A819BAA",
            "ns": "VEHICLE",
            "aliases": ["0xED8286F71A819BAA"],
            "jhash": "0x8191BC1A",
            "manualHash": true
        },
        "0xE301BD63E9E13CF0": {
            "name": "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "vehicle", "type": "Vehicle" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE301BD63E9E13CF0",
            "ns": "VEHICLE",
            "aliases": ["0xE301BD63E9E13CF0"],
            "jhash": "0x47D98A2E",
            "manualHash": true
        },
        "0xCF1182F682F65307": {
            "name": "SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                {
                    "name": "p1",
                    "type": "float",
                    "annotations": { "cs_type": "Player" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCF1182F682F65307",
            "ns": "VEHICLE",
            "aliases": ["0xCF1182F682F65307"],
            "jhash": "0x7D927E1B",
            "manualHash": true
        },
        "0x6D8EAC07506291FB": {
            "name": "SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6D8EAC07506291FB",
            "ns": "VEHICLE",
            "aliases": ["0x6D8EAC07506291FB"],
            "jhash": "0x60E29B78",
            "manualHash": true
        },
        "0xBCBFCD9D1DAC19E2": {
            "name": "SET_CARGOBOB_PICKUP_MAGNET_STRENGTH",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "strength", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBCBFCD9D1DAC19E2",
            "ns": "VEHICLE",
            "aliases": [
                "0xBCBFCD9D1DAC19E2",
                "_SET_CARGOBOB_PICKUP_MAGNET_STRENGTH"
            ],
            "jhash": "0xCC3CF97D",
            "manualHash": true
        },
        "0x0D5F65A8F4EBDAB5": {
            "name": "SET_CARGOBOB_PICKUP_ROPE_TYPE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0D5F65A8F4EBDAB5",
            "ns": "VEHICLE",
            "aliases": ["0x0D5F65A8F4EBDAB5"],
            "jhash": "0xF258ADA1",
            "manualHash": true
        },
        "0xF39C4F538B5124C2": {
            "name": "SET_CONVERTIBLE_ROOF",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to which the roof state will be applied."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Boolean value where `true` adds the roof and `false` removes it, applicable only if the vehicle has a version with and without a roof."
                }
            ],
            "results": "void",
            "description": "This allows for the vehicle's roof to be put on when set to true, and removed when set to false, provided that the vehicle has a version with a roof and a version without a roof.\n\n#### Vehicles with both roofed and roofless versions (others may exist; this list is compiled from decompiled scripts).\n\n*   chino\n*   voltic\n*   buccaneer\n*   buccaneer2\n*   chino2\n*   faction\n*   faction2\n*   mamba",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- In this case we are removing the roof from the vehicle.\nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nSetConvertibleRoof(vehicle, false)"
                },
                {
                    "lang": "js",
                    "code": "// In this case we are removing the roof from the vehicle.\nconst vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetConvertibleRoof(vehicle, false);"
                },
                {
                    "lang": "cs",
                    "code": "// In this case we are removing the roof from the vehicle.\nusing static CitizenFX.Core.Native.API;\nVehicle vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetConvertibleRoof(vehicle, false);"
                }
            ],
            "hash": "0xF39C4F538B5124C2",
            "ns": "VEHICLE",
            "jhash": "0xC87B6A51",
            "manualHash": true
        },
        "0x1A78AD3D8240536F": {
            "name": "SET_CONVERTIBLE_ROOF_LATCH_STATE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1A78AD3D8240536F",
            "ns": "VEHICLE",
            "aliases": ["0x1A78AD3D8240536F"],
            "jhash": "0x0858678C",
            "manualHash": true
        },
        "0xB251E0B33E58B424": {
            "name": "_SET_DEPLOY_HELI_STUB_WINGS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "deploy", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Only used with the \"akula\" and \"annihilator2\" in the decompiled native scripts.\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xB251E0B33E58B424",
            "ns": "VEHICLE",
            "aliases": ["0xB251E0B33E58B424"],
            "manualHash": true
        },
        "0x2D55FE374D5FDB91": {
            "name": "SET_DISABLE_HOVER_MODE_FLIGHT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to which the toggle will be applied."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Boolean parameter where setting `true` disables the vehicle's wings, preventing flight. Setting it to `false` allows the vehicle to fly as usual."
                }
            ],
            "results": "void",
            "description": "Disables wings for `Deluxo` and `Oppressor MK II`. For the Deluxo, it retracts the wings immediately, preventing flight. For the Oppressor Mk II, the wings retract after landing and take-off is not possible, though it can still glide if launched into the air.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- In this case we are disabling the wings of the vehicle\nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nSetDisableHoverModeFlight(vehicle, true)"
                },
                {
                    "lang": "js",
                    "code": "// In this case we are disabling the wings of the vehicle\nconst vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetDisableHoverModeFlight(vehicle, true);"
                },
                {
                    "lang": "cs",
                    "code": "// In this case we are disabling the wings of the vehicle\nusing static CitizenFX.Core.Native.API;\nVehicle vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetDisableHoverModeFlight(vehicle, true);"
                }
            ],
            "hash": "0x2D55FE374D5FDB91",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_HOVER_TRANSFORM_ACTIVE"],
            "manualHash": true
        },
        "0x25367DE49D64CF16": {
            "name": "SET_DISABLE_PRETEND_OCCUPANTS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x25367DE49D64CF16",
            "ns": "VEHICLE",
            "aliases": ["0x25367DE49D64CF16"],
            "jhash": "0xCBD98BA1",
            "manualHash": true
        },
        "0xD4B8E3D1917BC86B": {
            "name": "SET_DISABLE_RANDOM_TRAINS_THIS_FRAME",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD4B8E3D1917BC86B",
            "ns": "VEHICLE",
            "aliases": [
                "0xD4B8E3D1917BC86B",
                "_SET_SOMETHING_MULTIPLIER_THIS_FRAME"
            ],
            "jhash": "0x09462665",
            "manualHash": true
        },
        "0xB088E9A47AE6EDD5": {
            "name": "_SET_DISABLE_SUPERDUMMY_MODE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB088E9A47AE6EDD5",
            "ns": "VEHICLE",
            "aliases": ["0xB088E9A47AE6EDD5"],
            "manualHash": true
        },
        "0xE615BB7A7752C76A": {
            "name": "_SET_DISABLE_TURRET_MOVEMENT_THIS_FRAME",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "turretIdx", "type": "int" }
            ],
            "results": "void",
            "description": "Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.\n\n```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0xE615BB7A7752C76A",
            "ns": "VEHICLE",
            "aliases": ["0xE615BB7A7752C76A", "_SET_DISABLE_TURRET_MOVEMENT"],
            "manualHash": true
        },
        "0x465BF26AB9684352": {
            "name": "SET_DISABLE_VEHICLE_PETROL_TANK_FIRES",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x465BF26AB9684352",
            "ns": "VEHICLE",
            "aliases": ["0x465BF26AB9684352"],
            "jhash": "0xC40192B5",
            "manualHash": true
        },
        "0x91A0BD635321F145": {
            "name": "SET_DISABLE_VEHICLE_ENGINE_FIRES",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x91A0BD635321F145",
            "ns": "VEHICLE",
            "aliases": ["0x91A0BD635321F145"],
            "jhash": "0x1784BA1A",
            "manualHash": true
        },
        "0xCE2B43770B655F8F": {
            "name": "_SET_DISABLE_VEHICLE_FLIGHT_NOZZLE_POSITION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "direction",
                    "type": "BOOL",
                    "annotations": { "cs_type": "float" }
                }
            ],
            "results": "void",
            "description": "```\nTrue stops vtols from switching modes. Doesn't stop the sound though.\n```\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xCE2B43770B655F8F",
            "ns": "VEHICLE",
            "aliases": ["_SET_PLANE_VTOL_ANIMATION_DISABLED"],
            "manualHash": true
        },
        "0x1087BC8EC540DAEB": {
            "name": "_SET_DISABLE_VEHICLE_WINDOW_COLLISIONS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to toggle this for."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "True disables the collision, false enables the collision"
                }
            ],
            "results": "void",
            "description": "R\\* used it to \"remove\" vehicle windows when \"nightshark\" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\n\nif GetEntityModel(vehicle) == `NIGHTSHARK` then\n    -- Mod index 5 = armored window plates\n    if GetVehicleMod(vehicle, 5) ~= -1 then\n        -- The nightshark has armored plates in front of the windows\n        -- so we disable the window collisions\n        SetDisableVehicleWindowCollisions(vehicle, true)\n    else\n        -- The nightshark has no armored plates in front of the windows\n        -- so we enable the window collisions\n        SetDisableVehicleWindowCollisions(vehicle, false)\n    end\nend"
                }
            ],
            "hash": "0x1087BC8EC540DAEB",
            "ns": "VEHICLE",
            "aliases": ["0x1087BC8EC540DAEB"],
            "manualHash": true
        },
        "0x37C8252A7C92D017": {
            "name": "SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x37C8252A7C92D017",
            "ns": "VEHICLE",
            "jhash": "0xAD3E05F2",
            "manualHash": true
        },
        "0x143921E45EC44D62": {
            "name": "_SET_DISABLE_VEHICLE_UNK",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x143921E45EC44D62",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xF796359A959DF65D": {
            "name": "SET_DISTANT_CARS_ENABLED",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nToggles to render distant vehicles. They may not be vehicles but images to look like vehicles.  \n```",
            "examples": [],
            "hash": "0xF796359A959DF65D",
            "ns": "VEHICLE",
            "aliases": ["0xF796359A959DF65D", "_DISPLAY_DISTANT_VEHICLES"],
            "jhash": "0xB5CC548B",
            "manualHash": true
        },
        "0x97CE68CB032583F0": {
            "name": "SET_FORCE_HD_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x97CE68CB032583F0",
            "ns": "VEHICLE",
            "aliases": ["0x97CE68CB032583F0"],
            "jhash": "0xE0FC6A32",
            "manualHash": true
        },
        "0x211E95CE9903940C": {
            "name": "_SET_DISABLE_VEHICLE_UNK_2",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x211E95CE9903940C",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x37EBBF3117BD6A25": {
            "name": "SET_FORKLIFT_FORK_HEIGHT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "height", "type": "float" }
            ],
            "results": "void",
            "description": "```\n0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol\n```",
            "examples": [],
            "hash": "0x37EBBF3117BD6A25",
            "ns": "VEHICLE",
            "aliases": ["0x37EBBF3117BD6A25"],
            "jhash": "0x943A6CFC",
            "manualHash": true
        },
        "0x26324F33423F3CC3": {
            "name": "SET_FAR_DRAW_VEHICLES",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x26324F33423F3CC3",
            "ns": "VEHICLE",
            "jhash": "0x9F019C49",
            "manualHash": true
        },
        "0xE6C0C80B8C867537": {
            "name": "SET_ENABLE_VEHICLE_SLIPSTREAMING",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "Enable/Disables global slipstream physics",
            "examples": [],
            "hash": "0xE6C0C80B8C867537",
            "ns": "VEHICLE",
            "aliases": ["0xE6C0C80B8C867537"],
            "jhash": "0xD2B8ACBD",
            "manualHash": true
        },
        "0xA178472EBB8AE60D": {
            "name": "SET_HELI_BLADES_FULL_SPEED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nEquivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);  \nthis native works on planes to?  \n```",
            "examples": [],
            "hash": "0xA178472EBB8AE60D",
            "ns": "VEHICLE",
            "jhash": "0x033A9408",
            "manualHash": true
        },
        "0xB28B1FE5BFADD7F5": {
            "name": "_SET_FORCED_BOAT_LOCATION_WHEN_ANCHORED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nX,Y position of boat is frozen in place when anchored and its engine disabled, only the Z value changes. Requires 0xE3EBAAE484798530 to be set to true.\nSET_FORCED_ZENITH_QUADTREE?\n```",
            "examples": [],
            "hash": "0xB28B1FE5BFADD7F5",
            "ns": "VEHICLE",
            "aliases": ["0xB28B1FE5BFADD7F5"],
            "jhash": "0xA739012A",
            "manualHash": true
        },
        "0x5AC79C98C5C17F05": {
            "name": "_SET_DRIFT_TYRES_ENABLED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x5AC79C98C5C17F05",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x2AFD795EEAC8D30D": {
            "name": "SET_GARBAGE_TRUCKS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2AFD795EEAC8D30D",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xD9ABB0FF",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3EC8BF18AA453FE9": {
            "name": "SET_HELI_TAIL_EXPLODE_THROW_DASHBOARD",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x3EC8BF18AA453FE9",
            "ns": "VEHICLE",
            "aliases": ["WAS_COUNTER_ACTIVATED", "0x3EC8BF18AA453FE9"],
            "annotations": { "cs_type": "BOOL" },
            "jhash": "0x2916D69B",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xFE205F38AAA58E5B": {
            "name": "_SET_HELI_TAIL_ROTOR_HEALTH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "health", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFE205F38AAA58E5B",
            "ns": "VEHICLE",
            "aliases": ["0xFE205F38AAA58E5B"],
            "manualHash": true
        },
        "0x0A3F820A9A9A9AC5": {
            "name": "SET_HELI_COMBAT_OFFSET",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Helicopter for which the combat offset is being set."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Offset along the X-axis (left/right) relative to the helicopter's current position and orientation"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Offset along the Y-axis (forward/backward) relative to the helicopter's current position and orientation"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Offset along the Z-axis (up/down) relative to the helicopter's current position and orientation."
                }
            ],
            "results": "void",
            "description": "Set a specific offset for helis chasing target in combat\n\n```\nNativeDB Introduced: v1180\n```",
            "examples": [],
            "hash": "0x0A3F820A9A9A9AC5",
            "ns": "VEHICLE",
            "aliases": ["0x0A3F820A9A9A9AC5"],
            "manualHash": true
        },
        "0xFD280B4D7F3ABC4D": {
            "name": "SET_HELI_BLADES_SPEED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "speed", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets the speed of the helicopter blades in percentage of the full speed.  \nvehicleHandle: The helicopter.  \nspeed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.  \n```",
            "examples": [],
            "hash": "0xFD280B4D7F3ABC4D",
            "ns": "VEHICLE",
            "jhash": "0x5C7D4EA9",
            "manualHash": true
        },
        "0xE6F13851780394DA": {
            "name": "SET_HELI_TURBULENCE_SCALAR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE6F13851780394DA",
            "ns": "VEHICLE",
            "aliases": ["0xE6F13851780394DA"],
            "jhash": "0xCCB41A55",
            "manualHash": true
        },
        "0x6E0859B530A365CC": {
            "name": "_SET_HELICOPTER_ROLL_PITCH_YAW_MULT",
            "params": [
                { "name": "helicopter", "type": "Vehicle" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nvalue between 0.0 and 1.0  \n```",
            "examples": [],
            "hash": "0x6E0859B530A365CC",
            "ns": "VEHICLE",
            "jhash": "0x6E67FD35",
            "manualHash": true
        },
        "0x4056EA1105F5ABD7": {
            "name": "_SET_HELI_MAIN_ROTOR_HEALTH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "health", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4056EA1105F5ABD7",
            "ns": "VEHICLE",
            "aliases": ["0x4056EA1105F5ABD7"],
            "manualHash": true
        },
        "0x70A252F60A3E036B": {
            "name": "SET_HOVER_MODE_WING_RATIO",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to which the ratio will be applied."
                },
                {
                    "name": "ratio",
                    "type": "float",
                    "description": "Between 0.0 and 1.0. 0.0 is wings closed, 1.0 is wings open."
                }
            ],
            "results": "void",
            "description": "This native allows opening or closing the wings of the Deluxo/Oppressor. For the Deluxo, wing deployment depends on sufficient altitude.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- In this case we are opening the wings of the vehicle\nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nSetHoverModeWingRatio(vehicle, 1.0)"
                },
                {
                    "lang": "js",
                    "code": "// In this case we are opening the wings of the vehicle\nconst vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetHoverModeWingRatio(vehicle, 1.0);"
                },
                {
                    "lang": "cs",
                    "code": "// In this case we are opening the wings of the vehicle\nusing static CitizenFX.Core.Native.API;\nVehicle vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetHoverModeWingRatio(vehicle, 1f);"
                }
            ],
            "hash": "0x70A252F60A3E036B",
            "ns": "VEHICLE",
            "aliases": ["_SET_SPECIALFLIGHT_WING_RATIO"],
            "manualHash": true
        },
        "0x28B18377EB6E25F6": {
            "name": "_SET_HYDRAULIC_RAISED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x28B18377EB6E25F6",
            "ns": "VEHICLE",
            "aliases": ["0x28B18377EB6E25F6"],
            "manualHash": true
        },
        "0xACFB2463CC22BED2": {
            "name": "SET_LAST_DRIVEN_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xACFB2463CC22BED2",
            "ns": "VEHICLE",
            "aliases": ["0xACFB2463CC22BED2"],
            "jhash": "0xD1B71A25",
            "manualHash": true
        },
        "0x84EA99C62CB3EF0C": {
            "name": "_SET_HYDRAULIC_WHEEL_VALUE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelId", "type": "int" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nWorks only on vehicles that support hydraulic.\n```",
            "examples": [],
            "hash": "0x84EA99C62CB3EF0C",
            "ns": "VEHICLE",
            "aliases": ["0x84EA99C62CB3EF0C", "_SET_HYDRAULIC_STATE"],
            "manualHash": true
        },
        "0xC24075310A8B9CD1": {
            "name": "_SET_HYDRAULIC_WHEEL_STATE_TRANSITION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelId", "type": "int" },
                { "name": "state", "type": "int" },
                { "name": "value", "type": "float" },
                { "name": "p4", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets vehicle wheel hydraulic states transition. Known states:\n0 - reset\n1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)\n2 - jump using wheel\n```",
            "examples": [],
            "hash": "0xC24075310A8B9CD1",
            "ns": "VEHICLE",
            "aliases": ["0xC24075310A8B9CD1"],
            "manualHash": true
        },
        "0x591CA673AA6AB736": {
            "name": "SET_MISSION_TRAIN_COORDS",
            "params": [
                { "name": "train", "type": "Vehicle" },
                { "name": "x", "type": "float" },
                { "name": "y", "type": "float" },
                { "name": "z", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x591CA673AA6AB736",
            "ns": "VEHICLE",
            "jhash": "0xD6D70803",
            "manualHash": true
        },
        "0xBBE7648349B49BE8": {
            "name": "SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED",
            "params": [
                { "name": "train", "type": "Vehicle*" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 is always 0  \n```",
            "examples": [],
            "hash": "0xBBE7648349B49BE8",
            "ns": "VEHICLE",
            "jhash": "0x19808560",
            "manualHash": true
        },
        "0x8EA86DF356801C7D": {
            "name": "_SET_HYDRAULIC_WHEEL_STATE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8EA86DF356801C7D",
            "ns": "VEHICLE",
            "aliases": ["0x8EA86DF356801C7D"],
            "manualHash": true
        },
        "0xBC3CCA5844452B06": {
            "name": "SET_LIGHTS_CUTOFF_DISTANCE_TWEAK",
            "params": [{ "name": "distance", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBC3CCA5844452B06",
            "ns": "VEHICLE",
            "aliases": ["0xBC3CCA5844452B06"],
            "jhash": "0x929801C6",
            "manualHash": true
        },
        "0xEAE6DCC7EEE3DB1D": {
            "name": "SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME",
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEAE6DCC7EEE3DB1D",
            "ns": "VEHICLE",
            "jhash": "0xDD46CEBE",
            "manualHash": true
        },
        "0x544996C0081ABDEB": {
            "name": "_SET_OPPRESSOR_TRANSFORM_STATE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle (tested with oppressor only)"
                },
                {
                    "name": "extend",
                    "type": "BOOL",
                    "description": "Set to true to extend the wings, false to retract them."
                }
            ],
            "results": "void",
            "description": "Set state to true to extend the wings, false to retract them.",
            "examples": [],
            "hash": "0x544996C0081ABDEB",
            "ns": "VEHICLE",
            "aliases": ["0x544996C0081ABDEB"],
            "manualHash": true
        },
        "0xCAA15F13EBD417FF": {
            "name": "SET_NUMBER_OF_PARKED_VEHICLES",
            "params": [{ "name": "value", "type": "int" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCAA15F13EBD417FF",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x206A58E8",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x1B212B26DD3C04DF": {
            "name": "SET_OPEN_REAR_DOORS_ON_EXPLOSION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to apply this setting to."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "A boolean value where `true` allows the rear doors to open upon explosion, and `false` prevents them from opening."
                }
            ],
            "results": "void",
            "description": "Enables or disables the opening of a vehicle's rear doors in the event of a sticky bomb explosion. This native is effective for armored vehicles, such as the Stockade (Brinks vehicle), allowing the rear doors to be opened through controlled explosions, which might otherwise remain locked due to the vehicle nature.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example disables the rear doors of the vehicle from opening upon explosion.\n\n-- Retrieve the LocalPlayer.\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the vehicle the player is currently in. \nlocal vehicle = GetVehiclePedIsIn(playerPed, false)\n\n-- Check if the vehicle exists in the game world.\nif not DoesEntityExist(vehicle) then \n    -- If the vehicle does not exist, end the execution of the code here.\n    return \nend\n\n-- Retrieve the model of the vehicle\nlocal modelVehicle = GetEntityModel(vehicle)\n\n-- Retrieve the hash of the Stockade.\nlocal hashStockade = GetHashKey(\"stockade\")\n\n-- Check if the vehicle is a Stockade.\nif (modelVehicle == hashStockade) then\n    -- Disable the rear doors from opening upon explosion.\n    SetOpenRearDoorsOnExplosion(vehicle, true)\nend"
                },
                {
                    "lang": "js",
                    "code": "// This example disables the rear doors of the vehicle from opening upon explosion.\n\n// Retrieve the LocalPlayer.\nconst playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nconst vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle)) {\n  // If the vehicle does not exist, end the execution of the code here.\n  return;\n}\n\n// Retrieve the model of the vehicle.\nconst modelVehicle = GetEntityModel(vehicle);\n\n// Retrieve the hash of the Stockade.\nconst hashStockade = GetHashKey(\"stockade\");\n\n// Check if the vehicle is a Stockade.\nif (modelVehicle === hashStockade) {\n    // Disable the rear doors from opening upon explosion.\n    SetOpenRearDoorsOnExplosion(vehicle, true);\n}"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\n// This example disables the rear doors of the vehicle from opening upon explosion.\n\n// Retrieve the LocalPlayer.\nPed playerPed = PlayerPedId();\n\n// Retrieve the vehicle the player is currently in.\nVehicle vehicle = GetVehiclePedIsIn(playerPed, false);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle))\n{\n    // If the vehicle does not exist, end the execution of the code here.\n    return;\n}\n\n// Retrieve the model of the vehicle.\nuint modelVehicle = (uint)GetEntityModel(vehicle);\n\n// Retrieve the hash of the Stockade.\nuint hashStockade = (uint)GetHashKey(\"stockade\");\n\n// Check if the vehicle is a Stockade.\nif (modelVehicle == hashStockade) {\n    // Disable the rear doors from opening upon explosion.\n    SetOpenRearDoorsOnExplosion(vehicle, true);\n}"
                }
            ],
            "hash": "0x1B212B26DD3C04DF",
            "ns": "VEHICLE",
            "aliases": ["0x1B212B26DD3C04DF"],
            "manualHash": true,
            "resultsDescription": "This native does not return any value."
        },
        "0x877C1EAEAC531023": {
            "name": "SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB",
            "params": [
                { "name": "cargobob", "type": "Vehicle" },
                { "name": "length1", "type": "float" },
                { "name": "length2", "type": "float" },
                {
                    "name": "state",
                    "type": "BOOL",
                    "annotations": { "cs_type": "int" }
                }
            ],
            "results": "void",
            "description": "```\nmin: 1.9f, max: 100.0f\n```",
            "examples": [],
            "hash": "0x877C1EAEAC531023",
            "ns": "VEHICLE",
            "aliases": ["0x877C1EAEAC531023", "_SET_CARGOBOB_HOOK_POSITION"],
            "jhash": "0x3A8AB081",
            "manualHash": true
        },
        "0x4C815EB175086F84": {
            "name": "_SET_PLANE_PROPELLERS_HEALTH",
            "params": [
                { "name": "plane", "type": "Vehicle" },
                { "name": "health", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4C815EB175086F84",
            "ns": "VEHICLE",
            "aliases": ["0x4C815EB175086F84"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x2A86A0475B6A1434": {
            "name": "_SET_PLANE_ENGINE_HEALTH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "health", "type": "float" }
            ],
            "results": "void",
            "description": "```\nWorks just like SET_VEHICLE_ENGINE_HEALTH, didn't saw any difference. But this native works only for planes.\n```",
            "examples": [],
            "hash": "0x2A86A0475B6A1434",
            "ns": "VEHICLE",
            "aliases": ["0x2A86A0475B6A1434"],
            "manualHash": true
        },
        "0xE16142B94664DEFD": {
            "name": "SET_PLANE_RESIST_TO_EXPLOSION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE16142B94664DEFD",
            "ns": "VEHICLE",
            "aliases": ["0xE16142B94664DEFD"],
            "jhash": "0xFBBA699A",
            "manualHash": true
        },
        "0xAD2D28A1AFDFF131": {
            "name": "SET_PLANE_TURBULENCE_MULTIPLIER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The plane to set the multiplier for"
                },
                {
                    "name": "multiplier",
                    "type": "float",
                    "description": "The turbulence multiplier. Value between 0.0 and 1.0"
                }
            ],
            "results": "void",
            "description": "This native sets the turbulence multiplier. It only works for planes.\n0.0 = no turbulence at all.\n1.0 = heavy turbulence.\n\nWorks by just calling it once, does not need to be called every tick.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local plane = GetVehiclePedIsIn(PlayerPedId(), false)\nif IsThisModelAPlane(GetEntityModel(plane)) then\n    -- Goodbye turbulence!\n    SetPlaneTurbulenceMultiplier(plane, 0.0)\nend"
                }
            ],
            "hash": "0xAD2D28A1AFDFF131",
            "ns": "VEHICLE",
            "aliases": ["0xAD2D28A1AFDFF131"],
            "jhash": "0xED159AE6",
            "manualHash": true
        },
        "0x6E63860BBB190730": {
            "name": "SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "time", "type": "int" },
                { "name": "drivingStyle", "type": "int" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nTime is number of milliseconds before reverting, zero for indefinitely.\n```",
            "examples": [],
            "hash": "0x6E63860BBB190730",
            "ns": "VEHICLE",
            "jhash": "0x0C8ABAA4",
            "manualHash": true
        },
        "0x0BBB9A7A8FFE931B": {
            "name": "SET_PLANE_SECTION_DAMAGE_SCALE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Plane to which the damage scale adjustment will be applied."
                },
                {
                    "name": "damageSection",
                    "type": "int",
                    "description": "Specific section of the plane, as defined in the `ePlaneDamageSection` enum, where the damage scale will be adjusted."
                },
                {
                    "name": "damageScale",
                    "type": "float",
                    "annotations": { "cs_type": "Any" },
                    "description": "A float value representing the scale of damage to be applied to the specified section."
                }
            ],
            "results": "void",
            "description": "Adjusts the scale of damage applied to a specified section of a plane.\nIn the decompiled scripts the `damageScale` is always set to `0f` (maybe to disable damages on the specified section)\n\n```cpp\nenum ePlaneDamageSection {\n    WING_L = 0,\n    WING_R = 1,\n    TAIL = 2,\n    ENGINE_L = 3,\n    ENGINE_R = 4,\n    ELEVATOR_L = 5,\n    ELEVATOR_R = 6,\n    AILERON_L = 7,\n    AILERON_R = 8,\n    RUDDER = 9,\n    RUDDER_2 = 10,\n    AIRBRAKE_L = 11,\n    AIRBRAKE_R = 12\n}\n```\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0x0BBB9A7A8FFE931B",
            "ns": "VEHICLE",
            "aliases": ["0x0BBB9A7A8FFE931B"],
            "manualHash": true,
            "resultsDescription": "This native does not return any value."
        },
        "0x6683AB880E427778": {
            "name": "SET_PLAYBACK_SPEED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "speed", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6683AB880E427778",
            "ns": "VEHICLE",
            "jhash": "0x684E26E4",
            "manualHash": true
        },
        "0x4E74E62E0A97E901": {
            "name": "SET_POLICE_FOCUS_WILL_TRACK_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Sets flag on vehicle that changes behaviour in relation to when player gets wanted level",
            "examples": [],
            "hash": "0x4E74E62E0A97E901",
            "ns": "VEHICLE",
            "aliases": ["0x4E74E62E0A97E901"],
            "jhash": "0x5690F6C3",
            "manualHash": true
        },
        "0xBCDF8BAF56C87B6A": {
            "name": "SET_PLAYERS_LAST_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBCDF8BAF56C87B6A",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xDE86447D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x3A375167F5782A65": {
            "name": "_SET_REDUCE_DRIFT_VEHICLE_SUSPENSION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "enable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Lowers the vehicle's stance. Only works for vehicles that support this feature.\n\n```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0x3A375167F5782A65",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xA549C3B37EA28131": {
            "name": "SET_PLAYBACK_TO_USE_AI",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "drivingStyle", "type": "int" }
            ],
            "results": "void",
            "description": "Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.",
            "examples": [],
            "hash": "0xA549C3B37EA28131",
            "ns": "VEHICLE",
            "jhash": "0xB536CCD7",
            "manualHash": true
        },
        "0x84436EC293B1415F": {
            "name": "SET_RANDOM_BOATS",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x84436EC293B1415F",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xB505BD89",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xDA5E12F728DB30CA": {
            "name": "_SET_RANDOM_BOATS_IN_MP",
            "params": [{ "name": "toggle", "type": "BOOL" }],
            "results": "void",
            "description": "```\nNativeDB Introduced: v2372\n```",
            "examples": [],
            "hash": "0xDA5E12F728DB30CA",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x80D9F74197EA47D9": {
            "name": "SET_RANDOM_TRAINS",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Whether to enable random trains."
                }
            ],
            "results": "void",
            "description": "Enables spawning random trains on the preset tracks.\n\nRequires [`SWITCH_TRAIN_TRACK`](#\\_0xFD813BB7DB977F20) and [`SET_TRAIN_TRACK_SPAWN_FREQUENCY`](#\\_0x21973BBF8D17EDFA) to be set.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SwitchTrainTrack(0, true) -- Setting the Main train track(s) around LS and towards Sandy Shores active\nSwitchTrainTrack(3, true) -- Setting the Metro tracks active\nSetTrainTrackSpawnFrequency(0, 120000) -- The Train spawn frequency set for the game engine\nSetTrainTrackSpawnFrequency(3, 120000) -- The Metro spawn frequency set for the game engine\nSetRandomTrains(true) -- Telling the game we want to use randomly spawned trains"
                }
            ],
            "hash": "0x80D9F74197EA47D9",
            "ns": "VEHICLE",
            "jhash": "0xD461CA7F",
            "manualHash": true
        },
        "0xB3B3359379FE77D3": {
            "name": "SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME",
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB3B3359379FE77D3",
            "ns": "VEHICLE",
            "jhash": "0x543F712B",
            "manualHash": true
        },
        "0xD138FA15C9776837": {
            "name": "SET_SPECIAL_FLIGHT_MODE_RATIO",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to which the ratio will be applied."
                },
                {
                    "name": "ratio",
                    "type": "float",
                    "description": "A value between 0.0 and 1.0 indicating the target state for the vehicle's hover mode transition. In decompiled scripts, a common usage is 0.75 - GetFrameTime(). Exceeding the maximum can cause the `Deluxo's` wheels to glitch, delaying their return to the initial position."
                }
            ],
            "results": "void",
            "description": "Used alongside [`SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO`](#\\_0x438B3D7CA026FE91), this function initiates hover transformation for vehicles with a hover mode, like the `Deluxo`, based on a specified ratio (0.0 to 1.0). Incorrect values can glitch the vehicle. Without pairing, vehicles revert to car mode. Ineffective on the `oppressor2`",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- In this case we are enabling the hover mode for the vehicle and initiates hover transformation.\nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nSetSpecialFlightModeRatio(vehicle, 0.75 - GetFrameTime())\nSetVehicleHoverTransformPercentage(vehicle, 1.0)"
                },
                {
                    "lang": "js",
                    "code": "// In this case we are enabling the hover mode for the vehicle and initiates hover transformation.\nconst vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetSpecialFlightModeRatio(vehicle, 0.75 - GetFrameTime());\nSetVehicleHoverTransformPercentage(vehicle, 1.0);"
                },
                {
                    "lang": "cs",
                    "code": "// In this case we are enabling the hover mode for the vehicle and initiates hover transformation.\nusing static CitizenFX.Core.Native.API;\nVehicle vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetSpecialFlightModeRatio(vehicle, 0.75f - GetFrameTime());\nSetVehicleHoverTransformPercentage(vehicle, 1f);"
                }
            ],
            "hash": "0xD138FA15C9776837",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_HOVER_TRANSFORM_RATIO"],
            "manualHash": true
        },
        "0x317B11A312DF5534": {
            "name": "SET_RENDER_TRAIN_AS_DERAILED",
            "params": [
                { "name": "train", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nmakes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)  \n```",
            "examples": [],
            "hash": "0x317B11A312DF5534",
            "ns": "VEHICLE",
            "jhash": "0x899D9092",
            "manualHash": true
        },
        "0xF1211889DF15A763": {
            "name": "SET_SPECIAL_FLIGHT_MODE_ALLOWED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to which the locking state will be applied."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Boolean parameter where setting `false` locks the current state of the vehicle, preventing transitions such as the `Deluxo` or Oppressor switching between their flying and driving modes. Setting it to `true` allows changing the vehicle state as usual."
                }
            ],
            "results": "void",
            "description": "Allows locking the hover/non-hover mode of a vehicle, such as the flying mode of the `Deluxo`. In the decompiled scripts, this native is used on `oppressor2` but couldn't get it to work on it.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Checks the altitude of the Deluxo and locks its current mode when above 150 meters.\n-- If the Deluxo is in flying mode at this altitude, it will be unable to switch to driving mode, and vice versa.\nCitizen.CreateThread(function()\n    local coords -- Variable to store the vehicle's coordinates.\n    local vehicle -- Variable to store the vehicle entity.\n    \n    repeat\n        vehicle = GetVehiclePedIsIn(PlayerPedId(), false) -- Get the vehicle the player is currently in.\n        \n        if (GetEntityModel(vehicle) == joaat(\"deluxo\")) then -- Check if the vehicle is a Deluxo.\n            coords = GetEntityCoords(vehicle) -- Get the current coordinates of the vehicle.\n        end\n        \n        Citizen.Wait(0) -- Wait for the next frame.\n        \n    until coords.z >= 150.0 -- Keep looping until the Deluxo is above 150 meters.\n    \n    SetSpecialFlightModeAllowed(vehicle, false) -- Lock the Deluxo's current mode (flying or driving).\nend)"
                }
            ],
            "hash": "0xF1211889DF15A763",
            "ns": "VEHICLE",
            "aliases": [
                "0xF1211889DF15A763",
                "_SET_VEHICLE_HOVER_TRANSFORM_ENABLED"
            ],
            "manualHash": true
        },
        "0xD9D620E0AC6DC4B0": {
            "name": "SET_SCRIPT_VEHICLE_GENERATOR",
            "params": [
                { "name": "vehicleGenerator", "type": "int" },
                { "name": "enabled", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOnly called once in the decompiled scripts. Presumably activates the specified generator.  \n```",
            "examples": [],
            "hash": "0xD9D620E0AC6DC4B0",
            "ns": "VEHICLE",
            "jhash": "0x40D73747",
            "manualHash": true
        },
        "0xC59872A5134879C7": {
            "name": "SET_SUBMARINE_CRUSH_DEPTHS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "depth1", "type": "float" },
                { "name": "depth2", "type": "float" },
                { "name": "depth3", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC59872A5134879C7",
            "ns": "VEHICLE",
            "aliases": ["_JITTER_VEHICLE"],
            "jhash": "0x4A46E814",
            "manualHash": true
        },
        "0xB893215D8D4C015B": {
            "name": "SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN",
            "params": [
                { "name": "plane", "type": "Vehicle" },
                { "name": "height", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB893215D8D4C015B",
            "ns": "VEHICLE",
            "aliases": [
                "0xB893215D8D4C015B",
                "_SET_PLANE_MIN_HEIGHT_ABOVE_GROUND",
                "_SET_PLANE_MIN_HEIGHT_ABOVE_TERRAIN"
            ],
            "jhash": "0x8C4B63E2",
            "manualHash": true
        },
        "0x438B3D7CA026FE91": {
            "name": "SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle (a deluxo or oppressor2)."
                },
                {
                    "name": "state",
                    "type": "float",
                    "description": "The transform state (value between 0.0 and 1.0)."
                }
            ],
            "results": "void",
            "description": "According to decompiled scripts this should work with the `deluxo` and `oppressor2` vehicles.\nDoes nothing when used on `oppressor2`.\n\nFor the deluxo:\n\n*   Set `state` to `0.0`: Fully transform to a 'road' vehicle (non-hover mode).\n*   Set `state` to `1.0`: Fully transform to a 'flying' vehicle (hover mode).\n\nIf you set it to something like 0.5, then something [weird happens](https://streamable.com/p6wmr), you end up in some 50% hover mode, 50% not hover mode.\n\nThis doesn't need to be called every tick, just once and the vehicle will transform to that state at the usual transform speed. It'll just stop transforming when it reaches the state you provided.\n\nOnce this native is used then players will just be able to hit the vehicle transform key to toggle the transformation cycle; it won't block users from using the key.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- In this case we are enabling the hover mode for the deluxo (fyling mode)\nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nSetSpecialFlightModeTargetRatio(vehicle, 1.0)"
                },
                {
                    "lang": "js",
                    "code": "// In this case we are enabling the hover mode for the deluxo (fyling mode)\nconst vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetSpecialFlightModeTargetRatio(vehicle, 1.0);"
                },
                {
                    "lang": "cs",
                    "code": "// In this case we are enabling the hover mode for the deluxo (fyling mode)\nusing static CitizenFX.Core.Native.API;\nVehicle vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetSpecialFlightModeTargetRatio(vehicle, 1f);"
                }
            ],
            "hash": "0x438B3D7CA026FE91",
            "ns": "VEHICLE",
            "aliases": [
                "0x438B3D7CA026FE91",
                "_SET_VEHICLE_TRANSFORM_STATE",
                "_SET_VEHICLE_HOVER_TRANSFORM_PERCENTAGE"
            ],
            "manualHash": true
        },
        "0x878C75C09FBDB942": {
            "name": "_SET_TRAILER_LEGS_LOWERED",
            "params": [],
            "results": "void",
            "description": "```\nInverse of 0x95CF53B3D687F9FA\n```\n\n```\nNativeDB Added Parameter 1: Vehicle vehicle\n```",
            "examples": [],
            "hash": "0x878C75C09FBDB942",
            "ns": "VEHICLE",
            "aliases": ["0x878C75C09FBDB942"],
            "manualHash": true
        },
        "0x598803E85E8448D9": {
            "name": "SET_TAXI_LIGHTS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis is not tested - it's just an assumption.  \nDoesn't seem to work.  I'll try with an int instead. --JT  \nRead the scripts, im dumpass.   \nDoesn't work at all, wether with an bool neither an int  \n                            if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {  \n                                VEHICLE::SET_TAXI_LIGHTS(l_115, 1);  \n                            }  \n```",
            "examples": [],
            "hash": "0x598803E85E8448D9",
            "ns": "VEHICLE",
            "jhash": "0x68639D85",
            "manualHash": true
        },
        "0x41B9FB92EDED32A6": {
            "name": "_SET_UNK_BOOL_0x102_FOR_SUBMARINE_VEHICLE_TASK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x41B9FB92EDED32A6",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x2A8F319B392E7B3F": {
            "name": "SET_TRAILER_INVERSE_MASS_SCALE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A8F319B392E7B3F",
            "ns": "VEHICLE",
            "aliases": ["0x2A8F319B392E7B3F"],
            "jhash": "0xE74E85CE",
            "manualHash": true
        },
        "0x95CF53B3D687F9FA": {
            "name": "SET_TRAILER_LEGS_RAISED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nin the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.\n```",
            "examples": [],
            "hash": "0x95CF53B3D687F9FA",
            "ns": "VEHICLE",
            "aliases": ["0x95CF53B3D687F9FA"],
            "jhash": "0x06C47A6F",
            "manualHash": true
        },
        "0xAA0BC91BE0B796E3": {
            "name": "SET_TRAIN_SPEED",
            "params": [
                { "name": "train", "type": "Vehicle" },
                { "name": "speed", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAA0BC91BE0B796E3",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xDFC35E4D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x498218259FB7C72D": {
            "name": "_SET_UNK_FLOAT_0x104_FOR_SUBMARINE_VEHICLE_TASK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x498218259FB7C72D",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x21973BBF8D17EDFA": {
            "name": "SET_TRAIN_TRACK_SPAWN_FREQUENCY",
            "params": [
                { "name": "trackIndex", "type": "int" },
                { "name": "frequency", "type": "int" }
            ],
            "results": "void",
            "description": "```\nOnly called once inside main_persitant with the parameters, 0  \n```",
            "examples": [],
            "hash": "0x21973BBF8D17EDFA",
            "ns": "VEHICLE",
            "aliases": ["0x21973BBF8D17EDFA"],
            "jhash": "0xD5774FB7",
            "manualHash": true
        },
        "0x21115BCD6E44656A": {
            "name": "SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x21115BCD6E44656A",
            "ns": "VEHICLE",
            "aliases": [
                "0x21115BCD6E44656A",
                "_SET_VEHICLE_CLOSE_DOOR_DEFERED_ACTION"
            ],
            "jhash": "0xEBC225C1",
            "manualHash": true
        },
        "0x74C68EF97645E79D": {
            "name": "_SET_TYRE_HEALTH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelIndex", "type": "int" },
                { "name": "health", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x74C68EF97645E79D",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x16469284DB8C62B5": {
            "name": "SET_TRAIN_CRUISE_SPEED",
            "params": [
                { "name": "train", "type": "Vehicle" },
                { "name": "speed", "type": "float" }
            ],
            "results": "void",
            "description": "Used to control train speed, can be used to start and stop its movement as well.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local train = CreateMissionTrain(21, 40.2, -1201.3, 31.0, false)\nSetTrainCruiseSpeed(train, 20.0) -- Can be used to 'start' the train\nSetTrainCruiseSpeed(train, 0.0) -- Can be used to 'stop' the train"
                }
            ],
            "hash": "0x16469284DB8C62B5",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xB507F51D",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x01894E2EDE923CA2": {
            "name": "_SET_TYRE_WEAR_MULTIPLIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelIndex", "type": "int" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1868\n```",
            "examples": [],
            "hash": "0x01894E2EDE923CA2",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xDFFCEF48E511DB48": {
            "name": "SET_VEHICLE_ACTIVE_DURING_PLAYBACK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xDFFCEF48E511DB48",
            "ns": "VEHICLE",
            "aliases": ["0xDFFCEF48E511DB48"],
            "jhash": "0xEB7D7C27",
            "manualHash": true
        },
        "0x392183BB9EA57697": {
            "name": "_SET_TYRE_SOFTNESS_MULTIPLIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelIndex", "type": "int" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nControls how fast the tires wear out.\nDefault values from Rockstar's Open Wheel Race JSON's:\n\"owrtss\" (Soft): 2.2\n\"owrtsm\" (Medium): 1.7\n\"owrtsh\" (Hard): 1.2\nUsable wheels:\n0: wheel_lf\n1: wheel_rf\n2: wheel_lm1\n3: wheel_rm1\n4: wheel_lr\n5: wheel_rr\n```\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0x392183BB9EA57697",
            "ns": "VEHICLE",
            "aliases": ["0x392183BB9EA57697"],
            "manualHash": true
        },
        "0xC970D0E0FC31D768": {
            "name": "_SET_TYRE_TRACTION_LOSS_MULTIPLIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelIndex", "type": "int" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nControls how much traction the wheel loses.\nDefault values from Rockstar's Open Wheel Race JSON's:\n\"owrtds\" (Soft): 0.05\n\"owrtdm\" (Medium): 0.45\n\"owrtdh\" (Hard): 0.8\nUsable wheels:\n0: wheel_lf\n1: wheel_rf\n2: wheel_lm1\n3: wheel_rm1\n4: wheel_lr\n5: wheel_rr\n```\n\n```\nNativeDB Introduced: v2060\n```",
            "examples": [],
            "hash": "0xC970D0E0FC31D768",
            "ns": "VEHICLE",
            "aliases": ["0xC970D0E0FC31D768"],
            "manualHash": true
        },
        "0xF06A16CA55D138D8": {
            "name": "_SET_USE_HIGHER_VEHICLE_JUMP_FORCE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).",
            "examples": [],
            "hash": "0xF06A16CA55D138D8",
            "ns": "VEHICLE",
            "aliases": ["0xF06A16CA55D138D8"],
            "manualHash": true
        },
        "0xB77D05AC8C78AADB": {
            "name": "SET_VEHICLE_BODY_HEALTH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\np2 often set to 1000.0 in the decompiled scripts.  \n```",
            "examples": [],
            "hash": "0xB77D05AC8C78AADB",
            "ns": "VEHICLE",
            "jhash": "0x920C2517",
            "manualHash": true
        },
        "0x1F9FB66F3A3842D2": {
            "name": "SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to be affected by this setting."
                },
                {
                    "name": "actHighSpeed",
                    "type": "BOOL",
                    "description": "A boolean flag. Set to `true` to make the vehicle act as if it's at high speed for the current frame"
                }
            ],
            "results": "void",
            "description": "This native is used to simulate a high-speed impact for a vehicle when it collides with a breakable object (frag). It's particularly useful in scripted sequences where a vehicle is required to break through a barrier but might not actually be moving at a sufficient speed to do so realistically. Note that this setting is temporary and will reset after one frame, so it needs to be called every frame for a lasting effect.",
            "examples": [],
            "hash": "0x1F9FB66F3A3842D2",
            "ns": "VEHICLE",
            "aliases": ["0x1F9FB66F3A3842D2"],
            "jhash": "0x4D840FC4",
            "manualHash": true
        },
        "0xF8EBCCC96ADB9FB7": {
            "name": "SET_VEHICLE_BULLDOZER_ARM_POSITION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "position", "type": "float" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).",
            "examples": [],
            "hash": "0xF8EBCCC96ADB9FB7",
            "ns": "VEHICLE",
            "aliases": ["0xF8EBCCC96ADB9FB7"],
            "jhash": "0xED23C8A3",
            "manualHash": true
        },
        "0xCDE5E70C1DDB954C": {
            "name": "SET_VEHICLE_ALARM",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xCDE5E70C1DDB954C",
            "ns": "VEHICLE",
            "jhash": "0x24877D84",
            "manualHash": true
        },
        "0x5D14D4154BFE7B2C": {
            "name": "SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON",
            "params": [
                { "name": "veh", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMakes the vehicle accept no passengers.  \n```",
            "examples": [],
            "hash": "0x5D14D4154BFE7B2C",
            "ns": "VEHICLE",
            "jhash": "0x8BAAC437",
            "manualHash": true
        },
        "0x92B35082E0B42F66": {
            "name": "SET_VEHICLE_BRAKE_LIGHTS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x92B35082E0B42F66",
            "ns": "VEHICLE",
            "jhash": "0x6D9BA11E",
            "manualHash": true
        },
        "0x1DDA078D12879EEE": {
            "name": "_SET_VEHICLE_CAN_BE_LOCKED_ON",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "canBeLockedOn", "type": "BOOL" },
                { "name": "unk", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSET_VEHICLE_AL*\n```",
            "examples": [],
            "hash": "0x1DDA078D12879EEE",
            "ns": "VEHICLE",
            "aliases": ["0x1DDA078D12879EEE"],
            "manualHash": true
        },
        "0xE4E2FD323574965C": {
            "name": "SET_VEHICLE_BRAKE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE4E2FD323574965C",
            "ns": "VEHICLE",
            "aliases": ["0xE4E2FD323574965C"],
            "jhash": "0x5A36BC37",
            "manualHash": true
        },
        "0x8BA6F76BC53A1493": {
            "name": "SET_VEHICLE_AUTOMATICALLY_ATTACHES",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "Any" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0x8BA6F76BC53A1493",
            "ns": "VEHICLE",
            "jhash": "0x4273A8D3",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x300504B23BD3B711": {
            "name": "SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x300504B23BD3B711",
            "ns": "VEHICLE",
            "aliases": ["0x300504B23BD3B711"],
            "jhash": "0x5130DB1E",
            "manualHash": true
        },
        "0xFB8794444A7D60FB": {
            "name": "SET_VEHICLE_BURNOUT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOn accelerating, spins the driven wheels with the others braked, so you don't go anywhere.  \n```",
            "examples": [],
            "hash": "0xFB8794444A7D60FB",
            "ns": "VEHICLE",
            "jhash": "0x9B6EF0EA",
            "manualHash": true
        },
        "0xF4B2ED59DEB5D774": {
            "name": "_SET_VEHICLE_BOMB_COUNT",
            "params": [
                {
                    "name": "aircraft",
                    "type": "Vehicle",
                    "description": "The vehicle to set the bombCount on."
                },
                {
                    "name": "bombCount",
                    "type": "int",
                    "description": "The amount of bombs to set for this vehicle."
                }
            ],
            "results": "void",
            "description": "Sets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.\n\nIn decompiled scripts this is used to deduct from or add to the count whenever bombs are dropped or purchased/restocked.\n\nUse [`_GET_AIRCRAFT_BOMB_COUNT`](#\\_0xEA12BD130D7569A1) to get the amount of bombs on that vehicle.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nSetAircraftBombCount(vehicle, 10)"
                },
                {
                    "lang": "cs",
                    "code": "int vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetAircraftBombCount(vehicle, 10);"
                }
            ],
            "hash": "0xF4B2ED59DEB5D774",
            "ns": "VEHICLE",
            "aliases": [
                "0xF4B2ED59DEB5D774",
                "_SET_VEHICLE_BOMBS",
                "_SET_AIRCRAFT_BOMB_COUNT"
            ],
            "manualHash": true
        },
        "0x59BF8C3D52C92F66": {
            "name": "SET_VEHICLE_CAN_BREAK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x59BF8C3D52C92F66",
            "ns": "VEHICLE",
            "jhash": "0x90A810D1",
            "manualHash": true
        },
        "0x3750146A28097A82": {
            "name": "SET_VEHICLE_CAN_BE_TARGETTED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nThis has not yet been tested - it's just an assumption of what the types could be.  \n```",
            "examples": [],
            "hash": "0x3750146A28097A82",
            "ns": "VEHICLE",
            "jhash": "0x64B70B1D",
            "manualHash": true
        },
        "0x51BB2D88D31A914B": {
            "name": "SET_VEHICLE_CAN_LEAK_OIL",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x51BB2D88D31A914B",
            "ns": "VEHICLE",
            "aliases": ["0x51BB2D88D31A914B"],
            "jhash": "0x88F0F7E7",
            "manualHash": true
        },
        "0x0CDDA42F9E360CA6": {
            "name": "SET_VEHICLE_CAN_DEFORM_WHEELS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0CDDA42F9E360CA6",
            "ns": "VEHICLE",
            "aliases": ["0x0CDDA42F9E360CA6"],
            "jhash": "0x9B581DE7",
            "manualHash": true
        },
        "0x428BACCDF5E26EAD": {
            "name": "SET_VEHICLE_CAN_SAVE_IN_GARAGE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x428BACCDF5E26EAD",
            "ns": "VEHICLE",
            "aliases": ["0x428BACCDF5E26EAD"],
            "jhash": "0x1604C2F5",
            "manualHash": true
        },
        "0x4C7028F78FFD3681": {
            "name": "SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x4C7028F78FFD3681",
            "ns": "VEHICLE",
            "jhash": "0xC5D94017",
            "manualHash": true
        },
        "0xB59E4BD37AE292DB": {
            "name": "SET_VEHICLE_CHEAT_POWER_INCREASE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\n<1.0 - Decreased torque\n=1.0 - Default torque\n>1.0 - Increased torque\nNegative values will cause the vehicle to go backwards instead of forwards while accelerating.\nvalue - is between 0.2 and 1.8 in the decompiled scripts.\nThis needs to be called every frame to take effect.\n```",
            "examples": [],
            "hash": "0xB59E4BD37AE292DB",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER"],
            "jhash": "0x642DA5AA",
            "manualHash": true
        },
        "0x192547247864DFDD": {
            "name": "SET_VEHICLE_CAN_LEAK_PETROL",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x192547247864DFDD",
            "ns": "VEHICLE",
            "aliases": ["0x192547247864DFDD"],
            "jhash": "0x90D6EE57",
            "manualHash": true
        },
        "0x206BC5DC9D1AC70A": {
            "name": "_SET_VEHICLE_CAN_ENGINE_OPERATE_ON_FIRE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x206BC5DC9D1AC70A",
            "ns": "VEHICLE",
            "aliases": ["0x206BC5DC9D1AC70A"],
            "jhash": "0x8EACBD13",
            "manualHash": true
        },
        "0x5B91B229243351A8": {
            "name": "_SET_VEHICLE_CONTROLS_INVERTED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nInverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)\nDoesn't work for planes/helis.\n```",
            "examples": [],
            "hash": "0x5B91B229243351A8",
            "ns": "VEHICLE",
            "aliases": ["0x5B91B229243351A8"],
            "manualHash": true
        },
        "0x33E8CD3322E2FE31": {
            "name": "SET_VEHICLE_COLOUR_COMBINATION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to modify."
                },
                {
                    "name": "colorCombination",
                    "type": "int",
                    "description": "One of the default color values of the vehicle."
                }
            ],
            "results": "void",
            "description": "Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).\n\nRange of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nlocal index = math.random(0, 16)\nSetVehicleColourCombination(vehicle, index)"
                }
            ],
            "hash": "0x33E8CD3322E2FE31",
            "ns": "VEHICLE",
            "jhash": "0xA557AEAD",
            "manualHash": true
        },
        "0xA46413066687A328": {
            "name": "SET_VEHICLE_CEILING_HEIGHT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "height", "type": "float" }
            ],
            "results": "void",
            "description": "```\nPreviously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision)\nfrom Decrypted Scripts I found\nVEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[2/*2*/], 420.0);\n```",
            "examples": [],
            "hash": "0xA46413066687A328",
            "ns": "VEHICLE",
            "aliases": ["GET_VEHICLE_DEFORMATION_GET_TREE"],
            "jhash": "0x98A10A86",
            "manualHash": true
        },
        "0x4F1D4BE3A7F24601": {
            "name": "SET_VEHICLE_COLOURS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "colorPrimary", "type": "int" },
                { "name": "colorSecondary", "type": "int" }
            ],
            "results": "void",
            "description": "colorPrimary & colorSecondary are the paint indexes for the vehicle.\n\nFor a list of valid paint indexes, view: pastebin.com/pwHci0xK",
            "examples": [],
            "hash": "0x4F1D4BE3A7F24601",
            "ns": "VEHICLE",
            "jhash": "0x57F24253",
            "manualHash": true
        },
        "0x36CED73BFED89754": {
            "name": "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "void",
            "description": "```\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)  \n```",
            "examples": [],
            "hash": "0x36CED73BFED89754",
            "ns": "VEHICLE",
            "jhash": "0x9D77259E",
            "manualHash": true
        },
        "0x9BDA23BF666F0855": {
            "name": "_SET_VEHICLE_COUNTERMEASURE_COUNT",
            "params": [
                {
                    "name": "aircraft",
                    "type": "Vehicle",
                    "description": "The vehicle to set the amount of countermeasures on."
                },
                {
                    "name": "count",
                    "type": "int",
                    "description": "The amount of countermeasures to set on this vehicle."
                }
            ],
            "results": "void",
            "description": "Similar to [`_SET_AIRCRAFT_BOMB_COUNT`](#\\_0xF4B2ED59DEB5D774), this sets the amount of countermeasures that are present on this vehicle.\n\nUse [`_GET_AIRCRAFT_COUNTERMEASURE_COUNT`](#\\_0xF846AA63DF56B804) to get the current amount.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nSetAircraftCountermeasureCount(vehicle, 10)"
                },
                {
                    "lang": "cs",
                    "code": "int vehicle = GetVehiclePedIsIn(PlayerPedId(), false);\nSetAircraftCountermeasureCount(vehicle, 10);"
                }
            ],
            "hash": "0x9BDA23BF666F0855",
            "ns": "VEHICLE",
            "aliases": [
                "0x9BDA23BF666F0855",
                "_SET_AIRCRAFT_COUNTERMEASURE_COUNT"
            ],
            "manualHash": true
        },
        "0x7141766F91D15BEA": {
            "name": "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "void",
            "description": "```\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)  \n```",
            "examples": [],
            "hash": "0x7141766F91D15BEA",
            "ns": "VEHICLE",
            "jhash": "0x8DF9F9BC",
            "manualHash": true
        },
        "0x6089CDF6A57F326C": {
            "name": "_SET_VEHICLE_DASHBOARD_COLOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "color", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x6089CDF6A57F326C",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_DASHBOARD_COLOUR"],
            "manualHash": true
        },
        "0xA1DD317EA8FD4F29": {
            "name": "SET_VEHICLE_DAMAGE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "xOffset", "type": "float" },
                { "name": "yOffset", "type": "float" },
                { "name": "zOffset", "type": "float" },
                { "name": "damage", "type": "float" },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "the size of the damage sphere to apply"
                },
                {
                    "name": "focusOnModel",
                    "type": "BOOL",
                    "description": "when set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact"
                }
            ],
            "results": "void",
            "description": "Apply damage to vehicle at a location. Location is relative to vehicle model (not world).\nRadius of effect damage applied in a sphere at impact location\nWhen `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Both of these are for an average sized car\n\n-- nothing will be hit\nSetVehicleDamage(vehicle, 0.0, 0.0, 0.33, 200.0, 100.0, false)\n\n-- will hit the first hitbox on your Z index line\nSetVehicleDamage(vehicle, 0.0, 0.0, 0.33, 200.0, 100.0, true)"
                }
            ],
            "hash": "0xA1DD317EA8FD4F29",
            "ns": "VEHICLE",
            "jhash": "0x21B458B2",
            "manualHash": true
        },
        "0x4E20D2A627011E8E": {
            "name": "_SET_VEHICLE_DAMAGE_MODIFIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "Any",
            "description": "```\nSET_VEHICLE_D*\n```",
            "examples": [],
            "hash": "0x4E20D2A627011E8E",
            "ns": "VEHICLE",
            "aliases": ["0x4E20D2A627011E8E"],
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x953DA1E1B12C0491": {
            "name": "SET_VEHICLE_DEFORMATION_FIXED",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nThis fixes the deformation of a vehicle but the vehicle health doesn't improve  \n```",
            "examples": [],
            "hash": "0x953DA1E1B12C0491",
            "ns": "VEHICLE",
            "jhash": "0xDD2920C8",
            "manualHash": true
        },
        "0x79D3B596FE44EE8B": {
            "name": "SET_VEHICLE_DIRT_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set."
                },
                {
                    "name": "dirtLevel",
                    "type": "float",
                    "description": "A number between 0.0 and 15.0 representing the vehicles dirt level."
                }
            ],
            "results": "void",
            "description": "Sets the dirt level of the passed vehicle.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local Vehicle = GetVehiclePedIsUsing(PlayerPedId())\nSetVehicleDirtLevel(Vehicle, 0.0) -- set the vehicle dirt level to 0.0"
                }
            ],
            "hash": "0x79D3B596FE44EE8B",
            "ns": "VEHICLE",
            "jhash": "0x2B39128B",
            "manualHash": true
        },
        "0x2B6747FAA9DB9D6B": {
            "name": "SET_VEHICLE_DISABLE_TOWING",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B6747FAA9DB9D6B",
            "ns": "VEHICLE",
            "aliases": ["0x2B6747FAA9DB9D6B"],
            "jhash": "0x95A9ACCB",
            "manualHash": true
        },
        "0xD4D4F6A4AB575A33": {
            "name": "SET_VEHICLE_DOOR_BROKEN",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" },
                { "name": "deleteDoor", "type": "BOOL" }
            ],
            "results": "void",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0xD4D4F6A4AB575A33",
            "ns": "VEHICLE",
            "jhash": "0x8147FEA7",
            "manualHash": true
        },
        "0x245A6883D966D537": {
            "name": "SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME",
            "params": [{ "name": "multiplier", "type": "float" }],
            "results": "void",
            "description": "**Usage:**\n\n*   Use this native inside a looped function.\n*   Values:\n    *   `0.0` = no vehicles on streets\n    *   `1.0` = normal vehicles on streets\n\n`1.0` Seems to be the maximum.",
            "examples": [],
            "hash": "0x245A6883D966D537",
            "ns": "VEHICLE",
            "jhash": "0xF4187E51",
            "manualHash": true
        },
        "0xA5A9653A8D2CAF48": {
            "name": "SET_VEHICLE_DOOR_LATCHED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" },
                { "name": "forceClose", "type": "BOOL" },
                { "name": "lock", "type": "BOOL" },
                { "name": "p4", "type": "BOOL" }
            ],
            "results": "void",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0xA5A9653A8D2CAF48",
            "ns": "VEHICLE",
            "jhash": "0x4EB7BBFC",
            "manualHash": true
        },
        "0x2FA133A4A9D37ED8": {
            "name": "_SET_VEHICLE_DOOR_CAN_BREAK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" },
                { "name": "isBreakable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0x2FA133A4A9D37ED8",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_DOOR_BREAKABLE"],
            "jhash": "0x065B92B3",
            "manualHash": true
        },
        "0xF2BFA0430F0A0FCB": {
            "name": "SET_VEHICLE_DOOR_CONTROL",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorIndex", "type": "int" },
                {
                    "name": "speed",
                    "type": "int",
                    "description": "5 is fast, 1 is slow 3 is medium"
                },
                { "name": "angle", "type": "float" }
            ],
            "results": "void",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)",
            "examples": [],
            "hash": "0xF2BFA0430F0A0FCB",
            "ns": "VEHICLE",
            "jhash": "0x572DD360",
            "manualHash": true
        },
        "0x7C65DAC73C35C862": {
            "name": "SET_VEHICLE_DOOR_OPEN",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle."
                },
                {
                    "name": "doorIndex",
                    "type": "int",
                    "description": "Index of the door you want to open (0-7)"
                },
                {
                    "name": "loose",
                    "type": "BOOL",
                    "description": "Whether the door is \"loose\" (if true the doors have no \"spring\" and can be closed easily.)"
                },
                {
                    "name": "openInstantly",
                    "type": "BOOL",
                    "description": "Whether the doors open instantly (if true this native seems to ignore loose)"
                }
            ],
            "results": "void",
            "description": "Sets the specified door index open on the passed vehicle. See [`IS_VEHICLE_DOOR_FULLY_OPEN`](#\\_0x3E933CFF7B111C22).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local Vehicle = GetVehiclePedIsUsing(PlayerPedId())\nfor i = 0, 5 do\n  SetVehicleDoorOpen(Vehicle, i, false, true) -- will open every door from 0-5\nend"
                }
            ],
            "hash": "0x7C65DAC73C35C862",
            "ns": "VEHICLE",
            "jhash": "0xBB75D38B",
            "manualHash": true
        },
        "0xA2F80B8D040727CC": {
            "name": "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA2F80B8D040727CC",
            "ns": "VEHICLE",
            "jhash": "0x891BA8A4",
            "manualHash": true
        },
        "0x93D9BD300D7789E5": {
            "name": "SET_VEHICLE_DOOR_SHUT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle."
                },
                {
                    "name": "doorIndex",
                    "type": "int",
                    "description": "Index of the door you want to close."
                },
                {
                    "name": "closeInstantly",
                    "type": "BOOL",
                    "description": "Whether the doors close instantly."
                }
            ],
            "results": "void",
            "description": "Sets the specified door index shut on the passed vehicle.\n\n```cpp\nenum eDoorId\n{\n\tVEH_EXT_DOOR_DSIDE_F = 0,\n\tVEH_EXT_DOOR_DSIDE_R = 1,\n\tVEH_EXT_DOOR_PSIDE_F = 2,\n\tVEH_EXT_DOOR_PSIDE_R = 3,\n\tVEH_EXT_BONNET = 4,\n\tVEH_EXT_BOOT = 5,\n\t// 0x872E72B8 = 0xFFFFFFFF,\n}\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local Vehicle = GetVehiclePedIsUsing(PlayerPedId())\nfor i = 0, 5 do\n  SetVehicleDoorShut(Vehicle, i, false) -- will close all doors from 0-5\nend"
                }
            ],
            "hash": "0x93D9BD300D7789E5",
            "ns": "VEHICLE",
            "jhash": "0x142606BD",
            "manualHash": true
        },
        "0xB664292EAECF7FA6": {
            "name": "SET_VEHICLE_DOORS_LOCKED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "doorLockStatus", "type": "int" }
            ],
            "results": "void",
            "description": "```\n// Source GTA VC miss2 leak, matching constants for 0/2/4, testing\n// They use 10 in am_mp_property_int, don't know what it does atm.\nenum eCarLock {\n    CARLOCK_NONE = 0,\n    CARLOCK_UNLOCKED = 1,\n    CARLOCK_LOCKED = 2,\n    CARLOCK_LOCKOUT_PLAYER_ONLY = 3,\n    CARLOCK_LOCKED_PLAYER_INSIDE = 4,\n    CARLOCK_LOCKED_INITIALLY = 5,\n    CARLOCK_FORCE_SHUT_DOORS = 6,\n    CARLOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7\n};\n```",
            "examples": [],
            "hash": "0xB664292EAECF7FA6",
            "ns": "VEHICLE",
            "jhash": "0x4CDD35D0",
            "manualHash": true
        },
        "0x203B527D1B77904C": {
            "name": "_SET_VEHICLE_DOORS_LOCKED_FOR_UNK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1365\n```",
            "examples": [],
            "hash": "0x203B527D1B77904C",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x9737A37136F07E75": {
            "name": "SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9737A37136F07E75",
            "ns": "VEHICLE",
            "aliases": ["0x9737A37136F07E75"],
            "jhash": "0xE4EF6514",
            "manualHash": true
        },
        "0x517AAF684BB50CD1": {
            "name": "SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "player", "type": "Player" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x517AAF684BB50CD1",
            "ns": "VEHICLE",
            "jhash": "0x49829236",
            "manualHash": true
        },
        "0xB81F6D4A8F5EEBA8": {
            "name": "SET_VEHICLE_DOORS_LOCKED_FOR_TEAM",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "team", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB81F6D4A8F5EEBA8",
            "ns": "VEHICLE",
            "jhash": "0x4F85E783",
            "manualHash": true
        },
        "0x068F64F2470F9656": {
            "name": "SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nMoney pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.\nyoutu.be/3arlUxzHl5Y\ni.imgur.com/WrNpYFs.jpg\n```",
            "examples": [],
            "hash": "0x068F64F2470F9656",
            "ns": "VEHICLE",
            "aliases": [
                "0x068F64F2470F9656",
                "_SET_VEHICLE_CREATES_MONEY_PICKUPS_WHEN_EXPLODED"
            ],
            "jhash": "0x4BB5605D",
            "manualHash": true
        },
        "0x45F6D8EEF34ABEF1": {
            "name": "SET_VEHICLE_ENGINE_HEALTH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "health", "type": "float" }
            ],
            "results": "void",
            "description": "```\n1000 is max health\nBegins leaking gas at around 650 health\n-999.90002441406 appears to be minimum health, although nothing special occurs <- false statement\n-------------------------\nMinimum: -4000\nMaximum: 1000\n-4000: Engine is destroyed\n0 and below: Engine catches fire and health rapidly declines\n300: Engine is smoking and losing functionality\n1000: Engine is perfect\n```",
            "examples": [],
            "hash": "0x45F6D8EEF34ABEF1",
            "ns": "VEHICLE",
            "jhash": "0x1B760FB5",
            "manualHash": true
        },
        "0x781B3D62BB013EF5": {
            "name": "SET_VEHICLE_DOORS_SHUT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "closeInstantly", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nCloses all doors of a vehicle:  \n```",
            "examples": [],
            "hash": "0x781B3D62BB013EF5",
            "ns": "VEHICLE",
            "jhash": "0xBB1FF6E7",
            "manualHash": true
        },
        "0x41062318F23ED854": {
            "name": "SET_VEHICLE_EXCLUSIVE_DRIVER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "annotations": { "cs_type": "Ped" }
                }
            ],
            "results": "void",
            "description": "Incorrectly named `SET_VEHICLE_EXCLUSIVE_DRIVER`; likely `SET_VEHICLE_ALLOW_*`.\n\nToggles a flag related to `SET_VEHICLE_EXCLUSIVE_DRIVER`, however, doesn't enable that feature (or trigger script events related to it).\n\nSee [`_SET_VEHICLE_EXCLUSIVE_DRIVER_2`](#\\_0xB5C51B5502E85E83).\n\n```\nNativeDB Removed Parameter 2: int index\n```",
            "examples": [],
            "hash": "0x41062318F23ED854",
            "ns": "VEHICLE",
            "aliases": ["0x41062318F23ED854"],
            "jhash": "0xFF62D324",
            "manualHash": true
        },
        "0xB5C51B5502E85E83": {
            "name": "_SET_VEHICLE_EXCLUSIVE_DRIVER_2",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "ped", "type": "Ped" },
                { "name": "index", "type": "int" }
            ],
            "results": "void",
            "description": "The **actual** [`SET_VEHICLE_EXCLUSIVE_DRIVER`](#\\_0x41062318F23ED854) native.",
            "examples": [],
            "hash": "0xB5C51B5502E85E83",
            "ns": "VEHICLE",
            "aliases": ["0xB5C51B5502E85E83"],
            "jhash": "0xAA8BD440",
            "manualHash": true
        },
        "0x2497C4717C8B881E": {
            "name": "SET_VEHICLE_ENGINE_ON",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to start or stop the engine on."
                },
                {
                    "name": "value",
                    "type": "BOOL",
                    "description": "true to turn the vehicle on; false to turn it off."
                },
                {
                    "name": "instantly",
                    "type": "BOOL",
                    "description": "if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine."
                },
                {
                    "name": "disableAutoStart",
                    "type": "BOOL",
                    "description": "If true, the system will prevent the engine from starting when the player got into it."
                }
            ],
            "results": "void",
            "description": "Starts or stops the engine on the specified vehicle.\nFrom what I've tested when I do this to a helicopter the propellers turn off after the engine has started.",
            "examples": [],
            "hash": "0x2497C4717C8B881E",
            "ns": "VEHICLE",
            "jhash": "0x7FBC86F1",
            "manualHash": true
        },
        "0x983765856F2564F9": {
            "name": "SET_VEHICLE_ENGINE_CAN_DEGRADE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x983765856F2564F9",
            "ns": "VEHICLE",
            "jhash": "0x081DAC12",
            "manualHash": true
        },
        "0x2036F561ADD12E33": {
            "name": "SET_VEHICLE_EXTRA_COLOURS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "pearlescentColor", "type": "int" },
                { "name": "wheelColor", "type": "int" }
            ],
            "results": "void",
            "description": "```\nThey use the same color indexs as SET_VEHICLE_COLOURS.  \n```",
            "examples": [],
            "hash": "0x2036F561ADD12E33",
            "ns": "VEHICLE",
            "jhash": "0x515DB2A0",
            "manualHash": true
        },
        "0x3AFDC536C3D01674": {
            "name": "SET_VEHICLE_ENVEFF_SCALE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Target vehicle"
                },
                {
                    "name": "fade",
                    "type": "float",
                    "description": "The paint fade effect strength"
                }
            ],
            "results": "void",
            "description": "Examples with a besra:\n\n*   [fade value `0.0`](https://i.imgur.com/DXNk63e.jpg)\n*   [fade value `0.5`](https://i.imgur.com/2Vb35fq.jpg)\n*   [fade value `1.0`](https://i.imgur.com/aa8cxaD.jpg)\n\nThe parameter fade is a value from 0-1, where 0 is fresh paint.",
            "examples": [],
            "hash": "0x3AFDC536C3D01674",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_PAINT_FADE"],
            "jhash": "0x8332730C",
            "manualHash": true
        },
        "0x9AA47FFF660CB932": {
            "name": "SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "angle", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9AA47FFF660CB932",
            "ns": "VEHICLE",
            "aliases": [
                "0x9AA47FFF660CB932",
                "_SET_VERTICAL_FLIGHT_PHASE",
                "_SET_PLANE_VTOL_DIRECTION"
            ],
            "jhash": "0xDD7936F5",
            "manualHash": true
        },
        "0x79DF7E806202CE01": {
            "name": "SET_VEHICLE_EXTENDED_REMOVAL_RANGE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "range", "type": "int" }
            ],
            "results": "void",
            "description": "```\nMax value is 32767\n```",
            "examples": [],
            "hash": "0x79DF7E806202CE01",
            "ns": "VEHICLE",
            "aliases": ["0x79DF7E806202CE01"],
            "jhash": "0xAEF9611C",
            "manualHash": true
        },
        "0x7EE3A3C5E4A40CC9": {
            "name": "SET_VEHICLE_EXTRA",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "extraId", "type": "int" },
                { "name": "disable", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNote: only some vehicle have extras  \nextra ids are from 1 - 9 depending on the vehicle  \n-------------------------------------------------  \n^ not sure if outdated or simply wrong. Max extra ID for b944 is 14  \n-------------------------------------------------  \np2 is not a on/off toggle. mostly 0 means on and 1 means off.  \nnot sure if it really should be a BOOL.  \n-------------------------------------------------  \nConfirmed p2 does not work as a bool. Changed to int. [0=on, 1=off]  \n```",
            "examples": [],
            "hash": "0x7EE3A3C5E4A40CC9",
            "ns": "VEHICLE",
            "jhash": "0x642D065C",
            "manualHash": true
        },
        "0x71B0892EC081D60A": {
            "name": "SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.  \n```",
            "examples": [],
            "hash": "0x71B0892EC081D60A",
            "ns": "VEHICLE",
            "jhash": "0x38CC692B",
            "manualHash": true
        },
        "0xB055A34527CB8FD7": {
            "name": "SET_VEHICLE_FORCE_AFTERBURNER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB055A34527CB8FD7",
            "ns": "VEHICLE",
            "aliases": ["0xB055A34527CB8FD7"],
            "jhash": "0xC195803B",
            "manualHash": true
        },
        "0x9A75585FB2E54FAD": {
            "name": "SET_VEHICLE_GENERATOR_AREA_OF_INTEREST",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate of the central point of the area of interest."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate of the central point of the area of interest."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate of the central point of the area of interest."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The radius around the central point, defining the size of the area of interest"
                }
            ],
            "results": "void",
            "description": "Specifies an area of interest where cargens will focus on spawning vehicles\n\nYou can clear the area of interest with [`CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST`](#\\_0x0A436B8643716D14)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example sets the area of interest (cargen) to the player's position with a radius of 100.0\n\n-- Retrieve the player ped\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the coordinates of the player.\nlocal coords = GetEntityCoords(playerPed, false)\n\n-- Set the area of interest to the player's position with a radius of 100.0\nSetVehicleGeneratorAreaOfInterest(coords.x, coords.y, coords.z, 100.0)"
                },
                {
                    "lang": "js",
                    "code": "// This example sets the area of interest (cargen) to the player's position with a radius of 100.0\n\n// Retrieve the player ped\nconst playerPed = PlayerPedId();\n\n// Retrieve the coordinates of the player.\nconst coords = GetEntityCoords(playerPed, false);\n\n// Set the area of interest to the player's position with a radius of 100.0\nSetVehicleGeneratorAreaOfInterest(coords.x, coords.y, coords.z, 100.0);"
                },
                {
                    "lang": "cs",
                    "code": "// This example sets the area of interest (cargen) to the player's position with a radius of 100.0\nusing static CitizenFX.Core.Native.API;\n\n// Retrieve the player ped\nPed playerPed = PlayerPedId();\n\n// Retrieve the coordinates of the player.\nVector3 coords = GetEntityCoords(playerPed, false);\n\n// Set the area of interest to the player's position with a radius of 100.0\nSetVehicleGeneratorAreaOfInterest(coords.X, coords.Y, coords.Z, 100f);"
                }
            ],
            "hash": "0x9A75585FB2E54FAD",
            "ns": "VEHICLE",
            "aliases": ["0x9A75585FB2E54FAD"],
            "jhash": "0x935A95DA",
            "manualHash": true
        },
        "0x30D779DE7C4F6DD3": {
            "name": "SET_VEHICLE_FLIGHT_NOZZLE_POSITION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "angleRatio", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x30D779DE7C4F6DD3",
            "ns": "VEHICLE",
            "aliases": [
                "0x30D779DE7C4F6DD3",
                "_SET_DESIRED_VERTICAL_FLIGHT_PHASE",
                "_SET_PLANE_VTOL_DESIRED_DIRECTION"
            ],
            "jhash": "0xA7DF64D7",
            "manualHash": true
        },
        "0x10655FAB9915623D": {
            "name": "_SET_VEHICLE_HANDLING_HASH_FOR_AI",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "hash",
                    "type": "Hash",
                    "annotations": { "cs_type": "Any" }
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x10655FAB9915623D",
            "ns": "VEHICLE",
            "aliases": ["0x10655FAB9915623D"],
            "manualHash": true
        },
        "0x115722B1B9C14C1C": {
            "name": "SET_VEHICLE_FIXED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle that will be fixed"
                }
            ],
            "results": "void",
            "description": "Fix a given vehicle.\nIf the vehicle's engine's broken then you cannot fix it with this native.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local localPlayerPed = GetPlayerPed(-1)\nlocal localVehicle = GetVehiclePedIsIn(localPlayerPed, false)\nSetVehicleFixed(localVehicle)"
                }
            ],
            "hash": "0x115722B1B9C14C1C",
            "ns": "VEHICLE",
            "jhash": "0x17469AA1",
            "manualHash": true
        },
        "0x8B7FD87F0DDB421E": {
            "name": "SET_VEHICLE_FULLBEAM",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nIt switch to highbeam when p1 is set to true.  \n```",
            "examples": [],
            "hash": "0x8B7FD87F0DDB421E",
            "ns": "VEHICLE",
            "jhash": "0x9C49CC15",
            "manualHash": true
        },
        "0x1AA8A837D2169D94": {
            "name": "SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1AA8A837D2169D94",
            "ns": "VEHICLE",
            "aliases": [
                "0x1AA8A837D2169D94",
                "_SET_VEHICLE_LIGHTS_CAN_BE_VISIBLY_DAMAGED"
            ],
            "jhash": "0x009AB49E",
            "manualHash": true
        },
        "0x1837AF7C627009BA": {
            "name": "SET_VEHICLE_FRICTION_OVERRIDE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "friction", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSeems to be related to the metal parts, not tyres (like i was expecting lol)  \nMust be called every tick.  \n```",
            "examples": [],
            "hash": "0x1837AF7C627009BA",
            "ns": "VEHICLE",
            "jhash": "0x32AFD42E",
            "manualHash": true
        },
        "0xAB54A438726D25D5": {
            "name": "SET_VEHICLE_FORWARD_SPEED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "speed", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.  \nSpeed is in meters per second  \nYou can convert meters/s to mph here:  \nhttp://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm  \n```",
            "examples": [],
            "hash": "0xAB54A438726D25D5",
            "ns": "VEHICLE",
            "jhash": "0x69880D14",
            "manualHash": true
        },
        "0x89F149B6131E57DA": {
            "name": "SET_VEHICLE_GRAVITY",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x89F149B6131E57DA",
            "ns": "VEHICLE",
            "jhash": "0x07B2A6DC",
            "manualHash": true
        },
        "0xB5D45264751B7DF0": {
            "name": "SET_VEHICLE_INDICATOR_LIGHTS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "turnSignal", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSets the turn signal enabled for a vehicle.  \nSet turnSignal to 1 for left light, 0 for right light.  \n```",
            "examples": [],
            "hash": "0xB5D45264751B7DF0",
            "ns": "VEHICLE",
            "jhash": "0xA6073B5D",
            "manualHash": true
        },
        "0x279D50DE5652D935": {
            "name": "SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAllows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events\n```",
            "examples": [],
            "hash": "0x279D50DE5652D935",
            "ns": "VEHICLE",
            "aliases": ["0x279D50DE5652D935"],
            "jhash": "0xB3200F72",
            "manualHash": true
        },
        "0x02398B627547189C": {
            "name": "SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x02398B627547189C",
            "ns": "VEHICLE",
            "aliases": ["0x02398B627547189C"],
            "jhash": "0x08CD58F9",
            "manualHash": true
        },
        "0xF40DD601A65F7F19": {
            "name": "_SET_VEHICLE_INTERIOR_COLOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "color", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xF40DD601A65F7F19",
            "ns": "VEHICLE",
            "aliases": ["_SET_VEHICLE_INTERIOR_COLOUR"],
            "manualHash": true
        },
        "0x2B5F9D2AF1F1722D": {
            "name": "SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "owned", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2B5F9D2AF1F1722D",
            "ns": "VEHICLE",
            "jhash": "0xB4D3DBFB",
            "manualHash": true
        },
        "0xD8050E0EB60CF274": {
            "name": "SET_VEHICLE_HAS_MUTED_SIRENS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xD8050E0EB60CF274",
            "ns": "VEHICLE",
            "aliases": [
                "DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION",
                "_SET_DISABLE_VEHICLE_SIREN_SOUND"
            ],
            "jhash": "0xC54156A9",
            "manualHash": true
        },
        "0x31B927BBC44156CD": {
            "name": "SET_VEHICLE_IS_CONSIDERED_BY_PLAYER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSetting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.  \n```",
            "examples": [],
            "hash": "0x31B927BBC44156CD",
            "ns": "VEHICLE",
            "jhash": "0x14413319",
            "manualHash": true
        },
        "0x684785568EF26A22": {
            "name": "SET_VEHICLE_HANDBRAKE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x684785568EF26A22",
            "ns": "VEHICLE",
            "jhash": "0xBA729A25",
            "manualHash": true
        },
        "0x0AD9E8F87FF7C16F": {
            "name": "SET_VEHICLE_INFLUENCES_WANTED_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The specific vehicle to be set for influencing the wanted level."
                },
                {
                    "name": "influenceWantedLevel",
                    "type": "BOOL",
                    "description": "A boolean value. Set to `true` to make the vehicle influence the wanted level; `false` to prevent it from doing so."
                }
            ],
            "results": "void",
            "description": "This native sets whether a specific vehicle influences the player's wanted level when it is involved in an incident that typically triggers a wanted response, such as being marked as a \"victim\" vehicle.\n\nThis is particularly useful when utilizing the wanted system from GTA, and you want to prevent a vehicle from affecting the wanted level when it is stolen. In the decompiled scripts this native is only used to disable the influence of the vehicle on the wanted level.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example will prevent the closest vehicle from influencing the wanted level.\n\n-- Retrieve the LocalPlayer\nlocal playerPed = PlayerPedId()\n\n-- Retrieve the coordinates of the player.\nlocal playerCoords = GetEntityCoords(playerPed)\n\n-- Retrieve the closest vehicle.\nlocal vehicle = GetClosestVehicle(playerCoords.x, playerCoords.y, playerCoords.z, 3, 0, 70)\n\n-- Check if the vehicle exists in the game world.\nif not DoesEntityExist(vehicle) then \n    -- If the vehicle does not exist, end the execution of the code here.\n    return \nend\n\n-- Set the vehicle to not influence the wanted level.\nSetVehicleInfluencesWantedLevel(vehicle, false)"
                },
                {
                    "lang": "js",
                    "code": "// This example will prevent the closest vehicle from influencing the wanted level.\n\n// Retrieve the LocalPlayer\nconst playerPed = PlayerPedId();\n\n// Retrieve the coordinates of the player.\nconst [playerX, playerY, playerZ] = GetEntityCoords(playerPed);\n\n// Retrieve the closest vehicle.\nconst vehicle = GetClosestVehicle(playerX, playerY, playerZ, 3, 0, 70)\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle)) {\n  // If the vehicle does not exist, end the execution of the code here.\n  return;\n}\n\n// Set the vehicle to not influence the wanted level.\nSetVehicleInfluencesWantedLevel(vehicle, false);"
                },
                {
                    "lang": "cs",
                    "code": "// This example will prevent the closest vehicle from influencing the wanted level.\nusing static CitizenFX.Core.Native.API;\n\n// Retrieve the LocalPlayer\nPed playerPed = PlayerPedId();\n\n// Retrive the coordinates of the player.\nVector3 playerCoords = GetEntityCoords(playerPed);\n\n// Retrieve the closest vehicle.\nVehicle vehicle = GetClosestVehicle(playerCoords.X, playerCoords.Y, playerCoords.Z, 3, 0, 70);\n\n// Check if the vehicle exists in the game world.\nif (!DoesEntityExist(vehicle))\n{\n    // If the vehicle does not exist, end the execution of the code here.\n    return;\n}\n\n// Set the vehicle to not influence the wanted level.\nSetVehicleInfluencesWantedLevel(vehicle, false);"
                }
            ],
            "hash": "0x0AD9E8F87FF7C16F",
            "ns": "VEHICLE",
            "aliases": ["0x0AD9E8F87FF7C16F"],
            "jhash": "0x04F5546C",
            "manualHash": true
        },
        "0x67B2C79AA7FF5738": {
            "name": "SET_VEHICLE_IS_STOLEN",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "isStolen", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x67B2C79AA7FF5738",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x70912E42",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x06582AFF74894C75": {
            "name": "SET_VEHICLE_INACTIVE_DURING_PLAYBACK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x06582AFF74894C75",
            "ns": "VEHICLE",
            "aliases": ["0x06582AFF74894C75"],
            "jhash": "0x50F89338",
            "manualHash": true
        },
        "0x92F0CF722BC4202F": {
            "name": "SET_VEHICLE_HAS_STRONG_AXLES",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nif true, axles won't bend.  \n```",
            "examples": [],
            "hash": "0x92F0CF722BC4202F",
            "ns": "VEHICLE",
            "jhash": "0x0D1CBC65",
            "manualHash": true
        },
        "0xBC2042F090AF6AD3": {
            "name": "SET_VEHICLE_INTERIORLIGHT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBC2042F090AF6AD3",
            "ns": "VEHICLE",
            "jhash": "0x9AD1FE1E",
            "manualHash": true
        },
        "0x07116E24E9D1929D": {
            "name": "SET_VEHICLE_IS_RACING",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\np1 (toggle) was always 1 (true) except in one case in the b678 scripts.  \n```",
            "examples": [],
            "hash": "0x07116E24E9D1929D",
            "ns": "VEHICLE",
            "aliases": ["STEER_UNLOCK_BIAS"],
            "jhash": "0xA59E3DCD",
            "manualHash": true
        },
        "0xBE70724027F85BCD": {
            "name": "SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "doorIndex",
                    "type": "int",
                    "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)"
                },
                {
                    "name": "doorLockStatus",
                    "type": "int",
                    "description": "See eCarLock declared in [`SET_VEHICLE_DOORS_LOCKED`](#\\_0xB664292EAECF7FA6)"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xBE70724027F85BCD",
            "ns": "VEHICLE",
            "aliases": [
                "SET_PED_TARGETTABLE_VEHICLE_DESTROY",
                "_SET_VEHICLE_DOOR_DESTROY_TYPE"
            ],
            "jhash": "0xD61D182D",
            "manualHash": true
        },
        "0x60BF608F1B8CD1B6": {
            "name": "SET_VEHICLE_LIVERY",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "livery", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x60BF608F1B8CD1B6",
            "ns": "VEHICLE",
            "jhash": "0x7AD87059",
            "manualHash": true
        },
        "0xB8FBC8B1330CA9B4": {
            "name": "SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "`true` to keep the engine on, otherwise `false`."
                }
            ],
            "results": "void",
            "description": "Calling this native will keep a vehicle's engine running after exiting.",
            "examples": [],
            "hash": "0xB8FBC8B1330CA9B4",
            "ns": "VEHICLE",
            "aliases": ["0xB8FBC8B1330CA9B4", "_SET_VEHICLE_JET_ENGINE_ON"],
            "jhash": "0x51E0064F",
            "manualHash": true
        },
        "0x6AF0636DDEDCB6DD": {
            "name": "SET_VEHICLE_MOD",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "modType", "type": "int" },
                { "name": "modIndex", "type": "int" },
                { "name": "customTires", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```cpp\n// eVehicleModType values modified to conform to script native reorganization (see 0x140D25327 in 1604).\nenum eVehicleModType\n{\n\tVMT_SPOILER = 0,\n\tVMT_BUMPER_F = 1,\n\tVMT_BUMPER_R = 2,\n\tVMT_SKIRT = 3,\n\tVMT_EXHAUST = 4,\n\tVMT_CHASSIS = 5,\n\tVMT_GRILL = 6,\n\tVMT_BONNET = 7,\n\tVMT_WING_L = 8,\n\tVMT_WING_R = 9,\n\tVMT_ROOF = 10,\n\tVMT_ENGINE = 11,\n\tVMT_BRAKES = 12,\n\tVMT_GEARBOX = 13,\n\tVMT_HORN = 14,\n\tVMT_SUSPENSION = 15,\n\tVMT_ARMOUR = 16,\n\tVMT_NITROUS = 17,\n\tVMT_TURBO = 18,\n\tVMT_SUBWOOFER = 19,\n\tVMT_TYRE_SMOKE = 20,\n\tVMT_HYDRAULICS = 21,\n\tVMT_XENON_LIGHTS = 22,\n\tVMT_WHEELS = 23,\n\tVMT_WHEELS_REAR_OR_HYDRAULICS = 24,\n\tVMT_PLTHOLDER = 25,\n\tVMT_PLTVANITY = 26,\n\tVMT_INTERIOR1 = 27,\n\tVMT_INTERIOR2 = 28,\n\tVMT_INTERIOR3 = 29,\n\tVMT_INTERIOR4 = 30,\n\tVMT_INTERIOR5 = 31,\n\tVMT_SEATS = 32,\n\tVMT_STEERING = 33,\n\tVMT_KNOB = 34,\n\tVMT_PLAQUE = 35,\n\tVMT_ICE = 36,\n\tVMT_TRUNK = 37,\n\tVMT_HYDRO = 38,\n\tVMT_ENGINEBAY1 = 39,\n\tVMT_ENGINEBAY2 = 40,\n\tVMT_ENGINEBAY3 = 41,\n\tVMT_CHASSIS2 = 42,\n\tVMT_CHASSIS3 = 43,\n\tVMT_CHASSIS4 = 44,\n\tVMT_CHASSIS5 = 45,\n\tVMT_DOOR_L = 46,\n\tVMT_DOOR_R = 47,\n\tVMT_LIVERY_MOD = 48,\n\tVMT_LIGHTBAR = 49,\n};\n```",
            "examples": [],
            "hash": "0x6AF0636DDEDCB6DD",
            "ns": "VEHICLE",
            "jhash": "0xB52E5ED5",
            "manualHash": true
        },
        "0xB385454F8791F57C": {
            "name": "SET_VEHICLE_LIGHT_MULTIPLIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "```\nmultiplier = brightness of head lights.  \nthis value isn't capped afaik.  \nmultiplier = 0.0 no lights  \nmultiplier = 1.0 default game value  \n```",
            "examples": [],
            "hash": "0xB385454F8791F57C",
            "ns": "VEHICLE",
            "jhash": "0x48039D6A",
            "manualHash": true
        },
        "0x816562BADFDEC83E": {
            "name": "SET_VEHICLE_MOD_COLOR_2",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "paintType", "type": "int" },
                { "name": "color", "type": "int" }
            ],
            "results": "void",
            "description": "```\nChanges the secondary paint type and color  \npaintType:  \n0: Normal  \n1: Metallic  \n2: Pearl  \n3: Matte  \n4: Metal  \n5: Chrome  \ncolor: number of the color  \n```",
            "examples": [],
            "hash": "0x816562BADFDEC83E",
            "ns": "VEHICLE",
            "jhash": "0xC32613C2",
            "manualHash": true
        },
        "0x34E710FF01247C5A": {
            "name": "SET_VEHICLE_LIGHTS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "int" }
            ],
            "results": "void",
            "description": "```\nset's if the vehicle has lights or not.  \nnot an on off toggle.  \np1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams  \np1 = 1 ;vehicle doesn't have lights, always off  \np1 = 2 ;vehicle has always on lights  \np1 = 3 ;or even larger like 4,5,... normal lights like =1  \nnote1: when using =2 on day it's lowbeam,highbeam  \nbut at night it's lowbeam,lowbeam,highbeam  \nnote2: when using =0 it's affected by day or night for highbeams don't exist in daytime.  \n```",
            "examples": [],
            "hash": "0x34E710FF01247C5A",
            "ns": "VEHICLE",
            "jhash": "0xE8930226",
            "manualHash": true
        },
        "0x1FD09E7390A74D54": {
            "name": "_SET_VEHICLE_LIGHTS_MODE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "int" }
            ],
            "results": "void",
            "description": "```\np1 can be either 0, 1 or 2.  \nDetermines how vehicle lights behave when toggled.  \n0 = Default (Lights can be toggled between off, normal and high beams)  \n1 = Lights Disabled (Lights are fully disabled, cannot be toggled)  \n2 = Always On (Lights can be toggled between normal and high beams)  \n```",
            "examples": [],
            "hash": "0x1FD09E7390A74D54",
            "ns": "VEHICLE",
            "aliases": ["0x1FD09E7390A74D54"],
            "manualHash": true
        },
        "0xBAA045B4E42F3C06": {
            "name": "_SET_VEHICLE_MAX_SPEED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "The speed limit in meters per second."
                }
            ],
            "results": "void",
            "description": "To reset the max speed, set the `speed` value to `0.0` or lower.",
            "examples": [],
            "hash": "0xBAA045B4E42F3C06",
            "ns": "VEHICLE",
            "aliases": ["0xBAA045B4E42F3C06"],
            "manualHash": true
        },
        "0xF7EC25A3EBEEC726": {
            "name": "SET_VEHICLE_IS_WANTED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "state", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSets the wanted state of this vehicle.  \n```",
            "examples": [],
            "hash": "0xF7EC25A3EBEEC726",
            "ns": "VEHICLE",
            "jhash": "0xDAA388E8",
            "manualHash": true
        },
        "0x1F2AA07F00B3217A": {
            "name": "SET_VEHICLE_MOD_KIT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "modKit", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSet modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.\n```",
            "examples": [],
            "hash": "0x1F2AA07F00B3217A",
            "ns": "VEHICLE",
            "jhash": "0xB8132158",
            "manualHash": true
        },
        "0xFBA550EA44404EE6": {
            "name": "SET_VEHICLE_NEEDS_TO_BE_HOTWIRED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFBA550EA44404EE6",
            "ns": "VEHICLE",
            "jhash": "0xD8260751",
            "manualHash": true
        },
        "0x43FEB945EE7F85B8": {
            "name": "SET_VEHICLE_MOD_COLOR_1",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "paintType", "type": "int" },
                { "name": "color", "type": "int" },
                { "name": "pearlescentColor", "type": "int" }
            ],
            "results": "void",
            "description": "```\npaintType:  \n0: Normal  \n1: Metallic  \n2: Pearl  \n3: Matte  \n4: Metal  \n5: Chrome  \ncolor: number of the color.  \np3 seems to always be 0.  \n```",
            "examples": [],
            "hash": "0x43FEB945EE7F85B8",
            "ns": "VEHICLE",
            "jhash": "0xCBE9A54D",
            "manualHash": true
        },
        "0x99C82F8A139F3E4E": {
            "name": "SET_VEHICLE_KERS_ALLOWED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x99C82F8A139F3E4E",
            "ns": "VEHICLE",
            "aliases": [
                "0x99C82F8A139F3E4E",
                "_SET_VEHICLE_HUD_SPECIAL_ABILITY_BAR_ACTIVE"
            ],
            "jhash": "0x71CDD52F",
            "manualHash": true
        },
        "0xC8E9B6B71B8E660D": {
            "name": "_SET_VEHICLE_NITRO_ENABLED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1604\nNativeDB Added Parameter 2 (2060): float level\nNativeDB Added Parameter 3 (2060): float power\nNativeDB Added Parameter 4 (2060): float rechargeTime\nNativeDB Added Parameter 5 (2060): BOOL disableSound\n```",
            "examples": [],
            "hash": "0xC8E9B6B71B8E660D",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x2AA720E4287BF269": {
            "name": "_SET_VEHICLE_NEON_LIGHT_ENABLED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "index", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSets the neon lights of the specified vehicle on/off.  \nIndices:  \n0 = Left  \n1 = Right  \n2 = Front  \n3 = Back  \n```",
            "examples": [],
            "hash": "0x2AA720E4287BF269",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x93AE6A61BE015BF1": {
            "name": "SET_VEHICLE_LOD_MULTIPLIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x93AE6A61BE015BF1",
            "ns": "VEHICLE",
            "jhash": "0x569E5AE3",
            "manualHash": true
        },
        "0xBFDF984E2C22B94F": {
            "name": "SET_VEHICLE_NAME_DEBUG",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "name", "type": "char*" }
            ],
            "results": "void",
            "description": "```\nNOTE: Debugging functions are not present in the retail version of the game.  \n```",
            "examples": [],
            "hash": "0xBFDF984E2C22B94F",
            "ns": "VEHICLE",
            "jhash": "0xA712FF5C",
            "manualHash": true
        },
        "0x8E0A582209A62695": {
            "name": "_SET_VEHICLE_NEON_LIGHTS_COLOUR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "void",
            "description": "Sets the color of the neon lights on the specified vehicle.\n\nRGB values and colour names taken from the decompiled scripts:\n\n| Colour         |  R  |  G  |  B  |\n|---------------|:---:|:---:|:---:|\n| White         | 222 | 222 | 255 |\n| Blue          | 2   | 21  | 255 |\n| Electric Blue | 3   | 83  | 255 |\n| Mint Green    | 0   | 255 | 140 |\n| Lime Green    | 94  | 255 | 1   |\n| Yellow        | 255 | 255 | 0   |\n| Golden Shower | 255 | 150 | 0   |\n| Orange        | 255 | 62  | 0   |\n| Red           | 255 | 1   | 1   |\n| Pony Pink     | 255 | 50  | 100 |\n| Hot Pink      | 255 | 5   | 190 |\n| Purple        | 35  | 1   | 255 |\n| Blacklight    | 15  | 3   | 255 |",
            "examples": [],
            "hash": "0x8E0A582209A62695",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x0BFFB028B3DD0A97": {
            "name": "_SET_VEHICLE_PARACHUTE_ACTIVE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "active", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0BFFB028B3DD0A97",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x95A88F0B409CDA47": {
            "name": "SET_VEHICLE_NUMBER_PLATE_TEXT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set the plate for"
                },
                {
                    "name": "plateText",
                    "type": "char*",
                    "description": "The text to set the plate to, 8 chars maximum"
                }
            ],
            "results": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\nlocal vehicle = GetVehiclePedIsIn(playerPed)\nSetVehicleNumberPlateText(vehicle, \"KING\")"
                }
            ],
            "hash": "0x95A88F0B409CDA47",
            "ns": "VEHICLE",
            "jhash": "0x400F9556",
            "manualHash": true
        },
        "0xA74AD2439468C883": {
            "name": "_SET_VEHICLE_PARACHUTE_TEXTURE_VARIATION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "textureVariation", "type": "int" }
            ],
            "results": "void",
            "description": "```\ncolorIndex = 0 - 7\n```",
            "examples": [],
            "hash": "0xA74AD2439468C883",
            "ns": "VEHICLE",
            "aliases": [
                "_VEHICLE_SET_CUSTOM_PARACHUTE_TEXTURE",
                "_SET_VEHICLE_PARACHUTE_TEXTURE_VARIATIION"
            ],
            "manualHash": true
        },
        "0x0FC2D89AC25A5814": {
            "name": "SET_VEHICLE_MODEL_IS_SUPPRESSED",
            "params": [
                { "name": "model", "type": "Hash" },
                { "name": "suppressed", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nseems to make the vehicle stop spawning naturally in traffic. Here's an essential example:  \nVEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(GAMEPLAY::GET_HASH_KEY(\"taco\"), true);  \n```",
            "examples": [],
            "hash": "0x0FC2D89AC25A5814",
            "ns": "VEHICLE",
            "jhash": "0x42A08C9B",
            "manualHash": true
        },
        "0x9088EB5A43FFB0A1": {
            "name": "SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "plateIndex", "type": "int" }
            ],
            "results": "void",
            "description": "```\nPlates:\nBlue/White - 0\nYellow/black - 1\nYellow/Blue - 2\nBlue/White2 - 3\nBlue/White3 - 4\nYankton - 5\n```",
            "examples": [],
            "hash": "0x9088EB5A43FFB0A1",
            "ns": "VEHICLE",
            "jhash": "0xA1A1890E",
            "manualHash": true
        },
        "0x1BBAC99C0BC53656": {
            "name": "_SET_VEHICLE_RAMP_SIDEWAYS_LAUNCH_MOTION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1BBAC99C0BC53656",
            "ns": "VEHICLE",
            "aliases": ["0x1BBAC99C0BC53656"],
            "manualHash": true
        },
        "0x49733E92263139D1": {
            "name": "SET_VEHICLE_ON_GROUND_PROPERLY",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "BOOL",
            "description": "```\nSets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.  \n```\n\n```\nNativeDB Added Parameter 2: float p1\n```",
            "examples": [],
            "hash": "0x49733E92263139D1",
            "ns": "VEHICLE",
            "jhash": "0xE14FDBA6",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x4D610C6B56031351": {
            "name": "_SET_VEHICLE_PARACHUTE_MODEL",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "modelHash", "type": "Hash" }
            ],
            "results": "void",
            "description": "```\nparachuteModel = 230075693  \n```",
            "examples": [],
            "hash": "0x4D610C6B56031351",
            "ns": "VEHICLE",
            "aliases": ["_VEHICLE_SET_CUSTOM_PARACHUTE_MODEL"],
            "manualHash": true
        },
        "0xB93B2867F7B479D1": {
            "name": "_SET_VEHICLE_NEON_LIGHTS_COLOR_2",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "color", "type": "int" }
            ],
            "results": "void",
            "description": "```\nNativeDB Introduced: v1493\n```",
            "examples": [],
            "hash": "0xB93B2867F7B479D1",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x5AFEEDD9BB2899D7": {
            "name": "SET_VEHICLE_PROVIDES_COVER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x5AFEEDD9BB2899D7",
            "ns": "VEHICLE",
            "jhash": "0xEFC01CA9",
            "manualHash": true
        },
        "0xF19D095E42D430CC": {
            "name": "SET_VEHICLE_OUT_OF_CONTROL",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "killDriver", "type": "BOOL" },
                { "name": "explodeOnImpact", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nTested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.  \n```",
            "examples": [],
            "hash": "0xF19D095E42D430CC",
            "ns": "VEHICLE",
            "jhash": "0x3764D734",
            "manualHash": true
        },
        "0x756AE6E962168A04": {
            "name": "_SET_VEHICLE_RAMP_UPWARDS_LAUNCH_MOTION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x756AE6E962168A04",
            "ns": "VEHICLE",
            "aliases": ["0x756AE6E962168A04"],
            "manualHash": true
        },
        "0x70DB57649FA8D0D8": {
            "name": "SET_VEHICLE_PETROL_TANK_HEALTH",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "health", "type": "float" }
            ],
            "results": "void",
            "description": "```\n1000 is max health  \nBegins leaking gas at around 650 health  \n```",
            "examples": [],
            "hash": "0x70DB57649FA8D0D8",
            "ns": "VEHICLE",
            "jhash": "0x660A3692",
            "manualHash": true
        },
        "0xEFC13B1CE30D755D": {
            "name": "_SET_VEHICLE_RAMP_LAUNCH_MODIFIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xEFC13B1CE30D755D",
            "ns": "VEHICLE",
            "aliases": ["0xEFC13B1CE30D755D"],
            "manualHash": true
        },
        "0x28D034A93FE31BF5": {
            "name": "_SET_VEHICLE_RECEIVES_RAMP_DAMAGE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x28D034A93FE31BF5",
            "ns": "VEHICLE",
            "aliases": ["_SET_RAMP_VEHICLE_RECEIVES_RAMP_DAMAGE"],
            "manualHash": true
        },
        "0x222FF6A823D122E2": {
            "name": "SET_VEHICLE_REDUCE_GRIP",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nReduces grip significantly so it's hard to go anywhere.  \n```",
            "examples": [],
            "hash": "0x222FF6A823D122E2",
            "ns": "VEHICLE",
            "jhash": "0x90D3A0D9",
            "manualHash": true
        },
        "0x81E1552E35DC3839": {
            "name": "_SET_VEHICLE_ROCKET_BOOST_ACTIVE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "active", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x81E1552E35DC3839",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0x6DEE944E1EE90CFB": {
            "name": "_SET_VEHICLE_REDUCE_TRACTION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "val",
                    "type": "int",
                    "annotations": { "cs_type": "BOOL" }
                }
            ],
            "results": "void",
            "description": "Often used in conjunction with: [SET_VEHICLE_REDUCE_GRIP](#\\_0x222FF6A823D122E2).\n\n```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x6DEE944E1EE90CFB",
            "ns": "VEHICLE",
            "aliases": ["0x6DEE944E1EE90CFB"],
            "manualHash": true
        },
        "0xFEB2DDED3509562E": {
            "name": "_SET_VEHICLE_ROCKET_BOOST_PERCENTAGE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "percentage", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xFEB2DDED3509562E",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xE00F2AB100B76E89": {
            "name": "_SET_VEHICLE_ROCKET_BOOST_REFILL_TIME",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "time", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xE00F2AB100B76E89",
            "ns": "VEHICLE",
            "manualHash": true
        },
        "0xF0E4BA16D1DB546C": {
            "name": "_SET_VEHICLE_SHADOW_EFFECT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "p1", "type": "int" },
                { "name": "p2", "type": "int" }
            ],
            "results": "void",
            "description": "```\nAdds some kind of shadow to the vehicle.\n-1 disables the effect.\nDISABLE_*\n```",
            "examples": [],
            "hash": "0xF0E4BA16D1DB546C",
            "ns": "VEHICLE",
            "aliases": ["0xF0E4BA16D1DB546C"],
            "jhash": "0x5BD8D82D",
            "manualHash": true
        },
        "0x09606148B6C71DEF": {
            "name": "SET_VEHICLE_RUDDER_BROKEN",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x09606148B6C71DEF",
            "ns": "VEHICLE",
            "jhash": "0x3FAC3CD4",
            "manualHash": true
        },
        "0x9D44FCCE98450843": {
            "name": "_SET_VEHICLE_SILENT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nIf set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.  \n```",
            "examples": [],
            "hash": "0x9D44FCCE98450843",
            "ns": "VEHICLE",
            "aliases": ["0x9D44FCCE98450843"],
            "jhash": "0x968E5770",
            "manualHash": true
        },
        "0x9007A2F21DC108D4": {
            "name": "SET_VEHICLE_STEERING_BIAS_SCALAR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "scalar", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x9007A2F21DC108D4",
            "ns": "VEHICLE",
            "aliases": ["0x9007A2F21DC108D4"],
            "jhash": "0x585E49B6",
            "manualHash": true
        },
        "0xA6D3A8750DC73270": {
            "name": "_SET_VEHICLE_ROOF_LIVERY",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "livery",
                    "type": "int",
                    "description": "Livery index."
                }
            ],
            "results": "void",
            "description": "Used to set the tornado custom (convertible) rooftop livery.\n\nLivery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even.\n\nMight work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom.",
            "examples": [],
            "hash": "0xA6D3A8750DC73270",
            "ns": "VEHICLE",
            "aliases": ["0xA6D3A8750DC73270"],
            "manualHash": true
        },
        "0x14E85C5EE7A4D542": {
            "name": "SET_VEHICLE_SEARCHLIGHT",
            "params": [
                { "name": "heli", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" },
                { "name": "canBeUsedByAI", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nOnly works during nighttime.\n```",
            "examples": [],
            "hash": "0x14E85C5EE7A4D542",
            "ns": "VEHICLE",
            "jhash": "0xE2C0DD8A",
            "manualHash": true
        },
        "0xF4924635A19EB37D": {
            "name": "SET_VEHICLE_SIREN",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nActivate siren on vehicle (Only works if the vehicle has a siren).  \n```",
            "examples": [],
            "hash": "0xF4924635A19EB37D",
            "ns": "VEHICLE",
            "jhash": "0x4AC1EFC7",
            "manualHash": true
        },
        "0x3E8C8727991A8A0B": {
            "name": "SET_VEHICLE_STRONG",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nIf set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives  \n```",
            "examples": [],
            "hash": "0x3E8C8727991A8A0B",
            "ns": "VEHICLE",
            "jhash": "0xC758D19F",
            "manualHash": true
        },
        "0x74CD9A9327A282EA": {
            "name": "SET_VEHICLE_SHOOT_AT_TARGET",
            "params": [
                { "name": "driver", "type": "Ped" },
                { "name": "entity", "type": "Entity" },
                { "name": "xTarget", "type": "float" },
                { "name": "yTarget", "type": "float" },
                { "name": "zTarget", "type": "float" }
            ],
            "results": "void",
            "description": "```\nCommands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:  \nWEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,GAMEPLAY::GET_HASH_KEY(\"VEHICLE_WEAPON_PLANE_ROCKET\"));VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);  \n```",
            "examples": [],
            "hash": "0x74CD9A9327A282EA",
            "ns": "VEHICLE",
            "jhash": "0x2343FFDF",
            "manualHash": true
        },
        "0x42A8EC77D5150CBE": {
            "name": "SET_VEHICLE_STEER_BIAS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "value", "type": "float" }
            ],
            "results": "void",
            "description": "```\nLocks the vehicle's steering to the desired angle, explained below.  \nRequires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.  \nSteer bias:  \n-1.0 = full right  \n0.0 = centered steering  \n1.0 = full left  \n```",
            "examples": [],
            "hash": "0x42A8EC77D5150CBE",
            "ns": "VEHICLE",
            "jhash": "0x7357C1EB",
            "manualHash": true
        },
        "0x2E0A74E1002380B1": {
            "name": "SET_VEHICLE_TIMED_EXPLOSION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "ped", "type": "Ped" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2E0A74E1002380B1",
            "ns": "VEHICLE",
            "jhash": "0xDB8CB8E2",
            "manualHash": true
        },
        "0x1CF38D529D7441D9": {
            "name": "_SET_VEHICLE_ST",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nHas something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.  \n============================================  \nMay be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.  \nBtw, func_1333 ends up calling this func which uses this native,  \nvoid func_1338(int iParam0)//Position   \n{  \n\tENTITY::FREEZE_ENTITY_POSITION(iParam0, true);  \n\tENTITY::SET_ENTITY_COLLISION(iParam0, false, 0);  \n\tENTITY::SET_ENTITY_INVINCIBLE(iParam0, true);  \n\tVEHICLE::_0xDF594D8D(iParam0, true);  \n}  \n```",
            "examples": [],
            "hash": "0x1CF38D529D7441D9",
            "ns": "VEHICLE",
            "aliases": ["0x1CF38D529D7441D9"],
            "jhash": "0xDF594D8D",
            "manualHash": true
        },
        "0x1093408B4B9D1146": {
            "name": "SET_VEHICLE_TURRET_SPEED_THIS_FRAME",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "speed", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1093408B4B9D1146",
            "ns": "VEHICLE",
            "aliases": ["0x1093408B4B9D1146"],
            "jhash": "0xF30C566F",
            "manualHash": true
        },
        "0xFE54B92A344583CA": {
            "name": "SET_VEHICLE_TOW_TRUCK_ARM_POSITION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "position", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.  \n```",
            "examples": [],
            "hash": "0xFE54B92A344583CA",
            "ns": "VEHICLE",
            "aliases": [
                "_SET_TOW_TRUCK_CRANE_RAISED",
                "_SET_TOW_TRUCK_CRANE_HEIGHT"
            ],
            "jhash": "0x88236E22",
            "manualHash": true
        },
        "0x56B94C6D7127DFBA": {
            "name": "SET_VEHICLE_TANK_TURRET_POSITION",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "position", "type": "float" },
                { "name": "p2", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x56B94C6D7127DFBA",
            "ns": "VEHICLE",
            "aliases": ["0x56B94C6D7127DFBA"],
            "jhash": "0xB1A52EF7",
            "manualHash": true
        },
        "0xEC6A202EE4960385": {
            "name": "SET_VEHICLE_TYRE_BURST",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "index", "type": "int" },
                { "name": "onRim", "type": "BOOL" },
                { "name": "p3", "type": "float" }
            ],
            "results": "void",
            "description": "```\n\"To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)  \nto burst all tyres type it 8 times where p1 = 0 to 7.  \np3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n```",
            "examples": [],
            "hash": "0xEC6A202EE4960385",
            "ns": "VEHICLE",
            "jhash": "0x89D28068",
            "manualHash": true
        },
        "0xB5BA80F839791C0F": {
            "name": "SET_VEHICLE_TYRE_SMOKE_COLOR",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "r", "type": "int" },
                { "name": "g", "type": "int" },
                { "name": "b", "type": "int" }
            ],
            "results": "void",
            "description": "```\nSets the tire smoke's color of this vehicle.  \nvehicle: The vehicle that is the target of this method.  \nr: The red level in the RGB color code.  \ng: The green level in the RGB color code.  \nb: The blue level in the RGB color code.  \nNote:  \nsetting r,g,b to 0 will give the car independance day tyre smoke  \n```",
            "examples": [],
            "hash": "0xB5BA80F839791C0F",
            "ns": "VEHICLE",
            "jhash": "0x3EDEC0DB",
            "manualHash": true
        },
        "0xEB9DC3C7D8596C46": {
            "name": "SET_VEHICLE_TYRES_CAN_BURST",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nAllows you to toggle bulletproof tires.  \n```",
            "examples": [],
            "hash": "0xEB9DC3C7D8596C46",
            "ns": "VEHICLE",
            "jhash": "0xA198DB54",
            "manualHash": true
        },
        "0x6E13FC662B882D1D": {
            "name": "SET_VEHICLE_TYRE_FIXED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "tyreIndex", "type": "int" }
            ],
            "results": "void",
            "description": "```\ntyreIndex = 0 to 4 on normal vehicles  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n```",
            "examples": [],
            "hash": "0x6E13FC662B882D1D",
            "ns": "VEHICLE",
            "jhash": "0xA42EFA6B",
            "manualHash": true
        },
        "0xC60060EB0D8AC7B1": {
            "name": "_SET_VEHICLE_TURRET_UNK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "index", "type": "int" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nToggles specific flag on turret\n```\n\n```\nNativeDB Introduced: v1290\n```",
            "examples": [],
            "hash": "0xC60060EB0D8AC7B1",
            "ns": "VEHICLE",
            "aliases": ["0xC60060EB0D8AC7B1"],
            "manualHash": true
        },
        "0x8ABA6AF54B942B95": {
            "name": "SET_VEHICLE_UNDRIVEABLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8ABA6AF54B942B95",
            "ns": "VEHICLE",
            "jhash": "0x48D02A4E",
            "manualHash": true
        },
        "0xC45C27EF50F36ADC": {
            "name": "SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xC45C27EF50F36ADC",
            "ns": "VEHICLE",
            "aliases": [
                "0xC45C27EF50F36ADC",
                "_SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS"
            ],
            "jhash": "0x4221E435",
            "manualHash": true
        },
        "0x45A561A9421AB6AD": {
            "name": "_SET_VEHICLE_UNK_DAMAGE_MULTIPLIER",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "multiplier", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x45A561A9421AB6AD",
            "ns": "VEHICLE",
            "aliases": ["0x45A561A9421AB6AD"],
            "manualHash": true
        },
        "0x1D97D1E3A70A649F": {
            "name": "SET_VEHICLE_USE_ALTERNATE_HANDLING",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x1D97D1E3A70A649F",
            "ns": "VEHICLE",
            "aliases": ["0x1D97D1E3A70A649F"],
            "jhash": "0xA03E42DF",
            "manualHash": true
        },
        "0x86B4B6212CB8B627": {
            "name": "_SET_VEHICLE_WEAPONS_DISABLED",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "weaponSlot", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x86B4B6212CB8B627",
            "ns": "VEHICLE",
            "aliases": ["0x86B4B6212CB8B627"],
            "manualHash": true
        },
        "0x44CD1F493DB2A0A6": {
            "name": "_SET_VEHICLE_WEAPON_CAPACITY",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "weaponIndex", "type": "int" },
                { "name": "capacity", "type": "int" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x44CD1F493DB2A0A6",
            "ns": "VEHICLE",
            "aliases": ["0x44CD1F493DB2A0A6"],
            "manualHash": true
        },
        "0xE023E8AC4EF7C117": {
            "name": "SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION",
            "params": [
                { "name": "p0", "type": "Vehicle" },
                { "name": "p1", "type": "BOOL" },
                { "name": "p2", "type": "BOOL" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "Any",
            "description": "",
            "examples": [],
            "hash": "0xE023E8AC4EF7C117",
            "ns": "VEHICLE",
            "aliases": ["SET_ALL_VEHICLES_SPAWN", "0xE023E8AC4EF7C117"],
            "jhash": "0xA0909ADB",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xCAC66558B944DA67": {
            "name": "SET_VEHICLE_USES_LARGE_REAR_RAMP",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nvehicle must be a plane\n```",
            "examples": [],
            "hash": "0xCAC66558B944DA67",
            "ns": "VEHICLE",
            "aliases": ["0xCAC66558B944DA67"],
            "jhash": "0x0B200CE2",
            "manualHash": true
        },
        "0x29B18B4FD460CA8F": {
            "name": "SET_VEHICLE_WHEELS_CAN_BREAK",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "enabled", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x29B18B4FD460CA8F",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x829ED654",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x487EB21CC7295BA1": {
            "name": "SET_VEHICLE_WHEEL_TYPE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "wheelType", "type": "int" }
            ],
            "results": "void",
            "description": "Refer to [GET_VEHICLE_WHEEL_TYPE](#\\_0xB3ED1BFB4BE636DC) for wheel types.",
            "examples": [],
            "hash": "0x487EB21CC7295BA1",
            "ns": "VEHICLE",
            "jhash": "0x64BDAAAD",
            "manualHash": true
        },
        "0x2970EAA18FD5E42F": {
            "name": "_SET_VEHICLE_WHEELS_DEAL_DAMAGE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nRelated to monster trucks in native scripts.\n```\n\n```\nNativeDB Introduced: v1604\n```",
            "examples": [],
            "hash": "0x2970EAA18FD5E42F",
            "ns": "VEHICLE",
            "aliases": ["0x2970EAA18FD5E42F"],
            "manualHash": true
        },
        "0xE41033B25D003A07": {
            "name": "_SET_VEHICLE_XENON_LIGHTS_COLOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "color",
                    "type": "int",
                    "description": "The paint index."
                }
            ],
            "results": "void",
            "description": "Paint index goes from 0 to 12.\n\nYou can find the list of colors and ids here: [\\_GET_VEHICLE_HEADLIGHTS_COLOUR](#\\_0x3DFF319A831E0CDB)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local veh = GetVehiclePedIsUsing(PlayerPedId())\nToggleVehicleMod(veh, 22, true) -- toggle xenon\nSetVehicleHeadlightsColour(veh, 2)"
                }
            ],
            "hash": "0xE41033B25D003A07",
            "ns": "VEHICLE",
            "aliases": [
                "0xE41033B25D003A07",
                "_SET_VEHICLE_HEADLIGHTS_COLOUR",
                "_SET_VEHICLE_XENON_LIGHTS_COLOUR"
            ],
            "manualHash": true
        },
        "0xA37B9A517B133349": {
            "name": "SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xA37B9A517B133349",
            "ns": "VEHICLE",
            "aliases": ["SET_VEHICLE_MAX_STR_TRAP"],
            "jhash": "0x670913A4",
            "manualHash": true
        },
        "0x9438F7AD68771A20": {
            "name": "SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "time", "type": "float" }
            ],
            "results": "void",
            "description": "```\nSET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)\n```",
            "examples": [],
            "hash": "0x9438F7AD68771A20",
            "ns": "VEHICLE",
            "jhash": "0xCF3EFA4B",
            "manualHash": true
        },
        "0x374706271354CB18": {
            "name": "STABILISE_ENTITY_ATTACHED_TO_HELI",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "entity", "type": "Entity" },
                { "name": "p2", "type": "float" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x374706271354CB18",
            "ns": "VEHICLE",
            "aliases": ["0x374706271354CB18"],
            "jhash": "0x40C4763F",
            "manualHash": true
        },
        "0x57C51E6BAD752696": {
            "name": "SET_VEHICLE_WINDOW_TINT",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "tint", "type": "int" }
            ],
            "results": "void",
            "description": "```\nenum WindowTints  \n{  \n\tWINDOWTINT_NONE,  \n\tWINDOWTINT_PURE_BLACK,  \n\tWINDOWTINT_DARKSMOKE,  \n\tWINDOWTINT_LIGHTSMOKE,  \n\tWINDOWTINT_STOCK,  \n\tWINDOWTINT_LIMO,  \n\tWINDOWTINT_GREEN  \n};  \n```",
            "examples": [],
            "hash": "0x57C51E6BAD752696",
            "ns": "VEHICLE",
            "jhash": "0x497C8787",
            "manualHash": true
        },
        "0x9E5B5E4D2CCD2259": {
            "name": "SMASH_VEHICLE_WINDOW",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "windowIndex", "type": "int" }
            ],
            "results": "void",
            "description": "See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\\_0x46E571A0E20D01F1).",
            "examples": [],
            "hash": "0x9E5B5E4D2CCD2259",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0xDDD9A8C2",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0xAB8E2EDA0C0A5883": {
            "name": "SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xAB8E2EDA0C0A5883",
            "ns": "VEHICLE",
            "jhash": "0x8DEA18C8",
            "manualHash": true
        },
        "0x7D80FD645D4DA346": {
            "name": "START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "recording", "type": "int" },
                { "name": "script", "type": "char*" },
                { "name": "flags", "type": "int" },
                { "name": "time", "type": "int" },
                { "name": "drivingStyle", "type": "int" }
            ],
            "results": "void",
            "description": "```\nflags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.\ntime, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER\n```",
            "examples": [],
            "hash": "0x7D80FD645D4DA346",
            "ns": "VEHICLE",
            "jhash": "0x4E721AD2",
            "manualHash": true
        },
        "0x29DE5FA52D00428C": {
            "name": "START_PLAYBACK_RECORDED_VEHICLE_USING_AI",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "recording", "type": "int" },
                {
                    "name": "script",
                    "type": "char*",
                    "annotations": { "cs_type": "AnyPtr" }
                },
                { "name": "speed", "type": "float" },
                { "name": "drivingStyle", "type": "int" }
            ],
            "results": "void",
            "description": "```\nAI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.\n\n0x1F2E4E06DEA8992B is a related native that deals with the AI physics for such recordings.\n```",
            "examples": [],
            "hash": "0x29DE5FA52D00428C",
            "ns": "VEHICLE",
            "jhash": "0x8DE8E24E",
            "manualHash": true
        },
        "0x7C06330BFDDA182E": {
            "name": "_STOP_BRING_VEHICLE_TO_HALT",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nStops CTaskBringVehicleToHalt\n```",
            "examples": [],
            "hash": "0x7C06330BFDDA182E",
            "ns": "VEHICLE",
            "aliases": ["0x7C06330BFDDA182E"],
            "manualHash": true
        },
        "0x3F878F92B3A7A071": {
            "name": "START_PLAYBACK_RECORDED_VEHICLE",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "recording", "type": "int" },
                { "name": "script", "type": "char*" },
                { "name": "p3", "type": "BOOL" }
            ],
            "results": "void",
            "description": "p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).\n\nSee [`REQUEST_VEHICLE_RECORDING`](#\\_0xAF514CABE74CBF15).",
            "examples": [],
            "hash": "0x3F878F92B3A7A071",
            "ns": "VEHICLE",
            "jhash": "0xCF614CA8",
            "manualHash": true
        },
        "0x0F87E938BDF29D66": {
            "name": "STOP_ALL_GARAGE_ACTIVITY",
            "params": [],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x0F87E938BDF29D66",
            "ns": "VEHICLE",
            "jhash": "0x17A0BCE5",
            "manualHash": true
        },
        "0x54833611C17ABDEA": {
            "name": "STOP_PLAYBACK_RECORDED_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x54833611C17ABDEA",
            "ns": "VEHICLE",
            "jhash": "0xAE99C57C",
            "manualHash": true
        },
        "0xB8FF7AB45305C345": {
            "name": "START_VEHICLE_ALARM",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0xB8FF7AB45305C345",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x5B451FF7",
            "manualHash": true,
            "resultsDescription": ""
        },
        "0x9C8C6504B5B63D2C": {
            "name": "START_VEHICLE_HORN",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                { "name": "duration", "type": "int" },
                { "name": "mode", "type": "Hash" },
                { "name": "forever", "type": "BOOL" }
            ],
            "results": "void",
            "description": "```\nSounds the horn for the specified vehicle.  \nvehicle: The vehicle to activate the horn for.  \nmode: The hash of \"NORMAL\" or \"HELDDOWN\". Can be 0.  \nduration: The duration to sound the horn, in milliseconds.  \nNote: If a player is in the vehicle, it will only sound briefly.  \n```",
            "examples": [],
            "hash": "0x9C8C6504B5B63D2C",
            "ns": "VEHICLE",
            "jhash": "0x0DF5ADB3",
            "manualHash": true
        },
        "0x64473AEFDCF47DCA": {
            "name": "TRACK_VEHICLE_VISIBILITY",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "```\nin script hook .net   \nVehicle v = ...;  \nFunction.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);  \n```",
            "examples": [],
            "hash": "0x64473AEFDCF47DCA",
            "ns": "VEHICLE",
            "jhash": "0x78122DC1",
            "manualHash": true
        },
        "0x2A1F4F37F95BAD08": {
            "name": "TOGGLE_VEHICLE_MOD",
            "params": [
                { "name": "vehicle", "type": "Vehicle" },
                {
                    "name": "modType",
                    "type": "int",
                    "description": "Refer to eVehicleModType in [`SET_VEHICLE_MOD`](#\\_0x6AF0636DDEDCB6DD)."
                },
                { "name": "toggle", "type": "BOOL" }
            ],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A1F4F37F95BAD08",
            "ns": "VEHICLE",
            "jhash": "0xD095F811",
            "manualHash": true
        },
        "0x2A69FFD1B42BFF9E": {
            "name": "TRANSFORM_TO_CAR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "A vehicle handle."
                },
                {
                    "name": "instantly",
                    "type": "BOOL",
                    "description": "If true, the vehicle will be instantly transformed, when false the transform animation plays normally."
                }
            ],
            "results": "void",
            "description": "Transforms the `stormberg` to its \"road vehicle\" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.",
            "examples": [],
            "hash": "0x2A69FFD1B42BFF9E",
            "ns": "VEHICLE",
            "aliases": [
                "0x2A69FFD1B42BFF9E",
                "_TRANSFORM_STORMBERG_TO_ROAD_VEHICLE",
                "_TRANSFORM_SUBMARINE_TO_VEHICLE"
            ],
            "jhash": "0xD8B90941",
            "manualHash": true
        },
        "0x8879EE09268305D5": {
            "name": "UNPAUSE_PLAYBACK_RECORDED_VEHICLE",
            "params": [{ "name": "vehicle", "type": "Vehicle" }],
            "results": "void",
            "description": "",
            "examples": [],
            "hash": "0x8879EE09268305D5",
            "ns": "VEHICLE",
            "jhash": "0x59060F75",
            "manualHash": true
        },
        "0xBE4C854FFDB6EEBE": {
            "name": "TRANSFORM_TO_SUBMARINE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "A vehicle handle."
                },
                {
                    "name": "instantly",
                    "type": "BOOL",
                    "description": "If true, the vehicle will be instantly transformed, when false the transform animation plays normally."
                }
            ],
            "results": "void",
            "description": "Transforms the `stormberg` to its \"water vehicle\" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.",
            "examples": [],
            "hash": "0xBE4C854FFDB6EEBE",
            "ns": "VEHICLE",
            "aliases": [
                "0xBE4C854FFDB6EEBE",
                "_TRANSFORM_STORMBERG_TO_WATER_VEHICLE",
                "_TRANSFORM_VEHICLE_TO_SUBMARINE"
            ],
            "jhash": "0xCAFE5FE0",
            "manualHash": true
        },
        "0xFD813BB7DB977F20": {
            "name": "SWITCH_TRAIN_TRACK",
            "params": [
                {
                    "name": "trackId",
                    "type": "int",
                    "description": "The internal id of the train track to switch"
                },
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Whether ambient trains can spawn or not"
                }
            ],
            "results": "void",
            "description": "Toggles whether ambient trains can spawn on the specified track or not.\n\n| trackId | File | Description |\n| --- | --- | --- |\n| 0 | `trains1.dat` | Main track around SA |\n| 1 | `trains2.dat` | Davis Quartz Quarry branch |\n| 2 | `trains3.dat` | Second track alongside live track along Roy Lewenstein Blv. |\n| 3 | `trains4.dat` | Metro track circuit |\n| 4 | `trains5.dat` | Branch in Mirror Park Railyard |\n| 5 | `trains6.dat` | Branch in Mirror Park Railyard |\n| 6 | `trains7.dat` | LS branch to Mirror Park Railyard |\n| 7 | `trains8.dat` | Overground part of metro track along Forum Dr. |\n| 8 | `trains9.dat` | Branch to Mirror Park Railyard |\n| 9 | `trains10.dat` | Yankton train |\n| 10 | `trains11.dat` | Part of metro track near mission row |\n| 11 | `trains12.dat` | Yankton prologue mission train |\n\nTracks IDs `0` and `3` are the main tracks you find trains on during normal gameplay, all the others are used during missions and are not complete tracks.",
            "examples": [],
            "hash": "0xFD813BB7DB977F20",
            "ns": "VEHICLE",
            "annotations": { "cs_type": "Any" },
            "jhash": "0x68BFDD61",
            "manualHash": true,
            "resultsDescription": "None. The original return type is `void`, but ABI compatibility makes this impossible."
        }
    }
}

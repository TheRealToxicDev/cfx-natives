{
  "CFX": {
    "0xAC6E290D": {
      "name": "ADD_AUDIO_SUBMIX_OUTPUT",
      "params": [
        {
          "name": "submixId",
          "type": "int",
          "description": "The input submix."
        },
        {
          "name": "outputSubmixId",
          "type": "int",
          "description": "The output submix. Use `0` for the master game submix."
        }
      ],
      "results": "void",
      "description": "Adds an output for the specified audio submix.",
      "examples": [
        
      ],
      "hash": "0xAC6E290D",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xA66F8F75": {
      "name": "ADD_REPLACE_TEXTURE",
      "params": [
        {
          "name": "origTxd",
          "type": "char*"
        },
        {
          "name": "origTxn",
          "type": "char*"
        },
        {
          "name": "newTxd",
          "type": "char*"
        },
        {
          "name": "newTxn",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "Experimental natives, please do not use in a live environment.",
      "examples": [
        
      ],
      "hash": "0xA66F8F75",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x32CA01C3": {
      "name": "ADD_TEXT_ENTRY",
      "params": [
        {
          "name": "entryKey",
          "type": "char*"
        },
        {
          "name": "entryText",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x32CA01C3",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x167ABA27": {
      "name": "DOES_PLAYER_OWN_SKU",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        },
        {
          "name": "skuId",
          "type": "int",
          "description": "The ID of the SKU."
        }
      ],
      "results": "BOOL",
      "description": "Requests whether or not the player owns the specified SKU.",
      "examples": [
        
      ],
      "hash": "0x167ABA27",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A boolean."
    },
    "0x4AFD2499": {
      "name": "ADD_MINIMAP_OVERLAY",
      "params": [
        {
          "name": "name",
          "type": "char*",
          "description": "The path to a `.gfx` file in the current resource. It has to be specified as a `file`."
        }
      ],
      "results": "int",
      "description": "Loads a minimap overlay from a GFx file in the current resource.",
      "examples": [
        
      ],
      "hash": "0x4AFD2499",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A minimap overlay ID."
    },
    "0x289DA860": {
      "name": "ADD_TEXT_ENTRY_BY_HASH",
      "params": [
        {
          "name": "entryKey",
          "type": "Hash"
        },
        {
          "name": "entryText",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x289DA860",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xDEF0480B": {
      "name": "DOES_PLAYER_OWN_SKU_EXT",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        },
        {
          "name": "skuId",
          "type": "int",
          "description": "The package ID on Tebex."
        }
      ],
      "results": "BOOL",
      "description": "Requests whether or not the player owns the specified package.",
      "examples": [
        
      ],
      "hash": "0xDEF0480B",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A boolean."
    },
    "0x4C89C0ED": {
      "name": "CALL_MINIMAP_SCALEFORM_FUNCTION",
      "params": [
        {
          "name": "miniMap",
          "type": "int",
          "description": "The minimap overlay ID."
        },
        {
          "name": "fnName",
          "type": "char*",
          "description": "A function in the overlay's TIMELINE."
        }
      ],
      "results": "BOOL",
      "description": "This is similar to the PushScaleformMovieFunction natives, except it calls in the `TIMELINE` of a minimap overlay.",
      "examples": [
        
      ],
      "hash": "0x4C89C0ED",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x5BA35AAF": {
      "name": "ADD_STATE_BAG_CHANGE_HANDLER",
      "params": [
        {
          "name": "keyFilter",
          "type": "char*",
          "description": "The key to check for, or null for no filter."
        },
        {
          "name": "bagFilter",
          "type": "char*",
          "description": "The bag ID to check for such as `entity:65535`, or null for no filter."
        },
        {
          "name": "handler",
          "type": "func",
          "description": "The handler function."
        }
      ],
      "results": "int",
      "description": "Adds a handler for changes to a state bag.\n\nThe function called expects to match the following signature:\n\n```ts\nfunction StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean);\n```\n\n*   **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID`\r\n    or `localEntity:Handle`.\n*   **key**: The changed key.\n*   **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes.\n*   **reserved**: Currently unused.\n*   **replicated**: Whether the set is meant to be replicated.\n\nAt this time, the change handler can't opt to reject changes.\n\nIf bagName refers to an entity, use [GET_ENTITY_FROM_STATE_BAG_NAME](?\\_0x4BDF1868) to get the entity handle\r\nIf bagName refers to a player, use [GET_PLAYER_FROM_STATE_BAG_NAME](?\\_0xA56135E0) to get the player handle",
      "examples": [
        {
          "lang": "js",
          "code": "AddStateBagChangeHandler(\"blockTasks\", null, async (bagName, key, value /* boolean */) => {\r\n    let entity = GetEntityFromStateBagName(bagName);\r\n    // Whoops, we were don't have a valid entity!\r\n    if (entity === 0) return;\r\n    // We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while (!HasCollisionLoadedAroundEntity(entity)) {\r\n        // The entity went out of our scope before the collision loaded\r\n        if (!DoesEntityExist(entity)) return;\r\n        await Delay(250);\r\n    }\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\n})"
        },
        {
          "lang": "lua",
          "code": "AddStateBagChangeHandler(\"blockTasks\", nil, function(bagName, key, value) \r\n    local entity = GetEntityFromStateBagName(bagName)\r\n    -- Whoops, we don't have a valid entity!\r\n    if entity === 0 then return end\r\n    -- We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while not HasCollisionLoadedAroundEntity(entity) do\r\n        -- The entity went out of our scope before the collision loaded\r\n        if not DoesEntityExist(entity) then return end\r\n        Wait(250)\r\n    end\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\nend)"
        }
      ],
      "hash": "0x5BA35AAF",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "A cookie to remove the change handler."
    },
    "0xFA29D35D": {
      "name": "CANCEL_EVENT",
      "params": [
        
      ],
      "results": "void",
      "description": "Cancels the currently executing event.",
      "examples": [
        
      ],
      "hash": "0xFA29D35D",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x429461C3": {
      "name": "CAN_PLAYER_START_COMMERCE_SESSION",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "BOOL",
      "description": "Returns whether or not the specified player has enough information to start a commerce session for.",
      "examples": [
        
      ],
      "hash": "0x429461C3",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "True or false."
    },
    "0xA274CADB": {
      "name": "BREAK_OFF_VEHICLE_WHEEL",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle handle."
        },
        {
          "name": "wheelIndex",
          "type": "int",
          "description": "The wheel index."
        },
        {
          "name": "leaveDebrisTrail",
          "type": "BOOL",
          "description": "Start \"veh_debris_trail\" ptfx."
        },
        {
          "name": "deleteWheel",
          "type": "BOOL",
          "description": "True to delete wheel, otherwise detach."
        },
        {
          "name": "unknownFlag",
          "type": "BOOL",
          "description": "Unknown flag."
        },
        {
          "name": "putOnFire",
          "type": "BOOL",
          "description": "Set wheel on fire once detached."
        }
      ],
      "results": "void",
      "description": "Break off vehicle wheel by index. The `leaveDebrisTrail` flag requires `putOnFire` to be true.",
      "examples": [
        {
          "lang": "lua",
          "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId())\r\n\r\nif DoesEntityExist(vehicle) then\r\n  for i = 0, 3 do\r\n    BreakOffVehicleWheel(vehicle, i, true, false, true, false)\r\n  end\r\nend"
        }
      ],
      "hash": "0xA274CADB",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x19D81F4E": {
      "name": "COMMIT_RUNTIME_TEXTURE",
      "params": [
        {
          "name": "tex",
          "type": "long",
          "description": "The runtime texture handle."
        }
      ],
      "results": "void",
      "description": "Commits the backing pixels to the specified runtime texture.",
      "examples": [
        
      ],
      "hash": "0x19D81F4E",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x237613B3": {
      "name": "DOOR_SYSTEM_GET_SIZE",
      "params": [
        
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x237613B3",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The number of doors registered in the system"
    },
    "0x2867ED8C": {
      "name": "CLEAR_VEHICLE_XENON_LIGHTS_CUSTOM_COLOR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle handle."
        }
      ],
      "results": "void",
      "description": "Removes vehicle xenon lights custom RGB color.",
      "examples": [
        
      ],
      "hash": "0x2867ED8C",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x658D2BC8": {
      "name": "CREATE_AUDIO_SUBMIX",
      "params": [
        {
          "name": "name",
          "type": "char*",
          "description": "The audio submix name."
        }
      ],
      "results": "int",
      "description": "Creates an audio submix with the specified name, or gets the existing audio submix by that name.",
      "examples": [
        
      ],
      "hash": "0x658D2BC8",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A submix ID, or -1 if the submix could not be created."
    },
    "0x54D636B3": {
      "name": "CLONE_TIMECYCLE_MODIFIER",
      "params": [
        {
          "name": "sourceModifierName",
          "type": "char*",
          "description": "The source timecycle name."
        },
        {
          "name": "clonedModifierName",
          "type": "char*",
          "description": "The clone timecycle name, must be unique."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local sourceName = \"underwater\"\r\nlocal cloneName = \"my_awesome_timecycle\"\r\n\r\nlocal clonedIndex = CloneTimecycleModifier(sourceName, cloneName)\r\nif clonedIndex ~= -1 then\r\n  SetTimecycleModifier(cloneName)\r\nend"
        }
      ],
      "hash": "0x54D636B3",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The cloned timecycle modifier index, or -1 if failed."
    },
    "0x23EAF899": {
      "name": "CREATE_DUI",
      "params": [
        {
          "name": "url",
          "type": "char*",
          "description": "The initial URL to load in the browser."
        },
        {
          "name": "width",
          "type": "int",
          "description": "The width of the backing surface."
        },
        {
          "name": "height",
          "type": "int",
          "description": "The height of the backing surface."
        }
      ],
      "results": "long",
      "description": "Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE.",
      "examples": [
        
      ],
      "hash": "0x23EAF899",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A DUI object."
    },
    "0xCF143FB9": {
      "name": "GET_ACTIVE_PLAYERS",
      "params": [
        
      ],
      "results": "object",
      "description": "Returns all player indices for 'active' physical players known to the client.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
      "examples": [
        
      ],
      "hash": "0xCF143FB9",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An object containing a list of player indices."
    },
    "0xC53BB6D3": {
      "name": "DOES_TIMECYCLE_MODIFIER_HAS_VAR",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The name of timecycle modifier."
        },
        {
          "name": "varName",
          "type": "char*",
          "description": "The name of timecycle variable."
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local modifierName = \"superDARK\"\r\nlocal varName = \"postfx_noise\"\r\n\r\nif DoesTimecycleModifierHasVar(modifierName, varName) then\r\n  local success, value1, value2 = GetTimecycleModifierVar(modifierName, varName)\r\n\r\n  if success then\r\n    print(string.format(\"[%s] removed var %s with values: %f %f\", modifierName, varName, value1, value2))\r\n    RemoveTimecycleModifierVar(modifierName, varName)\r\n  end\r\nelse\r\n    SetTimecycleModifierVar(modifierName, varName, 1.0, 1.0)\r\n    print(string.format(\"[%s] created var %s\", modifierName, varName))\r\nend"
        }
      ],
      "hash": "0xC53BB6D3",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Whether or not variable by name was found on the specified timecycle modifier."
    },
    "0xB135472B": {
      "name": "CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE",
      "params": [
        {
          "name": "txd",
          "type": "long",
          "description": "A handle to the runtime TXD to create the runtime texture in."
        },
        {
          "name": "txn",
          "type": "char*",
          "description": "The name for the texture in the runtime texture dictionary."
        },
        {
          "name": "duiHandle",
          "type": "char*",
          "description": "The DUI handle returned from GET_DUI_HANDLE."
        }
      ],
      "results": "long",
      "description": "Creates a runtime texture from a DUI handle.",
      "examples": [
        
      ],
      "hash": "0xB135472B",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The runtime texture handle."
    },
    "0xEB1C6DD": {
      "name": "CREATE_DRY_VOLUME",
      "params": [
        {
          "name": "xMin",
          "type": "float",
          "description": "The min X component of the AABB volume where water does not affect the player."
        },
        {
          "name": "yMin",
          "type": "float",
          "description": "The min Y component for the AABB volume."
        },
        {
          "name": "zMin",
          "type": "float",
          "description": "The min Z component for the AABB volume."
        },
        {
          "name": "xMax",
          "type": "float",
          "description": "The max X component for the AABB volume."
        },
        {
          "name": "yMax",
          "type": "float",
          "description": "The max Y component for the AABB volume."
        },
        {
          "name": "zMax",
          "type": "float",
          "description": "The max Z component for the AABB volume."
        }
      ],
      "results": "int",
      "description": "Creates a volume where water effects do not apply.\r\nUseful for preventing water collisions from flooding areas underneath them.\r\nThis has no effect on waterquads, only water created from drawables and collisions.\r\nDon't create volumes when your local ped is swimming (e.g. use IS_PED_SWIMMING in your scripts before you call this)",
      "examples": [
        
      ],
      "hash": "0xEB1C6DD",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB856A90": {
      "name": "DRAW_LINE_2D",
      "params": [
        {
          "name": "x1",
          "type": "float",
          "description": "First x."
        },
        {
          "name": "y1",
          "type": "float",
          "description": "First y."
        },
        {
          "name": "x2",
          "type": "float",
          "description": "Second x."
        },
        {
          "name": "y2",
          "type": "float",
          "description": "Second y."
        },
        {
          "name": "width",
          "type": "float",
          "description": "Width of line."
        },
        {
          "name": "r",
          "type": "int",
          "description": "Red."
        },
        {
          "name": "g",
          "type": "int",
          "description": "Green."
        },
        {
          "name": "b",
          "type": "int",
          "description": "Blue."
        },
        {
          "name": "a",
          "type": "int",
          "description": "Alpha."
        }
      ],
      "results": "void",
      "description": "Like DRAW_RECT, but it's a line.",
      "examples": [
        
      ],
      "hash": "0xB856A90",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x62FC38D0": {
      "name": "GET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x62FC38D0",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xFEC3766D": {
      "name": "CREATE_RUNTIME_TEXTURE",
      "params": [
        {
          "name": "txd",
          "type": "long",
          "description": "A handle to the runtime TXD to create the runtime texture in."
        },
        {
          "name": "txn",
          "type": "char*",
          "description": "The name for the texture in the runtime texture dictionary."
        },
        {
          "name": "width",
          "type": "int",
          "description": "The width of the new texture."
        },
        {
          "name": "height",
          "type": "int",
          "description": "The height of the new texture."
        }
      ],
      "results": "long",
      "description": "Creates a blank runtime texture.",
      "examples": [
        
      ],
      "hash": "0xFEC3766D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A runtime texture handle."
    },
    "0x1F3AC778": {
      "name": "CREATE_RUNTIME_TXD",
      "params": [
        {
          "name": "name",
          "type": "char*",
          "description": "The name for the runtime TXD."
        }
      ],
      "results": "long",
      "description": "Creates a runtime texture dictionary with the specified name.\r\nExample:\n\n```lua\nlocal txd = CreateRuntimeTxd('meow')\n```",
      "examples": [
        
      ],
      "hash": "0x1F3AC778",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A handle to the runtime TXD."
    },
    "0xF4E2079D": {
      "name": "DUPLICATE_FUNCTION_REFERENCE",
      "params": [
        {
          "name": "referenceIdentity",
          "type": "char*"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF4E2079D",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0xF65BBA4B": {
      "name": "DOOR_SYSTEM_GET_ACTIVE",
      "params": [
        
      ],
      "results": "object",
      "description": "Returns a list of door system entries: a door system hash (see [ADD_DOOR_TO_SYSTEM](#\\_0x6F8838D03D1DC226)) and its object handle.\n\nThe data returned adheres to the following layout:\n\n```\n[{doorHash1, doorHandle1}, ..., {doorHashN, doorHandleN}]\n```",
      "examples": [
        
      ],
      "hash": "0xF65BBA4B",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An object containing a list of door system entries."
    },
    "0xEC37C168": {
      "name": "DRAW_RECT_ROTATED",
      "params": [
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "width",
          "type": "float"
        },
        {
          "name": "height",
          "type": "float"
        },
        {
          "name": "rotation",
          "type": "float"
        },
        {
          "name": "r",
          "type": "int"
        },
        {
          "name": "g",
          "type": "int"
        },
        {
          "name": "b",
          "type": "int"
        },
        {
          "name": "a",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "DRAW_RECT, but with a rotation. Seems to be broken.",
      "examples": [
        
      ],
      "hash": "0xEC37C168",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xF97B1C93": {
      "name": "ENABLE_ENHANCED_HOST_SUPPORT",
      "params": [
        {
          "name": "enabled",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF97B1C93",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x786D8BC3": {
      "name": "CREATE_RUNTIME_TEXTURE_FROM_IMAGE",
      "params": [
        {
          "name": "txd",
          "type": "long",
          "description": "A handle to the runtime TXD to create the runtime texture in."
        },
        {
          "name": "txn",
          "type": "char*",
          "description": "The name for the texture in the runtime texture dictionary."
        },
        {
          "name": "fileName",
          "type": "char*",
          "description": "The file name of an image to load or a base64 data URL. This should preferably be a PNG, and has to be specified as a `file` in the resource manifest."
        }
      ],
      "results": "long",
      "description": "Creates a runtime texture from the specified file in the current resource or a base64 data URL.",
      "examples": [
        
      ],
      "hash": "0x786D8BC3",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A runtime texture handle."
    },
    "0x4152C90": {
      "name": "DELETE_RESOURCE_KVP_NO_SYNC",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to delete"
        }
      ],
      "results": "void",
      "description": "Nonsynchronous [DELETE_RESOURCE_KVP](#\\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
      "examples": [
        
      ],
      "hash": "0x4152C90",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xFAA3D236": {
      "name": "DELETE_ENTITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to delete."
        }
      ],
      "results": "void",
      "description": "Deletes the specified entity.",
      "examples": [
        
      ],
      "hash": "0xFAA3D236",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xBA0613E1": {
      "name": "DROP_PLAYER",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        },
        {
          "name": "reason",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xBA0613E1",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x7389B5DF": {
      "name": "DELETE_RESOURCE_KVP",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to delete"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "DeleteResourceKvp('liberty_city')"
        }
      ],
      "hash": "0x7389B5DF",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x70FA2AFA": {
      "name": "CREATE_TIMECYCLE_MODIFIER",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The new timecycle name, must be unique."
        }
      ],
      "results": "int",
      "description": "Create a clean timecycle modifier. See [`SET_TIMECYCLE_MODIFIER_VAR`](#\\_0x6E0A422B) to add variables.",
      "examples": [
        {
          "lang": "lua",
          "code": "local modifierName = \"my_awesome_timecycle\"\r\nlocal createdIndex = CreateTimecycleModifier(modifierName)\r\n\r\nif createdIndex ~= -1 then\r\n  SetTimecycleModifier(modifierName)\r\nend"
        }
      ],
      "hash": "0x70FA2AFA",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The created timecycle modifier index, or -1 if failed."
    },
    "0xDEDA4E50": {
      "name": "END_FIND_OBJECT",
      "params": [
        {
          "name": "findHandle",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xDEDA4E50",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB3210203": {
      "name": "END_FIND_KVP",
      "params": [
        {
          "name": "handle",
          "type": "int",
          "description": "The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xB3210203",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "None."
    },
    "0xB8584FEF": {
      "name": "GET_ALL_PEDS",
      "params": [
        
      ],
      "results": "object",
      "description": "Returns all peds handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
      "examples": [
        
      ],
      "hash": "0xB8584FEF",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "An object containing a list of peds handles."
    },
    "0x3C407D53": {
      "name": "END_FIND_PICKUP",
      "params": [
        {
          "name": "findHandle",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x3C407D53",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x3D5AB7F0": {
      "name": "DISABLE_IDLE_CAMERA",
      "params": [
        {
          "name": "state",
          "type": "BOOL",
          "description": "On/Off"
        }
      ],
      "results": "void",
      "description": "Disables the game's afk camera that starts panning around after 30 seconds of inactivity.",
      "examples": [
        
      ],
      "hash": "0x3D5AB7F0",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x8FF45B04": {
      "name": "GET_ENTITY_ROTATION",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "Vector3",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x8FF45B04",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x3BB78F05": {
      "name": "ENSURE_ENTITY_STATE_BAG",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "void",
      "description": "Internal function for ensuring an entity has a state bag.",
      "examples": [
        
      ],
      "hash": "0x3BB78F05",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x9615C2AD": {
      "name": "END_FIND_PED",
      "params": [
        {
          "name": "findHandle",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9615C2AD",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x1E86F206": {
      "name": "DELETE_FUNCTION_REFERENCE",
      "params": [
        {
          "name": "referenceIdentity",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x1E86F206",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x3AC90869": {
      "name": "DOES_ENTITY_EXIST",
      "params": [
        {
          "name": "entity",
          "type": "Object"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x3AC90869",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x5C140555": {
      "name": "DISABLE_VEHICLE_PASSENGER_IDLE_CAMERA",
      "params": [
        {
          "name": "state",
          "type": "BOOL",
          "description": "On/Off"
        }
      ],
      "results": "void",
      "description": "Disables the game's afk camera that starts panning around after 30 seconds of inactivity(While riding in a car as a passenger)",
      "examples": [
        
      ],
      "hash": "0x5C140555",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xA9C92CDC": {
      "name": "DISABLE_WORLDHORIZON_RENDERING",
      "params": [
        {
          "name": "state",
          "type": "BOOL",
          "description": "On/Off"
        }
      ],
      "results": "void",
      "description": "Disables the game's world horizon lods rendering (see `farlods.#dd`).\r\nUsing the island hopper natives might also affect this state.",
      "examples": [
        
      ],
      "hash": "0xA9C92CDC",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x43F15989": {
      "name": "DOES_BOAT_SINK_WHEN_WRECKED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x43F15989",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns whether or not the boat sinks when wrecked."
    },
    "0x12038599": {
      "name": "DOES_PLAYER_EXIST",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "BOOL",
      "description": "Returns whether or not the player exists",
      "examples": [
        {
          "lang": "lua",
          "code": "local deferralMessages = { \"Isn't this just magical!\", \"We can defer all day!\", \"You'll get in eventually\", \"You're totally not going to sit here forever\", \"The Fruit Tree is a lie\" }\r\nAddEventHandler(\"playerConnecting\", function(name, setKickReason, deferrals)\r\n    local source = source\r\n    deferrals.defer()\r\n\r\n    Wait(0)\r\n\r\n\r\n    local messageIndex = 0\r\n\r\n    repeat\r\n        Wait(2000)\r\n        if messageIndex >= #deferralMessages then\r\n            deferrals.done()\r\n        else\r\n            messageIndex = messageIndex + 1\r\n        end\r\n        deferrals.update(deferralMessages[messageIndex])\r\n    until not DoesPlayerExist(source)\r\nend)"
        }
      ],
      "hash": "0x12038599",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "True if the player exists, false otherwise"
    },
    "0x9D65CAD2": {
      "name": "EXPERIMENTAL_SAVE_CLONE_CREATE",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "char*",
      "description": "This native is not implemented.",
      "examples": [
        
      ],
      "hash": "0x9D65CAD2",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x760A2D67": {
      "name": "GET_ALL_ROPES",
      "params": [
        
      ],
      "results": "object",
      "description": "Returns all rope handles. The data returned adheres to the following layout:\n\n```\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```",
      "examples": [
        
      ],
      "hash": "0x760A2D67",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An object containing a list of all rope handles."
    },
    "0x9227415A": {
      "name": "END_FIND_VEHICLE",
      "params": [
        {
          "name": "findHandle",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9227415A",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x561C060B": {
      "name": "EXECUTE_COMMAND",
      "params": [
        {
          "name": "commandString",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x561C060B",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0xA085CB10": {
      "name": "DESTROY_DUI",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        }
      ],
      "results": "void",
      "description": "Destroys a DUI browser.",
      "examples": [
        
      ],
      "hash": "0xA085CB10",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x9BF8A73F": {
      "name": "GET_ENTITY_ROTATION_VELOCITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "Vector3",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9BF8A73F",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x15E55694": {
      "name": "FIND_FIRST_VEHICLE",
      "params": [
        {
          "name": "outEntity",
          "type": "Entity*"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x15E55694",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xD2CB95A3": {
      "name": "EXPERIMENTAL_LOAD_CLONE_CREATE",
      "params": [
        {
          "name": "data",
          "type": "char*"
        },
        {
          "name": "objectId",
          "type": "int"
        },
        {
          "name": "tree",
          "type": "char*"
        }
      ],
      "results": "Entity",
      "description": "This native is not implemented.",
      "examples": [
        
      ],
      "hash": "0xD2CB95A3",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xE27C97A0": {
      "name": "FLUSH_RESOURCE_KVP",
      "params": [
        
      ],
      "results": "void",
      "description": "Nonsynchronous operations will not wait for a disk/filesystem flush before returning from a write or delete call. They will be much faster than their synchronous counterparts (e.g., bulk operations), however, a system crash may lose the data to some recent operations.\n\nThis native ensures all `_NO_SYNC` operations are synchronized with the disk/filesystem.",
      "examples": [
        {
          "lang": "lua",
          "code": "-- Bulk write many <key, value> pairs to the resource KVP.\r\nlocal key = \"bug_%d\"\r\nlocal value = \"unintended_feature_%d\"\r\nfor i=1,10000 do\r\n\tSetResourceKvpNoSync(key:format(i), value:format(i))\r\nend\r\n\r\n-- Ensure all data is synchronized to the filesystem\r\nFlushResourceKvp()"
        }
      ],
      "hash": "0xE27C97A0",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x6886C3FE": {
      "name": "GET_ALL_OBJECTS",
      "params": [
        
      ],
      "results": "object",
      "description": "Returns all object handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
      "examples": [
        
      ],
      "hash": "0x6886C3FE",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "An object containing a list of object handles."
    },
    "0x3FF9D340": {
      "name": "FIND_FIRST_PICKUP",
      "params": [
        {
          "name": "outEntity",
          "type": "Entity*"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x3FF9D340",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xB550232D": {
      "name": "GET_AMBIENT_PED_RANGE_MULTIPLIER",
      "params": [
        
      ],
      "results": "float",
      "description": "A getter for [SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME](#\\_0x0B919E1FB47CC4E0).",
      "examples": [
        
      ],
      "hash": "0xB550232D",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns ambient ped range multiplier value."
    },
    "0x38D19210": {
      "name": "EXPERIMENTAL_SAVE_CLONE_SYNC",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "char*",
      "description": "This native is not implemented.",
      "examples": [
        
      ],
      "hash": "0x38D19210",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xFAA6CB5D": {
      "name": "FIND_FIRST_OBJECT",
      "params": [
        {
          "name": "outEntity",
          "type": "Entity*"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFAA6CB5D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x667EC929": {
      "name": "GET_AMBIENT_VEHICLE_RANGE_MULTIPLIER",
      "params": [
        
      ],
      "results": "float",
      "description": "A getter for [SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME](#\\_0x90B6DA738A9A25DA).",
      "examples": [
        
      ],
      "hash": "0x667EC929",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns ambient vehicle range multiplier value."
    },
    "0xD7531645": {
      "name": "GET_ALL_VEHICLE_MODELS",
      "params": [
        
      ],
      "results": "object",
      "description": "Returns all registered vehicle model names, including non-dlc vehicles and custom vehicles in no particular order.\n\n**Example output**\n\n```\n\t[\"dubsta\", \"dubsta2\", \"dubsta3\", \"myverycoolcar\", \"sultan\", \"sultanrs\", ...]\n```\n\nThis native will not return vehicles that are unregistered (i.e from a resource being stopped) during runtime.",
      "examples": [
        {
          "lang": "lua",
          "code": "RegisterCommand(\"spawnrandomcar\", function()\r\n\tlocal vehicles = GetAllVehicleModels()\r\n\tlocal veh = vehicles[math.random(1, #vehicles)]\r\n\tRequestModel(veh)\r\n\trepeat Wait(0) until HasModelLoaded(veh)\r\n\tlocal veh = CreateVehicle(veh, GetEntityCoords(PlayerPedId()), GetEntityHeading(PlayerPedId()), true, false)\r\n\tSetPedIntoVehicle(PlayerPedId(), veh, -1)\r\nend)"
        }
      ],
      "hash": "0xD7531645",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x332169F5": {
      "name": "GET_ALL_VEHICLES",
      "params": [
        
      ],
      "results": "object",
      "description": "Returns all vehicle handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
      "examples": [
        
      ],
      "hash": "0x332169F5",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "An object containing a list of vehicle handles."
    },
    "0x6BC189AC": {
      "name": "EXPERIMENTAL_LOAD_CLONE_SYNC",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        },
        {
          "name": "data",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "This native is not implemented.",
      "examples": [
        
      ],
      "hash": "0x6BC189AC",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x9E1E4798": {
      "name": "GET_ENTITY_SPEED",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to get the speed of"
        }
      ],
      "results": "float",
      "description": "Gets the current speed of the entity in meters per second.\n\n```\nTo convert to MPH: speed * 2.236936\r\nTo convert to KPH: speed * 3.6\n```",
      "examples": [
        
      ],
      "hash": "0x9E1E4798",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The speed of the entity in meters per second"
    },
    "0xCEBFC42": {
      "name": "GET_CALMING_QUAD_COUNT",
      "params": [
        
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local calmingQuadCount = GetCalmingQuadCount()"
        }
      ],
      "hash": "0xCEBFC42",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns the amount of calming quads loaded."
    },
    "0xB0E3A058": {
      "name": "GET_CALMING_QUAD_DAMPENING",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The calming quad index"
        },
        {
          "name": "calmingQuadDampening",
          "type": "float*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, dampening = GetCalmingQuadDampening(1)"
        }
      ],
      "hash": "0xB0E3A058",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Dampening value is undefined on failure"
    },
    "0x870E8B40": {
      "name": "GET_CALMING_QUAD_AT_COORDS",
      "params": [
        {
          "name": "x",
          "type": "float",
          "description": "The X coordinate"
        },
        {
          "name": "y",
          "type": "float",
          "description": "The Y coordinate"
        }
      ],
      "results": "int",
      "description": "This native returns the index of a calming quad if the given point is inside its bounds.",
      "examples": [
        {
          "lang": "lua",
          "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal calmingQuadIndex = GetCalmingQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
        }
      ],
      "hash": "0x870E8B40",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The calming quad index at the given position. Returns -1 if there isn't any there."
    },
    "0x4E129DBF": {
      "name": "FIND_NEXT_OBJECT",
      "params": [
        {
          "name": "findHandle",
          "type": "int"
        },
        {
          "name": "outEntity",
          "type": "Entity*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x4E129DBF",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xFF60E63": {
      "name": "GET_CALMING_QUAD_BOUNDS",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The calming quad index"
        },
        {
          "name": "minX",
          "type": "int*",
          "description": "The minX coordinate"
        },
        {
          "name": "minY",
          "type": "int*",
          "description": "The minY coordinate"
        },
        {
          "name": "maxX",
          "type": "int*",
          "description": "The maxX coordinate"
        },
        {
          "name": "maxY",
          "type": "int*",
          "description": "The maxY coordinate"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, minX, minY, maxX, maxY = GetCalmingQuadBounds(1)"
        }
      ],
      "hash": "0xFF60E63",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Bounds are undefined on failure"
    },
    "0xFB012961": {
      "name": "FIND_FIRST_PED",
      "params": [
        {
          "name": "outEntity",
          "type": "Entity*"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFB012961",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x8839120D": {
      "name": "FIND_NEXT_VEHICLE",
      "params": [
        {
          "name": "findHandle",
          "type": "int"
        },
        {
          "name": "outEntity",
          "type": "Entity*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x8839120D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xAB09B548": {
      "name": "FIND_NEXT_PED",
      "params": [
        {
          "name": "findHandle",
          "type": "int"
        },
        {
          "name": "outEntity",
          "type": "Entity*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xAB09B548",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x6B7AF743": {
      "name": "GET_INTERIOR_ROOM_FLAG",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "roomIndex",
          "type": "int",
          "description": "Interior room index."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomFlag = GetInteriorRoomFlag(interiorId, roomId)\r\n  print(\"current room flag is: \" .. roomFlag)\r\nend"
        }
      ],
      "hash": "0x6B7AF743",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Room's flag."
    },
    "0xED4B0486": {
      "name": "GET_ENTITY_ROUTING_BUCKET",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to get the routing bucket for."
        }
      ],
      "results": "int",
      "description": "Gets the routing bucket for the specified entity.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.",
      "examples": [
        
      ],
      "hash": "0xED4B0486",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The routing bucket ID."
    },
    "0xBD7BEBC5": {
      "name": "FIND_KVP",
      "params": [
        {
          "name": "handle",
          "type": "int",
          "description": "The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xBD7BEBC5",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "None."
    },
    "0xE8C0C629": {
      "name": "GET_ENTITY_COLLISION_DISABLED",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The target entity."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE8C0C629",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns whether or not entity collisions are disabled."
    },
    "0xE5E9EBBB": {
      "name": "GET_CURRENT_RESOURCE_NAME",
      "params": [
        
      ],
      "results": "char*",
      "description": "Returns the name of the currently executing resource.",
      "examples": [
        
      ],
      "hash": "0xE5E9EBBB",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The name of the resource."
    },
    "0xB7F70784": {
      "name": "GET_ENTITY_SCRIPT",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xB7F70784",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x935C0AB2": {
      "name": "GET_CONVAR_INT",
      "params": [
        {
          "name": "varName",
          "type": "char*",
          "description": "The console variable to look up."
        },
        {
          "name": "default_",
          "type": "int",
          "description": "The default value to set if none is found (variable not set using [SET_CONVAR](#\\_0x341B16D2), or not accessible)."
        }
      ],
      "results": "int",
      "description": "Can be used to get a console variable casted back to `int` (an integer value).",
      "examples": [
        {
          "lang": "lua",
          "code": "if GetConvarInt('remainingRounds', 0) < 900 then\r\n    Citizen.Trace(\"Less than 900 rounds remaining...\")\r\nend"
        }
      ],
      "hash": "0x935C0AB2",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "Returns the convar value if it can be found, otherwise it returns the assigned `default`."
    },
    "0xE57429FA": {
      "name": "GET_CONSOLE_BUFFER",
      "params": [
        
      ],
      "results": "char*",
      "description": "Returns the current console output buffer.",
      "examples": [
        
      ],
      "hash": "0xE57429FA",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The most recent game console output, as a string."
    },
    "0xB1BD08D": {
      "name": "GET_ENTITY_TYPE",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to get the type of."
        }
      ],
      "results": "int",
      "description": "Gets the entity type (as an integer), which can be one of the following defined down below:\n\n**The following entities will return type `1`:**\n\n*   Ped\n*   Player\n*   Animal (Red Dead Redemption 2)\n*   Horse (Red Dead Redemption 2)\n\n**The following entities will return type `2`:**\n\n*   Automobile\n*   Bike\n*   Boat\n*   Heli\n*   Plane\n*   Submarine\n*   Trailer\n*   Train\n*   DraftVeh (Red Dead Redemption 2)\n\n**The following entities will return type `3`:**\n\n*   Object\n*   Door\n*   Pickup\n\nOtherwise, a value of `0` will be returned.",
      "examples": [
        
      ],
      "hash": "0xB1BD08D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The entity type returned as an integer value."
    },
    "0xF9E795DD": {
      "name": "GET_INTERIOR_ROOM_EXTENTS",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "roomIndex",
          "type": "int",
          "description": "Interior room index."
        },
        {
          "name": "bbMinX",
          "type": "float*"
        },
        {
          "name": "bbMinY",
          "type": "float*"
        },
        {
          "name": "bbMinZ",
          "type": "float*"
        },
        {
          "name": "bbMaxX",
          "type": "float*"
        },
        {
          "name": "bbMaxY",
          "type": "float*"
        },
        {
          "name": "bbMaxZ",
          "type": "float*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local minX, minY, minZ, maxX, maxY, maxZ = GetInteriorRoomExtents(interiorId, roomId)\r\n  print(\"current room extents is: \" .. vec(minX, minY, minZ) ..\" / \" .. vec(maxX, maxY, maxZ))\r\nend"
        }
      ],
      "hash": "0xF9E795DD",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Room extents."
    },
    "0xEA11BFBA": {
      "name": "GET_CURRENT_SERVER_ENDPOINT",
      "params": [
        
      ],
      "results": "char*",
      "description": "Returns the peer address of the remote game server that the user is currently connected to.",
      "examples": [
        
      ],
      "hash": "0xEA11BFBA",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The peer address of the game server (e.g. `127.0.0.1:30120`), or NULL if not available."
    },
    "0x8F57A89D": {
      "name": "GET_CAM_MATRIX",
      "params": [
        {
          "name": "camera",
          "type": "Cam"
        },
        {
          "name": "rightVector",
          "type": "Vector3*"
        },
        {
          "name": "forwardVector",
          "type": "Vector3*"
        },
        {
          "name": "upVector",
          "type": "Vector3*"
        },
        {
          "name": "position",
          "type": "Vector3*"
        }
      ],
      "results": "void",
      "description": "Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.",
      "examples": [
        
      ],
      "hash": "0x8F57A89D",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xFE1589F9": {
      "name": "GET_ENTITY_ATTACHED_TO",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to check."
        }
      ],
      "results": "Entity",
      "description": "Gets the entity that this entity is attached to.",
      "examples": [
        
      ],
      "hash": "0xFE1589F9",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The attached entity handle. 0 returned if the entity is not attached."
    },
    "0x13B6855D": {
      "name": "FLAG_SERVER_AS_PRIVATE",
      "params": [
        {
          "name": "private_",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x13B6855D",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x6CCD2564": {
      "name": "GET_CONVAR",
      "params": [
        {
          "name": "varName",
          "type": "char*",
          "description": "The console variable to look up."
        },
        {
          "name": "default_",
          "type": "char*",
          "description": "The default value to set if none is found."
        }
      ],
      "results": "char*",
      "description": "Can be used to get a console variable of type `char*`, for example a string.",
      "examples": [
        {
          "lang": "lua",
          "code": "if GetConvar('voice_useNativeAudio', 'false') == 'true' then\r\n    Citizen.Trace('Native Audio is enabled.')\r\nend"
        }
      ],
      "hash": "0x6CCD2564",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "Returns the convar value if it can be found, otherwise it returns the assigned `default`."
    },
    "0xE8EAA18B": {
      "name": "GET_GAME_NAME",
      "params": [
        
      ],
      "results": "char*",
      "description": "Returns the current game being executed.\n\nPossible values:\n\n| Return value | Meaning                        |\r\n| ------------ | ------------------------------ |\r\n| `fxserver`   | Server-side code ('Duplicity') |\r\n| `fivem`      | FiveM for GTA V                |\r\n| `libertym`   | LibertyM for GTA IV            |\r\n| `redm`       | RedM for Red Dead Redemption 2 |",
      "examples": [
        
      ],
      "hash": "0xE8EAA18B",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The game the script environment is running in."
    },
    "0x4107EF0F": {
      "name": "FIND_NEXT_PICKUP",
      "params": [
        {
          "name": "findHandle",
          "type": "int"
        },
        {
          "name": "outEntity",
          "type": "Entity*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x4107EF0F",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xE6E16170": {
      "name": "FORCE_SNOW_PASS",
      "params": [
        {
          "name": "enabled",
          "type": "BOOL",
          "description": "Whether or not to force rendering to use a snow pass."
        }
      ],
      "results": "void",
      "description": "Forces the game snow pass to render.",
      "examples": [
        
      ],
      "hash": "0xE6E16170",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xC14C9B6B": {
      "name": "GET_ENTITY_VELOCITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "Vector3",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC14C9B6B",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xA41BC13D": {
      "name": "GET_HELI_TAIL_ROTOR_HEALTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA41BC13D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "See the client-side [GET_HELI_TAIL_ROTOR_HEALTH](https://docs.fivem.net/natives/?\\_0xAE8CE82A4219AC8C) for the return value."
    },
    "0x2B9D4F50": {
      "name": "GET_GAME_POOL",
      "params": [
        {
          "name": "poolName",
          "type": "char*",
          "description": "The pool name to get a list of entities from."
        }
      ],
      "results": "object",
      "description": "Returns a list of entity handles (script GUID) for all entities in the specified pool - the data returned is an array as\r\nfollows:\n\n```json\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```\n\n### Supported pools\n\n*   `CPed`: Peds (including animals) and players.\n*   `CObject`: Objects (props), doors, and projectiles.\n*   `CVehicle`: Vehicles.\n*   `CPickup`: Pickups.",
      "examples": [
        {
          "lang": "lua",
          "code": "local vehiclePool = GetGamePool('CVehicle') -- Get the list of vehicles (entities) from the pool\r\nfor i = 1, #vehiclePool do -- loop through each vehicle (entity)\r\n    if GetPedInVehicleSeat(vehiclePool[i], -1) == 0 then\r\n        DeleteEntity(vehiclePool[i]) -- Delete vehicles (entities) that don't have a driver\r\n    end\r\nend"
        }
      ],
      "hash": "0x2B9D4F50",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An array containing entity handles for each entity in the named pool."
    },
    "0xA45B6C8D": {
      "name": "GET_PED_MAX_HEALTH",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA45B6C8D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x1655D41D": {
      "name": "GET_DUI_HANDLE",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        }
      ],
      "results": "char*",
      "description": "Returns the NUI window handle for a specified DUI browser object.",
      "examples": [
        
      ],
      "hash": "0x1655D41D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The NUI window handle, for use in e.g. CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE."
    },
    "0x4BDF1867": {
      "name": "GET_ENTITY_FROM_STATE_BAG_NAME",
      "params": [
        {
          "name": "bagName",
          "type": "char*",
          "description": "An internal state bag ID from the argument to a state bag change handler."
        }
      ],
      "results": "Entity",
      "description": "Returns the entity handle for the specified state bag name. For use with [ADD_STATE_BAG_CHANGE_HANDLER](?\\_0x5BA35AAF).",
      "examples": [
        {
          "lang": "js",
          "code": "AddStateBagChangeHandler(\"blockTasks\", null, async (bagName, key, value /* boolean */) => {\r\n    let entity = GetEntityFromStateBagName(bagName);\r\n    // Whoops, we were don't have a valid entity!\r\n    if (entity === 0) return;\r\n    // We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while (!HasCollisionLoadedAroundEntity(entity)) {\r\n        // The entity went out of our scope before the collision loaded\r\n        if (!DoesEntityExist(entity)) return;\r\n        await Delay(250);\r\n    }\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\n})"
        },
        {
          "lang": "lua",
          "code": "AddStateBagChangeHandler(\"blockTasks\", nil, function(bagName, key, value) \r\n    local entity = GetEntityFromStateBagName(bagName)\r\n    -- Whoops, we don't have a valid entity!\r\n    if entity === 0 then return end\r\n    -- We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while not HasCollisionLoadedAroundEntity(entity) do\r\n        -- The entity went out of our scope before the collision loaded\r\n        if not DoesEntityExist(entity) then return end\r\n        Wait(250)\r\n    end\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\nend)"
        }
      ],
      "hash": "0x4BDF1867",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The entity handle or 0 if the state bag name did not refer to an entity, or the entity does not exist."
    },
    "0x47B870F5": {
      "name": "GET_ENTITY_ARCHETYPE_NAME",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "An entity handle."
        }
      ],
      "results": "char*",
      "description": "Returns entity's archetype name, if available.",
      "examples": [
        
      ],
      "hash": "0x47B870F5",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Entity's archetype name"
    },
    "0xACA18ECD": {
      "name": "GET_CURRENT_GAME_NAME",
      "params": [
        
      ],
      "results": "char*",
      "description": "This native returns the currently used game's name.",
      "examples": [
        
      ],
      "hash": "0xACA18ECD",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The game name as a string, one of the following values: gta4, gta5, rdr3"
    },
    "0x804B9F7B": {
      "name": "GET_GAME_BUILD_NUMBER",
      "params": [
        
      ],
      "results": "int",
      "description": "Returns the internal build number of the current game being executed.\n\nPossible values:\n\n*   FiveM\n    *   1604\n    *   2060\n    *   2189\n    *   2372\n    *   2545\n    *   2612\n    *   2699\n    *   2802\n    *   2944\n*   RedM\n    *   1311\n    *   1355\n    *   1436\n    *   1491\n*   LibertyM\n    *   43\n*   FXServer\n    *   0",
      "examples": [
        
      ],
      "hash": "0x804B9F7B",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The build number, or **0** if no build number is known."
    },
    "0x388FDE9A": {
      "name": "GET_PED_IN_VEHICLE_SEAT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        },
        {
          "name": "seatIndex",
          "type": "int",
          "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
        }
      ],
      "results": "Entity",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x388FDE9A",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The ped in the specified seat of the passed vehicle. Returns 0 if the specified seat is not occupied."
    },
    "0x82BA3F88": {
      "name": "GET_INTERIOR_ROOM_TIMECYCLE",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "roomIndex",
          "type": "int",
          "description": "Interior room index."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomTimecycle = GetInteriorRoomTimecycle(interiorId, roomId)\r\n  print(\"current room timecycle hash is: \" .. roomTimecycle)\r\nend"
        }
      ],
      "hash": "0x82BA3F88",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Room's timecycle hash."
    },
    "0xC7AE6AA1": {
      "name": "GET_ENTITY_MAX_HEALTH",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "int",
      "description": "Currently it only works with peds.",
      "examples": [
        
      ],
      "hash": "0xC7AE6AA1",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x972CC383": {
      "name": "GET_ENTITY_HEADING",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x972CC383",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x11755DF2": {
      "name": "GET_INTERIOR_ROOM_NAME",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "roomIndex",
          "type": "int",
          "description": "Interior room index."
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomName = GetInteriorRoomName(interiorId, roomId)\r\n  print(\"current room name is: \" .. roomName)\r\nend"
        }
      ],
      "hash": "0x11755DF2",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Room's name."
    },
    "0xE0EE05F8": {
      "name": "GET_INTERIOR_ROOM_INDEX_BY_HASH",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "roomHash",
          "type": "int",
          "description": "Interior room hash."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  print(\"current room index is: \" .. roomId)\r\nend"
        }
      ],
      "hash": "0xE0EE05F8",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Room index, -1 if failed."
    },
    "0x5A039998": {
      "name": "GET_INTERIOR_ROTATION",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "rotx",
          "type": "float*"
        },
        {
          "name": "rotY",
          "type": "float*"
        },
        {
          "name": "rotZ",
          "type": "float*"
        },
        {
          "name": "rotW",
          "type": "float*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local x, y, z, w = GetInteriorRotation(interiorId)\r\n  print(\"current interior \" .. interiorId .. \" rotation is: \" .. vec(x, y, z, w))\r\nend"
        }
      ],
      "hash": "0x5A039998",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Interior rotation in quaternion."
    },
    "0xCD949E20": {
      "name": "GET_HUD_COMPONENT_ALIGN",
      "params": [
        {
          "name": "id",
          "type": "int",
          "description": "The hud component id."
        },
        {
          "name": "horizontalAlign",
          "type": "int*"
        },
        {
          "name": "verticalAlign",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "See [SET_SCRIPT_GFX_ALIGN](#\\_0xB8A850F20A067EB6) for details about how gfx align works.",
      "examples": [
        
      ],
      "hash": "0xCD949E20",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x12217D33": {
      "name": "GET_HUD_COMPONENT_SIZE",
      "params": [
        {
          "name": "id",
          "type": "int",
          "description": "The hud component id."
        }
      ],
      "results": "Vector3",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x12217D33",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "A Vector3 with the hud component size X and size Y values."
    },
    "0xA91866BC": {
      "name": "GET_HUD_COMPONENT_NAME",
      "params": [
        {
          "name": "id",
          "type": "int",
          "description": "The hud component id."
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA91866BC",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The hud component name."
    },
    "0x5F70F5A3": {
      "name": "GET_HOST_ID",
      "params": [
        
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x5F70F5A3",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x9DA2E811": {
      "name": "GET_INTERIOR_PORTAL_ENTITY_FLAG",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "entityIndex",
          "type": "int",
          "description": "Portal entity index."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local flag = GetInteriorPortalEntityFlag(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" flag is: \" .. flag)\r\n  end\r\nend"
        }
      ],
      "hash": "0x9DA2E811",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal entity flag."
    },
    "0xF01E2AAB": {
      "name": "GET_HELI_MAIN_ROTOR_HEALTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF01E2AAB",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "See the client-side [GET_HELI_MAIN_ROTOR_HEALTH](https://docs.fivem.net/natives/?\\_0xE4CB7541F413D2C5) for the return value."
    },
    "0xDAFCB3EC": {
      "name": "GET_ENTITY_MODEL",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "Hash",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xDAFCB3EC",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x1647F1CB": {
      "name": "GET_ENTITY_COORDS",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to get the coordinates from."
        }
      ],
      "results": "Vector3",
      "description": "Gets the current coordinates for a specified entity. This native is used server side when using OneSync.\n\nSee [GET_ENTITY_COORDS](#\\_0x3FEF770D40960D5A) for client side.",
      "examples": [
        {
          "lang": "lua",
          "code": "local function ShowCoordinates()\r\n    local player = source\r\n    local ped = GetPlayerPed(player)\r\n    local playerCoords = GetEntityCoords(ped)\r\n\r\n    print(playerCoords) -- vector3(...)\r\nend\r\n\r\nRegisterNetEvent(\"myCoordinates\")\r\nAddEventHandler(\"myCoordinates\", ShowCoordinates)"
        },
        {
          "lang": "js",
          "code": "onNet('myCoordinates', () => {\r\n  const player = global.source; // use (global as any).source for Typescript\r\n  const ped = GetPlayerPed(player);\r\n  const [playerX, playerY, playerZ] = GetEntityCoords(ped);\r\n\r\n  console.log(`${playerX}, ${playerY}, ${playerZ}`);\r\n});"
        },
        {
          "lang": "cs",
          "code": "using static CitizenFX.Core.Native.API;\r\n// ...\r\n\r\n// In class constructor\r\nEventHandlers[\"myCoordinates\"] += new Action<Player>(ShowCoordinates);\r\n\r\n// Delegate method\r\nprivate void ShowCoordinates([FromSource]Player player) {\r\n    Vector3 playerCoords = GetEntityCoords(player.Character);\r\n\r\n    // or the preferred use of C# wrapper\r\n    Vector3 playerCoords = player.Character.Position;\r\n\r\n    Debug.WriteLine($\"{playerCoords}\");\r\n}\r\n"
        }
      ],
      "hash": "0x1647F1CB",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The current entity coordinates."
    },
    "0x98EFF6F1": {
      "name": "GET_HASH_KEY",
      "params": [
        {
          "name": "model",
          "type": "char*"
        }
      ],
      "results": "Hash",
      "description": "This native converts the passed string to a hash.",
      "examples": [
        
      ],
      "hash": "0x98EFF6F1",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xF772BB2C": {
      "name": "GET_INTERIOR_PORTAL_CORNER_POSITION",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "cornerIndex",
          "type": "int",
          "description": "Portal's corner index."
        },
        {
          "name": "posX",
          "type": "float*"
        },
        {
          "name": "posY",
          "type": "float*"
        },
        {
          "name": "posZ",
          "type": "float*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n  local cornerIndex = 0\r\n\r\n  local x, y, z = GetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex)\r\n  print(\"position of portal \" .. portalIndex .. \"corner index \" .. cornerIndex .. \" is: \" .. vec(x, y, z))\r\nend"
        }
      ],
      "hash": "0xF772BB2C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal corner position."
    },
    "0xC68021B": {
      "name": "GET_INTERIOR_PORTAL_ENTITY_COUNT",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  print(\"portal \" .. portalIndex ..\" entity count is: \" .. count)\r\nend"
        }
      ],
      "hash": "0xC68021B",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal entity count."
    },
    "0x322B1192": {
      "name": "GET_INTERIOR_ENTITIES_EXTENTS",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "bbMinX",
          "type": "float*"
        },
        {
          "name": "bbMinY",
          "type": "float*"
        },
        {
          "name": "bbMinZ",
          "type": "float*"
        },
        {
          "name": "bbMaxX",
          "type": "float*"
        },
        {
          "name": "bbMaxY",
          "type": "float*"
        },
        {
          "name": "bbMaxZ",
          "type": "float*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local minX, minY, minZ, maxX, maxY, maxZ = GetInteriorEntitiesExtents(interiorId, roomId)\r\n  print(\"current entities extents is: \" .. vec(minX, minY, minZ) ..\" / \" .. vec(maxX, maxY, maxZ))\r\nend"
        }
      ],
      "hash": "0x322B1192",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Interior entities extents."
    },
    "0xA4EA0691": {
      "name": "GET_GAME_TIMER",
      "params": [
        
      ],
      "results": "long",
      "description": "Gets the current game timer in milliseconds.",
      "examples": [
        
      ],
      "hash": "0xA4EA0691",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The game time."
    },
    "0xE415EC5C": {
      "name": "GET_PLAYER_STAMINA",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE415EC5C",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The value of player stamina."
    },
    "0xD7EC8760": {
      "name": "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xD7EC8760",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x4D97BCC7": {
      "name": "GET_PLAYER_SERVER_ID",
      "params": [
        {
          "name": "player",
          "type": "Player"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x4D97BCC7",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xFE08CAD6": {
      "name": "GET_PED_MODEL_PERSONALITY",
      "params": [
        {
          "name": "modelHash",
          "type": "Hash",
          "description": "Ped's model."
        }
      ],
      "results": "Hash",
      "description": "Gets a ped model's personality type.",
      "examples": [
        
      ],
      "hash": "0xFE08CAD6",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x84FE084": {
      "name": "GET_PED_SCRIPT_TASK_COMMAND",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "Hash",
      "description": "Gets the script task command currently assigned to the ped.",
      "examples": [
        
      ],
      "hash": "0x84FE084",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The script task command currently assigned to the ped. A value of 0x811E343C denotes no script task is assigned."
    },
    "0xFC30DDFF": {
      "name": "GET_ENTITY_POPULATION_TYPE",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "the entity to obtain the population type from"
        }
      ],
      "results": "int",
      "description": "This native gets an entity's population type.",
      "examples": [
        
      ],
      "hash": "0xFC30DDFF",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns the population type ID, defined by the below enumeration:```cpp\nenum ePopulationType\r\n{\r\n\tPOPTYPE_UNKNOWN = 0,\r\n\tPOPTYPE_RANDOM_PERMANENT,\r\n\tPOPTYPE_RANDOM_PARKED,\r\n\tPOPTYPE_RANDOM_PATROL,\r\n\tPOPTYPE_RANDOM_SCENARIO,\r\n\tPOPTYPE_RANDOM_AMBIENT,\r\n\tPOPTYPE_PERMANENT,\r\n\tPOPTYPE_MISSION,\r\n\tPOPTYPE_REPLAY,\r\n\tPOPTYPE_CACHE,\r\n\tPOPTYPE_TOOL\r\n};\n```"
    },
    "0x288AD228": {
      "name": "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x288AD228",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x4D52FE5B": {
      "name": "GET_INVOKING_RESOURCE",
      "params": [
        
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x4D52FE5B",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0xBDBA226F": {
      "name": "GET_NUI_CURSOR_POSITION",
      "params": [
        {
          "name": "x",
          "type": "int*"
        },
        {
          "name": "y",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xBDBA226F",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x8E3222B7": {
      "name": "GET_ENTITY_HEALTH",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to check the health of"
        }
      ],
      "results": "int",
      "description": "Only works for vehicle and peds",
      "examples": [
        
      ],
      "hash": "0x8E3222B7",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "If the entity is a vehicle it will return 0-1000\r\nIf the entity is a ped it will return 0-200\r\nIf the entity is an object it will return 0"
    },
    "0x69E81E3D": {
      "name": "GET_PED_MOVEMENT_CLIPSET",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x69E81E3D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The current movement clipset hash."
    },
    "0x44B0E5E2": {
      "name": "GET_PED_SCRIPT_TASK_STAGE",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "int",
      "description": "Gets the stage of the peds scripted task.",
      "examples": [
        
      ],
      "hash": "0x44B0E5E2",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The stage of the ped's scripted task. A value of 3 denotes no script task is assigned."
    },
    "0x63D13184": {
      "name": "GET_NUM_PLAYER_INDICES",
      "params": [
        
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x63D13184",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x9F1C4383": {
      "name": "GET_INSTANCE_ID",
      "params": [
        
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9F1C4383",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0xFF7F66AB": {
      "name": "GET_NUM_PLAYER_IDENTIFIERS",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFF7F66AB",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x7DC6D022": {
      "name": "GET_IS_VEHICLE_ENGINE_RUNNING",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x7DC6D022",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x1363A998": {
      "name": "GET_MAP_ZOOM_DATA_LEVEL",
      "params": [
        {
          "name": "index",
          "type": "int",
          "description": "Zoom level index."
        },
        {
          "name": "zoomScale",
          "type": "float*",
          "description": "fZoomScale value."
        },
        {
          "name": "zoomSpeed",
          "type": "float*",
          "description": "fZoomSpeed value."
        },
        {
          "name": "scrollSpeed",
          "type": "float*",
          "description": "fScrollSpeed value."
        },
        {
          "name": "tilesX",
          "type": "float*",
          "description": "vTiles X."
        },
        {
          "name": "tilesY",
          "type": "float*",
          "description": "vTiles Y."
        }
      ],
      "results": "BOOL",
      "description": "Returns the zoom level data by index from mapzoomdata.meta file.",
      "examples": [
        
      ],
      "hash": "0x1363A998",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A boolean indicating TRUE if the data was received successfully."
    },
    "0x619E4A3D": {
      "name": "GET_NUM_PLAYER_TOKENS",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x619E4A3D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x9F9CEB63": {
      "name": "GET_INTERIOR_PORTAL_ENTITY_ROTATION",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "entityIndex",
          "type": "int",
          "description": "Portal entity index."
        },
        {
          "name": "rotX",
          "type": "float*"
        },
        {
          "name": "rotY",
          "type": "float*"
        },
        {
          "name": "rotZ",
          "type": "float*"
        },
        {
          "name": "rotW",
          "type": "float*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local x, y, z, w = GetInteriorPortalEntityRotation(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" rotation is: \" .. vec4(x, y, z, w))\r\n  end\r\nend"
        }
      ],
      "hash": "0x9F9CEB63",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal entity rotation."
    },
    "0x3F47F0E8": {
      "name": "GET_INTERIOR_PORTAL_ROOM_TO",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local roomIndex = 0\r\n\r\n  local portalRoomTo = GetInteriorPortalRoomTo(interiorId, 0)\r\n  print(\"portal \" .. roomIndex .. \" room TO is: \" .. portalRoomTo)\r\nend"
        }
      ],
      "hash": "0x3F47F0E8",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal's room TO index."
    },
    "0x9A0E1700": {
      "name": "GET_INTERIOR_PORTAL_ENTITY_ARCHETYPE",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "entityIndex",
          "type": "int",
          "description": "Portal entity index."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local archetype = GetInteriorPortalEntityArchetype(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" archetype is: \" .. archetype)\r\n  end\r\nend"
        }
      ],
      "hash": "0x9A0E1700",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal entity archetype."
    },
    "0xC74DA47C": {
      "name": "GET_INTERIOR_PORTAL_FLAG",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalFlag = GetInteriorPortalFlag(interiorId, 0)\r\n  print(\"portal 0 flag is: \" .. portalRoomFrom)\r\nend"
        }
      ],
      "hash": "0xC74DA47C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal's flag."
    },
    "0x863F27B": {
      "name": "GET_NUM_RESOURCES",
      "params": [
        
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x863F27B",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0x63458C27": {
      "name": "GET_PED_CAUSE_OF_DEATH",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        }
      ],
      "results": "Hash",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x63458C27",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x5F4CD0E2": {
      "name": "GET_TIMECYCLE_MODIFIER_INDEX_BY_NAME",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The timecycle modifier name."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local modifierIndex = GetTimecycleModifierIndexByName(\"underwater\")\r\nlocal currentIndex = GetTimecycleModifierIndex()\r\n\r\nif currentIndex ~= -1 and currentIndex == modifierIndex then\r\n  print(\"we're actually using 'underwater' timecycle!\")\r\nend"
        }
      ],
      "hash": "0x5F4CD0E2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The timecycle modifier index."
    },
    "0x2CAFD5E9": {
      "name": "GET_NETWORK_WALK_MODE",
      "params": [
        
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2CAFD5E9",
      "ns": "CFX",
      "apiset": "client",
      "game": "ny",
      "resultsDescription": ""
    },
    "0xD05BB8B1": {
      "name": "GET_INTERIOR_PORTAL_COUNT",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalCount(interiorId)\r\n  print(\"interior \" .. interiorId .. \"has \" .. count .. \" portals\")\r\nend"
        }
      ],
      "hash": "0xD05BB8B1",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The amount of portals in interior."
    },
    "0x28CB8608": {
      "name": "GET_TIMECYCLE_MODIFIER_NAME_BY_INDEX",
      "params": [
        {
          "name": "modifierIndex",
          "type": "int",
          "description": "The timecycle modifier index."
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local modifierIndex = GetTimecycleModifierIndex()\r\n\r\nif modifierIndex ~= -1 then\r\n  local modifierName = GetTimecycleModifierNameByIndex(modifierIndex)\r\n  print(\"current timecycle name is \" .. modifierName)\r\nend"
        }
      ],
      "hash": "0x28CB8608",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The timecycle modifier name."
    },
    "0xFF72DF84": {
      "name": "GET_PARKED_VEHICLE_DENSITY_MULTIPLIER",
      "params": [
        
      ],
      "results": "float",
      "description": "A getter for [SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0xEAE6DCC7EEE3DB1D).",
      "examples": [
        
      ],
      "hash": "0xFF72DF84",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns parked vehicle density multiplier value."
    },
    "0x40321B83": {
      "name": "GET_PED_STEALTH_MOVEMENT",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x40321B83",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Whether or not the ped is stealthy."
    },
    "0xF5A904F9": {
      "name": "GET_PED_DENSITY_MULTIPLIER",
      "params": [
        
      ],
      "results": "float",
      "description": "A getter for [SET_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x95E3D6257B166CF2).",
      "examples": [
        
      ],
      "hash": "0xF5A904F9",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns ped density multiplier value."
    },
    "0x535DB43F": {
      "name": "GET_PED_SOURCE_OF_DAMAGE",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        }
      ],
      "results": "Entity",
      "description": "Get the last entity that damaged the ped. This native is used server side when using OneSync.",
      "examples": [
        
      ],
      "hash": "0x535DB43F",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The entity id. Returns 0 if the ped has not been damaged recently."
    },
    "0x9873E404": {
      "name": "GET_PLAYER_TEAM",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9873E404",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xC8A9CE08": {
      "name": "GET_PLAYER_FROM_INDEX",
      "params": [
        {
          "name": "index",
          "type": "int"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC8A9CE08",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x84ADF9EB": {
      "name": "GET_PED_SOURCE_OF_DEATH",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        }
      ],
      "results": "Entity",
      "description": "Get the entity that killed the ped. This native is used server side when using OneSync.",
      "examples": [
        
      ],
      "hash": "0x84ADF9EB",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The entity id. Returns 0 if the ped has no killer."
    },
    "0x54C06897": {
      "name": "GET_PLAYER_TOKEN",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "A player."
        },
        {
          "name": "index",
          "type": "int",
          "description": "Index between 0 and GET_NUM_PLAYER_TOKENS."
        }
      ],
      "results": "char*",
      "description": "Gets a player's token. Tokens can be used to enhance banning logic, however are specific to a server.",
      "examples": [
        
      ],
      "hash": "0x54C06897",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A token value."
    },
    "0x98D244": {
      "name": "GET_PLAYER_FAKE_WANTED_LEVEL",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The target player"
        }
      ],
      "results": "int",
      "description": "Gets the current fake wanted level for a specified player. This native is used server side when using OneSync.",
      "examples": [
        
      ],
      "hash": "0x98D244",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The fake wanted level"
    },
    "0x344EA166": {
      "name": "GET_PLAYER_FROM_SERVER_ID",
      "params": [
        {
          "name": "serverId",
          "type": "int"
        }
      ],
      "results": "Player",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x344EA166",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xA56135E0": {
      "name": "GET_PLAYER_FROM_STATE_BAG_NAME",
      "params": [
        {
          "name": "bagName",
          "type": "char*",
          "description": "An internal state bag ID from the argument to a state bag change handler."
        }
      ],
      "results": "int",
      "description": "On the server this will return the players source, on the client it will return the player handle.",
      "examples": [
        {
          "lang": "js",
          "code": "AddStateBagChangeHandler(\"isDead\", null, async (bagName, key, value /* boolean */) => {\r\n    const ply = GetPlayerFromStateBagName(bagName);\r\n    // The player doesn't exist!\r\n    if (ply === 0) return;\r\n    console.log(`Player: ${GetPlayerName(ply)} ${value ? 'died!' : 'is alive!'`)\r\n})"
        },
        {
          "lang": "lua",
          "code": "AddStateBagChangeHandler(\"isDead\", nil, function(bagName, key, value) \r\n    local ply = GetPlayerFromStateBagName(bagName)\r\n    -- The player doesn't exist!\r\n    if ply == 0 then return end\r\n    print(\"Player: \" .. GetPlayerName(ply) .. value and 'died!' or 'is alive!')\r\nend)"
        }
      ],
      "hash": "0xA56135E0",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The player handle or 0 if the state bag name did not refer to a player, or the player does not exist."
    },
    "0x78F27B1F": {
      "name": "GET_PLAYER_VEHICLE_DAMAGE_MODIFIER",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "A getter for [SET_PLAYER_VEHICLE_DAMAGE_MODIFIER](#\\_0xA50E117CDDF82F0C).",
      "examples": [
        
      ],
      "hash": "0x78F27B1F",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The value of player vehicle damage modifier."
    },
    "0xF7C6792D": {
      "name": "GET_LAST_PED_IN_VEHICLE_SEAT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        },
        {
          "name": "seatIndex",
          "type": "int",
          "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
        }
      ],
      "results": "Entity",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF7C6792D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The last ped in the specified seat of the passed vehicle. Returns 0 if the specified seat was never occupied or the last ped does not exist anymore."
    },
    "0x77A435B0": {
      "name": "GET_INTERIOR_POSITION",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "posX",
          "type": "float*"
        },
        {
          "name": "posY",
          "type": "float*"
        },
        {
          "name": "posZ",
          "type": "float*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local x, y, z = GetInteriorPosition(interiorId)\r\n  print(\"current interior \" .. interiorId .. \" position is: \" .. vec(x, y, z))\r\nend"
        }
      ],
      "hash": "0x77A435B0",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Interior position."
    },
    "0xC182F76E": {
      "name": "GET_PED_DESIRED_HEADING",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC182F76E",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns ped's desired heading."
    },
    "0xA6F02670": {
      "name": "GET_LANDING_GEAR_STATE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to check."
        }
      ],
      "results": "int",
      "description": "See the client-side [GET_LANDING_GEAR_STATE](#\\_0x9B0F3DCA3DB0F4CD) native for a description of landing gear states.",
      "examples": [
        
      ],
      "hash": "0xA6F02670",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The current state of the vehicles landing gear."
    },
    "0x776E864": {
      "name": "GET_NUM_RESOURCE_METADATA",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The resource name."
        },
        {
          "name": "metadataKey",
          "type": "char*",
          "description": "The key to look up in the resource manifest."
        }
      ],
      "results": "int",
      "description": "Gets the amount of metadata values with the specified key existing in the specified resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)",
      "examples": [
        
      ],
      "hash": "0x776E864",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0x7F4563D3": {
      "name": "GET_PED_SPECIFIC_TASK_TYPE",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        },
        {
          "name": "index",
          "type": "int",
          "description": "A zero-based index with a maximum value of 7."
        }
      ],
      "results": "int",
      "description": "Gets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes.\r\nA ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc.",
      "examples": [
        
      ],
      "hash": "0x7F4563D3",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The type of the specific task.\r\n1604: A value of 530 denotes no script task is assigned or an invalid input was given.\r\n2060+: A value of 531 denotes no script task is assigned or an invalid input was given."
    },
    "0x7ADE63E1": {
      "name": "GET_PLAYER_TIME_IN_PURSUIT",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The target player"
        },
        {
          "name": "lastPursuit",
          "type": "BOOL",
          "description": "False = CurrentPursuit, True = LastPursuit"
        }
      ],
      "results": "int",
      "description": "```\nGets the amount of time player has spent evading the cops.\r\nCounter starts and increments only when cops are chasing the player.\r\nIf the player is evading, the timer will pause.\n```",
      "examples": [
        
      ],
      "hash": "0x7ADE63E1",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns -1, if the player is not wanted or wasn't in pursuit before, depending on the lastPursuit parameter\r\nReturns 0, if lastPursuit == False and the player has a wanted level, but the pursuit has not started yet\r\nOtherwise, will return the milliseconds of the pursuit."
    },
    "0xA2737C2C": {
      "name": "GET_INTERIOR_ROOM_COUNT",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorRoomCount(interiorId)\r\n  print(\"interior \" .. interiorId .. \"has \" .. count .. \" rooms\")\r\nend"
        }
      ],
      "hash": "0xA2737C2C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The amount of rooms in interior."
    },
    "0xAA9C141D": {
      "name": "GET_INTERIOR_PORTAL_ROOM_FROM",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local roomIndex = 0\r\n\r\n  local portalRoomFrom = GetInteriorPortalRoomFrom(interiorId, 0)\r\n  print(\"portal \" .. roomIndex .. \" room FROM is: \" .. portalRoomFrom)\r\nend"
        }
      ],
      "hash": "0xAA9C141D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal's room FROM index."
    },
    "0xE52D9680": {
      "name": "GET_PLAYER_GUID",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE52D9680",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x2CE311A7": {
      "name": "GET_PED_ARMOUR",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2CE311A7",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xBE54124A": {
      "name": "GET_TIMECYCLE_MODIFIER_STRENGTH",
      "params": [
        
      ],
      "results": "float",
      "description": "A getter for [SET_TIMECYCLE_MODIFIER_STRENGTH](#\\_0x82E7FFCD5B2326B3).",
      "examples": [
        
      ],
      "hash": "0xBE54124A",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns current timecycle modifier strength."
    },
    "0x9B7AB83C": {
      "name": "GET_INTERIOR_PORTAL_ENTITY_POSITION",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "entityIndex",
          "type": "int",
          "description": "Portal entity index."
        },
        {
          "name": "posX",
          "type": "float*"
        },
        {
          "name": "posY",
          "type": "float*"
        },
        {
          "name": "posZ",
          "type": "float*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local x, y, z = GetInteriorPortalEntityPosition(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" position is: \" .. vec3(x, y, z))\r\n  end\r\nend"
        }
      ],
      "hash": "0x9B7AB83C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Portal entity position."
    },
    "0xA3EA2893": {
      "name": "GET_PED_HAIR_COLOR",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        }
      ],
      "results": "int",
      "description": "A getter for [\\_SET_PED_HAIR_COLOR](#\\_0x4CFFC65454C93A49). Returns -1 if fails to get.",
      "examples": [
        {
          "lang": "lua",
          "code": "local primaryColour = GetPedHairColor(PlayerPedId())\r\nif primaryColour == 18 then\r\n  print(\"You have red hair!\")\r\nend"
        }
      ],
      "hash": "0xA3EA2893",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns ped's primary hair colour."
    },
    "0xA61C8FC6": {
      "name": "GET_PLAYER_IDENTIFIER_BY_TYPE",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player to get the identifier for"
        },
        {
          "name": "identifierType",
          "type": "char*",
          "description": "The string to match in an identifier, this can be `\"license\"` for example."
        }
      ],
      "results": "char*",
      "description": "Get an identifier from a player by the type of the identifier.",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerLicenses = {}\r\n\r\nAddEventHandler('playerJoining', function()\r\n    playerLicenses[source] = GetPlayerIdentifierByType(source, 'license')\r\nend)"
        },
        {
          "lang": "js",
          "code": "let playerLicenses = {};\r\n\r\non('playerJoining', () => {\r\n    playerLicenses[source] = GetPlayerIdentifierByType(source, 'license');\r\n});"
        },
        {
          "lang": "cs",
          "code": "using System.Collections.Generic;\r\nusing static CitizenFX.Core.Native.API;\r\n// ...\r\n\r\n// In class\r\nprivate Dictionary<int, string> PlayerLicenses = new Dictionary<int, string>();\r\n\r\n// In class constructor\r\nEventHandlers[\"playerJoining\"] += new Action<Player>(SetLicense);\r\n\r\n// Delegate method\r\nprivate void SetLicense([FromSource]Player player) {\r\n    PlayerLicenses.Add(player.Handle, GetPlayerIdentifierByType(player.Handle, \"license\"));\r\n}"
        }
      ],
      "hash": "0xA61C8FC6",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The identifier that matches the string provided"
    },
    "0xA47B860F": {
      "name": "GET_PED_EYE_COLOR",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        }
      ],
      "results": "int",
      "description": "A getter for [\\_SET_PED_EYE_COLOR](#\\_0x50B56988B170AFDF). Returns -1 if fails to get.",
      "examples": [
        {
          "lang": "lua",
          "code": "local pedEyeColour = GetPedEyeColor(PlayerPedId())\r\nif pedEyeColour == 7 then\r\n  print(\"Gray eyes!\")\r\nend"
        }
      ],
      "hash": "0xA47B860F",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns ped's eye colour, or -1 if fails to get."
    },
    "0x23473EA4": {
      "name": "GET_PASSWORD_HASH",
      "params": [
        {
          "name": "password",
          "type": "char*"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x23473EA4",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x8326E7CD": {
      "name": "GET_PLAYER_VEHICLE_DEFENSE_MODIFIER",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "A getter for [SET_PLAYER_VEHICLE_DEFENSE_MODIFIER](#\\_0x4C60E6EFDAFF2462).",
      "examples": [
        
      ],
      "hash": "0x8326E7CD",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The value of player vehicle defense modifier."
    },
    "0x2A3D7CDA": {
      "name": "GET_PLAYER_WEAPON_DAMAGE_MODIFIER",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\\_0xCE07B9F7817AADA3).",
      "examples": [
        
      ],
      "hash": "0x2A3D7CDA",
      "ns": "CFX",
      "apiset": "shared",
      "game": "gta5",
      "resultsDescription": "The value of player weapon damage modifier."
    },
    "0x2A50657": {
      "name": "GET_PLAYER_MAX_ARMOUR",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2A50657",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x387246B7": {
      "name": "GET_RESOURCE_BY_FIND_INDEX",
      "params": [
        {
          "name": "findIndex",
          "type": "int",
          "description": "The index of the resource (starting at 0)"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local resourceList = {}\r\nfor i = 0, GetNumResources(), 1 do\r\n  local resource_name = GetResourceByFindIndex(i)\r\n  if resource_name and GetResourceState(resource_name) == \"started\" then\r\n    table.insert(resourceList, resource_name)\r\n  end\r\nend\r\nprint(table.unpack(resourceList))"
        }
      ],
      "hash": "0x387246B7",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The resource name as a `string`"
    },
    "0x680C90EE": {
      "name": "GET_PLAYER_INVINCIBLE",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x680C90EE",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A boolean to tell if the player is invincible."
    },
    "0x821F2D2C": {
      "name": "GET_PLAYER_WANTED_CENTRE_POSITION",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The target player"
        }
      ],
      "results": "Vector3",
      "description": "Gets the current known coordinates for the specified player from cops perspective. This native is used server side when using OneSync.",
      "examples": [
        
      ],
      "hash": "0x821F2D2C",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The player's position known by police. Vector zero if the player has no wanted level."
    },
    "0x8154E470": {
      "name": "GET_PLAYER_MAX_HEALTH",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x8154E470",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xFEE404F9": {
      "name": "GET_PLAYER_ENDPOINT",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFEE404F9",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xFABE67A9": {
      "name": "GET_VEHICLE_DASHBOARD_VACUUM",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFABE67A9",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x8E3B3E42": {
      "name": "GET_VEHICLE_DASHBOARD_WATER_TEMP",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x8E3B3E42",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x60FB60FE": {
      "name": "GET_TIMECYCLE_MODIFIER_VAR_COUNT",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The timecycle modifier name."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local varCount = GetTimecycleModifierVarCount(\"underwater\")\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleModifierVarNameByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s\", index, varName))\r\n  end\r\nend"
        }
      ],
      "hash": "0x60FB60FE",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The amount of variables used on a specified timecycle modifier."
    },
    "0xD4BEF069": {
      "name": "GET_REGISTERED_COMMANDS",
      "params": [
        
      ],
      "results": "object",
      "description": "Returns all commands that are registered in the command system.\r\nThe data returned adheres to the following layout:\n\n```\n[\r\n{\r\n\"name\": \"cmdlist\"\r\n},\r\n{\r\n\"name\": \"command1\"\r\n}\r\n]\n```",
      "examples": [
        
      ],
      "hash": "0xD4BEF069",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "An object containing registered commands."
    },
    "0x35BDCEEA": {
      "name": "GET_RESOURCE_KVP_FLOAT",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to fetch"
        }
      ],
      "results": "float",
      "description": "A getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938).",
      "examples": [
        {
          "lang": "lua",
          "code": "local kvpValue = GetResourceKvpFloat('mollis')\r\nif kvpValue ~= 0.0 then\r\n\t-- do something!\r\nend"
        }
      ],
      "hash": "0x35BDCEEA",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The floating-point value stored under the specified key, or 0.0 if not found."
    },
    "0x557B586A": {
      "name": "GET_RESOURCE_KVP_INT",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to fetch"
        }
      ],
      "results": "int",
      "description": "A getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8).",
      "examples": [
        {
          "lang": "lua",
          "code": "local kvpValue = GetResourceKvpInt('bananabread') \r\nif kvpValue ~= 0 then\r\n\t-- do something!\r\nend"
        }
      ],
      "hash": "0x557B586A",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The integer value stored under the specified key, or 0 if not found."
    },
    "0xE874AB1D": {
      "name": "GET_TIMECYCLE_MODIFIER_VAR_NAME_BY_INDEX",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The name of timecycle modifier."
        },
        {
          "name": "modifierVarIndex",
          "type": "int",
          "description": "The index of a variable on the specified timecycle modifier."
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local varCount = GetTimecycleModifierVarCount(\"underwater\")\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleModifierVarNameByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s\", index, varName))\r\n  end\r\nend"
        }
      ],
      "hash": "0xE874AB1D",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The name of a variable by index."
    },
    "0x7302DBCF": {
      "name": "GET_PLAYER_IDENTIFIER",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        },
        {
          "name": "identifier",
          "type": "int"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x7302DBCF",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x4B087305": {
      "name": "GET_PED_HAIR_HIGHLIGHT_COLOR",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        }
      ],
      "results": "int",
      "description": "A getter for [\\_SET_PED_HAIR_COLOR](#\\_0x4CFFC65454C93A49). Returns -1 if fails to get.",
      "examples": [
        {
          "lang": "lua",
          "code": "local secondaryColour = GetPedHairHighlightColor(PlayerPedId())\r\nif secondaryColour == 32 then\r\n  print(\"You have pink hair highlight colour!\")\r\nend"
        }
      ],
      "hash": "0x4B087305",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns ped's secondary hair colour."
    },
    "0x8689A825": {
      "name": "GET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\\_0x4A3DC7ECCC321032).",
      "examples": [
        
      ],
      "hash": "0x8689A825",
      "ns": "CFX",
      "apiset": "shared",
      "game": "gta5",
      "resultsDescription": "Returns player melee weapon damage modifier value."
    },
    "0x44B91E94": {
      "name": "GET_PED_SWEAT",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        }
      ],
      "results": "float",
      "description": "A getter for [SET_PED_SWEAT](#\\_0x27B0405F59637D1F).",
      "examples": [
        {
          "lang": "lua",
          "code": "local sweat = GetPedSweat(PlayerPedId())"
        }
      ],
      "hash": "0x44B91E94",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns ped's sweat."
    },
    "0x433C765D": {
      "name": "GET_PLAYER_CAMERA_ROTATION",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle."
        }
      ],
      "results": "Vector3",
      "description": "Gets the current camera rotation for a specified player. This native is used server side when using OneSync.",
      "examples": [
        
      ],
      "hash": "0x433C765D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The player's camera rotation. Values are in radians."
    },
    "0xBDCDD163": {
      "name": "GET_PLAYER_WANTED_LEVEL",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The target player"
        }
      ],
      "results": "int",
      "description": "```\nReturns given players wanted level server-side.\n```",
      "examples": [
        
      ],
      "hash": "0xBDCDD163",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The wanted level"
    },
    "0xA7109E12": {
      "name": "GET_TIMECYCLE_MODIFIER_VAR",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The name of timecycle modifier."
        },
        {
          "name": "varName",
          "type": "char*",
          "description": "The name of timecycle variable."
        },
        {
          "name": "value1",
          "type": "float*"
        },
        {
          "name": "value2",
          "type": "float*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local modifierName = \"superDARK\"\r\nlocal varName = \"postfx_noise\"\r\n\r\nif DoesTimecycleModifierHasVar(modifierName, varName) then\r\n  local success, value1, value2 = GetTimecycleModifierVar(modifierName, varName)\r\n\r\n  if success then\r\n    print(string.format(\"[%s] removed var %s with values: %f %f\", modifierName, varName, value1, value2))\r\n    RemoveTimecycleModifierVar(modifierName, varName)\r\n  end\r\nelse\r\n    SetTimecycleModifierVar(modifierName, varName, 1.0, 1.0)\r\n    print(string.format(\"[%s] created var %s\", modifierName, varName))\r\nend"
        }
      ],
      "hash": "0xA7109E12",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Whether or not variable by name was found on the specified timecycle modifier."
    },
    "0x5240DA5A": {
      "name": "GET_RESOURCE_KVP_STRING",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to fetch"
        }
      ],
      "results": "char*",
      "description": "A getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B).",
      "examples": [
        {
          "lang": "lua",
          "code": "local kvpValue = GetResourceKvpString('codfish') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
        }
      ],
      "hash": "0x5240DA5A",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The string value stored under the specified key, or nil/null if not found."
    },
    "0x427E8E6A": {
      "name": "GET_PLAYER_LAST_MSG",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x427E8E6A",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x95070FA": {
      "name": "GET_TRAIN_CARRIAGE_ENGINE",
      "params": [
        {
          "name": "train",
          "type": "Vehicle",
          "description": "The entity handle."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x95070FA",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The train engine carriage."
    },
    "0xBA352ADD": {
      "name": "GET_PED_FACE_FEATURE",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        },
        {
          "name": "index",
          "type": "int",
          "description": "Face feature index"
        }
      ],
      "results": "float",
      "description": "A getter for [\\_SET_PED_FACE_FEATURE](#\\_0x71A5C1DBA060049E). Returns 0.0 if fails to get.",
      "examples": [
        {
          "lang": "lua",
          "code": "local noseWidth = GetPedFaceFeature(PlayerPedId(), 0)\r\nif noseWidth == 1.0 then\r\n  print(\"You have big nose!\")\r\nend"
        }
      ],
      "hash": "0xBA352ADD",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns ped's face feature value, or 0.0 if fails to get."
    },
    "0xC46EE605": {
      "name": "GET_PED_HEAD_OVERLAY_DATA",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        },
        {
          "name": "index",
          "type": "int",
          "description": "Overlay index"
        },
        {
          "name": "overlayValue",
          "type": "int*",
          "description": "Overlay value pointer"
        },
        {
          "name": "colourType",
          "type": "int*",
          "description": "Colour type pointer"
        },
        {
          "name": "firstColour",
          "type": "int*",
          "description": "First colour pointer"
        },
        {
          "name": "secondColour",
          "type": "int*",
          "description": "Second colour pointer"
        },
        {
          "name": "overlayOpacity",
          "type": "float*",
          "description": "Opacity pointer"
        }
      ],
      "results": "BOOL",
      "description": "A getter for [SET_PED_HEAD_OVERLAY](#\\_0x48F44967FA05CC1E) and [\\_SET_PED_HEAD_OVERLAY_COLOR](#\\_0x497BF74A7B9CB952) natives.",
      "examples": [
        {
          "lang": "lua",
          "code": "-- getting beard overlay data\r\nlocal success, overlayValue, colourType, firstColour, secondColour, overlayOpacity = GetPedHeadOverlayData(PlayerPedId(), 1)\r\nif success then\r\n  -- incrementing value\r\n  SetPedHeadOverlay(PlayerPedId(), 1, overlayValue + 1, overlayOpacity)\r\nend"
        }
      ],
      "hash": "0xC46EE605",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns ped's head overlay data."
    },
    "0x6E31E993": {
      "name": "GET_PLAYER_PED",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "Entity",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x6E31E993",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x838B34D8": {
      "name": "GET_TIMECYCLE_VAR_COUNT",
      "params": [
        
      ],
      "results": "int",
      "description": "Returns the amount of variables available to be applied on timecycle modifiers.",
      "examples": [
        {
          "lang": "lua",
          "code": "local varCount = GetTimecycleVarCount()\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleVarNameByIndex(index)\r\n    local varDefault = GetTimecycleVarDefaultValueByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s (%f)\", index, varName, varDefault))\r\n  end\r\nend"
        }
      ],
      "hash": "0x838B34D8",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The amount of available variables for timecycle modifiers."
    },
    "0xF341E6CA": {
      "name": "GET_ROPE_TIME_MULTIPLIER",
      "params": [
        {
          "name": "rope",
          "type": "int",
          "description": "The rope to get the time multiplier for."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF341E6CA",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The rope's time multiplier."
    },
    "0xC62AAC98": {
      "name": "GET_VEHICLE_ALARM_TIME_LEFT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC62AAC98",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x7CCE1163": {
      "name": "GET_PED_DECORATIONS",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped you want to retrieve data for."
        }
      ],
      "results": "object",
      "description": "Returns a list of decorations applied to a ped.\n\nThe data returned adheres to the following layout:\n\n```\n[ [ collectionHash1, overlayHash1 ], ..., [c ollectionHashN, overlayHashN ] ]\n```\n\nThis command will return undefined data if invoked on a remote player ped.",
      "examples": [
        
      ],
      "hash": "0x7CCE1163",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An object containing a list of applied decorations."
    },
    "0xF2E3912B": {
      "name": "GET_PLAYER_INVINCIBLE_2",
      "params": [
        {
          "name": "player",
          "type": "Player",
          "description": "The player id"
        }
      ],
      "results": "BOOL",
      "description": "Unlike [GET_PLAYER_INVINCIBLE](#\\_0xB721981B2B939E07) this native gets both [SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED](#\\_0x6BC97F4F4BB3C04B) and [SET_PLAYER_INVINCIBLE](#\\_0x239528EACDC3E7DE) invincibility state.",
      "examples": [
        
      ],
      "hash": "0xF2E3912B",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A boolean to tell if the player is invincible."
    },
    "0x27E94EF8": {
      "name": "GET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "A getter for [SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER](#\\_0xAE540335B4ABC4E2).",
      "examples": [
        
      ],
      "hash": "0x27E94EF8",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The value of player melee weapon defense modifier."
    },
    "0x7B0D00C5": {
      "name": "GET_RANDOM_VEHICLE_DENSITY_MULTIPLIER",
      "params": [
        
      ],
      "results": "float",
      "description": "A getter for [SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0xB3B3359379FE77D3).\r\nSame as vehicle density multiplier.",
      "examples": [
        
      ],
      "hash": "0x7B0D00C5",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns random vehicle density multiplier value."
    },
    "0xAFE92319": {
      "name": "GET_VEHICLE_PED_IS_IN",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        },
        {
          "name": "lastVehicle",
          "type": "BOOL",
          "description": "False = CurrentVehicle, True = LastVehicle"
        }
      ],
      "results": "Vehicle",
      "description": "Gets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync.",
      "examples": [
        
      ],
      "hash": "0xAFE92319",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The vehicle id. Returns 0 if the ped is/was not in a vehicle."
    },
    "0xE41595CE": {
      "name": "GET_VEHICLE_PETROL_TANK_HEALTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE41595CE",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x4039B485": {
      "name": "GET_RESOURCE_STATE",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The name of the resource."
        }
      ],
      "results": "char*",
      "description": "Returns the current state of the specified resource.",
      "examples": [
        
      ],
      "hash": "0x4039B485",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The resource state. One of `\"missing\", \"started\", \"starting\", \"stopped\", \"stopping\", \"uninitialized\" or \"unknown\"`."
    },
    "0x2AB2E0F6": {
      "name": "GET_ROPE_UPDATE_ORDER",
      "params": [
        {
          "name": "rope",
          "type": "int",
          "description": "The rope to get the update order for."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2AB2E0F6",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The rope's update order."
    },
    "0x964BAB1D": {
      "name": "GET_RESOURCE_METADATA",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The resource name."
        },
        {
          "name": "metadataKey",
          "type": "char*",
          "description": "The key in the resource manifest."
        },
        {
          "name": "index",
          "type": "int",
          "description": "The value index, in a range from \\[0..GET_NUM_RESOURCE_METDATA-1]."
        }
      ],
      "results": "char*",
      "description": "Gets the metadata value at a specified key/index from a resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)",
      "examples": [
        
      ],
      "hash": "0x964BAB1D",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0xC3C93F28": {
      "name": "GET_VEHICLE_CHEAT_POWER_INCREASE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        }
      ],
      "results": "float",
      "description": "A getter for [SET_VEHICLE_CHEAT_POWER_INCREASE](#\\_0xB59E4BD37AE292DB).",
      "examples": [
        
      ],
      "hash": "0xC3C93F28",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns vehicle's cheat power increase modifier value."
    },
    "0x2B2FCC28": {
      "name": "GET_VEHICLE_BODY_HEALTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2B2FCC28",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xEF7C6538": {
      "name": "GET_VEHICLE_DENSITY_MULTIPLIER",
      "params": [
        
      ],
      "results": "float",
      "description": "A getter for [SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x245A6883D966D537).",
      "examples": [
        
      ],
      "hash": "0xEF7C6538",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns vehicle density multiplier value."
    },
    "0x3B90238": {
      "name": "GET_TIMECYCLE_VAR_DEFAULT_VALUE_BY_INDEX",
      "params": [
        {
          "name": "varIndex",
          "type": "int",
          "description": "The index of variable."
        }
      ],
      "results": "float",
      "description": "See [GET_TIMECYCLE_VAR_COUNT](#\\_0x838B34D8).",
      "examples": [
        {
          "lang": "lua",
          "code": "local varCount = GetTimecycleVarCount()\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleVarNameByIndex(index)\r\n    local varDefault = GetTimecycleVarDefaultValueByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s (%f)\", index, varName, varDefault))\r\n  end\r\nend"
        }
      ],
      "hash": "0x3B90238",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The default value of a timecycle variable."
    },
    "0x40B16551": {
      "name": "GET_TRAIN_DOOR_OPEN_RATIO",
      "params": [
        {
          "name": "train",
          "type": "Vehicle",
          "description": "The train to obtain the door ratio for."
        },
        {
          "name": "doorIndex",
          "type": "int",
          "description": "Zero-based door index."
        }
      ],
      "results": "float",
      "description": "Gets the ratio that a door is open for on a train.",
      "examples": [
        {
          "lang": "lua",
          "code": "local doorCount = GetTrainDoorCount(train)\r\nfor doorIndex = 0, doorCount - 1 do\r\n    local ratio = GetTrainDoorOpenRatio(train, doorIndex)\r\n    print(\"Door \" .. tostring(doorIndex) .. \" is open by a ratio of \" .. tostring(ratio))\r\nend"
        },
        {
          "lang": "cs",
          "code": "int doorCount = API.GetTrainDoorCount(train);\r\nfor (int doorIndex = 0; doorIndex < doorCount; doorIndex++)\r\n{\r\n    float ratio = API.GetTrainDoorOpenRatio(train, doorIndex);\r\n    Debug.WriteLine($\"Door {doorIndex} is open by a ratio of {ratio}\");\r\n}"
        }
      ],
      "hash": "0x40B16551",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A value between 0.0 (fully closed) and 1.0 (fully open)."
    },
    "0x1DC50247": {
      "name": "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "Currently it only works when set to \"all players\".",
      "examples": [
        
      ],
      "hash": "0x1DC50247",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xD72CEF2": {
      "name": "GET_VEHICLE_DOOR_LOCK_STATUS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "A vehicle handle."
        }
      ],
      "results": "int",
      "description": "```lua\nenum_VehicleLockStatus = {\r\n    None = 0,\r\n    Locked = 2,\r\n    LockedForPlayer = 3,\r\n    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.\r\n    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1\r\n    CanBeBrokenIntoPersist = 8, -- Can be broken into persist\r\n    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).\r\n}\n```\n\nIt should be [noted](https://forum.cfx.re/t/4863241) that while the [client-side command](#\\_0x25BC98A59C2EA962) and its\r\nsetter distinguish between states 0 (unset) and 1 (unlocked), the game will synchronize both as state 0, so the server-side\r\ncommand will return only '0' if unlocked.",
      "examples": [
        
      ],
      "hash": "0xD72CEF2",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The door lock status for the specified vehicle."
    },
    "0x986B65FF": {
      "name": "GET_PLAYER_WEAPON_DEFENSE_MODIFIER_2",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "A getter for [\\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\\_2](#\\_0xBCFDE9EDE4CF27DC).",
      "examples": [
        
      ],
      "hash": "0x986B65FF",
      "ns": "CFX",
      "apiset": "shared",
      "game": "gta5",
      "resultsDescription": "The value of player weapon defense modifier 2."
    },
    "0xFF1290D4": {
      "name": "GET_PLAYER_PING",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFF1290D4",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xF1543251": {
      "name": "GET_PLAYER_WEAPON_DEFENSE_MODIFIER",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\\_0x2D83BC011CA14A3C).",
      "examples": [
        
      ],
      "hash": "0xF1543251",
      "ns": "CFX",
      "apiset": "shared",
      "game": "gta5",
      "resultsDescription": "The value of player weapon defense modifier."
    },
    "0xC6C55AAF": {
      "name": "GET_TIMECYCLE_VAR_NAME_BY_INDEX",
      "params": [
        {
          "name": "varIndex",
          "type": "int",
          "description": "The index of variable."
        }
      ],
      "results": "char*",
      "description": "See [GET_TIMECYCLE_VAR_COUNT](#\\_0x838B34D8).",
      "examples": [
        {
          "lang": "lua",
          "code": "local varCount = GetTimecycleVarCount()\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleVarNameByIndex(index)\r\n    local varDefault = GetTimecycleVarDefaultValueByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s (%f)\", index, varName, varDefault))\r\n  end\r\nend"
        }
      ],
      "hash": "0xC6C55AAF",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The name of a timecycle variable."
    },
    "0xCA0A085F": {
      "name": "GET_RUNTIME_TEXTURE_PITCH",
      "params": [
        {
          "name": "tex",
          "type": "long",
          "description": "A handle to the runtime texture."
        }
      ],
      "results": "int",
      "description": "Gets the row pitch of the specified runtime texture, for use when creating data for `SET_RUNTIME_TEXTURE_ARGB_DATA`.",
      "examples": [
        
      ],
      "hash": "0xCA0A085F",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The row pitch in bytes."
    },
    "0x61DCF017": {
      "name": "GET_RESOURCE_PATH",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The name of the resource."
        }
      ],
      "results": "char*",
      "description": "Returns the physical on-disk path of the specified resource.",
      "examples": [
        
      ],
      "hash": "0x61DCF017",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The resource directory name, possibly without trailing slash."
    },
    "0x406B4B20": {
      "name": "GET_PLAYER_NAME",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x406B4B20",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xD240123E": {
      "name": "GET_SELECTED_PED_WEAPON",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "Hash",
      "description": "Returns a hash of selected ped weapon.",
      "examples": [
        
      ],
      "hash": "0xD240123E",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The weapon hash."
    },
    "0xD014AB79": {
      "name": "GET_PLAYER_MAX_STAMINA",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xD014AB79",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The value of player max stamina."
    },
    "0x99974721": {
      "name": "GET_TRAIN_DOOR_COUNT",
      "params": [
        {
          "name": "train",
          "type": "Vehicle",
          "description": "The train to obtain the door count for."
        }
      ],
      "results": "int",
      "description": "Gets the door count for the specified train.",
      "examples": [
        
      ],
      "hash": "0x99974721",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The door count."
    },
    "0x52441C34": {
      "name": "GET_PLAYER_ROUTING_BUCKET",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player to get the routing bucket for."
        }
      ],
      "results": "int",
      "description": "Gets the routing bucket for the specified player.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.",
      "examples": [
        
      ],
      "hash": "0x52441C34",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The routing bucket ID."
    },
    "0xA80FFE99": {
      "name": "GET_ROPE_FLAGS",
      "params": [
        {
          "name": "rope",
          "type": "int",
          "description": "The rope to get the flags for."
        }
      ],
      "results": "int",
      "description": "```cpp\nenum eRopeFlags\r\n{\r\n    DrawShadowEnabled = 2,\r\n\tBreakable = 4,\r\n\tRopeUnwindingFront = 8,\r\n\tRopeWinding = 32\r\n}\n```",
      "examples": [
        
      ],
      "hash": "0xA80FFE99",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The rope's flags."
    },
    "0xFD15C065": {
      "name": "GET_VEHICLE_DIRT_LEVEL",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFD15C065",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x1DAD4583": {
      "name": "GET_VEHICLE_CLUTCH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x1DAD4583",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xF4F495CB": {
      "name": "GET_VEHICLE_ENGINE_TEMPERATURE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF4F495CB",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xC9F55558": {
      "name": "GET_RUNTIME_TEXTURE_WIDTH",
      "params": [
        {
          "name": "tex",
          "type": "long",
          "description": "A handle to the runtime texture."
        }
      ],
      "results": "int",
      "description": "Gets the width of the specified runtime texture.",
      "examples": [
        
      ],
      "hash": "0xC9F55558",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The width in pixels."
    },
    "0x66D70EA3": {
      "name": "GET_ROPE_LENGTH_CHANGE_RATE",
      "params": [
        {
          "name": "rope",
          "type": "int",
          "description": "The rope to get the length change rate for."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x66D70EA3",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The rope's length change rate."
    },
    "0x6E35C49C": {
      "name": "GET_VEHICLE_DOOR_STATUS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x6E35C49C",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A number from 0 to 7."
    },
    "0xDFFABA2A": {
      "name": "GET_VEHICLE_DASHBOARD_BOOST",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xDFFABA2A",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x483B013C": {
      "name": "GET_VEHICLE_HANDBRAKE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x483B013C",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0x14088095": {
      "name": "GET_WATER_QUAD_ALPHA",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "a0",
          "type": "int*",
          "description": "The a0 level"
        },
        {
          "name": "a1",
          "type": "int*",
          "description": "The a1 level"
        },
        {
          "name": "a2",
          "type": "int*",
          "description": "The a2 level"
        },
        {
          "name": "a3",
          "type": "int*",
          "description": "The a3 level"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, a0, a1, a2, a3 = GetWaterQuadAlpha(0)"
        }
      ],
      "hash": "0x14088095",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Alpha values are undefined on failure"
    },
    "0xA0DBD08D": {
      "name": "GET_VEHICLE_DASHBOARD_COLOUR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "color",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA0DBD08D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x954465DE": {
      "name": "GET_VEHICLE_STEERING_SCALE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x954465DE",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xC715F730": {
      "name": "GET_VEHICLE_XENON_LIGHTS_CUSTOM_COLOR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle handle."
        },
        {
          "name": "red",
          "type": "int*",
          "description": "Red color (0-255)."
        },
        {
          "name": "green",
          "type": "int*",
          "description": "Green color (0-255)."
        },
        {
          "name": "blue",
          "type": "int*",
          "description": "Blue color (0-255)."
        }
      ],
      "results": "BOOL",
      "description": "Returns vehicle xenon lights custom RGB color values. Do note this native doesn't return non-RGB colors that was set with [\\_SET_VEHICLE_XENON_LIGHTS_COLOR](#\\_0xE41033B25D003A07).",
      "examples": [
        
      ],
      "hash": "0xC715F730",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A boolean indicating if vehicle have custom xenon lights RGB color."
    },
    "0xB4F4E566": {
      "name": "GET_VEHICLE_CURRENT_GEAR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xB4F4E566",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xE7B12B54": {
      "name": "GET_VEHICLE_CURRENT_RPM",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE7B12B54",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x1382FCEA": {
      "name": "GET_VEHICLE_STEERING_ANGLE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x1382FCEA",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0x27396C75": {
      "name": "GET_VEHICLE_HANDLING_INT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to get. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to get. These match the keys in `handling.meta`."
        }
      ],
      "results": "int",
      "description": "Returns the effective handling data of a vehicle as an integer value.\r\nExample: `local modelFlags = GetVehicleHandlingInt(vehicle, 'CHandlingData', 'strModelFlags')`",
      "examples": [
        
      ],
      "hash": "0x27396C75",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An integer."
    },
    "0x637F4C75": {
      "name": "GET_STATE_BAG_VALUE",
      "params": [
        {
          "name": "bagName",
          "type": "char*"
        },
        {
          "name": "key",
          "type": "char*"
        }
      ],
      "results": "object",
      "description": "Returns the value of a state bag key.",
      "examples": [
        
      ],
      "hash": "0x637F4C75",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "Value."
    },
    "0x4B8285CF": {
      "name": "GET_TRAIN_CARRIAGE_INDEX",
      "params": [
        {
          "name": "train",
          "type": "Vehicle",
          "description": "The entity handle."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x4B8285CF",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The carriage index. -1 returned if invalid result."
    },
    "0xE015E854": {
      "name": "GET_TRAIN_CURRENT_TRACK_NODE",
      "params": [
        {
          "name": "train",
          "type": "Vehicle",
          "description": "The target train."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE015E854",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Train's current track node index."
    },
    "0x872CF42": {
      "name": "GET_VEHICLE_ROOF_LIVERY",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x872CF42",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x40D82D88": {
      "name": "GET_VEHICLE_COLOURS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "colorPrimary",
          "type": "int*"
        },
        {
          "name": "colorSecondary",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x40D82D88",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x77C598B2": {
      "name": "GET_SCENARIO_PED_DENSITY_MULTIPLIER",
      "params": [
        
      ],
      "results": "float",
      "description": "A getter for [SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x7A556143A1C03898).",
      "examples": [
        
      ],
      "hash": "0x77C598B2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns scenario ped density multiplier value."
    },
    "0x21C1DA8E": {
      "name": "GET_VEHICLE_DRAWN_WHEEL_ANGLE_MULT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "Gets a vehicle's multiplier used with a wheel's GET_VEHICLE_WHEEL_STEERING_ANGLE to determine the angle the wheel is rendered.",
      "examples": [
        
      ],
      "hash": "0x21C1DA8E",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB48A1292": {
      "name": "GET_VEHICLE_GRAVITY_AMOUNT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xB48A1292",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x3574AACE": {
      "name": "GET_RUNTIME_TEXTURE_HEIGHT",
      "params": [
        {
          "name": "tex",
          "type": "long",
          "description": "A handle to the runtime texture."
        }
      ],
      "results": "int",
      "description": "Gets the height of the specified runtime texture.",
      "examples": [
        
      ],
      "hash": "0x3574AACE",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The height in pixels."
    },
    "0xA273060E": {
      "name": "GET_VEHICLE_TYPE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle's entity handle."
        }
      ],
      "results": "char*",
      "description": "Returns the type of the passed vehicle.\n\n### Vehicle types\n\n*   automobile\n*   bike\n*   boat\n*   heli\n*   plane\n*   submarine\n*   trailer\n*   train",
      "examples": [
        
      ],
      "hash": "0xA273060E",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "If the entity is a vehicle, the vehicle type. If it is not a vehicle, the return value will be null."
    },
    "0xFE2A1D4D": {
      "name": "GET_TIMECYCLE_MODIFIER_COUNT",
      "params": [
        
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local count = GetTimecycleModifierCount()\r\nprint(\"we have  \" .. count .. \"timecycle modifiers loaded\")"
        }
      ],
      "hash": "0xFE2A1D4D",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns the amount of timecycle modifiers loaded."
    },
    "0x8880038A": {
      "name": "GET_VEHICLE_ENGINE_HEALTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x8880038A",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x642FC12F": {
      "name": "GET_VEHICLE_HANDLING_FLOAT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to get. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to get. These match the keys in `handling.meta`."
        }
      ],
      "results": "float",
      "description": "Returns the effective handling data of a vehicle as a floating-point value.\r\nExample: `local fSteeringLock = GetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock')`",
      "examples": [
        
      ],
      "hash": "0x642FC12F",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A floating-point value."
    },
    "0x57037960": {
      "name": "GET_VEHICLE_RADIO_STATION_INDEX",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x57037960",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x500FFE9D": {
      "name": "GET_VEHICLE_DASHBOARD_LIGHTS",
      "params": [
        
      ],
      "results": "int",
      "description": "Gets the state of the player vehicle's dashboard lights as a bit set\r\nindicator_left = 1\r\nindicator_right = 2\r\nhandbrakeLight = 4\r\nengineLight = 8\r\nABSLight = 16\r\ngasLight = 32\r\noilLight = 64\r\nheadlights = 128\r\nhighBeam = 256\r\nbatteryLight = 512",
      "examples": [
        
      ],
      "hash": "0x500FFE9D",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x5F739BB8": {
      "name": "GET_VEHICLE_FUEL_LEVEL",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x5F739BB8",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x7E6E219C": {
      "name": "GET_VEHICLE_LIGHT_MULTIPLIER",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x7E6E219C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x137260D1": {
      "name": "GET_VEHICLE_WHEELIE_STATE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "Vehicle"
        }
      ],
      "results": "int",
      "description": "List of known states:\n\n```\n1: Not wheeling.\r\n65: Vehicle is ready to do wheelie (burnouting).\r\n129: Vehicle is doing wheelie.\n```",
      "examples": [
        {
          "lang": "lua",
          "code": "Citizen.CreateThread(function()\r\n  while true do\r\n    Wait(1)\r\n\r\n    local veh = GetVehiclePedIsUsing(PlayerPedId())\r\n    if veh ~= 0 then\r\n      local wheelieState = GetVehicleWheelieState(veh)\r\n      if wheelieState == 1 then\r\n        print(\"Nothing\")\r\n      elseif wheelieState == 65 then\r\n        print(\"Ready to wheelie!\")\r\n      elseif wheelieState == 129 then\r\n        print(\"Doing wheelie!\")\r\n      end\r\n    end\r\n  end\r\nend)"
        }
      ],
      "hash": "0x137260D1",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Vehicle's current wheelie state."
    },
    "0xD7147656": {
      "name": "GET_VEHICLE_HEADLIGHTS_COLOUR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xD7147656",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xF9716A11": {
      "name": "GET_VEHICLE_DASHBOARD_RPM",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF9716A11",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "float 0 to ~1.1 representing the angle of the rpm gauge on the player's vehicle dashboard"
    },
    "0x3856D767": {
      "name": "GET_VEHICLE_DASHBOARD_OIL_PRESSURE",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x3856D767",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x3FF247A2": {
      "name": "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "r",
          "type": "int*"
        },
        {
          "name": "g",
          "type": "int*"
        },
        {
          "name": "b",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x3FF247A2",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xF1D1D689": {
      "name": "GET_VEHICLE_HIGH_GEAR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF1D1D689",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xD1D07351": {
      "name": "GET_VEHICLE_THROTTLE_OFFSET",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xD1D07351",
      "ns": "CFX",
      "apiset": "client",
      "aliases": [
        "GET_VEHICLE_CURRENT_ACCELERATION"
      ],
      "resultsDescription": "A float among -1 and 1 according if the vehicle is moving forwards or backwards"
    },
    "0xFBDE9FD8": {
      "name": "GET_VEHICLE_HOMING_LOCKON_STATE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to check."
        }
      ],
      "results": "int",
      "description": "Gets the lock on state for the specified vehicle. See the client-side [GET_VEHICLE_HOMING_LOCKON_STATE](#\\_0xE6B0E8CFC3633BF0) native for a description of lock on states.",
      "examples": [
        
      ],
      "hash": "0xFBDE9FD8",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The lock on state."
    },
    "0x54A677F5": {
      "name": "GET_VEHICLE_WHEEL_HEALTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x54A677F5",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xD203287": {
      "name": "GET_VEHICLE_WHEEL_POWER",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "Gets power being sent to a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0xD203287",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xFB341304": {
      "name": "GET_VEHICLE_HANDLING_VECTOR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to get. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to get. These match the keys in `handling.meta`."
        }
      ],
      "results": "Vector3",
      "description": "Returns the effective handling data of a vehicle as a vector value.\r\nExample: `local inertiaMultiplier = GetVehicleHandlingVector(vehicle, 'CHandlingData', 'vecInertiaMultiplier')`",
      "examples": [
        
      ],
      "hash": "0xFB341304",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An integer."
    },
    "0x998B7FEE": {
      "name": "GET_VEHICLE_TOP_SPEED_MODIFIER",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        }
      ],
      "results": "float",
      "description": "A getter for [MODIFY_VEHICLE_TOP_SPEED](#\\_0x93A3996368C94158). Returns -1.0 if a modifier is not set.",
      "examples": [
        
      ],
      "hash": "0x998B7FEE",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns vehicle's modified top speed."
    },
    "0xF8E03DB8": {
      "name": "GET_WATER_QUAD_AT_COORDS_3D",
      "params": [
        {
          "name": "x",
          "type": "float",
          "description": "The X coordinate"
        },
        {
          "name": "y",
          "type": "float",
          "description": "The Y coordinate"
        },
        {
          "name": "z",
          "type": "float",
          "description": "The water level inside the water quad"
        }
      ],
      "results": "int",
      "description": "This alternative implementation of [`GetWaterQuadAtCoords`](#\\_0x17321452) also checks the height of the water level.",
      "examples": [
        {
          "lang": "lua",
          "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waterQuadIndex = GetWaterQuadAtCoords(currentPedPosition.x, currentPedPosition.y, currentPedPosition.z)"
        }
      ],
      "hash": "0xF8E03DB8",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The water quad index at the given position. Returns -1 if there isn't any there. Also returns -1 if the given point is above the water level."
    },
    "0x3CCF1B49": {
      "name": "GET_VEHICLE_WHEEL_IS_POWERED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "BOOL",
      "description": "Gets whether the wheel is powered.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nThis is a shortcut to a flag in GET_VEHICLE_WHEEL_FLAGS.",
      "examples": [
        
      ],
      "hash": "0x3CCF1B49",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xE02B51D7": {
      "name": "GET_VEHICLE_TURBO_PRESSURE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE02B51D7",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xB1884159": {
      "name": "GET_WATER_QUAD_COUNT",
      "params": [
        
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local waterQuadCount = GetWaterQuadCount()"
        }
      ],
      "hash": "0xB1884159",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns the amount of water quads loaded."
    },
    "0x7C278621": {
      "name": "GET_VEHICLE_LIGHTS_STATE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "lightsOn",
          "type": "BOOL*"
        },
        {
          "name": "highbeamsOn",
          "type": "BOOL*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x7C278621",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x17321452": {
      "name": "GET_WATER_QUAD_AT_COORDS",
      "params": [
        {
          "name": "x",
          "type": "float",
          "description": "The X coordinate"
        },
        {
          "name": "y",
          "type": "float",
          "description": "The Y coordinate"
        }
      ],
      "results": "int",
      "description": "This native returns the index of a water quad if the given point is inside its bounds.\n\n*If you also want to check for water level, check out [`GetWaterQuadAtCoords_3d`](#\\_0xF8E03DB8)*",
      "examples": [
        {
          "lang": "lua",
          "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waterQuadIndex = GetWaterQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
        }
      ],
      "hash": "0x17321452",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The water quad index at the given position. Returns -1 if there isn't any there."
    },
    "0x22EA3BD8": {
      "name": "GET_WATER_QUAD_HAS_LIMITED_DEPTH",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "hasLimitedDepth",
          "type": "int*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, hasLimitedDepth = GetWaterQuadHasLimitedDepth(0)"
        }
      ],
      "hash": "0x22EA3BD8",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns if the given water quad has a limited depth."
    },
    "0xAD40AD55": {
      "name": "GET_VEHICLE_FLIGHT_NOZZLE_POSITION",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to check."
        }
      ],
      "results": "float",
      "description": "Gets the flight nozzel position for the specified vehicle. See the client-side [\\_GET_VEHICLE_FLIGHT_NOZZLE_POSITION](#\\_0xDA62027C8BDB326E) native for usage examples.",
      "examples": [
        
      ],
      "hash": "0xAD40AD55",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The flight nozzel position between 0.0 (flying normally) and 1.0 (VTOL mode)"
    },
    "0x1C2B9FEF": {
      "name": "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "r",
          "type": "int*"
        },
        {
          "name": "g",
          "type": "int*"
        },
        {
          "name": "b",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x1C2B9FEF",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x9AAD420E": {
      "name": "GET_VEHICLE_DASHBOARD_SPEED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9AAD420E",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x1F5996AA": {
      "name": "GET_VEHICLE_DASHBOARD_OIL_TEMP",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x1F5996AA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6523816B": {
      "name": "GET_WATER_QUAD_LEVEL",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The returned water quad level"
        },
        {
          "name": "waterQuadLevel",
          "type": "float*"
        }
      ],
      "results": "BOOL",
      "description": "*level is defined as \"z\" in water.xml*",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, waterQuadLevel = GetWaterQuadLevel(0)"
        }
      ],
      "hash": "0x6523816B",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Level is undefined on failure"
    },
    "0x19B0B2CE": {
      "name": "GET_VEHICLE_DASHBOARD_FUEL",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x19B0B2CE",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6B6ADAFA": {
      "name": "GET_VEHICLE_DASHBOARD_TEMP",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x6B6ADAFA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xC70FA0C7": {
      "name": "GET_VEHICLE_WHEEL_FLAGS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "int",
      "description": "Gets the flags of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0xC70FA0C7",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An unsigned int containing bit flags."
    },
    "0xCEE21AB2": {
      "name": "GET_VEHICLE_WHEEL_RIM_COLLIDER_SIZE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "wheelIndex",
          "type": "int",
          "description": "Index of wheel, 0-3."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xCEE21AB2",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Float representing size of the rim collider. Not sure what it is used for, probably to detect whether bullets hit rim or tire and puncture it (and to determine size of the wheel when tire is fully blown)."
    },
    "0x4A557117": {
      "name": "GET_VEHICLE_LOCK_ON_TARGET",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to check."
        }
      ],
      "results": "Vehicle",
      "description": "Gets the vehicle that is locked on to for the specified vehicle.",
      "examples": [
        
      ],
      "hash": "0x4A557117",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The vehicle that is locked on. 0 returned if no vehicle is locked on."
    },
    "0xE2501B8B": {
      "name": "GET_WATER_QUAD_TYPE",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "waterType",
          "type": "int*"
        }
      ],
      "results": "BOOL",
      "description": "Valid type definitions:\n\n*   **0** Square\n*   **1** Right triangle where the 90 degree angle is at maxX, minY\n*   **2** Right triangle where the 90 degree angle is at minX, minY\n*   **3** Right triangle where the 90 degree angle is at minX, maxY\n*   **4** Right triangle where the 90 degree angle is at maxY, maxY",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, type = GetWaterQuadType(0)"
        }
      ],
      "hash": "0xE2501B8B",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Type is undefined on failure"
    },
    "0xDDB298AE": {
      "name": "GET_VEHICLE_NEXT_GEAR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xDDB298AE",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xE8522D58": {
      "name": "GET_VEHICLE_NUMBER_PLATE_TEXT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE8522D58",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x80E4659B": {
      "name": "GET_VEHICLE_EXTRA_COLOURS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "pearlescentColor",
          "type": "int*"
        },
        {
          "name": "wheelColor",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x80E4659B",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x83070354": {
      "name": "GET_VEHICLE_INDICATOR_LIGHTS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "Gets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both",
      "examples": [
        
      ],
      "hash": "0x83070354",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An integer."
    },
    "0x2B48175B": {
      "name": "GET_VEHICLE_WHEEL_SUSPENSION_COMPRESSION",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "Gets the current suspension compression of a wheel.\r\nReturns a positive value. 0 means the suspension is fully extended, the wheel is off the ground.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0x2B48175B",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The current compression of the wheel's suspension."
    },
    "0x4046B66": {
      "name": "GET_VEHICLE_WHEEL_SIZE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        }
      ],
      "results": "float",
      "description": "Returns vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels (returns 0 in case of default wheels).",
      "examples": [
        
      ],
      "hash": "0x4046B66",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Float representing size of the wheel (usually between 0.5 and 1.5)"
    },
    "0x149C9DA0": {
      "name": "GET_VEHICLE_WHEEL_SPEED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "Gets speed of a wheel at the tyre.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0x149C9DA0",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An integer."
    },
    "0xE134FB8D": {
      "name": "GET_WEAPON_COMPONENT_RANGE_DAMAGE_MODIFIER",
      "params": [
        {
          "name": "componentHash",
          "type": "Hash",
          "description": "Weapon component name hash."
        }
      ],
      "results": "float",
      "description": "A getter for `CWeaponFallOffModifier` damage modifier value in a weapon component.",
      "examples": [
        
      ],
      "hash": "0xE134FB8D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A weapon component damage modifier."
    },
    "0xC693E278": {
      "name": "GET_WEAPON_COMPONENT_ACCURACY_MODIFIER",
      "params": [
        {
          "name": "componentHash",
          "type": "Hash",
          "description": "Weapon component name hash."
        }
      ],
      "results": "float",
      "description": "A getter for `CWeaponAccuracyModifier` in a weapon component.",
      "examples": [
        
      ],
      "hash": "0xC693E278",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A weapon component accuracy modifier."
    },
    "0xCCE49A1C": {
      "name": "GET_WAVE_QUAD_DIRECTION",
      "params": [
        {
          "name": "waveQuad",
          "type": "int",
          "description": "The wave quad index"
        },
        {
          "name": "directionX",
          "type": "float*",
          "description": "The wave quad X direction"
        },
        {
          "name": "directionY",
          "type": "float*",
          "description": "The wave quad Y direction"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, directionX, directionY = GetWaveQuadDirection(1)"
        }
      ],
      "hash": "0xCCE49A1C",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Direction values are undefined on failure"
    },
    "0xD979143": {
      "name": "GET_WEAPON_DAMAGE_MODIFIER",
      "params": [
        {
          "name": "weaponHash",
          "type": "Hash",
          "description": "Weapon name hash."
        }
      ],
      "results": "float",
      "description": "A getter for [\\_SET_WEAPON_DAMAGE_MODIFIER](#\\_0x4757F00BC6323CFE).",
      "examples": [
        
      ],
      "hash": "0xD979143",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A weapon damage modifier."
    },
    "0xACB7E68F": {
      "name": "GET_WEAPON_COMPONENT_CAMERA_HASH",
      "params": [
        {
          "name": "componentHash",
          "type": "Hash",
          "description": "Weapon component name hash."
        }
      ],
      "results": "int",
      "description": "A getter for `CameraHash` in a weapon scope component.",
      "examples": [
        
      ],
      "hash": "0xACB7E68F",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The hash of the scope camera."
    },
    "0x1DEDBD77": {
      "name": "GET_WATER_QUAD_IS_INVISIBLE",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "isInvisible",
          "type": "int*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, isInvisible = GetWaterQuadIsInvisible(0)"
        }
      ],
      "hash": "0x1DEDBD77",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns if the given water quad is invisible"
    },
    "0xEA1859E5": {
      "name": "GET_VEHICLE_WHEEL_ROTATION_SPEED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "Gets the rotation speed of a wheel.\r\nThis is used internally to calcuate GET_VEHICLE_WHEEL_SPEED.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0xEA1859E5",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The angular velocity of the wheel."
    },
    "0x42E9A06A": {
      "name": "GET_WATER_QUAD_BOUNDS",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "minX",
          "type": "int*",
          "description": "The minX coordinate"
        },
        {
          "name": "minY",
          "type": "int*",
          "description": "The minY coordinate"
        },
        {
          "name": "maxX",
          "type": "int*",
          "description": "The maxX coordinate"
        },
        {
          "name": "maxY",
          "type": "int*",
          "description": "The maxY coordinate"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, minX, minY, maxX, maxY = GetWaterQuadBounds(1)"
        }
      ],
      "hash": "0x42E9A06A",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Bounds are undefined on failure"
    },
    "0x865139A3": {
      "name": "GET_WAVE_QUAD_AMPLITUDE",
      "params": [
        {
          "name": "waveQuad",
          "type": "int",
          "description": "The wave quad index"
        },
        {
          "name": "waveQuadAmplitude",
          "type": "float*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, amplitude = GetWaveQuadAmplitude(1)"
        }
      ],
      "hash": "0x865139A3",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Amplitude is undefined on failure"
    },
    "0xFC7F8EF4": {
      "name": "GET_VEHICLE_OIL_LEVEL",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFC7F8EF4",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xEC82A51D": {
      "name": "GET_VEHICLE_LIVERY",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xEC82A51D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xF9AB9297": {
      "name": "GET_WEAPON_COMPONENT_RETICULE_HASH",
      "params": [
        {
          "name": "componentHash",
          "type": "Hash",
          "description": "Weapon component name hash."
        }
      ],
      "results": "int",
      "description": "A getter for `ReticuleHash` in a weapon scope component.",
      "examples": [
        
      ],
      "hash": "0xF9AB9297",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The hash of the reticule camera."
    },
    "0xF86136DB": {
      "name": "GET_WAVE_QUAD_BOUNDS",
      "params": [
        {
          "name": "waveQuad",
          "type": "int",
          "description": "The wave quad index"
        },
        {
          "name": "minX",
          "type": "int*",
          "description": "The minX coordinate"
        },
        {
          "name": "minY",
          "type": "int*",
          "description": "The minY coordinate"
        },
        {
          "name": "maxX",
          "type": "int*",
          "description": "The maxX coordinate"
        },
        {
          "name": "maxY",
          "type": "int*",
          "description": "The maxY coordinate"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, minX, minY, maxX, maxY = GetWaveQuadBounds(1)"
        }
      ],
      "hash": "0xF86136DB",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success. Bounds are undefined on failure"
    },
    "0x66EE14B2": {
      "name": "IS_BIGMAP_FULL",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local expanded = IsBigmapActive()\r\nlocal fullMap = IsBigmapFull()\r\nprint(\"The minimap is currently \" .. (expanded and \"expanded\" or \"normal size\") .. \" and the full map is currently \" .. (fullMap and \"revealed\" or \"not revealed\") .. \".\")"
        },
        {
          "lang": "cs",
          "code": "bool expanded = IsBigmapActive();\r\nbool fullMap = IsBigmapFull();\r\n\r\nDebug.WriteLine($\"The minimap is currently {(expanded ? \"expanded\" : \"normal size\")} and the full map is currently {(fullMap ? \"revealed\" : \"not revealed\")}.\");"
        }
      ],
      "hash": "0x66EE14B2",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Returns true if the full map is currently revealed on the minimap.\r\nUse [`IsBigmapActive`](#\\_0xFFF65C63) to check if the minimap is currently expanded or in it's normal state."
    },
    "0x75280015": {
      "name": "GET_VEHICLE_TYRE_SMOKE_COLOR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "r",
          "type": "int*"
        },
        {
          "name": "g",
          "type": "int*"
        },
        {
          "name": "b",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x75280015",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x70FE2EFF": {
      "name": "GET_VEHICLE_WHEEL_BRAKE_PRESSURE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "Gets brake pressure of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nNormal values around 1.0f when braking.",
      "examples": [
        
      ],
      "hash": "0x70FE2EFF",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x2FD0BC1B": {
      "name": "GET_WEAPON_COMPONENT_RANGE_MODIFIER",
      "params": [
        {
          "name": "componentHash",
          "type": "Hash",
          "description": "Weapon component name hash."
        }
      ],
      "results": "float",
      "description": "A getter for `CWeaponFallOffModifier` range modifier value in a weapon component.",
      "examples": [
        
      ],
      "hash": "0x2FD0BC1B",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A weapon component range modifier."
    },
    "0x6F4ACBA": {
      "name": "GET_WATER_QUAD_NO_STENCIL",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "noStencil",
          "type": "int*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success, noStencil = GetWaterQuadNoStencil(0)"
        }
      ],
      "hash": "0x6F4ACBA",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns if the given water quad has no stencil."
    },
    "0xF7535F32": {
      "name": "HAS_MINIMAP_OVERLAY_LOADED",
      "params": [
        {
          "name": "id",
          "type": "int",
          "description": "A minimap overlay ID."
        }
      ],
      "results": "BOOL",
      "description": "Returns whether or not the specific minimap overlay has loaded.",
      "examples": [
        
      ],
      "hash": "0xF7535F32",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A boolean indicating load status."
    },
    "0x499747B6": {
      "name": "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x499747B6",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xCC90CBCA": {
      "name": "GET_VEHICLE_WHEEL_X_OFFSET",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "Returns the offset of the specified wheel relative to the wheel's axle center.",
      "examples": [
        
      ],
      "hash": "0xCC90CBCA",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x3BCFEE14": {
      "name": "GET_VEHICLE_WHEEL_TRACTION_VECTOR_LENGTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "Gets the traction vector length of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0x3BCFEE14",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xDA58D7AE": {
      "name": "GET_VEHICLE_WHEEL_TYPE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xDA58D7AE",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xB8AF3137": {
      "name": "HAS_VEHICLE_BEEN_DAMAGED_BY_BULLETS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xB8AF3137",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns whether or not the target vehicle has been damaged by bullets."
    },
    "0xEDF4B0FC": {
      "name": "GET_VEHICLE_NUMBER_OF_WHEELS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xEDF4B0FC",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xD5C39EE6": {
      "name": "IS_BOAT_ANCHORED_AND_FROZEN",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xD5C39EE6",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns whether or not the boat is anchored and frozen."
    },
    "0xCCFF3B6E": {
      "name": "GET_VEHICLE_INTERIOR_COLOUR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "color",
          "type": "int*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xCCFF3B6E",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xA0867448": {
      "name": "GET_VEHICLE_WHEEL_STEERING_ANGLE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "Gets steering angle of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0xA0867448",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The steering angle of the wheel, with 0 being straight."
    },
    "0x37CF52CE": {
      "name": "IS_PRINCIPAL_ACE_ALLOWED",
      "params": [
        {
          "name": "principal",
          "type": "char*"
        },
        {
          "name": "object",
          "type": "char*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x37CF52CE",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0x5E1AF5F": {
      "name": "GET_WEAPON_RECOIL_SHAKE_AMPLITUDE",
      "params": [
        {
          "name": "weaponHash",
          "type": "Hash",
          "description": "Weapon name hash."
        }
      ],
      "results": "float",
      "description": "A getter for the recoil shake amplitude of a weapon.",
      "examples": [
        
      ],
      "hash": "0x5E1AF5F",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The recoil shake amplitude of a weapon."
    },
    "0xA411F72C": {
      "name": "IS_VEHICLE_INTERIOR_LIGHT_ON",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA411F72C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x4A0E3855": {
      "name": "GET_WEAPON_COMPONENT_DAMAGE_MODIFIER",
      "params": [
        {
          "name": "componentHash",
          "type": "Hash",
          "description": "Weapon component name hash."
        }
      ],
      "results": "float",
      "description": "A getter for `CWeaponDamageModifier` in a weapon component.",
      "examples": [
        
      ],
      "hash": "0x4A0E3855",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A weapon component damage modifier."
    },
    "0xE4E83A5B": {
      "name": "HAS_VEHICLE_BEEN_OWNED_BY_PLAYER",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE4E83A5B",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x3F5A61A7": {
      "name": "GET_WAVE_QUAD_AT_COORDS",
      "params": [
        {
          "name": "x",
          "type": "float",
          "description": "The X coordinate"
        },
        {
          "name": "y",
          "type": "float",
          "description": "The Y coordinate"
        }
      ],
      "results": "int",
      "description": "This native returns the index of a wave quad if the given point is inside its bounds.",
      "examples": [
        {
          "lang": "lua",
          "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waveQuadIndex = GetWaveQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
        }
      ],
      "hash": "0x3F5A61A7",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "The wave quad index at the given position. Returns -1 if there isn't any there."
    },
    "0xE0BA9FE6": {
      "name": "GET_VEHICLE_WHEEL_TIRE_COLLIDER_SIZE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "wheelIndex",
          "type": "int",
          "description": "Index of wheel, 0-3."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE0BA9FE6",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Float representing size of the wheel collider."
    },
    "0xCF24C52E": {
      "name": "IS_DUPLICITY_VERSION",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "Gets whether or not this is the CitizenFX server.",
      "examples": [
        
      ],
      "hash": "0xCF24C52E",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "A boolean value."
    },
    "0x76876154": {
      "name": "IS_FLASH_LIGHT_ON",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x76876154",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Whether or not the ped's flash light is on."
    },
    "0x1D14F4FE": {
      "name": "IS_PLAYER_COMMERCE_INFO_LOADED_EXT",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "BOOL",
      "description": "Requests whether or not the commerce data for the specified player has loaded from Tebex.",
      "examples": [
        
      ],
      "hash": "0x1D14F4FE",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A boolean."
    },
    "0xEF65929C": {
      "name": "GET_VEHICLE_WHEEL_TIRE_COLLIDER_WIDTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "wheelIndex",
          "type": "int",
          "description": "Index of wheel, 0-3."
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xEF65929C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Float representing width of the wheel collider."
    },
    "0x89A3881A": {
      "name": "IS_PLAYER_EVADING_WANTED_LEVEL",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The target player"
        }
      ],
      "results": "BOOL",
      "description": "```\nThis will return true if the player is evading wanted level, meaning that the wanted level stars are blink.\r\nOtherwise will return false.\r\n\r\nIf the player is not wanted, it simply returns false.\n```",
      "examples": [
        
      ],
      "hash": "0x89A3881A",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "boolean value, depending if the player is evading his wanted level or not."
    },
    "0x98545E6D": {
      "name": "IS_NUI_FOCUSED",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "Returns the current NUI focus state previously set with `SET_NUI_FOCUS`.",
      "examples": [
        
      ],
      "hash": "0x98545E6D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "True or false."
    },
    "0x13D53892": {
      "name": "GET_VEHICLE_WINDOW_TINT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x13D53892",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x9250C76": {
      "name": "GET_WAVE_QUAD_COUNT",
      "params": [
        
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local waveQuadCount = GetWaveQuadCount()"
        }
      ],
      "hash": "0x9250C76",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns the amount of wave quads loaded."
    },
    "0xEFEED13C": {
      "name": "IS_PED_STRAFING",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xEFEED13C",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Whether or not the ped is strafing."
    },
    "0x25865633": {
      "name": "IS_PED_HANDCUFFED",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x25865633",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Whether or not the ped is handcuffed."
    },
    "0xE14CF665": {
      "name": "GET_WEAPON_COMPONENT_CLIP_SIZE",
      "params": [
        {
          "name": "componentHash",
          "type": "Hash",
          "description": "Weapon component name hash."
        }
      ],
      "results": "int",
      "description": "A getter for `ClipSize` in a weapon component.",
      "examples": [
        
      ],
      "hash": "0xE14CF665",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A weapon component clip size."
    },
    "0xDEDAE23D": {
      "name": "IS_PLAYER_ACE_ALLOWED",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        },
        {
          "name": "object",
          "type": "char*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xDEDAE23D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x120B4ED5": {
      "name": "IS_ENTITY_VISIBLE",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "BOOL",
      "description": "This native checks if the given entity is visible.",
      "examples": [
        
      ],
      "hash": "0x120B4ED5",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns `true` if the entity is visible, `false` otherwise."
    },
    "0x9C9A3BE0": {
      "name": "HAS_ENTITY_BEEN_MARKED_AS_NO_LONGER_NEEDED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9C9A3BE0",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xBEFE93F4": {
      "name": "IS_PLAYER_COMMERCE_INFO_LOADED",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "BOOL",
      "description": "Requests whether or not the commerce data for the specified player has loaded.",
      "examples": [
        
      ],
      "hash": "0xBEFE93F4",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A boolean."
    },
    "0x48C80210": {
      "name": "IS_VEHICLE_TYRE_BURST",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelID",
          "type": "int"
        },
        {
          "name": "completely",
          "type": "BOOL"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x48C80210",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xFFF65C63": {
      "name": "IS_BIGMAP_ACTIVE",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "Returns true if the minimap is currently expanded. False if it's the normal minimap state.\r\nUse [`IsBigmapFull`](#\\_0x66EE14B2) to check if the full map is currently revealed on the minimap.",
      "examples": [
        {
          "lang": "lua",
          "code": "local expanded = IsBigmapActive()\r\nlocal fullMap = IsBigmapFull()\r\nprint(\"The minimap is currently \" .. (expanded and \"expanded\" or \"normal size\") .. \" and the full map is currently \" .. (fullMap and \"revealed\" or \"not revealed\") .. \".\")"
        },
        {
          "lang": "cs",
          "code": "bool expanded = IsBigmapActive();\r\nbool fullMap = IsBigmapFull();\r\n\r\nDebug.WriteLine($\"The minimap is currently {(expanded ? \"expanded\" : \"normal size\")} and the full map is currently {(fullMap ? \"revealed\" : \"not revealed\")}.\");"
        }
      ],
      "hash": "0xFFF65C63",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A bool indicating if the minimap is currently expanded or normal state."
    },
    "0xF849ED67": {
      "name": "IS_VEHICLE_PREVIOUSLY_OWNED_BY_PLAYER",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF849ED67",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xEDBE6ADD": {
      "name": "IS_ENTITY_POSITION_FROZEN",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to check for"
        }
      ],
      "results": "bool",
      "description": "A getter for [FREEZE_ENTITY_POSITION](#\\_0x428CA6DBD1094446).",
      "examples": [
        {
          "lang": "lua",
          "code": "local isFrozen = IsEntityPositionFrozen(PlayerPedId())"
        },
        {
          "lang": "js",
          "code": "const isFrozen = IsEntityPositionFrozen(PlayerPedId());"
        }
      ],
      "hash": "0xEDBE6ADD",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "Boolean stating if it is frozen or not."
    },
    "0x7EBB9929": {
      "name": "IS_ACE_ALLOWED",
      "params": [
        {
          "name": "object",
          "type": "char*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x7EBB9929",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0x5EA72E76": {
      "name": "MUMBLE_CLEAR_VOICE_TARGET_CHANNELS",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        }
      ],
      "results": "void",
      "description": "Clears channels from the target list for the specified Mumble voice target ID.",
      "examples": [
        
      ],
      "hash": "0x5EA72E76",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xC81D0659": {
      "name": "GET_WORLD_COORD_FROM_SCREEN_COORD",
      "params": [
        {
          "name": "screenX",
          "type": "float",
          "description": "A screen horizontal axis coordinate (0.0 - 1.0)."
        },
        {
          "name": "screenY",
          "type": "float",
          "description": "A screen vertical axis coordinate (0.0 - 1.0)."
        },
        {
          "name": "worldVector",
          "type": "Vector3*",
          "description": "The world coord vector pointer."
        },
        {
          "name": "normalVector",
          "type": "Vector3*",
          "description": "The screen normal vector pointer."
        }
      ],
      "results": "void",
      "description": "Converts a screen coordinate into its relative world coordinate.",
      "examples": [
        {
          "lang": "lua",
          "code": "CreateThread(function()\r\n  while true do\r\n    local screenX = GetDisabledControlNormal(0, 239)\r\n    local screenY = GetDisabledControlNormal(0, 240)\r\n\r\n    local world, normal = GetWorldCoordFromScreenCoord(screenX, screenY)\r\n\r\n    local depth = 10\r\n\r\n    local target = world + normal * depth\r\n\r\n    DrawSphere(target.x, target.y, target.z, 0.5, 255, 0, 0, 0.5)\r\n\r\n    Wait(0)\r\n  end\r\nend)"
        }
      ],
      "hash": "0xC81D0659",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A Vector3 representing the world coordinates relative to the specified screen coordinates and a screen plane normal Vector3 (normalised)."
    },
    "0x42098B5": {
      "name": "IS_VEHICLE_EXTRA_TURNED_ON",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "extraId",
          "type": "int"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x42098B5",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x63ED2E7": {
      "name": "GET_WEAPON_ANIMATION_OVERRIDE",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "Hash",
      "description": "A getter for [SET_WEAPON_ANIMATION_OVERRIDE](\\_0x1055AC3A667F09D9).",
      "examples": [
        {
          "lang": "lua",
          "code": "local weaponAnimation = GetWeaponAnimationOverride(PlayerPedId())"
        }
      ],
      "hash": "0x63ED2E7",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "The weapon animation override."
    },
    "0x7995539E": {
      "name": "LOAD_PLAYER_COMMERCE_DATA_EXT",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "void",
      "description": "Requests the commerce data from Tebex for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.",
      "examples": [
        
      ],
      "hash": "0x7995539E",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x9C7B59F9": {
      "name": "GET_VEHICLE_WHEEL_WIDTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        }
      ],
      "results": "float",
      "description": "Returns vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels (returns 0 in case of default wheels).",
      "examples": [
        
      ],
      "hash": "0x9C7B59F9",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Float representing width of the wheel (usually between 0.1 and 1.5)"
    },
    "0x1B1052E2": {
      "name": "MUMBLE_SET_AUDIO_INPUT_DISTANCE",
      "params": [
        {
          "name": "distance",
          "type": "float",
          "description": "The input distance."
        }
      ],
      "results": "void",
      "description": "Sets the current input distance. The player will be able to talk to other players within this distance.",
      "examples": [
        
      ],
      "hash": "0x1B1052E2",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xA7F04022": {
      "name": "GET_VEHICLE_WHEEL_SURFACE_MATERIAL",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "wheelIndex",
          "type": "int",
          "description": "Index of wheel, 0-3."
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA7F04022",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Integer representing the index of the current surface material of that wheel. Check materials.dat for the indexes."
    },
    "0x88CD646F": {
      "name": "MUMBLE_REMOVE_VOICE_TARGET_PLAYER",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        },
        {
          "name": "player",
          "type": "Player",
          "description": "The player index to remove from the target."
        }
      ],
      "results": "void",
      "description": "Removes the specified player from the user's voice targets.\n\nPerforms the opposite operation of [MUMBLE_ADD_VOICE_TARGET_PLAYER](#\\_0x32C5355A)",
      "examples": [
        
      ],
      "hash": "0x88CD646F",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x1D5D50C2": {
      "name": "MUMBLE_IS_PLAYER_MUTED",
      "params": [
        {
          "name": "playerSrc",
          "type": "int",
          "description": "The player to get the mute state for"
        }
      ],
      "results": "BOOL",
      "description": "Checks if the player is currently muted",
      "examples": [
        
      ],
      "hash": "0x1D5D50C2",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Whether or not the player is muted"
    },
    "0xE3551879": {
      "name": "INVOKE_FUNCTION_REFERENCE",
      "params": [
        {
          "name": "referenceIdentity",
          "type": "char*"
        },
        {
          "name": "argsSerialized",
          "type": "char*"
        },
        {
          "name": "argsLength",
          "type": "int"
        },
        {
          "name": "retvalLength",
          "type": "int*"
        }
      ],
      "results": "char*",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE3551879",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0x5AE7EDA2": {
      "name": "IS_PED_USING_ACTION_MODE",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x5AE7EDA2",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Whether or not the ped is using action mode."
    },
    "0x2EA4AFFE": {
      "name": "GET_VEHICLE_WHEEL_Y_ROTATION",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        }
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2EA4AFFE",
      "ns": "CFX",
      "apiset": "client",
      "aliases": [
        "GET_VEHICLE_WHEEL_XROT"
      ],
      "resultsDescription": ""
    },
    "0x8555DCBA": {
      "name": "MUMBLE_CLEAR_VOICE_TARGET",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        }
      ],
      "results": "void",
      "description": "Clears the target list for the specified Mumble voice target ID.",
      "examples": [
        
      ],
      "hash": "0x8555DCBA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x930BD34B": {
      "name": "MUMBLE_REMOVE_VOICE_TARGET_PLAYER_BY_SERVER_ID",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        },
        {
          "name": "serverId",
          "type": "int",
          "description": "The player's server id to remove from the target."
        }
      ],
      "results": "void",
      "description": "Removes the specified player from the user's voice targets.\n\nPerforms the opposite operation of [MUMBLE_ADD_VOICE_TARGET_PLAYER_BY_SERVER_ID](#\\_0x25F2B65F)",
      "examples": [
        
      ],
      "hash": "0x930BD34B",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xBF847807": {
      "name": "MUMBLE_CLEAR_VOICE_CHANNEL",
      "params": [
        
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xBF847807",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x231523B7": {
      "name": "MUMBLE_REMOVE_VOICE_CHANNEL_LISTEN",
      "params": [
        {
          "name": "channel",
          "type": "int",
          "description": "A game voice channel ID."
        }
      ],
      "results": "void",
      "description": "Stops listening to the specified channel.",
      "examples": [
        
      ],
      "hash": "0x231523B7",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xC7D2C20C": {
      "name": "IS_PLAYER_USING_SUPER_JUMP",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC7D2C20C",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A boolean."
    },
    "0xBB340D04": {
      "name": "IS_VEHICLE_ENGINE_STARTING",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xBB340D04",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": ""
    },
    "0xDC921211": {
      "name": "IS_VEHICLE_ALARM_SET",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xDC921211",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xAC4EF23D": {
      "name": "IS_VEHICLE_WINDOW_INTACT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        },
        {
          "name": "windowIndex",
          "type": "int",
          "description": "The window index."
        }
      ],
      "results": "BOOL",
      "description": "See the client-side [IS_VEHICLE_WINDOW_INTACT](https://docs.fivem.net/natives/?\\_0x46E571A0E20D01F1) for a window indexes list.",
      "examples": [
        
      ],
      "hash": "0xAC4EF23D",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x7AAC3B4C": {
      "name": "IS_DUI_AVAILABLE",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        }
      ],
      "results": "BOOL",
      "description": "Returns whether or not a browser is created for a specified DUI browser object.",
      "examples": [
        
      ],
      "hash": "0x7AAC3B4C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A boolean indicating TRUE if the browser is created."
    },
    "0xA7DAF7C": {
      "name": "IS_VEHICLE_WANTED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA7DAF7C",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xA8F63EAB": {
      "name": "LOAD_PLAYER_COMMERCE_DATA",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "void",
      "description": "Requests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.",
      "examples": [
        
      ],
      "hash": "0xA8F63EAB",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x33EEF97F": {
      "name": "MUMBLE_IS_PLAYER_TALKING",
      "params": [
        {
          "name": "player",
          "type": "Player",
          "description": "The target player."
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x33EEF97F",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Whether or not the player is talking."
    },
    "0x74E927B0": {
      "name": "MUMBLE_SET_TALKER_PROXIMITY",
      "params": [
        {
          "name": "value",
          "type": "float",
          "description": "Proximity value."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x74E927B0",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xE820BC10": {
      "name": "MUMBLE_IS_ACTIVE",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xE820BC10",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "True if the player has enabled voice chat."
    },
    "0x9E35DAB6": {
      "name": "NETWORK_GET_NETWORK_ID_FROM_ENTITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9E35DAB6",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xB39CA35C": {
      "name": "PROFILER_EXIT_SCOPE",
      "params": [
        
      ],
      "results": "void",
      "description": "Scope exit for profiler.",
      "examples": [
        
      ],
      "hash": "0xB39CA35C",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0xF9933BF4": {
      "name": "IS_VEHICLE_NEEDS_TO_BE_HOTWIRED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF9933BF4",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x6B171E87": {
      "name": "PERFORM_HTTP_REQUEST_INTERNAL_EX",
      "params": [
        {
          "name": "requestData",
          "type": "object"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x6B171E87",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x4D386C9E": {
      "name": "MUMBLE_ADD_VOICE_TARGET_CHANNEL",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        },
        {
          "name": "channel",
          "type": "int",
          "description": "A game voice channel ID."
        }
      ],
      "results": "void",
      "description": "Adds the specified channel to the target list for the specified Mumble voice target ID.",
      "examples": [
        
      ],
      "hash": "0x4D386C9E",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xF5102568": {
      "name": "LOAD_WATER_FROM_PATH",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The name of the resource containing your modified water definition"
        },
        {
          "name": "fileName",
          "type": "char*",
          "description": "The name of the file"
        }
      ],
      "results": "BOOL",
      "description": "Define the xml in a resources fxmanifest, under the file(s) section.",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = LoadWaterFromPath('my-resource-name', 'water-all-over-the-place.xml')"
        }
      ],
      "hash": "0xF5102568",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0x39C9DC92": {
      "name": "IS_NUI_FOCUS_KEEPING_INPUT",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "Checks if keyboard input is enabled during NUI focus using `SET_NUI_FOCUS_KEEP_INPUT`.",
      "examples": [
        
      ],
      "hash": "0x39C9DC92",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "True or false."
    },
    "0x25EB5873": {
      "name": "IS_VEHICLE_SIREN_ON",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x25EB5873",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xC833BBE1": {
      "name": "IS_PED_RAGDOLL",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC833BBE1",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Whether or not the ped is ragdolling."
    },
    "0x268DB867": {
      "name": "MUMBLE_REMOVE_VOICE_TARGET_CHANNEL",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        },
        {
          "name": "channel",
          "type": "int",
          "description": "The game voice channel ID to remove from the target."
        }
      ],
      "results": "void",
      "description": "Removes the specified voice channel from the user's voice targets.\n\nPerforms the opposite operation of [MUMBLE_ADD_VOICE_TARGET_CHANNEL](#\\_0x4D386C9E)",
      "examples": [
        
      ],
      "hash": "0x268DB867",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x221C09F1": {
      "name": "MUMBLE_GET_VOICE_CHANNEL_FROM_SERVER_ID",
      "params": [
        {
          "name": "serverId",
          "type": "int",
          "description": "The player's server id."
        }
      ],
      "results": "int",
      "description": "Returns the mumble voice channel from a player's server id.",
      "examples": [
        
      ],
      "hash": "0x221C09F1",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Int representing the identifier of the voice channel."
    },
    "0x8737EEE8": {
      "name": "MUMBLE_SET_VOICE_CHANNEL",
      "params": [
        {
          "name": "channel",
          "type": "int",
          "description": "A game voice channel ID."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x8737EEE8",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xA194934D": {
      "name": "IS_STREAMING_FILE_READY",
      "params": [
        {
          "name": "registerAs",
          "type": "char*",
          "description": "The file name to check, for example `asset.ydr`."
        }
      ],
      "results": "BOOL",
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nReturns whether an asynchronous streaming file registration completed.",
      "examples": [
        
      ],
      "hash": "0xA194934D",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Whether or not the streaming file has been registered."
    },
    "0xF8B7D7BB": {
      "name": "PROFILER_IS_RECORDING",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "Returns true if the profiler is active.",
      "examples": [
        
      ],
      "hash": "0xF8B7D7BB",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "True or false."
    },
    "0xCC6C2EB1": {
      "name": "MUMBLE_SET_PLAYER_MUTED",
      "params": [
        {
          "name": "playerSrc",
          "type": "int",
          "description": "The player to set the mute state of"
        },
        {
          "name": "toggle",
          "type": "bool",
          "description": "Whether to mute or unmute the player"
        }
      ],
      "results": "void",
      "description": "Mutes or unmutes the specified player",
      "examples": [
        
      ],
      "hash": "0xCC6C2EB1",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x404794CA": {
      "name": "IS_PED_A_PLAYER",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        }
      ],
      "results": "BOOL",
      "description": "This native checks if the given ped is a player.",
      "examples": [
        
      ],
      "hash": "0x404794CA",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns `true` if the ped is a player, `false` otherwise."
    },
    "0x9049DB44": {
      "name": "IS_BOAT_WRECKED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The target vehicle."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9049DB44",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "Returns whether or not the boat is wrecked."
    },
    "0x262663C5": {
      "name": "MUMBLE_CREATE_CHANNEL",
      "params": [
        {
          "name": "id",
          "type": "int",
          "description": "ID of the channel."
        }
      ],
      "results": "void",
      "description": "Create a permanent voice channel.",
      "examples": [
        
      ],
      "hash": "0x262663C5",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xC767B581": {
      "name": "IS_PED_COMPONENT_VARIATION_GEN9_EXCLUSIVE",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped."
        },
        {
          "name": "componentId",
          "type": "int",
          "description": "The component id."
        },
        {
          "name": "drawableId",
          "type": "int",
          "description": "The drawable id."
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local ped = PlayerPedId()\r\n\r\nfor component = 0, 12 do\r\n  local count = GetNumberOfPedDrawableVariations(ped, component)\r\n\r\n  for drawable = 0, count - 1 do\r\n    if IsPedComponentVariationGen9Exclusive(ped, component, drawable) then\r\n      print(\"Component \" .. component .. \" drawable \" .. drawable .. \" is a gen9 exclusive, skip!\")\r\n    end\r\n  end\r\nend"
        }
      ],
      "hash": "0xC767B581",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Whether or not the ped component variation is a gen9 exclusive (stub assets)."
    },
    "0xD7664FD1": {
      "name": "REGISTER_KEY_MAPPING",
      "params": [
        {
          "name": "commandString",
          "type": "char*",
          "description": "The command to execute, and the identifier of the binding."
        },
        {
          "name": "description",
          "type": "char*",
          "description": "A description for in the settings menu."
        },
        {
          "name": "defaultMapper",
          "type": "char*",
          "description": "The [mapper ID](https://docs.fivem.net/docs/game-references/input-mapper-parameter-ids/) to use for the default binding, e.g. `keyboard`."
        },
        {
          "name": "defaultParameter",
          "type": "char*",
          "description": "The [IO parameter ID](https://docs.fivem.net/docs/game-references/input-mapper-parameter-ids/) to use for the default binding, e.g. `f3`."
        }
      ],
      "results": "void",
      "description": "Registers a key mapping for the current resource.\n\nSee the related [cookbook post](https://cookbook.fivem.net/2020/01/06/using-the-new-console-key-bindings/) for more information.\n\nBelow you can find some examples on how to create these keybindings as well as the alternate keybinding syntax, which is preceded by `~!` to indicate that it's an alternate key.",
      "examples": [
        {
          "lang": "lua",
          "code": "local handsUp = false\r\nCreateThread(function()\r\n    while true do\r\n        Wait(0)\r\n        if handsUp then\r\n            TaskHandsUp(PlayerPedId(), 250, PlayerPedId(), -1, true)\r\n        end\r\n    end\r\nend)\r\nRegisterCommand('+handsup', function()\r\n    handsUp = true\r\nend, false)\r\nRegisterCommand('-handsup', function()\r\n    handsUp = false\r\nend, false)\r\n\r\nRegisterKeyMapping('+handsup', 'Hands Up', 'keyboard', 'i')\r\n\r\n-- Alternate keybinding syntax\r\nRegisterKeyMapping('~!+handsup', 'Hands Up - Alternate Key', 'keyboard', 'o')"
        }
      ],
      "hash": "0xD7664FD1",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB816370A": {
      "name": "MUMBLE_IS_CONNECTED",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "This native will return true if the user succesfully connected to the voice server.\r\nIf the user disabled the voice-chat setting it will return false.",
      "examples": [
        
      ],
      "hash": "0xB816370A",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "True if the player is connected to a mumble server."
    },
    "0x90A9E0B2": {
      "name": "OVERRIDE_PEDS_CAN_STAND_ON_TOP_FLAG",
      "params": [
        {
          "name": "flag",
          "type": "BOOL",
          "description": "true to override, false to use default game behavior."
        }
      ],
      "results": "void",
      "description": "Sets whether peds can stand on top of *all* vehicles without falling off.\n\nNote this flag is not replicated automatically, you will have to manually do so.",
      "examples": [
        
      ],
      "hash": "0x90A9E0B2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xC79F44BF": {
      "name": "MUMBLE_ADD_VOICE_CHANNEL_LISTEN",
      "params": [
        {
          "name": "channel",
          "type": "int",
          "description": "A game voice channel ID."
        }
      ],
      "results": "void",
      "description": "Starts listening to the specified channel, when available.",
      "examples": [
        
      ],
      "hash": "0xC79F44BF",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x912E21DA": {
      "name": "MUMBLE_CLEAR_VOICE_TARGET_PLAYERS",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        }
      ],
      "results": "void",
      "description": "Clears players from the target list for the specified Mumble voice target ID.",
      "examples": [
        
      ],
      "hash": "0x912E21DA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x526FEE31": {
      "name": "NETWORK_GET_ENTITY_OWNER",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to get the owner for."
        }
      ],
      "results": "int",
      "description": "Returns the owner ID of the specified entity.",
      "examples": [
        
      ],
      "hash": "0x526FEE31",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "On the server, the server ID of the entity owner. On the client, returns the player/slot ID of the entity owner."
    },
    "0xE6EB2CD8": {
      "name": "MUMBLE_SET_SERVER_ADDRESS",
      "params": [
        {
          "name": "address",
          "type": "char*",
          "description": "The address of the mumble server."
        },
        {
          "name": "port",
          "type": "int",
          "description": "The port of the mumble server."
        }
      ],
      "results": "void",
      "description": "Changes the Mumble server address to connect to, and reconnects to the new address.",
      "examples": [
        
      ],
      "hash": "0xE6EB2CD8",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x7A6462F4": {
      "name": "NETWORK_GET_VOICE_PROXIMITY_OVERRIDE",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        }
      ],
      "results": "Vector3",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x7A6462F4",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x8E8CC653": {
      "name": "PERFORM_HTTP_REQUEST_INTERNAL",
      "params": [
        {
          "name": "requestData",
          "type": "char*"
        },
        {
          "name": "requestDataLength",
          "type": "int"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x8E8CC653",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xD3BC438F": {
      "name": "OVERRIDE_POP_GROUPS",
      "params": [
        {
          "name": "path",
          "type": "char*",
          "description": "The file path to load (`popgroups`, `@resource/popgroups`), or `null` to reload the default population groups file."
        }
      ],
      "results": "void",
      "description": "Replaces the `popgroups` (CPopGroupList) meta file with the file in the specified path.",
      "examples": [
        {
          "lang": "lua",
          "code": "-- fxmanifest.lua:\r\nfile 'popgroups_dlc.xml'\r\n\r\n-- client.lua:\r\nOverridePopGroups('popgroups_dlc.xml')\r\n\r\n-- restore the original after five minutes\r\nWait(1000 * 60 * 5)\r\nOverridePopGroups(nil)"
        }
      ],
      "hash": "0xD3BC438F",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xF44BFB95": {
      "name": "REGISTER_STREAMING_FILE_FROM_URL",
      "params": [
        {
          "name": "registerAs",
          "type": "char*",
          "description": "The file name to register as, for example `asset.ydr`."
        },
        {
          "name": "url",
          "type": "char*",
          "description": "The URL to fetch the asset from."
        }
      ],
      "results": "void",
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a file from an URL as a streaming asset in the GTA streaming subsystem. This will asynchronously register the asset, and caching is done based on the URL itself - cache headers are ignored.\n\nUse `IS_STREAMING_FILE_READY` to check if the asset has been registered successfully.",
      "examples": [
        
      ],
      "hash": "0xF44BFB95",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x96F93CCE": {
      "name": "REQUEST_PLAYER_COMMERCE_SESSION",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player handle"
        },
        {
          "name": "skuId",
          "type": "int",
          "description": "The ID of the SKU."
        }
      ],
      "results": "void",
      "description": "Requests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance\r\nwill open the browser prompting further purchase details.",
      "examples": [
        
      ],
      "hash": "0x96F93CCE",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xFE3A3054": {
      "name": "MUMBLE_SET_SUBMIX_FOR_SERVER_ID",
      "params": [
        {
          "name": "serverId",
          "type": "int",
          "description": "The player's server ID."
        },
        {
          "name": "submixId",
          "type": "int",
          "description": "The submix ID."
        }
      ],
      "results": "void",
      "description": "Sets the audio submix ID for a specified player using Mumble 'Native Audio' functionality.",
      "examples": [
        
      ],
      "hash": "0xFE3A3054",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6383526B": {
      "name": "MUMBLE_SET_AUDIO_INPUT_INTENT",
      "params": [
        {
          "name": "intentHash",
          "type": "Hash",
          "description": "The intent hash."
        }
      ],
      "results": "void",
      "description": "Use this native to disable noise suppression and high pass filters.\n\nThe possible intents for this are as follows (backticks are used to represent hashes):\n\n| Index | Description |\r\n|-|-|\r\n| \\`speech\\` | Default intent |\r\n| \\`music\\` | Disable noise suppression and high pass filter |",
      "examples": [
        {
          "lang": "lua",
          "code": "-- disable noise suppression and high pass filter\r\nMumbleSetAudioInputIntent(`music`)\r\n\r\n-- set the default intent (enable noise suppression and high pass filter)\r\nMumbleSetAudioInputIntent(`speech`)"
        }
      ],
      "hash": "0x6383526B",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x74C597D9": {
      "name": "MUMBLE_SET_AUDIO_OUTPUT_DISTANCE",
      "params": [
        {
          "name": "distance",
          "type": "float",
          "description": "The output distance."
        }
      ],
      "results": "void",
      "description": "Sets the current output distance. The player will be able to hear other players talking within this distance.",
      "examples": [
        
      ],
      "hash": "0x74C597D9",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6D712937": {
      "name": "RESET_FLY_THROUGH_WINDSCREEN_PARAMS",
      "params": [
        
      ],
      "results": "void",
      "description": "Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values.",
      "examples": [
        
      ],
      "hash": "0x6D712937",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xACF6D8EE": {
      "name": "REGISTER_FONT_ID",
      "params": [
        {
          "name": "fontName",
          "type": "char*",
          "description": "The name of the font in the GFx font library."
        }
      ],
      "results": "int",
      "description": "Registers a specified font name for use with text draw commands.",
      "examples": [
        
      ],
      "hash": "0xACF6D8EE",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "An index to use with [SET_TEXT_FONT](#\\_0x66E0276CC5F6B9DA) and similar natives."
    },
    "0xA896B20A": {
      "name": "REMOVE_REPLACE_TEXTURE",
      "params": [
        {
          "name": "origTxd",
          "type": "char*"
        },
        {
          "name": "origTxn",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "Experimental natives, please do not use in a live environment.",
      "examples": [
        
      ],
      "hash": "0xA896B20A",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xA8AE9C2F": {
      "name": "REGISTER_RAW_NUI_CALLBACK",
      "params": [
        {
          "name": "callbackType",
          "type": "char*"
        },
        {
          "name": "callback",
          "type": "func"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA8AE9C2F",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x76A9EE1F": {
      "name": "LOAD_RESOURCE_FILE",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The resource name."
        },
        {
          "name": "fileName",
          "type": "char*",
          "description": "The file in the resource."
        }
      ],
      "results": "char*",
      "description": "Reads the contents of a text file in a specified resource.\r\nIf executed on the client, this file has to be included in `files` in the resource manifest.\r\nExample: `local data = LoadResourceFile(\"devtools\", \"data.json\")`",
      "examples": [
        
      ],
      "hash": "0x76A9EE1F",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "The file contents"
    },
    "0xC59B980C": {
      "name": "REGISTER_NUI_CALLBACK",
      "params": [
        {
          "name": "callbackType",
          "type": "char*"
        },
        {
          "name": "callback",
          "type": "func"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC59B980C",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x1E546224": {
      "name": "NETWORK_GET_FIRST_ENTITY_OWNER",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to get the first owner for."
        }
      ],
      "results": "int",
      "description": "Returns the first owner ID of the specified entity.",
      "examples": [
        
      ],
      "hash": "0x1E546224",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The server ID of the first entity owner."
    },
    "0x32C5355A": {
      "name": "MUMBLE_ADD_VOICE_TARGET_PLAYER",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        },
        {
          "name": "player",
          "type": "Player",
          "description": "A game player index."
        }
      ],
      "results": "void",
      "description": "Adds the specified player to the target list for the specified Mumble voice target ID.",
      "examples": [
        
      ],
      "hash": "0x32C5355A",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x5B912C3F": {
      "name": "NETWORK_GET_ENTITY_FROM_NETWORK_ID",
      "params": [
        {
          "name": "netId",
          "type": "int"
        }
      ],
      "results": "Entity",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x5B912C3F",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x960A4A95": {
      "name": "MUMBLE_SET_VOICE_TARGET",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive). 0 disables voice targets, and 31 is server loopback."
        }
      ],
      "results": "void",
      "description": "Sets the current Mumble voice target ID to broadcast voice to.",
      "examples": [
        
      ],
      "hash": "0x960A4A95",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x84E02A32": {
      "name": "MUMBLE_GET_TALKER_PROXIMITY",
      "params": [
        
      ],
      "results": "float",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x84E02A32",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Talker proximity value."
    },
    "0xD932A3F3": {
      "name": "MUMBLE_SET_ACTIVE",
      "params": [
        {
          "name": "state",
          "type": "BOOL",
          "description": "Voice chat state."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xD932A3F3",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x25F2B65F": {
      "name": "MUMBLE_ADD_VOICE_TARGET_PLAYER_BY_SERVER_ID",
      "params": [
        {
          "name": "targetId",
          "type": "int",
          "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
        },
        {
          "name": "serverId",
          "type": "int",
          "description": "The player's server id."
        }
      ],
      "results": "void",
      "description": "Adds the specified player to the target list for the specified Mumble voice target ID.",
      "examples": [
        
      ],
      "hash": "0x25F2B65F",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x61C309E3": {
      "name": "MUMBLE_SET_VOLUME_OVERRIDE",
      "params": [
        {
          "name": "player",
          "type": "Player",
          "description": "A game player index."
        },
        {
          "name": "volume",
          "type": "float",
          "description": "The volume, ranging from 0.0 to 1.0 (or above)."
        }
      ],
      "results": "void",
      "description": "Overrides the output volume for a particular player on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.\n\nSet to -1.0 to reset the Volume override.",
      "examples": [
        
      ],
      "hash": "0x61C309E3",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xC795A4A9": {
      "name": "PROFILER_ENTER_SCOPE",
      "params": [
        {
          "name": "scopeName",
          "type": "char*",
          "description": "Scope name."
        }
      ],
      "results": "void",
      "description": "Scope entry for profiler.",
      "examples": [
        
      ],
      "hash": "0xC795A4A9",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x7BCAA6E7": {
      "name": "REMOVE_DRY_VOLUME",
      "params": [
        {
          "name": "handle",
          "type": "int",
          "description": "The handle of the dry volume that needs to be removed."
        }
      ],
      "results": "void",
      "description": "Removes a dry volume from the game session.\r\nSee CREATE_DRY_VOLUME for more info",
      "examples": [
        
      ],
      "hash": "0x7BCAA6E7",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x11A5B7ED": {
      "name": "RESET_MAP_ZOOM_DATA_LEVEL",
      "params": [
        {
          "name": "index",
          "type": "int",
          "description": "Zoom level index."
        }
      ],
      "results": "void",
      "description": "Resets values from the zoom level data by index to defaults from mapzoomdata.meta.",
      "examples": [
        
      ],
      "hash": "0x11A5B7ED",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x1493DCC1": {
      "name": "REGISTER_STREAMING_FILE_FROM_KVS",
      "params": [
        {
          "name": "kvsKey",
          "type": "char*",
          "description": "The KVP key in the current resource to register as an asset."
        }
      ],
      "results": "void",
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a KVP value as an asset with the GTA streaming module system. This function currently won't work.",
      "examples": [
        
      ],
      "hash": "0x1493DCC1",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xCEAD2D4B": {
      "name": "REGISTER_STREAMING_FILE_FROM_CACHE",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The resource to add the asset to."
        },
        {
          "name": "fileName",
          "type": "char*",
          "description": "A file name in the resource."
        },
        {
          "name": "cacheString",
          "type": "char*",
          "description": "The string returned from `REGISTER_RESOURCE_ASSET` on the server."
        }
      ],
      "results": "void",
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a dynamic streaming asset from the server with the GTA streaming module system.",
      "examples": [
        
      ],
      "hash": "0xCEAD2D4B",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x7FA03E76": {
      "name": "OVERRIDE_VEHICLE_PEDS_CAN_STAND_ON_TOP_FLAG",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle."
        },
        {
          "name": "can",
          "type": "BOOL",
          "description": "Can they?"
        }
      ],
      "results": "void",
      "description": "Overrides whether or not peds can stand on top of the specified vehicle.\n\nNote this flag is not replicated automatically, you will have to manually do so.",
      "examples": [
        
      ],
      "hash": "0x7FA03E76",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x79A12861": {
      "name": "RESET_PED_MODEL_PERSONALITY",
      "params": [
        {
          "name": "modelHash",
          "type": "Hash",
          "description": "Ped's model."
        }
      ],
      "results": "void",
      "description": "Restores an overridden ped model personality type to the default value.",
      "examples": [
        
      ],
      "hash": "0x79A12861",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xCD03CDA9": {
      "name": "REGISTER_NUI_CALLBACK_TYPE",
      "params": [
        {
          "name": "callbackType",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xCD03CDA9",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xA09E7E7B": {
      "name": "SAVE_RESOURCE_FILE",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The name of the resource."
        },
        {
          "name": "fileName",
          "type": "char*",
          "description": "The name of the file."
        },
        {
          "name": "data",
          "type": "char*",
          "description": "The data to write to the file."
        },
        {
          "name": "dataLength",
          "type": "int",
          "description": "The length of the written data."
        }
      ],
      "results": "BOOL",
      "description": "Writes the specified data to a file in the specified resource.\r\nUsing a length of `-1` will automatically detect the length assuming the data is a C string.",
      "examples": [
        
      ],
      "hash": "0xA09E7E7B",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A value indicating if the write succeeded."
    },
    "0x410DA7D3": {
      "name": "REGISTER_ENTITIES",
      "params": [
        {
          "name": "factory",
          "type": "func",
          "description": "A function returning a list of entities."
        }
      ],
      "results": "void",
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of entities with the game engine. These should match `CEntityDef` class information from the game.\r\nAt this time, this function **should not be used in a live environment**.",
      "examples": [
        
      ],
      "hash": "0x410DA7D3",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xCD380DA9": {
      "name": "SEND_DUI_MESSAGE",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        },
        {
          "name": "jsonString",
          "type": "char*",
          "description": "The message, encoded as JSON."
        }
      ],
      "results": "void",
      "description": "Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE.",
      "examples": [
        
      ],
      "hash": "0xCD380DA9",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x9862B266": {
      "name": "REGISTER_RESOURCE_ASSET",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The resource to add the asset to."
        },
        {
          "name": "fileName",
          "type": "char*",
          "description": "A file name in the resource."
        }
      ],
      "results": "char*",
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder.",
      "examples": [
        
      ],
      "hash": "0x9862B266",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A cache string to pass to `REGISTER_STREAMING_FILE_FROM_CACHE` on the client."
    },
    "0x1B3A363": {
      "name": "REGISTER_FONT_FILE",
      "params": [
        {
          "name": "fileName",
          "type": "char*",
          "description": "The name of the .gfx file, without extension."
        }
      ],
      "results": "void",
      "description": "Registers a specified .gfx file as GFx font library.\r\nThe .gfx file has to be registered with the streamer already.",
      "examples": [
        
      ],
      "hash": "0x1B3A363",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x5FA79B0F": {
      "name": "REGISTER_COMMAND",
      "params": [
        {
          "name": "commandName",
          "type": "char*",
          "description": "The command you want to register."
        },
        {
          "name": "handler",
          "type": "func",
          "description": "A handler function that gets called whenever the command is executed."
        },
        {
          "name": "restricted",
          "type": "BOOL",
          "description": "If this is a server command and you set this to true, then players will need the command.yourCommandName ace permission to execute this command."
        }
      ],
      "results": "void",
      "description": "Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.\n\nCommands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\\_0x561C060B).\n\nThe restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).\n\n**Example result**:\n\n![](https://i.imgur.com/TaCnG09.png)",
      "examples": [
        {
          "lang": "lua",
          "code": "-- (server side script)\r\n-- Registers a command named 'ping'.\r\nRegisterCommand(\"ping\", function(source, args, rawCommand)\r\n    -- If the source is > 0, then that means it must be a player.\r\n    if (source > 0) then\r\n    \r\n        -- result (using the default GTA:O chat theme) https://i.imgur.com/TaCnG09.png\r\n        TriggerClientEvent(\"chat:addMessage\", -1, {\r\n            args = {\r\n                GetPlayerName(source),\r\n                \"PONG!\"\r\n            },\r\n            color = { 5, 255, 255 }\r\n        })\r\n    \r\n    -- If it's not a player, then it must be RCON, a resource, or the server console directly.\r\n    else\r\n        print(\"This command was executed by the server console, RCON client, or a resource.\")\r\n    end\r\nend, false --[[this command is not restricted, everyone can use this.]])"
        },
        {
          "lang": "cs",
          "code": "RegisterCommand(\"ping\", new Action<int, List<object>, string>((source, args, rawCommand) =>\r\n{\r\n    if (source > 0) // it's a player.\r\n    {\r\n        // Create a message object.\r\n        dynamic messageObject = new ExpandoObject();\r\n        // Set the message object args (message author, message content)\r\n        messageObject.args = new string[] { GetPlayerName(source.ToString()), \"PONG!\" };\r\n        // Set the message color (r, g, b)\r\n        messageObject.color = new int[] { 5, 255, 255 };\r\n\r\n        // Trigger the client event with the message object on all clients.\r\n        TriggerClientEvent(\"chat:addMessage\", messageObject);\r\n    }\r\n    // It's not a player, so it's the server console, a RCON client, or a resource.\r\n    else\r\n    {\r\n        Debug.WriteLine(\"This command was executed by the server console, RCON client, or a resource.\");\r\n    }\r\n}), false /*This command is also not restricted, anyone can use it.*/ );"
        }
      ],
      "hash": "0x5FA79B0F",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x9A209B3C": {
      "name": "SET_AUDIO_SUBMIX_EFFECT_PARAM_FLOAT",
      "params": [
        {
          "name": "submixId",
          "type": "int",
          "description": "The submix."
        },
        {
          "name": "effectSlot",
          "type": "int",
          "description": "The effect slot for the submix. It is expected that the effect is set in this slot beforehand."
        },
        {
          "name": "paramIndex",
          "type": "int",
          "description": "The parameter index for the effect."
        },
        {
          "name": "paramValue",
          "type": "float",
          "description": "The parameter value to set."
        }
      ],
      "results": "void",
      "description": "Sets a floating-point parameter for a submix effect.",
      "examples": [
        
      ],
      "hash": "0x9A209B3C",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x8A7A8DAC": {
      "name": "SET_CURSOR_LOCATION",
      "params": [
        {
          "name": "x",
          "type": "float",
          "description": "X position."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Y position."
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x8A7A8DAC",
      "ns": "CFX",
      "apiset": "client",
      "game": "rdr3",
      "resultsDescription": "A boolean."
    },
    "0xE7490533": {
      "name": "REQUEST_RESOURCE_FILE_SET",
      "params": [
        {
          "name": "setName",
          "type": "char*",
          "description": "The name of the file set as specified in `fxmanifest.lua`."
        }
      ],
      "results": "BOOL",
      "description": "Requests a resource file set with the specified name to be downloaded and mounted on top of the current resource.\n\nResource file sets are specified in `fxmanifest.lua` with the following syntax:\n\n```lua\nfile_set 'addon_ui' {\r\n    'ui/addon/index.html',\r\n    'ui/addon/**.js',\r\n}\n```\n\nThis command will trigger a script error if the request failed.",
      "examples": [
        {
          "lang": "lua",
          "code": "-- fxmanifest.lua\r\nfile_set 'dummies' {\r\n    'dummy/**.txt',\r\n    'potato.txt',\r\n}\r\n\r\n-- main script\r\nlocal function PrintTest()\r\n    local tests = { 'potato.txt', 'dummy/1.txt', 'dummy/b/2.txt' }\r\n\r\n    for _, v in ipairs(tests) do\r\n        local data = LoadResourceFile(GetCurrentResourceName(), v)\r\n        print(v, data)\r\n    end\r\nend\r\n\r\nRegisterCommand('fileset', function()\r\n    PrintTest()\r\n\r\n    while not RequestResourceFileSet('dummies') do\r\n        Wait(100)\r\n    end\r\n\r\n    PrintTest()\r\nend)"
        }
      ],
      "hash": "0xE7490533",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "`TRUE` if the set is mounted, `FALSE` if the request is still pending."
    },
    "0xD9D7A0AA": {
      "name": "SEND_DUI_MOUSE_MOVE",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        },
        {
          "name": "x",
          "type": "int",
          "description": "The mouse X position."
        },
        {
          "name": "y",
          "type": "int",
          "description": "The mouse Y position."
        }
      ],
      "results": "void",
      "description": "Injects a 'mouse move' event for a DUI object. Coordinates are in browser space.",
      "examples": [
        
      ],
      "hash": "0xD9D7A0AA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xA42A3DBF": {
      "name": "SET_AIM_COOLDOWN",
      "params": [
        {
          "name": "value",
          "type": "int",
          "description": "Number of milliseconds between allowed aiming"
        }
      ],
      "results": "void",
      "description": "Adds a cooldown between instances of moving and then aiming.\r\nCan be optionally used to hinder 'speedboosting'\r\nTo turn off, set value to 0",
      "examples": [
        
      ],
      "hash": "0xA42A3DBF",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x3C2F9037": {
      "name": "REGISTER_ARCHETYPES",
      "params": [
        {
          "name": "factory",
          "type": "func",
          "description": "A function returning a list of archetypes."
        }
      ],
      "results": "void",
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of archetypes with the game engine. These should match `CBaseArchetypeDef` class information from the game.",
      "examples": [
        {
          "lang": "lua",
          "code": "RegisterArchetypes(function()\r\n\treturn {\r\n\t\t{\r\n\t\t\tflags = 32,\r\n\t\t\tbbMin = vector3(-39.99570000, -8.00155600, -2.56818800),\r\n\t\t\tbbMax = vector3(40.00439000, 7.99858000, 1.44575100),\r\n\t\t\tbsCentre = vector3(0.00434110, -0.00148870, -0.56121830),\r\n\t\t\tbsRadius = 40.84160000,\r\n\t\t\tname = 'my_asset',\r\n\t\t\ttextureDictionary = 'my_asset',\r\n\t\t\tphysicsDictionary = 'my_asset',\r\n\t\t\tassetName = 'my_asset',\r\n\t\t\tassetType = 'ASSET_TYPE_DRAWABLE',\r\n\t\t\tlodDist = 450.45,\r\n\t\t\tspecialAttribute = 0\r\n\t\t}\r\n\t}\r\nend)"
        }
      ],
      "hash": "0x3C2F9037",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xD36BE661": {
      "name": "REMOVE_STATE_BAG_CHANGE_HANDLER",
      "params": [
        {
          "name": "cookie",
          "type": "int",
          "description": "The cookie."
        }
      ],
      "results": "void",
      "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRemoves a handler for changes to a state bag.",
      "examples": [
        
      ],
      "hash": "0xD36BE661",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x1DA4791": {
      "name": "RESET_WATER",
      "params": [
        
      ],
      "results": "void",
      "description": "Resets the water to the games default water.xml.",
      "examples": [
        {
          "lang": "lua",
          "code": "ResetWater()"
        }
      ],
      "hash": "0x1DA4791",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x5A5E0D05": {
      "name": "REMOVE_TIMECYCLE_MODIFIER_VAR",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The name of timecycle modifier."
        },
        {
          "name": "varName",
          "type": "char*",
          "description": "The name of timecycle variable."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local modifierName = \"superDARK\"\r\nlocal varName = \"postfx_noise\"\r\n\r\nif DoesTimecycleModifierHasVar(modifierName, varName) then\r\n  local success, value1, value2 = GetTimecycleModifierVar(modifierName, varName)\r\n\r\n  if success then\r\n    print(string.format(\"[%s] removed var %s with values: %f %f\", modifierName, varName, value1, value2))\r\n    RemoveTimecycleModifierVar(modifierName, varName)\r\n  end\r\nelse\r\n    SetTimecycleModifierVar(modifierName, varName, 1.0, 1.0)\r\n    print(string.format(\"[%s] created var %s\", modifierName, varName))\r\nend"
        }
      ],
      "hash": "0x5A5E0D05",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xD233A168": {
      "name": "REGISTER_RESOURCE_AS_EVENT_HANDLER",
      "params": [
        {
          "name": "eventName",
          "type": "char*",
          "description": "An event name, or \"\\*\" to disable HLL event filtering for this resource."
        }
      ],
      "results": "void",
      "description": "An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.",
      "examples": [
        
      ],
      "hash": "0xD233A168",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x8BBE6CC0": {
      "name": "SEND_LOADING_SCREEN_MESSAGE",
      "params": [
        {
          "name": "jsonString",
          "type": "char*",
          "description": "The JSON-encoded message."
        }
      ],
      "results": "BOOL",
      "description": "Sends a message to the `loadingScreen` NUI frame, which contains the HTML page referenced in `loadscreen` resources.",
      "examples": [
        
      ],
      "hash": "0x8BBE6CC0",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A success value."
    },
    "0xC5945BD9": {
      "name": "SET_CALMING_QUAD_BOUNDS",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The calming quad index"
        },
        {
          "name": "minX",
          "type": "int",
          "description": "The minX coordinate"
        },
        {
          "name": "minY",
          "type": "int",
          "description": "The minY coordinate"
        },
        {
          "name": "maxX",
          "type": "int",
          "description": "The maxX coordinate"
        },
        {
          "name": "maxY",
          "type": "int",
          "description": "The maxY coordinate"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetCalmingQuadBounds(1, -500, -500, 500, 500)"
        }
      ],
      "hash": "0xC5945BD9",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0x78608ACB": {
      "name": "SEND_NUI_MESSAGE",
      "params": [
        {
          "name": "jsonString",
          "type": "char*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x78608ACB",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x5D01F191": {
      "name": "SEND_DUI_MOUSE_DOWN",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        },
        {
          "name": "button",
          "type": "char*",
          "description": "Either `'left'`, `'middle'` or `'right'`."
        }
      ],
      "results": "void",
      "description": "Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.",
      "examples": [
        
      ],
      "hash": "0x5D01F191",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x281B5448": {
      "name": "REGISTER_CONSOLE_LISTENER",
      "params": [
        {
          "name": "listener",
          "type": "func",
          "description": "A function of `(channel: string, message: string) => void`. The message might contain `\\n`."
        }
      ],
      "results": "void",
      "description": "Registers a listener for console output messages.",
      "examples": [
        
      ],
      "hash": "0x281B5448",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x6A02254D": {
      "name": "SET_DISCORD_APP_ID",
      "params": [
        {
          "name": "appId",
          "type": "char*",
          "description": "A valid Discord API App Id, can be generated at https://discordapp.com/developers/applications/"
        }
      ],
      "results": "void",
      "description": "This native sets the app id for the discord rich presence implementation.",
      "examples": [
        
      ],
      "hash": "0x6A02254D",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xD3A183A3": {
      "name": "SET_ENTITY_DISTANCE_CULLING_RADIUS",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity handle to override the distance culling radius."
        },
        {
          "name": "radius",
          "type": "float",
          "description": "The new distance culling radius."
        }
      ],
      "results": "void",
      "description": "It overrides the default distance culling radius of an entity. Set to `0.0` to reset.\r\nIf you want to interact with an entity outside of your players' scopes set the radius to a huge number.\n\n**WARNING**: Culling natives are deprecated and have known, [unfixable issues](https://forum.cfx.re/t/issue-with-culling-radius-and-server-side-entities/4900677/4)",
      "examples": [
        
      ],
      "hash": "0xD3A183A3",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x9338D547": {
      "name": "SET_CONVAR_SERVER_INFO",
      "params": [
        {
          "name": "varName",
          "type": "char*"
        },
        {
          "name": "value",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x9338D547",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x36DF8612": {
      "name": "REMOVE_TIMECYCLE_MODIFIER",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The timecycle modifier name."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local modifierName = \"my_awesome_timecycle\"\r\nRemoveTimecycleModifier(modifierName)"
        }
      ],
      "hash": "0x36DF8612",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xCE8E25B4": {
      "name": "MUMBLE_SET_VOLUME_OVERRIDE_BY_SERVER_ID",
      "params": [
        {
          "name": "serverId",
          "type": "int",
          "description": "The player's server id."
        },
        {
          "name": "volume",
          "type": "float",
          "description": "The volume, ranging from 0.0 to 1.0 (or above)."
        }
      ],
      "results": "void",
      "description": "Overrides the output volume for a particular player with the specified server id and player name on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.",
      "examples": [
        
      ],
      "hash": "0xCE8E25B4",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x1D735B93": {
      "name": "SEND_DUI_MOUSE_UP",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        },
        {
          "name": "button",
          "type": "char*",
          "description": "Either `'left'`, `'middle'` or `'right'`."
        }
      ],
      "results": "void",
      "description": "Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.",
      "examples": [
        
      ],
      "hash": "0x1D735B93",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x7644A9FA": {
      "name": "SET_HUD_COMPONENT_SIZE",
      "params": [
        {
          "name": "id",
          "type": "int",
          "description": "The hud component id."
        },
        {
          "name": "x",
          "type": "float",
          "description": "New size X."
        },
        {
          "name": "y",
          "type": "float",
          "description": "New size Y."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x7644A9FA",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xAAA94D53": {
      "name": "SET_AUDIO_SUBMIX_EFFECT_RADIO_FX",
      "params": [
        {
          "name": "submixId",
          "type": "int",
          "description": "The submix."
        },
        {
          "name": "effectSlot",
          "type": "int",
          "description": "The effect slot for the submix."
        }
      ],
      "results": "void",
      "description": "Assigns a RadioFX effect to a submix effect slot.\n\nThe parameter values for this effect are as follows (backticks are used to represent hashes):\n\n| Index | Type | Description |\r\n|-|-|-|\r\n| \\`enabled\\` | int | Enables or disables RadioFX on this DSP. |\r\n| \\`default\\` | int | Sets default parameters for the RadioFX DSP and enables it. |\r\n| \\`freq_low\\` | float |  |\r\n| \\`freq_hi\\` | float |  |\r\n| \\`fudge\\` | float |  |\r\n| \\`rm_mod_freq\\` | float |  |\r\n| \\`rm_mix\\` | float |  |\r\n| \\`o_freq_lo\\` | float |  |\r\n| \\`o_freq_hi\\` | float |  |",
      "examples": [
        {
          "lang": "lua",
          "code": "-- we want to change the master output\r\nlocal submix = 0\r\n\r\n-- add a RadioFX effect to slot 0\r\nSetAudioSubmixEffectRadioFx(submix, 0)\r\n\r\n-- set the default values\r\nSetAudioSubmixEffectParamInt(submix, 0, `default`, 1)"
        }
      ],
      "hash": "0xAAA94D53",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB7BA82DC": {
      "name": "SET_MAP_NAME",
      "params": [
        {
          "name": "mapName",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xB7BA82DC",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xB029D2FA": {
      "name": "SET_DISCORD_RICH_PRESENCE_ASSET_TEXT",
      "params": [
        {
          "name": "text",
          "type": "char*",
          "description": "Text to be displayed when hovering over image asset. Note that you must also set a valid image asset using the SET_DISCORD_RICH_PRESENCE_ASSET native."
        }
      ],
      "results": "void",
      "description": "This native sets the hover text of the image asset for the discord rich presence implementation.",
      "examples": [
        
      ],
      "hash": "0xB029D2FA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xF61D04C4": {
      "name": "SET_DISCORD_RICH_PRESENCE_ASSET_SMALL",
      "params": [
        {
          "name": "assetName",
          "type": "char*",
          "description": "The name of a valid asset registered on Discordapp's developer dashboard. Note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."
        }
      ],
      "results": "void",
      "description": "This native sets the small image asset for the discord rich presence implementation.",
      "examples": [
        
      ],
      "hash": "0xF61D04C4",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xFE8064E3": {
      "name": "SET_HANDLING_FIELD",
      "params": [
        {
          "name": "vehicle",
          "type": "char*",
          "description": "The vehicle class to set data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to set. These match the keys in `handling.meta`."
        },
        {
          "name": "value",
          "type": "Any",
          "description": "The value to set."
        }
      ],
      "results": "void",
      "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingField('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`",
      "examples": [
        
      ],
      "hash": "0xFE8064E3",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xDF62CFE2": {
      "name": "RESET_VEHICLE_PEDS_CAN_STAND_ON_TOP_FLAG",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle."
        }
      ],
      "results": "void",
      "description": "Resets whether or not peds can stand on top of the specified vehicle.\n\nNote this flag is not replicated automatically, you will have to manually do so.",
      "examples": [
        
      ],
      "hash": "0xDF62CFE2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x85A10FFD": {
      "name": "SET_IGNORE_VEHICLE_OWNERSHIP_FOR_STOWING",
      "params": [
        {
          "name": "ignore",
          "type": "BOOL",
          "description": "true to let the local player stow carriables on any hunting wagon, false to use the default behaviour."
        }
      ],
      "results": "void",
      "description": "Sets whether or not ownership checks should be performed while trying to stow a carriable on a hunting wagon.",
      "examples": [
        
      ],
      "hash": "0x85A10FFD",
      "ns": "CFX",
      "apiset": "client",
      "game": "rdr3"
    },
    "0x67977501": {
      "name": "SET_CALMING_QUAD_DAMPENING",
      "params": [
        {
          "name": "calmingQuad",
          "type": "int",
          "description": "The calming quad"
        },
        {
          "name": "dampening",
          "type": "float",
          "description": "The dampening value"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetCalmingQuadDampening(0, 1.0)"
        }
      ],
      "hash": "0x67977501",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0x35E62B6A": {
      "name": "SET_DISCORD_RICH_PRESENCE_ASSET_SMALL_TEXT",
      "params": [
        {
          "name": "text",
          "type": "char*",
          "description": "Text to be displayed when hovering over small image asset. Note that you must also set a valid small image asset using the SET_DISCORD_RICH_PRESENCE_ASSET_SMALL native."
        }
      ],
      "results": "void",
      "description": "This native sets the hover text of the small image asset for the discord rich presence implementation.",
      "examples": [
        
      ],
      "hash": "0x35E62B6A",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x53DFD530": {
      "name": "SET_DISCORD_RICH_PRESENCE_ASSET",
      "params": [
        {
          "name": "assetName",
          "type": "char*",
          "description": "The name of a valid asset registered on Discordapp's developer dashboard. note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."
        }
      ],
      "results": "void",
      "description": "This native sets the image asset for the discord rich presence implementation.",
      "examples": [
        
      ],
      "hash": "0x53DFD530",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x79780FD2": {
      "name": "SET_DEFAULT_VEHICLE_NUMBER_PLATE_TEXT_PATTERN",
      "params": [
        {
          "name": "plateIndex",
          "type": "int",
          "description": "A plate index, or `-1` to set a default for any indices that do not have a specific value."
        },
        {
          "name": "pattern",
          "type": "char*",
          "description": "A number plate pattern string, or a null value to reset to default."
        }
      ],
      "results": "void",
      "description": "Sets the default number plate text pattern for vehicles seen on the local client with the specified plate index as their *default* index (`plateProbabilities` from carvariations).\n\nFor consistency, this should be used with the same value on all clients, since vehicles *without* custom text will use a seeded random number generator with this pattern to determine the default plate text.\n\nThe default value is `11AAA111`, and using this or a NULL string will revert to the default game RNG.\n\n### Pattern string format\n\n*   `1` will lead to a random number from 0-9.\n*   `A` will lead to a random letter from A-Z.\n*   `.` will lead to a random letter *or* number, with 50% probability of being either.\n*   `^1` will lead to a literal `1` being emitted.\n*   `^A` will lead to a literal `A` being emitted.\n*   Any other character will lead to said character being emitted.\n*   A string shorter than 8 characters will be padded on the right.",
      "examples": [
        {
          "lang": "lua",
          "code": "SetDefaultVehicleNumberPlateTextPattern(-1, ' AAA111 ')\r\nSetDefaultVehicleNumberPlateTextPattern(4 , ' AAAAAA ')\r\n\r\n-- fixed characters: plate will be FAYUM69C for example\r\nSetDefaultVehicleNumberPlateTextPattern(-1, 'F^AYUM11A')"
        }
      ],
      "hash": "0x79780FD2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x285B43CA": {
      "name": "REGISTER_RESOURCE_BUILD_TASK_FACTORY",
      "params": [
        {
          "name": "factoryId",
          "type": "char*",
          "description": "The identifier for the build task."
        },
        {
          "name": "factoryFn",
          "type": "func",
          "description": "The factory function."
        }
      ],
      "results": "void",
      "description": "Registers a build task factory for resources.\r\nThe function should return an object (msgpack map) with the following fields:\n\n```\n{\r\n// returns whether the specific resource should be built\r\nshouldBuild = func(resourceName: string): bool,\r\n\r\n// asynchronously start building the specific resource.\r\n// call cb when completed\r\nbuild = func(resourceName: string, cb: func(success: bool, status: string): void): void\r\n}\n```",
      "examples": [
        
      ],
      "hash": "0x285B43CA",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x341B16D2": {
      "name": "SET_CONVAR",
      "params": [
        {
          "name": "varName",
          "type": "char*"
        },
        {
          "name": "value",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x341B16D2",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xF292858C": {
      "name": "SET_CONVAR_REPLICATED",
      "params": [
        {
          "name": "varName",
          "type": "char*",
          "description": "The console variable name."
        },
        {
          "name": "value",
          "type": "char*",
          "description": "The value to set for the given console variable."
        }
      ],
      "results": "void",
      "description": "Used to replicate a server variable onto clients.",
      "examples": [
        {
          "lang": "lua",
          "code": "SetConvarReplicated('voice_useNativeAudio', 'true')"
        }
      ],
      "hash": "0xF292858C",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x4D3118ED": {
      "name": "SET_FLY_THROUGH_WINDSCREEN_PARAMS",
      "params": [
        {
          "name": "vehMinSpeed",
          "type": "float",
          "description": "Vehicle minimum speed (default 35.0)."
        },
        {
          "name": "unkMinSpeed",
          "type": "float",
          "description": "Unknown minimum speed (default 40.0)."
        },
        {
          "name": "unkModifier",
          "type": "float",
          "description": "Unknown modifier (default 17.0)."
        },
        {
          "name": "minDamage",
          "type": "float",
          "description": "Minimum damage (default 2000.0)."
        }
      ],
      "results": "BOOL",
      "description": "Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash.",
      "examples": [
        
      ],
      "hash": "0x4D3118ED",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A bool indicating if parameters was set successfully."
    },
    "0x4FDCF51E": {
      "name": "SET_INTERIOR_ROOM_EXTENTS",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "roomIndex",
          "type": "int",
          "description": "Interior room index."
        },
        {
          "name": "bbMinX",
          "type": "float"
        },
        {
          "name": "bbMinY",
          "type": "float"
        },
        {
          "name": "bbMinZ",
          "type": "float"
        },
        {
          "name": "bbMaxX",
          "type": "float"
        },
        {
          "name": "bbMaxY",
          "type": "float"
        },
        {
          "name": "bbMaxZ",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  SetInteriorRoomExtents(interiorId, 0, -999.0, -999.0, -100.0, 999.0, 999.0, 100.0) -- 0 is a limbo usually\r\n  RefreshInterior(interiorId)\r\nend"
        }
      ],
      "hash": "0x4FDCF51E",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x7F9D543": {
      "name": "SET_HANDLING_VECTOR",
      "params": [
        {
          "name": "vehicle",
          "type": "char*",
          "description": "The vehicle class to set data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to set. These match the keys in `handling.meta`."
        },
        {
          "name": "value",
          "type": "Vector3",
          "description": "The Vector3 value to set."
        }
      ],
      "results": "void",
      "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingVector('AIRTUG', 'CHandlingData', 'vecCentreOfMassOffset', vector3(0.0, 0.0, -5.0))`",
      "examples": [
        
      ],
      "hash": "0x7F9D543",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x9F7F8D36": {
      "name": "SET_ENTITY_IGNORE_REQUEST_CONTROL_FILTER",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity handle to ignore the request control filter."
        },
        {
          "name": "ignore",
          "type": "bool",
          "description": "Define if the entity ignores the request control filter policy."
        }
      ],
      "results": "void",
      "description": "It allows to flag an entity to ignore the request control filter policy.",
      "examples": [
        
      ],
      "hash": "0x9F7F8D36",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xEED219F2": {
      "name": "SET_HUD_COMPONENT_ALIGN",
      "params": [
        {
          "name": "id",
          "type": "int",
          "description": "The hud component id."
        },
        {
          "name": "horizontalAlign",
          "type": "int",
          "description": "The horizontal alignment."
        },
        {
          "name": "verticalAlign",
          "type": "int",
          "description": "The vertical alignment."
        }
      ],
      "results": "void",
      "description": "See [SET_SCRIPT_GFX_ALIGN](#\\_0xB8A850F20A067EB6) for details about how gfx align works.",
      "examples": [
        
      ],
      "hash": "0xEED219F2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x2D62133A": {
      "name": "SEND_DUI_MOUSE_WHEEL",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        },
        {
          "name": "deltaY",
          "type": "int",
          "description": "The wheel Y delta."
        },
        {
          "name": "deltaX",
          "type": "int",
          "description": "The wheel X delta."
        }
      ],
      "results": "void",
      "description": "Injects a 'mouse wheel' event for a DUI object.",
      "examples": [
        
      ],
      "hash": "0x2D62133A",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x90DD01C": {
      "name": "SET_HANDLING_FLOAT",
      "params": [
        {
          "name": "vehicle",
          "type": "char*",
          "description": "The vehicle class to set data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to set. These match the keys in `handling.meta`."
        },
        {
          "name": "value",
          "type": "float",
          "description": "The floating-point value to set."
        }
      ],
      "results": "void",
      "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingFloat('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`",
      "examples": [
        
      ],
      "hash": "0x90DD01C",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x87F43553": {
      "name": "SET_INTERIOR_PORTAL_CORNER_POSITION",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "cornerIndex",
          "type": "int",
          "description": "Interior corner index."
        },
        {
          "name": "posX",
          "type": "float"
        },
        {
          "name": "posY",
          "type": "float"
        },
        {
          "name": "posZ",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalCount = GetInteriorPortalCount(interiorId)\r\n\r\n  -- rip portals\r\n  for portalIndex = 0, portalCount - 1 do\r\n    for cornerIndex = 0, 3 do -- 4 corners\r\n      SetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex, 0.0, 0.0, 0.0)\r\n    end\r\n  end\r\n  \r\n  RefreshInterior(interiorId)\r\nend"
        }
      ],
      "hash": "0x87F43553",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xCBBC3FAC": {
      "name": "SET_DISCORD_RICH_PRESENCE_ACTION",
      "params": [
        {
          "name": "index",
          "type": "int",
          "description": "The button index, either 0 or 1."
        },
        {
          "name": "label",
          "type": "char*",
          "description": "The text to display on the button."
        },
        {
          "name": "url",
          "type": "char*",
          "description": "The URL to open when clicking the button. This has to start with `fivem://connect/` or `https://`."
        }
      ],
      "results": "void",
      "description": "Sets a clickable button to be displayed in a player's Discord rich presence.",
      "examples": [
        
      ],
      "hash": "0xCBBC3FAC",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x8AB3F46C": {
      "name": "SET_HANDLING_INT",
      "params": [
        {
          "name": "vehicle",
          "type": "char*",
          "description": "The vehicle class to set data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to set. These match the keys in `handling.meta`."
        },
        {
          "name": "value",
          "type": "int",
          "description": "The integer value to set."
        }
      ],
      "results": "void",
      "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.",
      "examples": [
        
      ],
      "hash": "0x8AB3F46C",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xF761D9F3": {
      "name": "SET_DUI_URL",
      "params": [
        {
          "name": "duiObject",
          "type": "long",
          "description": "The DUI browser handle."
        },
        {
          "name": "url",
          "type": "char*",
          "description": "The new URL."
        }
      ],
      "results": "void",
      "description": "Navigates the specified DUI browser to a different URL.",
      "examples": [
        
      ],
      "hash": "0xF761D9F3",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x1722C938": {
      "name": "SET_MANUAL_SHUTDOWN_LOADING_SCREEN_NUI",
      "params": [
        {
          "name": "manualShutdown",
          "type": "BOOL",
          "description": "TRUE to manually shut down the loading screen NUI."
        }
      ],
      "results": "void",
      "description": "Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,\r\nyou will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen.",
      "examples": [
        
      ],
      "hash": "0x1722C938",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB88A73AD": {
      "name": "SCHEDULE_RESOURCE_TICK",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The resource to tick."
        }
      ],
      "results": "void",
      "description": "Schedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate.",
      "examples": [
        
      ],
      "hash": "0xB88A73AD",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x77FAE2B8": {
      "name": "SET_AUDIO_SUBMIX_EFFECT_PARAM_INT",
      "params": [
        {
          "name": "submixId",
          "type": "int",
          "description": "The submix."
        },
        {
          "name": "effectSlot",
          "type": "int",
          "description": "The effect slot for the submix. It is expected that the effect is set in this slot beforehand."
        },
        {
          "name": "paramIndex",
          "type": "int",
          "description": "The parameter index for the effect."
        },
        {
          "name": "paramValue",
          "type": "int",
          "description": "The parameter value to set."
        }
      ],
      "results": "void",
      "description": "Sets an integer parameter for a submix effect.",
      "examples": [
        
      ],
      "hash": "0x77FAE2B8",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6504EB38": {
      "name": "SET_PLAYER_ROUTING_BUCKET",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player to set the routing bucket for."
        },
        {
          "name": "bucket",
          "type": "int",
          "description": "The bucket ID."
        }
      ],
      "results": "void",
      "description": "Sets the routing bucket for the specified player.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.",
      "examples": [
        
      ],
      "hash": "0x6504EB38",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x46F6B38B": {
      "name": "SET_PED_MODEL_PERSONALITY",
      "params": [
        {
          "name": "modelHash",
          "type": "Hash",
          "description": "Ped's model."
        },
        {
          "name": "personalityHash",
          "type": "Hash",
          "description": "Personality hash."
        }
      ],
      "results": "void",
      "description": "Overrides a ped model personality type.",
      "examples": [
        
      ],
      "hash": "0x46F6B38B",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x7F6B8D75": {
      "name": "SET_MODEL_HEADLIGHT_CONFIGURATION",
      "params": [
        {
          "name": "modelHash",
          "type": "Hash"
        },
        {
          "name": "ratePerSecond",
          "type": "float"
        },
        {
          "name": "headlightRotation",
          "type": "float"
        },
        {
          "name": "invertRotation",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x7F6B8D75",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x5518D60B": {
      "name": "SET_INTERIOR_ROOM_FLAG",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "roomIndex",
          "type": "int",
          "description": "Interior room index."
        },
        {
          "name": "flag",
          "type": "int",
          "description": "New flag value."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  SetInteriorRoomFlag(interiorId, roomId, 64)\r\n  RefreshInterior(interiorId)\r\nend"
        }
      ],
      "hash": "0x5518D60B",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x36CA2554": {
      "name": "SET_MILLISECONDS_PER_GAME_MINUTE",
      "params": [
        {
          "name": "value",
          "type": "int",
          "description": "Milliseconds."
        }
      ],
      "results": "void",
      "description": "Overrides how many real ms are equal to one game minute.\r\nA setter for [`GetMillisecondsPerGameMinute`](#\\_0x2F8B4D1C595B11DB).",
      "examples": [
        
      ],
      "hash": "0x36CA2554",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x5B98AE30": {
      "name": "SET_NUI_FOCUS",
      "params": [
        {
          "name": "hasFocus",
          "type": "BOOL"
        },
        {
          "name": "hasCursor",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x5B98AE30",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xCF9A2FF": {
      "name": "SET_RESOURCE_KVP_NO_SYNC",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to set"
        },
        {
          "name": "value",
          "type": "char*",
          "description": "The value to write"
        }
      ],
      "results": "void",
      "description": "Nonsynchronous [SET_RESOURCE_KVP](#\\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
      "examples": [
        
      ],
      "hash": "0xCF9A2FF",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x8349CD76": {
      "name": "SET_INTERIOR_PORTAL_ENTITY_FLAG",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "entityIndex",
          "type": "int",
          "description": "Portal entity index."
        },
        {
          "name": "flag",
          "type": "int",
          "description": "New flag value."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    SetInteriorPortalEntityFlag(interiorId, portalIndex, i, 0)\r\n  end\r\n  RefreshInterior(interiorId)\r\nend"
        }
      ],
      "hash": "0x8349CD76",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x8A2FBAD4": {
      "name": "SET_PLAYER_CULLING_RADIUS",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*",
          "description": "The player to set the culling radius for."
        },
        {
          "name": "radius",
          "type": "float",
          "description": "The radius."
        }
      ],
      "results": "void",
      "description": "Sets the culling radius for the specified player.\r\nSet to `0.0` to reset.\n\n**WARNING**: Culling natives are deprecated and have known, [unfixable issues](https://forum.cfx.re/t/issue-with-culling-radius-and-server-side-entities/4900677/4)",
      "examples": [
        
      ],
      "hash": "0x8A2FBAD4",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x6A48B3CA": {
      "name": "SET_MINIMAP_OVERLAY_DISPLAY",
      "params": [
        {
          "name": "miniMap",
          "type": "int",
          "description": "The minimap overlay ID."
        },
        {
          "name": "x",
          "type": "float",
          "description": "The X position for the overlay. This is equivalent to a game coordinate X."
        },
        {
          "name": "y",
          "type": "float",
          "description": "The Y position for the overlay. This is equivalent to a game coordinate Y, except that it's inverted (gfxY = -gameY)."
        },
        {
          "name": "xScale",
          "type": "float",
          "description": "The X scale for the overlay. This is equivalent to the Flash \\_xscale property, therefore 100 = 100%."
        },
        {
          "name": "yScale",
          "type": "float",
          "description": "The Y scale for the overlay. This is equivalent to the Flash \\_yscale property."
        },
        {
          "name": "alpha",
          "type": "float",
          "description": "The alpha value for the overlay. This is equivalent to the Flash \\_alpha property, therefore 100 = 100%."
        }
      ],
      "results": "void",
      "description": "Sets the display info for a minimap overlay.",
      "examples": [
        
      ],
      "hash": "0x6A48B3CA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x26AEB707": {
      "name": "SET_RESOURCE_KVP_INT_NO_SYNC",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to set"
        },
        {
          "name": "value",
          "type": "int",
          "description": "The value to write"
        }
      ],
      "results": "void",
      "description": "Nonsynchronous [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
      "examples": [
        
      ],
      "hash": "0x26AEB707",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x9ADD2938": {
      "name": "SET_RESOURCE_KVP_FLOAT",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to set"
        },
        {
          "name": "value",
          "type": "float",
          "description": "The value to write"
        }
      ],
      "results": "void",
      "description": "A setter for [GET_RESOURCE_KVP_FLOAT](#\\_0x35BDCEEA).",
      "examples": [
        {
          "lang": "lua",
          "code": "local lickMy = 42.5\r\nSetResourceKvpFloat('bananabread', lickMy)"
        }
      ],
      "hash": "0x9ADD2938",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0xA9EC16C7": {
      "name": "SET_PLAYER_STAMINA",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index"
        },
        {
          "name": "stamina",
          "type": "float",
          "description": "The value you want to set"
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA9EC16C7",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Did you manage to set the value."
    },
    "0x69B680A7": {
      "name": "SET_ROPE_LENGTH_CHANGE_RATE",
      "params": [
        {
          "name": "rope",
          "type": "int",
          "description": "The rope to set the length change rate for."
        },
        {
          "name": "lengthChangeRate",
          "type": "float",
          "description": "The rope's new length change rate."
        }
      ],
      "results": "void",
      "description": "Set's the ropes length change rate, which is the speed that rope should wind if started.",
      "examples": [
        
      ],
      "hash": "0x69B680A7",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x298FC783": {
      "name": "SET_INTERIOR_PORTAL_ROOM_FROM",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "roomFrom",
          "type": "int",
          "description": "New value."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalRoomFrom(interiorId, portalIndex, 0)\r\n  RefreshInterior(interiorId)\r\nend"
        }
      ],
      "hash": "0x298FC783",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x31C9A848": {
      "name": "SET_INTERIOR_ROOM_TIMECYCLE",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "roomIndex",
          "type": "int",
          "description": "Interior room index."
        },
        {
          "name": "timecycleHash",
          "type": "int",
          "description": "Timecycle hash."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local timecycleHash = GetHashKey(\"scanline_cam\")\r\n  SetInteriorRoomTimecycle(interiorId, roomId, timecycleHash)\r\n  RefreshInterior(interiorId)\r\nend"
        }
      ],
      "hash": "0x31C9A848",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x825DC0D1": {
      "name": "SET_AUDIO_SUBMIX_OUTPUT_VOLUMES",
      "params": [
        {
          "name": "submixId",
          "type": "int",
          "description": "The submix."
        },
        {
          "name": "outputSlot",
          "type": "int",
          "description": "The output slot index."
        },
        {
          "name": "frontLeftVolume",
          "type": "float",
          "description": "The volume for the front left channel."
        },
        {
          "name": "frontRightVolume",
          "type": "float",
          "description": "The volume for the front right channel."
        },
        {
          "name": "rearLeftVolume",
          "type": "float",
          "description": "The volume for the rear left channel."
        },
        {
          "name": "rearRightVolume",
          "type": "float",
          "description": "The volume for the rear right channel."
        },
        {
          "name": "channel5Volume",
          "type": "float",
          "description": "The volume for channel 5."
        },
        {
          "name": "channel6Volume",
          "type": "float",
          "description": "The volume for channel 6."
        }
      ],
      "results": "void",
      "description": "Sets the volumes for the sound channels in a submix effect.\r\nValues can be between 0.0 and 1.0.\r\nChannel 5 and channel 6 are not used in voice chat but are believed to be center and LFE channels.\r\nOutput slot starts at 0 for the first ADD_AUDIO_SUBMIX_OUTPUT call then incremented by 1 on each subsequent call.",
      "examples": [
        
      ],
      "hash": "0x825DC0D1",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB8B4490C": {
      "name": "SET_MINIMAP_CLIP_TYPE",
      "params": [
        {
          "name": "type",
          "type": "int",
          "description": "0 for rectangular, 1 for rounded."
        }
      ],
      "results": "void",
      "description": "Sets the type for the minimap blip clipping object to be either rectangular or rounded.",
      "examples": [
        
      ],
      "hash": "0xB8B4490C",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xF5C6330C": {
      "name": "SET_HTTP_HANDLER",
      "params": [
        {
          "name": "handler",
          "type": "func",
          "description": "The handler function."
        }
      ],
      "results": "void",
      "description": "Sets the handler for HTTP requests made to the executing resource.\n\nExample request URL: `http://localhost:30120/http-test/ping` - this request will be sent to the `http-test` resource with the `/ping` path.\n\nThe handler function assumes the following signature:\n\n```ts\nfunction HttpHandler(\r\n  request: {\r\n    address: string;\r\n    headers: Record<string, string>;\r\n    method: string;\r\n    path: string;\r\n    setDataHandler(handler: (data: string) => void): void;\r\n    setDataHandler(handler: (data: ArrayBuffer) => void, binary: 'binary'): void;\r\n    setCancelHandler(handler: () => void): void;\r\n  },\r\n  response: {\r\n    writeHead(code: number, headers?: Record<string, string | string[]>): void;\r\n    write(data: string): void;\r\n    send(data?: string): void;\r\n  }\r\n): void;\n```\n\n*   **request**: The request object.\n    *   **address**: The IP address of the request sender.\n    *   **path**: The path to where the request was sent.\n    *   **headers**: The headers sent with the request.\n    *   **method**: The request method.\n    *   **setDataHandler**: Sets the handler for when a data body is passed with the request. Additionally you can pass the `'binary'` argument to receive a `BufferArray` in JavaScript or `System.Byte[]` in C# (has no effect in Lua).\n    *   **setCancelHandler**: Sets the handler for when the request is cancelled.\n*   **response**: An object to control the response.\n    *   **writeHead**: Sets the status code & headers of the response. Can be only called once and won't work if called after running other response functions.\n    *   **write**: Writes to the response body without sending it. Can be called multiple times.\n    *   **send**: Writes to the response body and then sends it along with the status code & headers, finishing the request.",
      "examples": [
        {
          "lang": "lua",
          "code": "SetHttpHandler(function(request, response)\r\n  if request.method == 'GET' and request.path == '/ping' then -- if a GET request was sent to the `/ping` path\r\n      response.writeHead(200, { ['Content-Type'] = 'text/plain' }) -- set the response status code to `200 OK` and the body content type to plain text\r\n      response.send('pong') -- respond to the request with `pong`\r\n  else -- otherwise\r\n      response.writeHead(404) -- set the response status code to `404 Not Found`\r\n      response.send() -- respond to the request with no data\r\n  end\r\nend)"
        }
      ],
      "hash": "0xF5C6330C",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x447C718E": {
      "name": "SET_MAP_ZOOM_DATA_LEVEL",
      "params": [
        {
          "name": "index",
          "type": "int",
          "description": "Zoom level index."
        },
        {
          "name": "zoomScale",
          "type": "float",
          "description": "fZoomScale value."
        },
        {
          "name": "zoomSpeed",
          "type": "float",
          "description": "fZoomSpeed value."
        },
        {
          "name": "scrollSpeed",
          "type": "float",
          "description": "fScrollSpeed value."
        },
        {
          "name": "tilesX",
          "type": "float",
          "description": "vTiles X."
        },
        {
          "name": "tilesY",
          "type": "float",
          "description": "vTiles Y."
        }
      ],
      "results": "void",
      "description": "Sets values to the zoom level data by index.",
      "examples": [
        
      ],
      "hash": "0x447C718E",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x21C7A35B": {
      "name": "SET_RESOURCE_KVP",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to set"
        },
        {
          "name": "value",
          "type": "char*",
          "description": "The value to write"
        }
      ],
      "results": "void",
      "description": "A setter for [GET_RESOURCE_KVP_STRING](#\\_0x5240DA5A).",
      "examples": [
        {
          "lang": "lua",
          "code": "SetResourceKvp('mollis', 'vesuvius citrate')"
        }
      ],
      "hash": "0x21C7A35B",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0xE62FC73": {
      "name": "SET_ROPES_CREATE_NETWORK_WORLD_STATE",
      "params": [
        {
          "name": "shouldCreate",
          "type": "BOOL",
          "description": "Whether to create an underlying network world state"
        }
      ],
      "results": "void",
      "description": "Toggles whether the usage of [ADD_ROPE](#\\_0xE832D760399EB220) should create an underlying CNetworkRopeWorldStateData. By default this is set to false.",
      "examples": [
        
      ],
      "hash": "0xE62FC73",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x3FF5E5F8": {
      "name": "SET_NUI_FOCUS_KEEP_INPUT",
      "params": [
        {
          "name": "keepInput",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x3FF5E5F8",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x5FB53015": {
      "name": "SET_MINIMAP_TYPE",
      "params": [
        {
          "name": "type",
          "type": "int",
          "description": "Type to set the minimap to."
        }
      ],
      "results": "void",
      "description": "Possible Types:\n\n```\n0 = Off,\r\n1 = Regular,\r\n2 = Expanded,\r\n3 = Simple,\n```",
      "examples": [
        
      ],
      "hash": "0x5FB53015",
      "ns": "CFX",
      "apiset": "client",
      "game": "rdr3"
    },
    "0xFC02CAF6": {
      "name": "SET_PLAYER_TALKING_OVERRIDE",
      "params": [
        {
          "name": "player",
          "type": "Player",
          "description": "The target player."
        },
        {
          "name": "state",
          "type": "BOOL",
          "description": "Overriding state."
        }
      ],
      "results": "void",
      "description": "the status of default voip system. It affects on `NETWORK_IS_PLAYER_TALKING` and `mp_facial` animation.\r\nThis function doesn't need to be called every frame, it works like a switcher.",
      "examples": [
        
      ],
      "hash": "0xFC02CAF6",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x3E882B23": {
      "name": "SET_MINIMAP_COMPONENT_POSITION",
      "params": [
        {
          "name": "name",
          "type": "char*",
          "description": "The name of the minimap component to override."
        },
        {
          "name": "alignX",
          "type": "char*",
          "description": "Equivalent to the `alignX` field in `frontend.xml`."
        },
        {
          "name": "alignY",
          "type": "char*",
          "description": "Equivalent to the `alignY` field in `frontend.xml`."
        },
        {
          "name": "posX",
          "type": "float",
          "description": "Equivalent to the `posX` field in `frontend.xml`."
        },
        {
          "name": "posY",
          "type": "float",
          "description": "Equivalent to the `posY` field in `frontend.xml`."
        },
        {
          "name": "sizeX",
          "type": "float",
          "description": "Equivalent to the `sizeX` field in `frontend.xml`."
        },
        {
          "name": "sizeY",
          "type": "float",
          "description": "Equivalent to the `sizeY` field in `frontend.xml`."
        }
      ],
      "results": "void",
      "description": "Overrides the minimap component data (from `common:/data/ui/frontend.xml`) for a specified component.",
      "examples": [
        
      ],
      "hash": "0x3E882B23",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xA7DD3209": {
      "name": "SET_SNAKEOIL_FOR_ENTRY",
      "params": [
        {
          "name": "name",
          "type": "char*"
        },
        {
          "name": "path",
          "type": "char*"
        },
        {
          "name": "data",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xA7DD3209",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xEB46596F": {
      "name": "SET_VEHICLE_STEERING_SCALE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "scale",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xEB46596F",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x58982680": {
      "name": "SET_INTERIOR_PORTAL_ROOM_TO",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "roomTo",
          "type": "int",
          "description": "New value."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalRoomTo(interiorId, portalIndex, 0)\r\n  RefreshInterior(interiorId)\r\nend"
        }
      ],
      "hash": "0x58982680",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x635E5289": {
      "name": "SET_ENTITY_ROUTING_BUCKET",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to set the routing bucket for."
        },
        {
          "name": "bucket",
          "type": "int",
          "description": "The bucket ID."
        }
      ],
      "results": "void",
      "description": "Sets the routing bucket for the specified entity.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.",
      "examples": [
        
      ],
      "hash": "0x635E5289",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xA0F2201F": {
      "name": "SET_ROUTING_BUCKET_ENTITY_LOCKDOWN_MODE",
      "params": [
        {
          "name": "bucketId",
          "type": "int",
          "description": "The routing bucket ID to adjust."
        },
        {
          "name": "mode",
          "type": "char*",
          "description": "One of aforementioned modes."
        }
      ],
      "results": "void",
      "description": "Sets the entity lockdown mode for a specific routing bucket.\n\nLockdown modes are:\n\n| Mode       | Meaning                                                    |\r\n| ---------- | ---------------------------------------------------------- |\r\n| `strict`   | No entities can be created by clients at all.              |\r\n| `relaxed`  | Only script-owned entities created by clients are blocked. |\r\n| `inactive` | Clients can create any entity they want.                   |",
      "examples": [
        
      ],
      "hash": "0xA0F2201F",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xBA970511": {
      "name": "SET_VEHICLE_FUEL_LEVEL",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "level",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xBA970511",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x7635B349": {
      "name": "SET_FLASH_LIGHT_KEEP_ON_WHILE_MOVING",
      "params": [
        {
          "name": "state",
          "type": "BOOL",
          "description": "On/Off"
        }
      ],
      "results": "void",
      "description": "Allows Weapon-Flashlight beams to stay visible while moving. Normally it only stays on while aiming.",
      "examples": [
        
      ],
      "hash": "0x7635B349",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x88B2355E": {
      "name": "SET_INTERIOR_PORTAL_FLAG",
      "params": [
        {
          "name": "interiorId",
          "type": "int",
          "description": "The target interior."
        },
        {
          "name": "portalIndex",
          "type": "int",
          "description": "Interior portal index."
        },
        {
          "name": "flag",
          "type": "int",
          "description": "New flag value."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalFlag(interiorId, portalIndex, 1)\r\n  RefreshInterior(interiorId)\r\nend"
        }
      ],
      "hash": "0x88B2355E",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x2468DBE8": {
      "name": "SET_TRAIN_DOOR_OPEN_RATIO",
      "params": [
        {
          "name": "train",
          "type": "Vehicle",
          "description": "The train to set the door ratio for."
        },
        {
          "name": "doorIndex",
          "type": "int",
          "description": "Zero-based door index."
        },
        {
          "name": "ratio",
          "type": "float",
          "description": "A value between 0.0 (fully closed) and 1.0 (fully open)."
        }
      ],
      "results": "void",
      "description": "Sets the ratio that a door is open for on a train.",
      "examples": [
        {
          "lang": "lua",
          "code": "-- open all doors on a train\r\nlocal doorCount = GetTrainDoorCount(train)\r\nfor doorIndex = 0, doorCount - 1 do\r\n    SetTrainDoorOpenRatio(train, doorIndex, 1.0)\r\nend"
        },
        {
          "lang": "cs",
          "code": "// open all doors on a train\r\nint doorCount = API.GetTrainDoorCount(train);\r\nfor (int doorIndex = 0; doorIndex < doorCount; doorIndex++)\r\n{\r\n    API.SetTrainDoorOpenRatio(train, doorIndex, 1.0f);\r\n}"
        }
      ],
      "hash": "0x2468DBE8",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x12497890": {
      "name": "SET_VEHICLE_HANDLING_VECTOR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to set. These match the keys in `handling.meta`."
        },
        {
          "name": "value",
          "type": "Vector3",
          "description": "The Vector3 value to set."
        }
      ],
      "results": "void",
      "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_VECTOR`, this might require some experimentation.",
      "examples": [
        
      ],
      "hash": "0x12497890",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xF90B7469": {
      "name": "SET_GAME_TYPE",
      "params": [
        {
          "name": "gametypeName",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xF90B7469",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xB3439A01": {
      "name": "SET_VEHICLE_SUSPENSION_HEIGHT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "newHeight",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Sets the height of the vehicle's suspension.\r\nThis changes the same value set by Suspension in the mod shop.\r\nNegatives values raise the car. Positive values lower the car.\n\nThis is change is visual only. The collision of the vehicle will not move.",
      "examples": [
        
      ],
      "hash": "0xB3439A01",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x7A27BC93": {
      "name": "SET_MP_GAMER_TAGS_USE_VEHICLE_BEHAVIOR",
      "params": [
        {
          "name": "enabled",
          "type": "bool",
          "description": "Whether tags should use normal game behavior. Default is true."
        }
      ],
      "results": "void",
      "description": "Sets whether all tags should group (normal game behavior) or should remain independent and above each ped's respective head when in a vehicle.",
      "examples": [
        
      ],
      "hash": "0x7A27BC93",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x35594F67": {
      "name": "SET_PLAYER_MAX_STAMINA",
      "params": [
        {
          "name": "playerId",
          "type": "Player",
          "description": "The player index"
        },
        {
          "name": "maxStamina",
          "type": "float",
          "description": "The value you want to set"
        }
      ],
      "results": "bool",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x35594F67",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Did you manage to set the value."
    },
    "0xAB65ACEE": {
      "name": "SET_RUNTIME_TEXTURE_PIXEL",
      "params": [
        {
          "name": "tex",
          "type": "long",
          "description": "A handle to the runtime texture."
        },
        {
          "name": "x",
          "type": "int",
          "description": "The X position of the pixel to change."
        },
        {
          "name": "y",
          "type": "int",
          "description": "The Y position of the pixel to change."
        },
        {
          "name": "r",
          "type": "int",
          "description": "The new R value (0-255)."
        },
        {
          "name": "g",
          "type": "int",
          "description": "The new G value (0-255)."
        },
        {
          "name": "b",
          "type": "int",
          "description": "The new B value (0-255)."
        },
        {
          "name": "a",
          "type": "int",
          "description": "The new A value (0-255)."
        }
      ],
      "results": "void",
      "description": "Sets a pixel in the specified runtime texture. This will have to be committed using `COMMIT_RUNTIME_TEXTURE` to have any effect.",
      "examples": [
        
      ],
      "hash": "0xAB65ACEE",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xC37F4CF9": {
      "name": "SET_VEHICLE_HANDLING_INT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to set. These match the keys in `handling.meta`."
        },
        {
          "name": "value",
          "type": "int",
          "description": "The integer value to set."
        }
      ],
      "results": "void",
      "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_INT`, this might require some experimentation.",
      "examples": [
        
      ],
      "hash": "0xC37F4CF9",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x3963D527": {
      "name": "SET_RUNTIME_TEXTURE_ARGB_DATA",
      "params": [
        {
          "name": "tex",
          "type": "long"
        },
        {
          "name": "buffer",
          "type": "char*"
        },
        {
          "name": "length",
          "type": "int"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x3963D527",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0x1A963E58": {
      "name": "SET_VEHICLE_GRAVITY_AMOUNT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "gravity",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x1A963E58",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xC6146043": {
      "name": "SET_VEHICLE_WHEEL_POWER",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "power",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Sets power being sent to a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0xC6146043",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x2F70ACED": {
      "name": "SET_VEHICLE_CLUTCH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "clutch",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2F70ACED",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xBD5291A0": {
      "name": "SET_VEHICLE_WHEEL_IS_POWERED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "powered",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "Sets whether the wheel is powered.\r\nOn all wheel drive cars this works to change which wheels receive power, but if a car's fDriveBiasFront doesn't send power to that wheel, it won't get power anyway. This can be fixed by changing the fDriveBiasFront with SET_VEHICLE_HANDLING_FLOAT.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nThis is a shortcut to a flag in SET_VEHICLE_WHEEL_FLAGS.",
      "examples": [
        {
          "lang": "lua",
          "code": "SetVehicleWheelIsPowered(vehicle, 0, true);"
        },
        {
          "lang": "js",
          "code": "SetVehicleWheelIsPowered(vehicle, 0, true);"
        },
        {
          "lang": "cs",
          "code": "using static CitizenFX.Core.API;\r\n// ...\r\n// The elusive Left Wheel Drive\r\nVehicle veh = Game.PlayerPed.CurrentVehicle;\r\nfor(int i = 0; i < veh.Wheels.Count; i++){\r\n    SetVehicleWheelIsPowered(veh.Handle, i, i % 2 == 0);\r\n}"
        }
      ],
      "hash": "0xBD5291A0",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xFFCCC2EA": {
      "name": "SET_VEHICLE_STEERING_ANGLE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "angle",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xFFCCC2EA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB22ECEFD": {
      "name": "SET_VEHICLE_WHEEL_HEALTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "health",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xB22ECEFD",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x8D50E33A": {
      "name": "SET_STATE_BAG_VALUE",
      "params": [
        {
          "name": "bagName",
          "type": "char*"
        },
        {
          "name": "keyName",
          "type": "char*"
        },
        {
          "name": "valueData",
          "type": "char*"
        },
        {
          "name": "valueLength",
          "type": "int"
        },
        {
          "name": "replicated",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "Internal function for setting a state bag value.",
      "examples": [
        
      ],
      "hash": "0x8D50E33A",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x2A01A8FC": {
      "name": "SET_VEHICLE_CURRENT_RPM",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "rpm",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2A01A8FC",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6E0A422B": {
      "name": "SET_TIMECYCLE_MODIFIER_VAR",
      "params": [
        {
          "name": "modifierName",
          "type": "char*",
          "description": "The name of timecycle modifier."
        },
        {
          "name": "varName",
          "type": "char*",
          "description": "The name of timecycle variable."
        },
        {
          "name": "value1",
          "type": "float",
          "description": "The first value of variable."
        },
        {
          "name": "value2",
          "type": "float",
          "description": "The second value of variable."
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local modifierName = \"superDARK\"\r\nlocal varName = \"postfx_noise\"\r\n\r\nif DoesTimecycleModifierHasVar(modifierName, varName) then\r\n  local success, value1, value2 = GetTimecycleModifierVar(modifierName, varName)\r\n\r\n  if success then\r\n    print(string.format(\"[%s] removed var %s with values: %f %f\", modifierName, varName, value1, value2))\r\n    RemoveTimecycleModifierVar(modifierName, varName)\r\n  end\r\nelse\r\n    SetTimecycleModifierVar(modifierName, varName, 1.0, 1.0)\r\n    print(string.format(\"[%s] created var %s\", modifierName, varName))\r\nend"
        }
      ],
      "hash": "0x6E0A422B",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x97B2F9F8": {
      "name": "SET_TEXT_CHAT_ENABLED",
      "params": [
        {
          "name": "enabled",
          "type": "BOOL"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x97B2F9F8",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": ""
    },
    "0xC108EE6F": {
      "name": "SET_VEHICLE_ALARM_TIME_LEFT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "time",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC108EE6F",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xD4D1BA63": {
      "name": "SET_TRAINS_FORCE_DOORS_OPEN",
      "params": [
        {
          "name": "forceOpen",
          "type": "bool",
          "description": "Should force open."
        }
      ],
      "results": "void",
      "description": "Enables or disables whether train doors should be forced open whilst a player is inside the train. This is enabled by default in multiplayer.",
      "examples": [
        
      ],
      "hash": "0xD4D1BA63",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x3517BFBE": {
      "name": "SET_RESOURCE_KVP_FLOAT_NO_SYNC",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to set"
        },
        {
          "name": "value",
          "type": "float",
          "description": "The value to write"
        }
      ],
      "results": "void",
      "description": "Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
      "examples": [
        
      ],
      "hash": "0x3517BFBE",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x28FC4ECB": {
      "name": "SET_RUNTIME_TEXTURE_IMAGE",
      "params": [
        {
          "name": "tex",
          "type": "long",
          "description": "A runtime texture handle."
        },
        {
          "name": "fileName",
          "type": "char*",
          "description": "The file name of an image to load, or a base64 \"data:\" URL. This should preferably be a PNG, and has to be specified as a `file` in the resource manifest."
        }
      ],
      "results": "BOOL",
      "description": "Replaces the pixel data in a runtime texture with the image data from a file in the current resource, or a data URL.\n\nIf the bitmap is a different size compared to the existing texture, it will be resampled.\n\nThis command may end up executed asynchronously, and only update the texture data at a later time.",
      "examples": [
        
      ],
      "hash": "0x28FC4ECB",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "TRUE for success, FALSE for failure."
    },
    "0xD61676B3": {
      "name": "SET_MP_GAMER_TAGS_VISIBLE_DISTANCE",
      "params": [
        {
          "name": "distance",
          "type": "float",
          "description": "The visible distance. Default is 100.0f."
        }
      ],
      "results": "void",
      "description": "Sets the maximum distance at which all tags will be visible and which beyond will not be displayed. Distance is measured from the camera position.",
      "examples": [
        
      ],
      "hash": "0xD61676B3",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xF49797EB": {
      "name": "SET_WATER_QUAD_ALPHA",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "a0",
          "type": "int",
          "description": "The a0 level"
        },
        {
          "name": "a1",
          "type": "int",
          "description": "The a1 level"
        },
        {
          "name": "a2",
          "type": "int",
          "description": "The a2 level"
        },
        {
          "name": "a3",
          "type": "int",
          "description": "The a3 level"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaterQuadAlpha(0, 5, 5, 5, 5)"
        }
      ],
      "hash": "0xF49797EB",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0xC3FF42FF": {
      "name": "SET_WATER_QUAD_NO_STENCIL",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "noStencil",
          "type": "bool",
          "description": "Unknown effect"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaterQuadNoStencil(0, true)"
        }
      ],
      "hash": "0xC3FF42FF",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0x9FCD2EE6": {
      "name": "SET_WATER_AREA_CLIP_RECT",
      "params": [
        {
          "name": "minX",
          "type": "int"
        },
        {
          "name": "minY",
          "type": "int"
        },
        {
          "name": "maxX",
          "type": "int"
        },
        {
          "name": "maxY",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "Sets world clip boundaries for water quads file (water.xml, water_heistisland.xml)\r\nUsed internally by LOAD_GLOBAL_WATER_FILE",
      "examples": [
        {
          "lang": "lua",
          "code": "SetWaterAreaClipRect(-4000, -4000, 4500, 8000)"
        }
      ],
      "hash": "0x9FCD2EE6",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6A2B1E8": {
      "name": "SET_RESOURCE_KVP_INT",
      "params": [
        {
          "name": "key",
          "type": "char*",
          "description": "The key to set"
        },
        {
          "name": "value",
          "type": "int",
          "description": "The value to write"
        }
      ],
      "results": "void",
      "description": "A setter for [GET_RESOURCE_KVP_INT](#\\_0x557B586A).",
      "examples": [
        {
          "lang": "lua",
          "code": "local lickMy = 42\r\nSetResourceKvp('bananabread', lickMy)"
        }
      ],
      "hash": "0x6A2B1E8",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x5F3A3574": {
      "name": "SET_VEHICLE_AUTO_REPAIR_DISABLED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set disable auto vehicle repair."
        },
        {
          "name": "value",
          "type": "BOOL",
          "description": "Setting the value to  true prevents the vehicle from being repaired when a extra is enabled. Setting the value to false allows the vehicle from being repaired when a extra is enabled."
        }
      ],
      "results": "void",
      "description": "Disables the vehicle from being repaired when a vehicle extra is enabled.",
      "examples": [
        
      ],
      "hash": "0x5F3A3574",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xD1D31681": {
      "name": "SET_VISUAL_SETTING_FLOAT",
      "params": [
        {
          "name": "name",
          "type": "char*",
          "description": "The name of the value to set, such as `pedLight.color.red`."
        },
        {
          "name": "value",
          "type": "float",
          "description": "The value to write."
        }
      ],
      "results": "void",
      "description": "Overrides a floating point value from `visualsettings.dat` temporarily.",
      "examples": [
        
      ],
      "hash": "0xD1D31681",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x7BDCBD45": {
      "name": "SET_RICH_PRESENCE",
      "params": [
        {
          "name": "presenceState",
          "type": "char*",
          "description": "The rich presence string to set."
        }
      ],
      "results": "void",
      "description": "Sets the player's rich presence detail state for social platform providers to a specified string.",
      "examples": [
        
      ],
      "hash": "0x7BDCBD45",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x90D1CAD1": {
      "name": "SET_VEHICLE_OIL_LEVEL",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "level",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x90D1CAD1",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xCE51AC2C": {
      "name": "SET_ROUTING_BUCKET_POPULATION_ENABLED",
      "params": [
        {
          "name": "bucketId",
          "type": "int",
          "description": "The routing bucket ID to adjust."
        },
        {
          "name": "mode",
          "type": "BOOL",
          "description": "`true` to enable population, `false` to disable population."
        }
      ],
      "results": "void",
      "description": "Sets whether or not the specified routing bucket has automatically-created population enabled.",
      "examples": [
        
      ],
      "hash": "0xCE51AC2C",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x55188D2D": {
      "name": "SET_NETWORK_WALK_MODE",
      "params": [
        {
          "name": "enabled",
          "type": "bool"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x55188D2D",
      "ns": "CFX",
      "apiset": "client",
      "game": "ny",
      "resultsDescription": ""
    },
    "0x2703D582": {
      "name": "SET_WEATHER_OWNED_BY_NETWORK",
      "params": [
        {
          "name": "network",
          "type": "BOOL",
          "description": "true to let the network control weather, false to not use network weather behavior."
        }
      ],
      "results": "void",
      "description": "Sets whether or not the weather should be owned by the network subsystem.\n\nTo be able to use [\\_SET_WEATHER_TYPE_TRANSITION](#\\_0x578C752848ECFA0C), this has to be set to false.",
      "examples": [
        
      ],
      "hash": "0x2703D582",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x311150E5": {
      "name": "SET_WEAPONS_NO_AUTORELOAD",
      "params": [
        {
          "name": "state",
          "type": "BOOL",
          "description": "On/Off"
        }
      ],
      "results": "void",
      "description": "Disables the game's built-in auto-reloading.",
      "examples": [
        
      ],
      "hash": "0x311150E5",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x2BA40795": {
      "name": "SET_VEHICLE_HANDLING_FIELD",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to set. These match the keys in `handling.meta`."
        },
        {
          "name": "value",
          "type": "Any",
          "description": "The value to set."
        }
      ],
      "results": "void",
      "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FIELD`, this might require some experimentation.\r\nExample: `SetVehicleHandlingField(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`",
      "examples": [
        
      ],
      "hash": "0x2BA40795",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6292F7A8": {
      "name": "SET_WATER_QUAD_LEVEL",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "level",
          "type": "float",
          "description": "The water level inside the water quad"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaterQuadLevel(0, 55.0)"
        }
      ],
      "hash": "0x6292F7A8",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0xF380E184": {
      "name": "SET_VEHICLE_WHEEL_RIM_COLLIDER_SIZE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "wheelIndex",
          "type": "int",
          "description": "Index of wheel, 0-3."
        },
        {
          "name": "value",
          "type": "float",
          "description": "Size of rim collider."
        }
      ],
      "results": "void",
      "description": "Not sure what this changes, probably determines physical rim size in case the tire is blown.",
      "examples": [
        
      ],
      "hash": "0xF380E184",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x35ED100D": {
      "name": "SET_VEHICLE_WHEEL_ROTATION_SPEED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "speed",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Sets the rotation speed of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0x35ED100D",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x64C3F1C0": {
      "name": "SET_VEHICLE_WHEEL_WIDTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set data for."
        },
        {
          "name": "width",
          "type": "float",
          "description": "Width of the wheels (usually between 0.1 and 1.5 is reasonable)."
        }
      ],
      "results": "BOOL",
      "description": "Sets vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels.\r\nReturns whether change was successful (can be false if trying to set width for non-default wheels).",
      "examples": [
        
      ],
      "hash": "0x64C3F1C0",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Bool - whether change was successful or not"
    },
    "0xEAB8DB65": {
      "name": "SET_VEHICLE_WHEELIE_STATE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "Vehicle"
        },
        {
          "name": "state",
          "type": "int",
          "description": "Wheelie state"
        }
      ],
      "results": "void",
      "description": "Example script: https://pastebin.com/J6XGbkCW\n\nList of known states:\n\n```\n1: Not wheeling.\r\n65: Vehicle is ready to do wheelie (burnouting).\r\n129: Vehicle is doing wheelie.\n```",
      "examples": [
        {
          "lang": "lua",
          "code": "Citizen.CreateThread(function()\r\n  while true do\r\n    Wait(1)\r\n\r\n    local ped = PlayerPedId()\r\n    local veh = GetVehiclePedIsUsing(ped)\r\n\r\n    if veh ~= 0 then\r\n      -- is vehicle a musclecar\r\n      if GetVehicleClass(veh) == 4 then\r\n        -- is ped a driver\r\n        if GetPedInVehicleSeat(veh, -1) == ped then\r\n          -- don't let vehicle to do wheelie\r\n          SetVehicleWheelieState(veh, 1)\r\n        end\r\n      end\r\n    end\r\n  end\r\nend)"
        }
      ],
      "hash": "0xEAB8DB65",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x6C93C4A9": {
      "name": "SET_VEHICLE_ENGINE_TEMPERATURE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "temperature",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x6C93C4A9",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x47BD0270": {
      "name": "SET_VEHICLE_WHEEL_TIRE_COLLIDER_WIDTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "wheelIndex",
          "type": "int",
          "description": "Index of wheel, 0-3."
        },
        {
          "name": "value",
          "type": "float",
          "description": "Width of tire collider."
        }
      ],
      "results": "void",
      "description": "Use along with SetVehicleWheelWidth to resize the wheels (this native sets the collider width affecting physics while SetVehicleWheelWidth will change visual width).",
      "examples": [
        
      ],
      "hash": "0x47BD0270",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xC6C2171F": {
      "name": "SET_VEHICLE_WHEEL_Y_ROTATION",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "value",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0xC6C2171F",
      "ns": "CFX",
      "apiset": "client",
      "aliases": [
        "SET_VEHICLE_WHEEL_XROT"
      ]
    },
    "0x1FCC1FAF": {
      "name": "SET_WAVE_QUAD_BOUNDS",
      "params": [
        {
          "name": "waveQuad",
          "type": "int",
          "description": "The wave quad index"
        },
        {
          "name": "minX",
          "type": "int",
          "description": "The minX coordinate"
        },
        {
          "name": "minY",
          "type": "int",
          "description": "The minY coordinate"
        },
        {
          "name": "maxX",
          "type": "int",
          "description": "The maxX coordinate"
        },
        {
          "name": "maxY",
          "type": "int",
          "description": "The maxY coordinate"
        }
      ],
      "results": "BOOL",
      "description": "This native allows you to update the bounds of a specified water quad index.",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaveQuadBounds(0, -5000, -5000, 5000, 5000)"
        }
      ],
      "hash": "0x1FCC1FAF",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0xE80F4E31": {
      "name": "SET_VEHICLE_WHEEL_BRAKE_PRESSURE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "pressure",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Sets brake pressure of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nNormal values around 1.0f",
      "examples": [
        
      ],
      "hash": "0xE80F4E31",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x1683E7F0": {
      "name": "SET_VEHICLE_XENON_LIGHTS_CUSTOM_COLOR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle handle."
        },
        {
          "name": "red",
          "type": "int",
          "description": "Red color (0-255)."
        },
        {
          "name": "green",
          "type": "int",
          "description": "Green color (0-255)."
        },
        {
          "name": "blue",
          "type": "int",
          "description": "Blue color (0-255)."
        }
      ],
      "results": "void",
      "description": "Sets custom vehicle xenon lights color, allowing to use RGB palette. The game will ignore lights color set by [\\_SET_VEHICLE_XENON_LIGHTS_COLOR](#\\_0xE41033B25D003A07) when custom color is active. This native is not synced between players. Requires xenon lights mod to be set on vehicle.",
      "examples": [
        {
          "lang": "lua",
          "code": "local vehicle = GetVehiclePedIsUsing(PlayerPedId())\r\nif DoesEntityExist(vehicle) then\r\n  -- Toggle xenon lights mod.\r\n  ToggleVehicleMod(vehicle, 22, true)\r\n\r\n  -- Set pink lights color.\r\n  SetVehicleXenonLightsCustomColor(vehicle, 244, 5, 82)\r\nend"
        }
      ],
      "hash": "0x1683E7F0",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xBD6357D": {
      "name": "SET_VEHICLE_WHEEL_X_OFFSET",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "offset",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Adjusts the offset of the specified wheel relative to the wheel's axle center.\r\nNeeds to be called every frame in order to function properly, as GTA will reset the offset otherwise.\r\nThis function can be especially useful to set the track width of a vehicle, for example:\n\n```\nfunction SetVehicleFrontTrackWidth(vehicle, width)\r\nSetVehicleWheelXOffset(vehicle, 0, -width/2)\r\nSetVehicleWheelXOffset(vehicle, 1, width/2)\r\nend\n```",
      "examples": [
        
      ],
      "hash": "0xBD6357D",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xE4174B7B": {
      "name": "SET_WAVE_QUAD_AMPLITUDE",
      "params": [
        {
          "name": "waveQuad",
          "type": "int",
          "description": "The wave quad index"
        },
        {
          "name": "amplitude",
          "type": "float",
          "description": "The amplitude value"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaveQuadAmplitude(0, 1.0)"
        }
      ],
      "hash": "0xE4174B7B",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0xFC9341A3": {
      "name": "SET_WAVE_QUAD_DIRECTION",
      "params": [
        {
          "name": "waveQuad",
          "type": "int",
          "description": "The wave quad index"
        },
        {
          "name": "directionX",
          "type": "float",
          "description": "The minX coordinate"
        },
        {
          "name": "directionY",
          "type": "float",
          "description": "The minY coordinate"
        }
      ],
      "results": "BOOL",
      "description": "directionX/Y should be constrained between -1.0 and 1.0\r\nA positive value will create the wave starting at min and rolling towards max\r\nA negative value will create the wave starting at max and rolling towards min\r\nApplying both values allows you to make diagonal waves",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaveQuadDirection(0, 0.3, 0.1)"
        }
      ],
      "hash": "0xFC9341A3",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0x20B1B3E6": {
      "name": "SET_VEHICLE_HIGH_GEAR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "gear",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x20B1B3E6",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x9864312F": {
      "name": "SET_WEAPON_RECOIL_SHAKE_AMPLITUDE",
      "params": [
        {
          "name": "weaponHash",
          "type": "Hash",
          "description": "Weapon name hash."
        },
        {
          "name": "amplitude",
          "type": "float",
          "description": "Recoil shake amplitude"
        }
      ],
      "results": "void",
      "description": "A setter for the recoil shake amplitude of a weapon.",
      "examples": [
        
      ],
      "hash": "0x9864312F",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x21783161": {
      "name": "STOP_RESOURCE",
      "params": [
        {
          "name": "resourceName",
          "type": "char*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x21783161",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x85C85A3A": {
      "name": "SET_VEHICLE_WHEEL_TRACTION_VECTOR_LENGTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "length",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Sets the traction vector length of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0x85C85A3A",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB962D05C": {
      "name": "SET_VEHICLE_WHEEL_TIRE_COLLIDER_SIZE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to obtain data for."
        },
        {
          "name": "wheelIndex",
          "type": "int",
          "description": "Index of wheel, 0-3."
        },
        {
          "name": "value",
          "type": "float",
          "description": "Radius of tire collider."
        }
      ],
      "results": "void",
      "description": "Use along with SetVehicleWheelSize to resize the wheels (this native sets the collider size affecting physics while SetVehicleWheelSize will change visual size).",
      "examples": [
        
      ],
      "hash": "0xB962D05C",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x128737EA": {
      "name": "TRIGGER_LATENT_SERVER_EVENT_INTERNAL",
      "params": [
        {
          "name": "eventName",
          "type": "char*"
        },
        {
          "name": "eventPayload",
          "type": "char*"
        },
        {
          "name": "payloadLength",
          "type": "int"
        },
        {
          "name": "bps",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "The backing function for TriggerLatentServerEvent.",
      "examples": [
        
      ],
      "hash": "0x128737EA",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x76180407": {
      "name": "SET_ENTITY_DRAW_OUTLINE",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "A valid entity handle."
        },
        {
          "name": "enabled",
          "type": "BOOL",
          "description": "Whether or not to draw an outline."
        }
      ],
      "results": "void",
      "description": "Draws an outline around a given entity. This function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0x76180407",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0xADECF19E": {
      "name": "LEAVE_CURSOR_MODE",
      "params": [
        
      ],
      "results": "void",
      "description": "Leaves cursor mode. This function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0xADECF19E",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x53AB5C35": {
      "name": "SET_VEHICLE_WHEEL_SIZE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set data for."
        },
        {
          "name": "size",
          "type": "float",
          "description": "Size of the wheels (usually between 0.5 and 1.5 is reasonable)."
        }
      ],
      "results": "BOOL",
      "description": "Sets vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels.\r\nReturns whether change was successful (can be false if trying to set size for non-default wheels).",
      "examples": [
        
      ],
      "hash": "0x53AB5C35",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "Bool - whether change was successful or not"
    },
    "0xA387D917": {
      "name": "SET_WATER_QUAD_IS_INVISIBLE",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "isInvisible",
          "type": "BOOL",
          "description": "Unknown effect"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaterQuadIsInvisible(0, true)"
        }
      ],
      "hash": "0xA387D917",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0x3DD8130F": {
      "name": "SELECT_ENTITY_AT_CURSOR",
      "params": [
        {
          "name": "hitFlags",
          "type": "int",
          "description": "A bit mask of entity types to match."
        },
        {
          "name": "precise",
          "type": "BOOL",
          "description": "Whether to do a *precise* test, i.e. of visual coordinates, too."
        }
      ],
      "results": "Entity",
      "description": "Gets the selected entity at the current mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0x3DD8130F",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "An entity handle, or zero."
    },
    "0x70B35890": {
      "name": "TRIGGER_LATENT_CLIENT_EVENT_INTERNAL",
      "params": [
        {
          "name": "eventName",
          "type": "char*"
        },
        {
          "name": "eventTarget",
          "type": "char*"
        },
        {
          "name": "eventPayload",
          "type": "char*"
        },
        {
          "name": "payloadLength",
          "type": "int"
        },
        {
          "name": "bps",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "The backing function for TriggerLatentClientEvent.",
      "examples": [
        
      ],
      "hash": "0x70B35890",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x488C86D2": {
      "name": "SET_VEHICLE_HANDLING_FLOAT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set data for."
        },
        {
          "name": "class_",
          "type": "char*",
          "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
        },
        {
          "name": "fieldName",
          "type": "char*",
          "description": "The field name to set. These match the keys in `handling.meta`."
        },
        {
          "name": "value",
          "type": "float",
          "description": "The floating-point value to set."
        }
      ],
      "results": "void",
      "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FLOAT`, this might require some experimentation.\r\nExample: `SetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`",
      "examples": [
        
      ],
      "hash": "0x488C86D2",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xDD379006": {
      "name": "START_FIND_KVP",
      "params": [
        {
          "name": "prefix",
          "type": "char*",
          "description": "A prefix match"
        }
      ],
      "results": "int",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "SetResourceKvp('mollis:2', 'should be taken with alcohol')\r\nSetResourceKvp('mollis:1', 'vesuvius citrate')\r\nSetResourceKvp('mollis:manufacturer', 'Betta Pharmaceuticals')\r\n\r\nlocal kvpHandle = StartFindKvp('mollis:')\r\n\r\nif kvpHandle ~= -1 then \r\n\tlocal key\r\n\t\r\n\trepeat\r\n\t\tkey = FindKvp(kvpHandle)\r\n\r\n\t\tif key then\r\n\t\t\tprint(('%s: %s'):format(key, GetResourceKvpString(key)))\r\n\t\tend\r\n\tuntil key\r\n\r\n\tEndFindKvp(kvpHandle)\r\nend"
        }
      ],
      "hash": "0xDD379006",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "A KVP find handle to use with [FIND_KVP](#\\_0xBD7BEBC5) and close with [END_FIND_KVP](#\\_0xB3210203)"
    },
    "0x1E35DBBA": {
      "name": "TEMP_BAN_PLAYER",
      "params": [
        {
          "name": "playerSrc",
          "type": "char*"
        },
        {
          "name": "reason",
          "type": "char*"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x1E35DBBA",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x6485615E": {
      "name": "SET_VEHICLE_TURBO_PRESSURE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "pressure",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x6485615E",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xD1FDCFC1": {
      "name": "SET_WATER_QUAD_HAS_LIMITED_DEPTH",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "hasLimitedDepth",
          "type": "BOOL",
          "description": "Unknown effect"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaterQuadHasLimitedDepth(0, true)"
        }
      ],
      "hash": "0xD1FDCFC1",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0xDFD8F6DE": {
      "name": "SET_WEAPONS_NO_AIM_BLOCKING",
      "params": [
        {
          "name": "state",
          "type": "BOOL",
          "description": "On/Off"
        }
      ],
      "results": "void",
      "description": "Disables weapons aim blocking due to environment for local player.\r\nFor non-player peds [SET_PED_ENABLE_WEAPON_BLOCKING](#\\_0x97A790315D3831FD) can be used.",
      "examples": [
        
      ],
      "hash": "0xDFD8F6DE",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xC383871D": {
      "name": "ENABLE_EDITOR_RUNTIME",
      "params": [
        
      ],
      "results": "void",
      "description": "Enables the editor runtime mode, changing game behavior to track entity metadata.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0xC383871D",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x80AD144C": {
      "name": "SET_WATER_QUAD_BOUNDS",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "minX",
          "type": "int",
          "description": "The minX coordinate"
        },
        {
          "name": "minY",
          "type": "int",
          "description": "The minY coordinate"
        },
        {
          "name": "maxX",
          "type": "int",
          "description": "The maxX coordinate"
        },
        {
          "name": "maxY",
          "type": "int",
          "description": "The maxY coordinate"
        }
      ],
      "results": "BOOL",
      "description": "This native allows you to update the bounds of a specified water quad index.",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaterQuadBounds(0, -5000.0, -5000.0, 5000.0, 5000.0)"
        }
      ],
      "hash": "0x80AD144C",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0xFC52CB91": {
      "name": "UPDATE_MAPDATA_ENTITY",
      "params": [
        {
          "name": "mapdata",
          "type": "int",
          "description": "A fwMapData index from GET_MAPDATA_FROM_HASH_KEY."
        },
        {
          "name": "entity",
          "type": "int",
          "description": "An entity index from GET_ENTITY_INDEX_FROM_MAPDATA."
        },
        {
          "name": "entityDef",
          "type": "object",
          "description": "The new entity definition in fwEntityDef format."
        }
      ],
      "results": "void",
      "description": "Transiently updates the entity with the specified mapdata index and entity index.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0xFC52CB91",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x58382A19": {
      "name": "WAS_EVENT_CANCELED",
      "params": [
        
      ],
      "results": "BOOL",
      "description": "Returns whether or not the currently executing event was canceled.",
      "examples": [
        
      ],
      "hash": "0x58382A19",
      "ns": "CFX",
      "apiset": "shared",
      "resultsDescription": "A boolean."
    },
    "0xEB2EDCA2": {
      "name": "DRAW_GIZMO",
      "params": [
        {
          "name": "matrixPtr",
          "type": "long",
          "description": "A mutable pointer to a 64-byte buffer of floating-point values, representing an XMFLOAT4X4 in layout."
        },
        {
          "name": "id",
          "type": "char*",
          "description": "A unique identifier of what the gizmo is affecting."
        }
      ],
      "results": "BOOL",
      "description": "Draws a gizmo. This function supports SDK infrastructure and is not intended to be used directly from your code.\n\nThis should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.\n\nMatrix layout is as follows:\n\n*   Element \\[0], \\[1] and \\[2] should represent the right vector.\n*   Element \\[4], \\[5] and \\[6] should represent the forward vector.\n*   Element \\[8], \\[9] and \\[10] should represent the up vector.\n*   Element \\[12], \\[13] and \\[14] should represent X, Y and Z translation coordinates.\n*   All other elements should be \\[0, 0, 0, 1].",
      "examples": [
        
      ],
      "hash": "0xEB2EDCA2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Whether or not the matrix was modified."
    },
    "0x2F7A49E6": {
      "name": "TRIGGER_CLIENT_EVENT_INTERNAL",
      "params": [
        {
          "name": "eventName",
          "type": "char*"
        },
        {
          "name": "eventTarget",
          "type": "char*"
        },
        {
          "name": "eventPayload",
          "type": "char*"
        },
        {
          "name": "payloadLength",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "The backing function for TriggerClientEvent.",
      "examples": [
        
      ],
      "hash": "0x2F7A49E6",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xB9234AFB": {
      "name": "SHUTDOWN_LOADING_SCREEN_NUI",
      "params": [
        
      ],
      "results": "void",
      "description": "Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`.",
      "examples": [
        
      ],
      "hash": "0xB9234AFB",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xAFE8D405": {
      "name": "SELECT_ENTITY_AT_POS",
      "params": [
        {
          "name": "fracX",
          "type": "float",
          "description": "Mouse cursor X fraction."
        },
        {
          "name": "fracY",
          "type": "float",
          "description": "Mouse cursor Y fraction."
        },
        {
          "name": "hitFlags",
          "type": "int",
          "description": "A bit mask of entity types to match."
        },
        {
          "name": "precise",
          "type": "BOOL",
          "description": "Whether to do a *precise* test, i.e. of visual coordinates, too."
        }
      ],
      "results": "Entity",
      "description": "Gets the selected entity at the specified mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0xAFE8D405",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "An entity handle, or zero."
    },
    "0x7FB46432": {
      "name": "UNREGISTER_RAW_NUI_CALLBACK",
      "params": [
        {
          "name": "callbackType",
          "type": "char*",
          "description": "The callback type to target"
        }
      ],
      "results": "void",
      "description": "Will unregister and cleanup a registered NUI callback handler.\n\nUse along side the REGISTER_RAW_NUI_CALLBACK native.",
      "examples": [
        
      ],
      "hash": "0x7FB46432",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xD29D8EDD": {
      "name": "GET_MAPDATA_FROM_HASH_KEY",
      "params": [
        {
          "name": "mapdataHandle",
          "type": "Hash",
          "description": "The input map data handle."
        }
      ],
      "results": "int",
      "description": "Returns the transient map data index for a specified hash.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0xD29D8EDD",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "A transient (non-persistable) index to the requested mapdata, or -1."
    },
    "0xD2B9E90D": {
      "name": "SET_VEHICLE_WHEEL_FLAGS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "wheelIndex",
          "type": "int"
        },
        {
          "name": "flags",
          "type": "int",
          "description": "bit flags"
        }
      ],
      "results": "void",
      "description": "Sets the flags of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
      "examples": [
        
      ],
      "hash": "0xD2B9E90D",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x2E310ACD": {
      "name": "VERIFY_PASSWORD_HASH",
      "params": [
        {
          "name": "password",
          "type": "char*"
        },
        {
          "name": "hash",
          "type": "char*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x2E310ACD",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xB41A56C2": {
      "name": "SET_ENTITY_DRAW_OUTLINE_COLOR",
      "params": [
        {
          "name": "red",
          "type": "int",
          "description": "Red component of color."
        },
        {
          "name": "green",
          "type": "int",
          "description": "Green component of color."
        },
        {
          "name": "blue",
          "type": "int",
          "description": "Blue component of color."
        },
        {
          "name": "alpha",
          "type": "int",
          "description": "Alpha component of color, ignored for shader `0`."
        }
      ],
      "results": "void",
      "description": "Sets color for entity outline. `255, 0, 255, 255` by default.",
      "examples": [
        
      ],
      "hash": "0xB41A56C2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x5261A01A": {
      "name": "SET_ENTITY_DRAW_OUTLINE_SHADER",
      "params": [
        {
          "name": "shader",
          "type": "int",
          "description": "An outline shader variant."
        }
      ],
      "results": "void",
      "description": "Sets variant of shader that will be used to draw entity outline.\n\nVariants are:\n\n*   **0**: Default value, gauss shader.\n*   **1**: 2px wide solid color outline.\n*   **2**: Fullscreen solid color except for entity.",
      "examples": [
        
      ],
      "hash": "0x5261A01A",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x50131EB2": {
      "name": "SET_WATER_QUAD_TYPE",
      "params": [
        {
          "name": "waterQuad",
          "type": "int",
          "description": "The water quad index"
        },
        {
          "name": "type",
          "type": "int",
          "description": "The water quad type"
        }
      ],
      "results": "BOOL",
      "description": "This native allows you to update the water quad type.\n\nValid type definitions:\n\n*   **0** Square\n*   **1** Right triangle where the 90 degree angle is at maxX, minY\n*   **2** Right triangle where the 90 degree angle is at minX, minY\n*   **3** Right triangle where the 90 degree angle is at minX, maxY\n*   **4** Right triangle where the 90 degree angle is at maxY, maxY",
      "examples": [
        {
          "lang": "lua",
          "code": "local success = SetWaterQuadType(0, 0)"
        }
      ],
      "hash": "0x50131EB2",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Returns true on success."
    },
    "0x7FDD1128": {
      "name": "TRIGGER_SERVER_EVENT_INTERNAL",
      "params": [
        {
          "name": "eventName",
          "type": "char*"
        },
        {
          "name": "eventPayload",
          "type": "char*"
        },
        {
          "name": "payloadLength",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "The backing function for TriggerServerEvent.",
      "examples": [
        
      ],
      "hash": "0x7FDD1128",
      "ns": "CFX",
      "apiset": "client"
    },
    "0xB1622B17": {
      "name": "DISABLE_EDITOR_RUNTIME",
      "params": [
        
      ],
      "results": "void",
      "description": "Disables the editor runtime mode, changing game behavior to not track entity metadata.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0xB1622B17",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x780DA86": {
      "name": "ENTER_CURSOR_MODE",
      "params": [
        
      ],
      "results": "void",
      "description": "Enters cursor mode, suppressing mouse movement to the game and displaying a mouse cursor instead. This function supports\r\nSDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0x780DA86",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x2A7B50E": {
      "name": "SET_WEAPONS_NO_AUTOSWAP",
      "params": [
        {
          "name": "state",
          "type": "BOOL",
          "description": "On/Off"
        }
      ],
      "results": "void",
      "description": "Disables autoswapping to another weapon when the current weapon runs out of ammo.",
      "examples": [
        
      ],
      "hash": "0x2A7B50E",
      "ns": "CFX",
      "apiset": "client"
    },
    "0x4626756C": {
      "name": "ADD_BLIP_FOR_RADIUS",
      "params": [
        {
          "name": "posX",
          "type": "float",
          "description": "The x position of the blip (you can also send a vector3 instead of the bulk coordinates)"
        },
        {
          "name": "posY",
          "type": "float",
          "description": "The y position of the blip (you can also send a vector3 instead of the bulk coordinates)"
        },
        {
          "name": "posZ",
          "type": "float",
          "description": "The z position of the blip (you can also send a vector3 instead of the bulk coordinates)"
        },
        {
          "name": "radius",
          "type": "float",
          "description": "The number that defines the radius of the blip circle"
        }
      ],
      "results": "Blip",
      "description": "Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use [AddBlipCoords](#\\_0xC6F43D0E))\r\nExample image:\r\n![example](https://i.imgur.com/9hQl3DB.png)\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_RADIUS](?\\_0x46818D79B1F7499A).**",
      "examples": [
        
      ],
      "hash": "0x4626756C",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "The blip handle that can be manipulated with every `SetBlip` natives"
    },
    "0x8143FA4F": {
      "name": "RESET_MAPDATA_ENTITY_MATRIX",
      "params": [
        {
          "name": "mapDataHash",
          "type": "int",
          "description": "A mapdata hash from `mapDataLoaded` event."
        },
        {
          "name": "entityInternalIdx",
          "type": "int",
          "description": "An internal entity's index."
        }
      ],
      "results": "BOOL",
      "description": "Resets mapdata entity transform matrix to its original state.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0x8143FA4F",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "True if successful, false if not."
    },
    "0x2C3CDA93": {
      "name": "GET_MAPDATA_ENTITY_MATRIX",
      "params": [
        {
          "name": "mapDataHash",
          "type": "int",
          "description": "A mapdata hash from `mapDataLoaded` event."
        },
        {
          "name": "entityInternalIdx",
          "type": "int",
          "description": "An internal entity's index."
        },
        {
          "name": "matrixPtr",
          "type": "long",
          "description": "A mutable pointer to a 64-byte buffer of floating-point values, representing an XMFLOAT4X4 in layout."
        }
      ],
      "results": "BOOL",
      "description": "Returns mapdata's entity matrix. This function supports SDK infrastructure and is not intended to be used directly from your code.\n\nThis should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.\n\nMatrix layout is as follows:\n\n*   Element \\[0], \\[1] and \\[2] should represent the right vector.\n*   Element \\[4], \\[5] and \\[6] should represent the forward vector.\n*   Element \\[8], \\[9] and \\[10] should represent the up vector.\n*   Element \\[12], \\[13] and \\[14] should represent X, Y and Z translation coordinates.\n*   All other elements should be \\[0, 0, 0, 1].",
      "examples": [
        
      ],
      "hash": "0x2C3CDA93",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "Whether or not the matrix was retrieved."
    },
    "0x30AA6911": {
      "name": "GET_MAPDATA_ENTITY_HANDLE",
      "params": [
        {
          "name": "mapDataHash",
          "type": "int",
          "description": "A mapdata hash from `mapDataLoaded` event."
        },
        {
          "name": "entityInternalIdx",
          "type": "int",
          "description": "An internal entity's index."
        },
        {
          "name": "entityHandle",
          "type": "int*",
          "description": "The output entity handle."
        }
      ],
      "results": "BOOL",
      "description": "Retrieves the map data entity handle.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0x30AA6911",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "True if successful, false if not."
    },
    "0x9080363A": {
      "name": "GET_EXTERNAL_KVP_STRING",
      "params": [
        {
          "name": "resource",
          "type": "char*",
          "description": "The resource to fetch from."
        },
        {
          "name": "key",
          "type": "char*",
          "description": "The key to fetch"
        }
      ],
      "results": "char*",
      "description": "A getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B), but for a specified resource.",
      "examples": [
        {
          "lang": "lua",
          "code": "local kvpValue = GetExternalKvpString('food', 'codfish') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
        }
      ],
      "hash": "0x9080363A",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A string that contains the value stored in the Kvp or nil/null if none."
    },
    "0x6228F159": {
      "name": "_ADD_BLIP_FOR_AREA",
      "params": [
        {
          "name": "x",
          "type": "float",
          "description": "The X coordinate of the center of the blip."
        },
        {
          "name": "y",
          "type": "float",
          "description": "The Y coordinate of the center of the blip."
        },
        {
          "name": "z",
          "type": "float",
          "description": "The Z coordinate of the center of the blip."
        },
        {
          "name": "width",
          "type": "float",
          "description": "The width of the blip."
        },
        {
          "name": "height",
          "type": "float",
          "description": "The height of the blip."
        }
      ],
      "results": "Blip",
      "description": "Adds a rectangular blip for the specified coordinates/area.\r\nIt is recommended to use [SET_BLIP_ROTATION](#\\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.\r\nBy default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.\r\nExample image:\r\n![minimap](https://w.wew.wtf/pdcjig.png)\r\n![big map](https://w.wew.wtf/zgcjcm.png)\r\n(Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)\n\n**This is the server-side RPC native equivalent of the client native [\\_ADD_BLIP_FOR_AREA](?\\_0xCE5D0E5E315DB238).**",
      "examples": [
        
      ],
      "hash": "0x6228F159",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A handle to the blip."
    },
    "0x2D23D743": {
      "name": "CLEAR_PED_PROP",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped handle."
        },
        {
          "name": "propId",
          "type": "int",
          "description": "The prop id you want to clear from the ped. Refer to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)."
        }
      ],
      "results": "void",
      "description": "CLEAR_PED_PROP\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_PROP](?\\_0x0943E5B8E078E76E).**",
      "examples": [
        
      ],
      "hash": "0x2D23D743",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xF6B815C5": {
      "name": "GET_ENTITY_MAPDATA_OWNER",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "An entity owned by map data."
        },
        {
          "name": "mapdataHandle",
          "type": "int*",
          "description": "The output map data handle."
        },
        {
          "name": "entityHandle",
          "type": "int*",
          "description": "The output entity handle."
        }
      ],
      "results": "BOOL",
      "description": "Retrieves the map data and entity handles from a specific entity.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0xF6B815C5",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "True if successful, false if not."
    },
    "0x90892DED": {
      "name": "PRINT_STRUCTURED_TRACE",
      "params": [
        {
          "name": "jsonString",
          "type": "char*",
          "description": "JSON data to submit as `payload` in the `script_structured_trace` event."
        }
      ],
      "results": "void",
      "description": "Prints 'structured trace' data to the server `file descriptor 3` channel. This is not generally useful outside of\r\nserver monitoring utilities.",
      "examples": [
        
      ],
      "hash": "0x90892DED",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x636F097F": {
      "name": "SCAN_RESOURCE_ROOT",
      "params": [
        {
          "name": "rootPath",
          "type": "char*",
          "description": "The resource directory to scan."
        },
        {
          "name": "callback",
          "type": "func",
          "description": "A callback that will receive an object with results."
        }
      ],
      "results": "void",
      "description": "Scans the resources in the specified resource root. This function is only available in the 'monitor mode' process and is\r\nnot available for user resources.",
      "examples": [
        
      ],
      "hash": "0x636F097F",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x12B8D689": {
      "name": "GET_EXTERNAL_KVP_INT",
      "params": [
        {
          "name": "resource",
          "type": "char*",
          "description": "The resource to fetch from."
        },
        {
          "name": "key",
          "type": "char*",
          "description": "The key to fetch"
        }
      ],
      "results": "int",
      "description": "A getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8), but for a specified resource.",
      "examples": [
        {
          "lang": "lua",
          "code": "local kvpValue = GetExternalKvpInt('food', 'bananabread') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
        }
      ],
      "hash": "0x12B8D689",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A int that contains the value stored in the Kvp or nil/null if none."
    },
    "0x8F2EECC3": {
      "name": "START_FIND_EXTERNAL_KVP",
      "params": [
        {
          "name": "resourceName",
          "type": "char*",
          "description": "The resource to try finding the key/values for"
        },
        {
          "name": "prefix",
          "type": "char*",
          "description": "A prefix match"
        }
      ],
      "results": "int",
      "description": "Equivalent of [START_FIND_KVP](#\\_0xDD379006), but for another resource than the current one.",
      "examples": [
        {
          "lang": "lua",
          "code": "local kvpHandle = StartFindExternalKvp('drugs', 'mollis:')\r\n\r\nif kvpHandle ~= -1 then \r\n\tlocal key\r\n\t\r\n\trepeat\r\n\t\tkey = FindKvp(kvpHandle)\r\n\r\n\t\tif key then\r\n\t\t\tprint(('%s: %s'):format(key, GetResourceKvpString(key)))\r\n\t\tend\r\n\tuntil key\r\n\r\n\tEndFindKvp(kvpHandle)\r\nend"
        }
      ],
      "hash": "0x8F2EECC3",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A KVP find handle to use with [FIND_KVP](#\\_0xBD7BEBC5) and close with [END_FIND_KVP](#\\_0xB3210203)"
    },
    "0x3CC98B25": {
      "name": "GET_EXTERNAL_KVP_FLOAT",
      "params": [
        {
          "name": "resource",
          "type": "char*",
          "description": "The resource to fetch from."
        },
        {
          "name": "key",
          "type": "char*",
          "description": "The key to fetch"
        }
      ],
      "results": "float",
      "description": "A getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938), but for a specified resource.",
      "examples": [
        {
          "lang": "lua",
          "code": "local kvpValue = GetExternalKvpFloat('drugs', 'mollis') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
        }
      ],
      "hash": "0x3CC98B25",
      "ns": "CFX",
      "apiset": "client",
      "resultsDescription": "A float that contains the value stored in the Kvp or nil/null if none."
    },
    "0x91310870": {
      "name": "TRIGGER_EVENT_INTERNAL",
      "params": [
        {
          "name": "eventName",
          "type": "char*"
        },
        {
          "name": "eventPayload",
          "type": "char*"
        },
        {
          "name": "payloadLength",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "The backing function for TriggerEvent.",
      "examples": [
        
      ],
      "hash": "0x91310870",
      "ns": "CFX",
      "apiset": "shared"
    },
    "0x3000F092": {
      "name": "CREATE_PED_INSIDE_VEHICLE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "pedType",
          "type": "int",
          "description": "See [`CREATE_PED`](#\\_0xD49F9B0955C367DE)"
        },
        {
          "name": "modelHash",
          "type": "Hash"
        },
        {
          "name": "seat",
          "type": "int"
        },
        {
          "name": "isNetwork",
          "type": "BOOL"
        },
        {
          "name": "bScriptHostPed",
          "type": "BOOL"
        }
      ],
      "results": "Entity",
      "description": "CREATE_PED_INSIDE_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [CREATE_PED_INSIDE_VEHICLE](?\\_0x7DD959874C1FD534).**",
      "examples": [
        
      ],
      "hash": "0x3000F092",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0x29B440DC": {
      "name": "START_RESOURCE",
      "params": [
        {
          "name": "resourceName",
          "type": "char*"
        }
      ],
      "results": "BOOL",
      "description": "",
      "examples": [
        
      ],
      "hash": "0x29B440DC",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": ""
    },
    "0xDE3316AB": {
      "name": "CLEAR_PED_TASKS",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "Ped id. Use PlayerPedId() for your own character."
        }
      ],
      "results": "void",
      "description": "Clear a ped's tasks. Stop animations and other tasks created by scripts.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS](?\\_0xE1EF3C1216AFF2CD).**",
      "examples": [
        
      ],
      "hash": "0xDE3316AB",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xC6F43D0E": {
      "name": "ADD_BLIP_FOR_COORD",
      "params": [
        {
          "name": "x",
          "type": "float",
          "description": "The X coordinate to create the blip on."
        },
        {
          "name": "y",
          "type": "float",
          "description": "The Y coordinate."
        },
        {
          "name": "z",
          "type": "float",
          "description": "The Z coordinate."
        }
      ],
      "results": "Blip",
      "description": "Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_COORD](?\\_0x5A039BB0BCA604B6).**",
      "examples": [
        
      ],
      "hash": "0xC6F43D0E",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A blip handle."
    },
    "0x30822554": {
      "name": "ADD_BLIP_FOR_ENTITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity handle to create the blip."
        }
      ],
      "results": "Blip",
      "description": "Create a blip that by default is red (enemy), you can use [SET_BLIP_AS_FRIENDLY](#\\_0xC6F43D0E) to make it blue (friend).\\\nCan be used for objects, vehicles and peds.\r\nExample of enemy:\r\n![enemy](https://i.imgur.com/fl78svv.png)\r\nExample of friend:\r\n![friend](https://i.imgur.com/Q16ho5d.png)\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_ENTITY](?\\_0x5CDE92C702A8FCE7).**",
      "examples": [
        
      ],
      "hash": "0x30822554",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A blip handle."
    },
    "0xBC045625": {
      "name": "CLEAR_PED_TASKS_IMMEDIATELY",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "Ped id."
        }
      ],
      "results": "void",
      "description": "Immediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS_IMMEDIATELY](?\\_0xAAA34F8A7CB32098).**",
      "examples": [
        
      ],
      "hash": "0xBC045625",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xEE43540D": {
      "name": "GET_ENTITY_INDEX_FROM_MAPDATA",
      "params": [
        {
          "name": "mapdata",
          "type": "int",
          "description": "The input map data index from GET_MAPDATA_FROM_HASH_KEY."
        },
        {
          "name": "entity",
          "type": "int",
          "description": "The input entity handle from GET_ENTITY_MAPDATA_OWNER."
        }
      ],
      "results": "int",
      "description": "Returns the transient entity index for a specified mapdata/entity pair.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
      "examples": [
        
      ],
      "hash": "0xEE43540D",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5",
      "resultsDescription": "A transient (non-persistable) index to the requested entity, or -1."
    },
    "0x9C37F220": {
      "name": "REMOVE_WEAPON_FROM_PED",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "weaponHash",
          "type": "Hash"
        }
      ],
      "results": "void",
      "description": "This native removes a specified weapon from your selected ped.\r\nWeapon Hashes: pastebin.com/0wwDZgkF\r\nExample:\r\nC#:\r\nFunction.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);\r\nC++:\r\nWEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);\r\nThe code above removes the knife from the player.\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_FROM_PED](?\\_0x4899CB088EDF59B8).**",
      "examples": [
        
      ],
      "hash": "0x9C37F220",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x389EF71": {
      "name": "CREATE_PED",
      "params": [
        {
          "name": "pedType",
          "type": "int",
          "description": "Unused. Peds get set to CIVMALE/CIVFEMALE/etc. no matter the value specified."
        },
        {
          "name": "modelHash",
          "type": "Hash",
          "description": "The model of ped to spawn."
        },
        {
          "name": "x",
          "type": "float",
          "description": "Spawn coordinate X component."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Spawn coordinate Y component."
        },
        {
          "name": "z",
          "type": "float",
          "description": "Spawn coordinate Z component."
        },
        {
          "name": "heading",
          "type": "float",
          "description": "Heading to face towards, in degrees."
        },
        {
          "name": "isNetwork",
          "type": "BOOL",
          "description": "Whether to create a network object for the ped. If false, the ped exists only locally."
        },
        {
          "name": "bScriptHostPed",
          "type": "BOOL",
          "description": "Whether to register the ped as pinned to the script host in the R\\* network model."
        }
      ],
      "results": "Entity",
      "description": "Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.\r\nThis ped will initially be owned by the creating script as a mission entity, and the model should be loaded already\r\n(e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_PED](?\\_0xD49F9B0955C367DE).**",
      "examples": [
        
      ],
      "hash": "0x389EF71",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A script handle (fwScriptGuid index) for the ped, or `0` if the ped failed to be created."
    },
    "0xFF5A1988": {
      "name": "SET_ENTITY_VELOCITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        },
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "z",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Note that the third parameter(denoted as z) is \"up and down\" with positive numbers encouraging upwards movement.\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_VELOCITY](?\\_0x1C99BB7B6E96D16F).**",
      "examples": [
        
      ],
      "hash": "0xFF5A1988",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xCF1384C4": {
      "name": "SET_PED_CAN_RAGDOLL",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "toggle",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "SET_PED_CAN_RAGDOLL\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_CAN_RAGDOLL](?\\_0xB128377056A54E2A).**",
      "examples": [
        
      ],
      "hash": "0xCF1384C4",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xDD75460A": {
      "name": "CREATE_VEHICLE",
      "params": [
        {
          "name": "modelHash",
          "type": "Hash",
          "description": "The model of vehicle to spawn."
        },
        {
          "name": "x",
          "type": "float",
          "description": "Spawn coordinate X component."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Spawn coordinate Y component."
        },
        {
          "name": "z",
          "type": "float",
          "description": "Spawn coordinate Z component."
        },
        {
          "name": "heading",
          "type": "float",
          "description": "Heading to face towards, in degrees."
        },
        {
          "name": "isNetwork",
          "type": "BOOL",
          "description": "Whether to create a network object for the vehicle. If false, the vehicle exists only locally."
        },
        {
          "name": "netMissionEntity",
          "type": "BOOL",
          "description": "Whether to register the vehicle as pinned to the script host in the R\\* network model."
        }
      ],
      "results": "Entity",
      "description": "Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating\r\nscript as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n```\nNativeDB Added Parameter 8: BOOL p7\n```\n\n**This is the server-side RPC native equivalent of the client native [CREATE_VEHICLE](?\\_0xAF35D0D2583051B0).**",
      "examples": [
        
      ],
      "hash": "0xDD75460A",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A script handle (fwScriptGuid index) for the vehicle, or `0` if the vehicle failed to be created."
    },
    "0xFB0639B": {
      "name": "SET_ENTITY_MATRIX",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "A valid entity handle."
        },
        {
          "name": "forwardX",
          "type": "float"
        },
        {
          "name": "forwardY",
          "type": "float"
        },
        {
          "name": "forwardZ",
          "type": "float"
        },
        {
          "name": "rightX",
          "type": "float"
        },
        {
          "name": "rightY",
          "type": "float"
        },
        {
          "name": "rightZ",
          "type": "float"
        },
        {
          "name": "upX",
          "type": "float"
        },
        {
          "name": "upY",
          "type": "float"
        },
        {
          "name": "upZ",
          "type": "float"
        },
        {
          "name": "atX",
          "type": "float"
        },
        {
          "name": "atY",
          "type": "float"
        },
        {
          "name": "atZ",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Sets an entity's matrix. Arguments are in the same order as with GET_ENTITY_MATRIX.",
      "examples": [
        
      ],
      "hash": "0xFB0639B",
      "ns": "CFX",
      "apiset": "client",
      "game": "gta5"
    },
    "0x65C16D57": {
      "name": "FREEZE_ENTITY_POSITION",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to freeze/unfreeze."
        },
        {
          "name": "toggle",
          "type": "BOOL",
          "description": "Freeze or unfreeze entity."
        }
      ],
      "results": "void",
      "description": "Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.\n\n**This is the server-side RPC native equivalent of the client native [FREEZE_ENTITY_POSITION](?\\_0x428CA6DBD1094446).**",
      "examples": [
        
      ],
      "hash": "0x65C16D57",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x70559AC7": {
      "name": "ADD_PED_DECORATION_FROM_HASHES",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "collection",
          "type": "Hash"
        },
        {
          "name": "overlay",
          "type": "Hash"
        }
      ],
      "results": "void",
      "description": "Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.\r\ncollection - PedDecorationCollection filename hash\r\noverlay - Item name hash\r\nExample:\r\nEntry inside \"mpbeach_overlays.xml\" -\r\n<Item>\r\n<uvPos x=\"0.500000\" y=\"0.500000\" />\r\n<scale x=\"0.600000\" y=\"0.500000\" />\r\n<rotation value=\"0.000000\" />\r\n<nameHash>FM_Hair_Fuzz</nameHash>\r\n<txdHash>mp_hair_fuzz</txdHash>\r\n<txtHash>mp_hair_fuzz</txtHash>\r\n<zone>ZONE_HEAD</zone>\r\n<type>TYPE_TATTOO</type>\r\n<faction>FM</faction>\r\n<garment>All</garment>\r\n<gender>GENDER_DONTCARE</gender>\r\n<award />\r\n<awardLevel />\r\n</Item>\r\nCode:\r\nPED::\\_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"mpbeach_overlays\"), MISC::GET_HASH_KEY(\"fm_hair_fuzz\"))\n\n**This is the server-side RPC native equivalent of the client native [ADD_PED_DECORATION_FROM_HASHES](?\\_0x5F5D1665E352A839).**",
      "examples": [
        
      ],
      "hash": "0x70559AC7",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x54EA5BCC": {
      "name": "CLEAR_PLAYER_WANTED_LEVEL",
      "params": [
        {
          "name": "player",
          "type": "Player"
        }
      ],
      "results": "void",
      "description": "This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);\r\nPLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PLAYER_WANTED_LEVEL](?\\_0xB302540597885499).**",
      "examples": [
        
      ],
      "hash": "0x54EA5BCC",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x4E3A0CC4": {
      "name": "SET_PED_ARMOUR",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "amount",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "Sets the armor of the specified ped.\r\nped: The Ped to set the armor of.\r\namount: A value between 0 and 100 indicating the value to set the Ped's armor to.\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_ARMOUR](?\\_0xCEA04D83135264CC).**",
      "examples": [
        
      ],
      "hash": "0x4E3A0CC4",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xBF90DF1A": {
      "name": "SET_PED_AMMO",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "weaponHash",
          "type": "Hash"
        },
        {
          "name": "ammo",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "NativeDB Added Parameter 4: BOOL p3\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_AMMO](?\\_0x14E56BC5B5DB6A19).**",
      "examples": [
        
      ],
      "hash": "0xBF90DF1A",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xE0FF064D": {
      "name": "SET_ENTITY_HEADING",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to set the heading for."
        },
        {
          "name": "heading",
          "type": "float",
          "description": "The heading in degrees."
        }
      ],
      "results": "void",
      "description": "Set the heading of an entity in degrees also known as \"Yaw\".\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_HEADING](?\\_0x8E2530AA8ADA980E).**",
      "examples": [
        
      ],
      "hash": "0xE0FF064D",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xA635F451": {
      "name": "CLEAR_PED_SECONDARY_TASK",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        }
      ],
      "results": "void",
      "description": "CLEAR_PED_SECONDARY_TASK\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_SECONDARY_TASK](?\\_0x176CECF6F920D707).**",
      "examples": [
        
      ],
      "hash": "0xA635F451",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x3E1E286D": {
      "name": "GIVE_WEAPON_COMPONENT_TO_PED",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "weaponHash",
          "type": "Hash"
        },
        {
          "name": "componentHash",
          "type": "Hash"
        }
      ],
      "results": "void",
      "description": "GIVE_WEAPON_COMPONENT_TO_PED\n\n**This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_COMPONENT_TO_PED](?\\_0xD966D51AA5B28BB9).**",
      "examples": [
        
      ],
      "hash": "0x3E1E286D",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x412AA00D": {
      "name": "REMOVE_WEAPON_COMPONENT_FROM_PED",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "weaponHash",
          "type": "Hash"
        },
        {
          "name": "componentHash",
          "type": "Hash"
        }
      ],
      "results": "void",
      "description": "REMOVE_WEAPON_COMPONENT_FROM_PED\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_COMPONENT_FROM_PED](?\\_0x1E8BE90C74FB4C09).**",
      "examples": [
        
      ],
      "hash": "0x412AA00D",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x8DBBB0B9": {
      "name": "SET_BLIP_SPRITE",
      "params": [
        {
          "name": "blip",
          "type": "Blip",
          "description": "The blip to change."
        },
        {
          "name": "spriteId",
          "type": "int",
          "description": "The sprite ID to set."
        }
      ],
      "results": "void",
      "description": "<!--\r\n_loc1_.map((name, idx) => `| ${idx} | ${name} | ![${name}](https://runtime.fivem.net/blips/${name}.svg) |`).join('\\n')\r\n-->\n\nSets the displayed sprite for a specific blip.\r\nThere's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.\n\n**This is the server-side RPC native equivalent of the client native [SET_BLIP_SPRITE](?\\_0xDF735600A4696DAF).**",
      "examples": [
        
      ],
      "hash": "0x8DBBB0B9",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xC4D88A85": {
      "name": "GIVE_WEAPON_TO_PED",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "weaponHash",
          "type": "Hash"
        },
        {
          "name": "ammoCount",
          "type": "int"
        },
        {
          "name": "isHidden",
          "type": "BOOL"
        },
        {
          "name": "bForceInHand",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "GIVE_WEAPON_TO_PED\n\n**This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_TO_PED](?\\_0xBF0FD6E56C964FCB).**",
      "examples": [
        
      ],
      "hash": "0xC4D88A85",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x7500C79": {
      "name": "SET_PED_INTO_VEHICLE",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "seatIndex",
          "type": "int",
          "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669). -2 for the first available seat."
        }
      ],
      "results": "void",
      "description": "SET_PED_INTO_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_INTO_VEHICLE](?\\_0xF75B0D629E1C063D).**",
      "examples": [
        
      ],
      "hash": "0x7500C79",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x2F7AA05C": {
      "name": "CREATE_OBJECT",
      "params": [
        {
          "name": "modelHash",
          "type": "Hash",
          "description": "The model to spawn."
        },
        {
          "name": "x",
          "type": "float",
          "description": "Spawn coordinate X component."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Spawn coordinate Y component."
        },
        {
          "name": "z",
          "type": "float",
          "description": "Spawn coordinate Z component, 'ground level'."
        },
        {
          "name": "isNetwork",
          "type": "BOOL",
          "description": "Whether to create a network object for the object. If false, the object exists only locally."
        },
        {
          "name": "netMissionEntity",
          "type": "BOOL",
          "description": "Whether to register the object as pinned to the script host in the R\\* network model."
        },
        {
          "name": "doorFlag",
          "type": "BOOL",
          "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
        }
      ],
      "results": "Entity",
      "description": "Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT](?\\_0x509D5878EB39E842).**",
      "examples": [
        
      ],
      "hash": "0x2F7AA05C",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
    },
    "0xC1C0855A": {
      "name": "APPLY_FORCE_TO_ENTITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity you want to apply a force on"
        },
        {
          "name": "forceType",
          "type": "int",
          "description": "See native description above for a list of commonly used values"
        },
        {
          "name": "x",
          "type": "float",
          "description": "Force amount (X)"
        },
        {
          "name": "y",
          "type": "float",
          "description": "Force amount (Y)"
        },
        {
          "name": "z",
          "type": "float",
          "description": "Force amount (Z)"
        },
        {
          "name": "offX",
          "type": "float",
          "description": "Rotation/offset force (X)"
        },
        {
          "name": "offY",
          "type": "float",
          "description": "Rotation/offset force (Y)"
        },
        {
          "name": "offZ",
          "type": "float",
          "description": "Rotation/offset force (Z)"
        },
        {
          "name": "boneIndex",
          "type": "int",
          "description": "(Often 0) Entity bone index"
        },
        {
          "name": "isDirectionRel",
          "type": "BOOL",
          "description": "(Usually false) Vector defined in local (body-fixed) coordinate frame"
        },
        {
          "name": "ignoreUpVec",
          "type": "BOOL",
          "description": "(Usually true)"
        },
        {
          "name": "isForceRel",
          "type": "BOOL",
          "description": "(Usually true) When true, force gets multiplied with the objects mass and different objects will have the same acceleration"
        },
        {
          "name": "p12",
          "type": "BOOL",
          "description": "(Usually false)"
        },
        {
          "name": "p13",
          "type": "BOOL",
          "description": "(Usually true)"
        }
      ],
      "results": "void",
      "description": "Applies a force to the specified entity.\r\n**List of force types (p1)**:\n\n```\npublic enum ForceType\r\n{\r\nMinForce = 0,\r\nMaxForceRot = 1,\r\nMinForce2 = 2,\r\nMaxForceRot2 = 3,\r\nForceNoRot = 4,\r\nForceRotPlusForce = 5\r\n}\n```\n\nResearch/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/).\n\n**This is the server-side RPC native equivalent of the client native [APPLY_FORCE_TO_ENTITY](?\\_0xC5F68BE9613E2D18).**",
      "examples": [
        
      ],
      "hash": "0xC1C0855A",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xA44CE817": {
      "name": "REMOVE_ALL_PED_WEAPONS",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped entity"
        },
        {
          "name": "p1",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "Parameter `p1` does not seem to be used or referenced in game binaries.\\\n**Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_ALL_PED_WEAPONS](?\\_0xF25DF915FA38C5F3).**",
      "examples": [
        
      ],
      "hash": "0xA44CE817",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x8DF9F9BC": {
      "name": "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "r",
          "type": "int"
        },
        {
          "name": "g",
          "type": "int"
        },
        {
          "name": "b",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_CUSTOM_PRIMARY_COLOUR](?\\_0x7141766F91D15BEA).**",
      "examples": [
        
      ],
      "hash": "0x8DF9F9BC",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xDFB9A2A2": {
      "name": "SET_PLAYER_INVINCIBLE",
      "params": [
        {
          "name": "player",
          "type": "Player"
        },
        {
          "name": "toggle",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "Simply sets you as invincible (Health will not deplete).\r\nUse 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:\r\n\\*(DWORD \\*)(playerPedAddress + 0x188) |= (1 << 9);\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_INVINCIBLE](?\\_0x239528EACDC3E7DE).**",
      "examples": [
        
      ],
      "hash": "0xDFB9A2A2",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xB7A0914B": {
      "name": "SET_PLAYER_WANTED_LEVEL",
      "params": [
        {
          "name": "player",
          "type": "Player"
        },
        {
          "name": "wantedLevel",
          "type": "int"
        },
        {
          "name": "disableNoMission",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect\r\nwantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files\r\ndisableNoMission-  Disables When Off Mission- appears to always be false\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_WANTED_LEVEL](?\\_0x39FF19C64EF7DA5B).**",
      "examples": [
        
      ],
      "hash": "0xB7A0914B",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x78935A27": {
      "name": "_SET_PED_HEAD_OVERLAY_COLOR",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped entity"
        },
        {
          "name": "overlayID",
          "type": "int",
          "description": "An integer representing the overlay id"
        },
        {
          "name": "colorType",
          "type": "int",
          "description": "1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases."
        },
        {
          "name": "colorID",
          "type": "int",
          "description": "An integer representing the primary color id"
        },
        {
          "name": "secondColorID",
          "type": "int",
          "description": "An integer representing the secondary color id"
        }
      ],
      "results": "void",
      "description": "```\nUsed for freemode (online) characters.\r\nCalled after SET_PED_HEAD_OVERLAY().\n```\n\n**Note:**\r\nYou may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_HEAD_OVERLAY_COLOR](?\\_0x497BF74A7B9CB952).**",
      "examples": [
        
      ],
      "hash": "0x78935A27",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x58040420": {
      "name": "CREATE_OBJECT_NO_OFFSET",
      "params": [
        {
          "name": "modelHash",
          "type": "Hash",
          "description": "The model to spawn."
        },
        {
          "name": "x",
          "type": "float",
          "description": "Spawn coordinate X component."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Spawn coordinate Y component."
        },
        {
          "name": "z",
          "type": "float",
          "description": "Spawn coordinate Z component."
        },
        {
          "name": "isNetwork",
          "type": "BOOL",
          "description": "Whether to create a network object for the object. If false, the object exists only locally."
        },
        {
          "name": "netMissionEntity",
          "type": "BOOL",
          "description": "Whether to register the object as pinned to the script host in the R\\* network model."
        },
        {
          "name": "doorFlag",
          "type": "BOOL",
          "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
        }
      ],
      "results": "Entity",
      "description": "Creates an object (prop) with the specified model centered at the specified position.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT_NO_OFFSET](?\\_0x9A294B2138ABB884).**",
      "examples": [
        
      ],
      "hash": "0x58040420",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
    },
    "0xA345EFE": {
      "name": "SET_ENTITY_ROTATION",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        },
        {
          "name": "pitch",
          "type": "float"
        },
        {
          "name": "roll",
          "type": "float"
        },
        {
          "name": "yaw",
          "type": "float"
        },
        {
          "name": "rotationOrder",
          "type": "int",
          "description": "The order yaw pitch roll are applied, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9)."
        },
        {
          "name": "p5",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "SET_ENTITY_ROTATION\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_ROTATION](?\\_0x8524A8B0171D5E07).**",
      "examples": [
        
      ],
      "hash": "0xA345EFE",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x6AE51D4B": {
      "name": "CREATE_VEHICLE_SERVER_SETTER",
      "params": [
        {
          "name": "modelHash",
          "type": "Hash",
          "description": "The model of vehicle to spawn."
        },
        {
          "name": "type",
          "type": "char*",
          "description": "The appropriate vehicle type for the model info. Can be one of `automobile`, `bike`, `boat`, `heli`, `plane`, `submarine`, `trailer`, and (potentially), `train`. This should be the same type as the `type` field in `vehicles.meta`."
        },
        {
          "name": "x",
          "type": "float",
          "description": "Spawn coordinate X component."
        },
        {
          "name": "y",
          "type": "float",
          "description": "Spawn coordinate Y component."
        },
        {
          "name": "z",
          "type": "float",
          "description": "Spawn coordinate Z component."
        },
        {
          "name": "heading",
          "type": "float",
          "description": "Heading to face towards, in degrees."
        }
      ],
      "results": "Vehicle",
      "description": "Equivalent to CREATE_VEHICLE, but it uses 'server setter' logic (like the former CREATE_AUTOMOBILE) as a workaround for\r\nreliability concerns regarding entity creation RPC.\n\nUnlike CREATE_AUTOMOBILE, this supports other vehicle types as well.",
      "examples": [
        {
          "lang": "lua",
          "code": "local heli = CreateVehicleServerSetter(`seasparrow`, 'heli', GetEntityCoords(GetPlayerPed(GetPlayers()[1])) + vector3(0, 0, 15), 0.0)\r\nprint(GetEntityCoords(heli)) -- should return correct coordinates"
        }
      ],
      "hash": "0x6AE51D4B",
      "ns": "CFX",
      "apiset": "server",
      "resultsDescription": "A script handle for the vehicle."
    },
    "0xE3318E0E": {
      "name": "SET_PED_RANDOM_PROPS",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped handle."
        }
      ],
      "results": "void",
      "description": "SET_PED_RANDOM_PROPS\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_PROPS](?\\_0xC44AA05345C992C6).**",
      "examples": [
        
      ],
      "hash": "0xE3318E0E",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xB8278882": {
      "name": "SET_CURRENT_PED_WEAPON",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "weaponHash",
          "type": "Hash"
        },
        {
          "name": "bForceInHand",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "SET_CURRENT_PED_WEAPON\n\n**This is the server-side RPC native equivalent of the client native [SET_CURRENT_PED_WEAPON](?\\_0xADF692B254977C0C).**",
      "examples": [
        
      ],
      "hash": "0xB8278882",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xD8C3C1CD": {
      "name": "REMOVE_BLIP",
      "params": [
        {
          "name": "blip",
          "type": "Blip*",
          "description": "Blip handle to remove."
        }
      ],
      "results": "void",
      "description": "Removes the blip from your map.\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_BLIP](?\\_0x86A652570E5F25DD).**",
      "examples": [
        
      ],
      "hash": "0xD8C3C1CD",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xFA12E286": {
      "name": "SET_PED_TO_RAGDOLL_WITH_FALL",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "time",
          "type": "int"
        },
        {
          "name": "p2",
          "type": "int"
        },
        {
          "name": "ragdollType",
          "type": "int"
        },
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "z",
          "type": "float"
        },
        {
          "name": "p7",
          "type": "float"
        },
        {
          "name": "p8",
          "type": "float"
        },
        {
          "name": "p9",
          "type": "float"
        },
        {
          "name": "p10",
          "type": "float"
        },
        {
          "name": "p11",
          "type": "float"
        },
        {
          "name": "p12",
          "type": "float"
        },
        {
          "name": "p13",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "Return variable is never used in R\\*'s scripts.\r\nNot sure what p2 does. It seems like it would be a time judging by it's usage in R\\*'s scripts, but didn't seem to affect anything in my testings.\r\nx, y, and z are coordinates, most likely to where the ped will fall.\r\np7 is probably the force of the fall, but untested, so I left the variable name the same.\r\np8 to p13 are always 0f in R\\*'s scripts.\r\n(Simplified) Example of the usage of the function from R\\*'s scripts:\r\nped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL_WITH_FALL](?\\_0xD76632D99E4966C8).**",
      "examples": [
        
      ],
      "hash": "0xFA12E286",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xC1971F30": {
      "name": "TASK_EVERYONE_LEAVE_VEHICLE",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        }
      ],
      "results": "void",
      "description": "TASK_EVERYONE_LEAVE_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [TASK_EVERYONE_LEAVE_VEHICLE](?\\_0x7F93691AB4B92272).**",
      "examples": [
        
      ],
      "hash": "0xC1971F30",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xBB43F090": {
      "name": "_SET_PED_HAIR_COLOR",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "colorID",
          "type": "int"
        },
        {
          "name": "highlightColorID",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "Used for freemode (online) characters.\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_HAIR_COLOR](?\\_0x4CFFC65454C93A49).**",
      "examples": [
        
      ],
      "hash": "0xBB43F090",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xEC09DB1B": {
      "name": "_SET_PED_EYE_COLOR",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "index",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "Used for freemode (online) characters.\r\nIndices:\n\n1.  black\n2.  very light blue/green\n3.  dark blue\n4.  brown\n5.  darker brown\n6.  light brown\n7.  blue\n8.  light blue\n9.  pink\n10. yellow\n11. purple\n12. black\n13. dark green\n14. light brown\n15. yellow/black pattern\n16. light colored spiral pattern\n17. shiny red\n18. shiny half blue/half red\n19. half black/half light blue\n20. white/red perimter\n21. green snake\n22. red snake\n23. dark blue snake\n24. dark yellow\n25. bright yellow\n26. all black\n27. red small pupil\n28. devil blue/black\n29. white small pupil\n30. glossed over\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_EYE_COLOR](?\\_0x50B56988B170AFDF).**",
      "examples": [
        
      ],
      "hash": "0xEC09DB1B",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xF91DF93B": {
      "name": "TASK_GO_TO_COORD_ANY_MEANS",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "z",
          "type": "float"
        },
        {
          "name": "speed",
          "type": "float"
        },
        {
          "name": "p5",
          "type": "Any"
        },
        {
          "name": "p6",
          "type": "BOOL"
        },
        {
          "name": "walkingStyle",
          "type": "int"
        },
        {
          "name": "p8",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "example from fm_mission_controller\r\nTASK::TASK_GO_TO_COORD_ANY_MEANS(l\\_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_COORD_ANY_MEANS](?\\_0x5BC448CB78FA3E88).**",
      "examples": [
        
      ],
      "hash": "0xF91DF93B",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xCFF6FF66": {
      "name": "SET_PED_RESET_FLAG",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "flagId",
          "type": "int"
        },
        {
          "name": "doReset",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);\r\nKnown values:\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RESET_FLAG](?\\_0xC1E8A365BF3B29F2).**",
      "examples": [
        
      ],
      "hash": "0xCFF6FF66",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xD4F7B05C": {
      "name": "SET_PED_COMPONENT_VARIATION",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped handle."
        },
        {
          "name": "componentId",
          "type": "int",
          "description": "The component that you want to set."
        },
        {
          "name": "drawableId",
          "type": "int",
          "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\\_0x27561561732A7842)."
        },
        {
          "name": "textureId",
          "type": "int",
          "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\\_0x8F7156A3142A6BAD)."
        },
        {
          "name": "paletteId",
          "type": "int",
          "description": "0 to 3."
        }
      ],
      "results": "void",
      "description": "This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of components\n\n**0**: Face\r\n**1**: Mask\r\n**2**: Hair\r\n**3**: Torso\r\n**4**: Leg\r\n**5**: Parachute / bag\r\n**6**: Shoes\r\n**7**: Accessory\r\n**8**: Undershirt\r\n**9**: Kevlar\r\n**10**: Badge\r\n**11**: Torso 2\r\nList of Component IDs\n\n```cpp\n// Components\r\nenum ePedVarComp\r\n{\r\nPV_COMP_INVALID = 0xFFFFFFFF,\r\nPV_COMP_HEAD = 0, // \"HEAD\"\r\nPV_COMP_BERD = 1, // \"BEARD\"\r\nPV_COMP_HAIR = 2, // \"HAIR\"\r\nPV_COMP_UPPR = 3, // \"UPPER\"\r\nPV_COMP_LOWR = 4, // \"LOWER\"\r\nPV_COMP_HAND = 5, // \"HAND\"\r\nPV_COMP_FEET = 6, // \"FEET\"\r\nPV_COMP_TEEF = 7, // \"TEETH\"\r\nPV_COMP_ACCS = 8, // \"ACCESSORIES\"\r\nPV_COMP_TASK = 9, // \"TASK\"\r\nPV_COMP_DECL = 10, // \"DECL\"\r\nPV_COMP_JBIB = 11, // \"JBIB\"\r\nPV_COMP_MAX = 12,\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_COMPONENT_VARIATION](?\\_0x262B14F48D29DE80).**",
      "examples": [
        
      ],
      "hash": "0xD4F7B05C",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x65D4A35D": {
      "name": "TASK_WARP_PED_INTO_VEHICLE",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "seatIndex",
          "type": "int",
          "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
        }
      ],
      "results": "void",
      "description": "TASK_WARP_PED_INTO_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [TASK_WARP_PED_INTO_VEHICLE](?\\_0x9A7D091411C5F684).**",
      "examples": [
        
      ],
      "hash": "0x65D4A35D",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x774A4C54": {
      "name": "SET_PLAYER_MODEL",
      "params": [
        {
          "name": "player",
          "type": "Player",
          "description": "The player to set the model for"
        },
        {
          "name": "model",
          "type": "Hash",
          "description": "The model to use"
        }
      ],
      "results": "void",
      "description": "Set the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this.\r\nAs per usual, make sure to request the model first and wait until it has loaded.\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_MODEL](?\\_0x00A1CADD00108836).**",
      "examples": [
        
      ],
      "hash": "0x774A4C54",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x920C2517": {
      "name": "SET_VEHICLE_BODY_HEALTH",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "value",
          "type": "float"
        }
      ],
      "results": "void",
      "description": "p2 often set to 1000.0 in the decompiled scripts.\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_BODY_HEALTH](?\\_0xB77D05AC8C78AADB).**",
      "examples": [
        
      ],
      "hash": "0x920C2517",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xC866A984": {
      "name": "SET_PED_DEFAULT_COMPONENT_VARIATION",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        }
      ],
      "results": "void",
      "description": "Sets Ped Default Clothes\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_DEFAULT_COMPONENT_VARIATION](?\\_0x45EEE61580806D63).**",
      "examples": [
        
      ],
      "hash": "0xC866A984",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x24877D84": {
      "name": "SET_VEHICLE_ALARM",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "state",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "SET_VEHICLE_ALARM\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_ALARM](?\\_0xCDE5E70C1DDB954C).**",
      "examples": [
        
      ],
      "hash": "0x24877D84",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x83CB5052": {
      "name": "SET_PED_TO_RAGDOLL",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "time1",
          "type": "int",
          "description": "Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1."
        },
        {
          "name": "time2",
          "type": "int"
        },
        {
          "name": "ragdollType",
          "type": "int"
        },
        {
          "name": "p4",
          "type": "BOOL"
        },
        {
          "name": "p5",
          "type": "BOOL"
        },
        {
          "name": "p6",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "p4/p5: Unusued in TU27\n\n### Ragdoll Types\n\n**0**: CTaskNMRelax\r\n**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.\r\n**Else**: CTaskNMBalance\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL](?\\_0xAE99FB955581844A).**",
      "examples": [
        
      ],
      "hash": "0x83CB5052",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x4111BA46": {
      "name": "SET_PED_RANDOM_COMPONENT_VARIATION",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "p1",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "p1 is always 0 in R\\* scripts; and a quick disassembly seems to indicate that p1 is unused.\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_COMPONENT_VARIATION](?\\_0xC8A9481A01E63C28).**",
      "examples": [
        
      ],
      "hash": "0x4111BA46",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x6C8D4458": {
      "name": "_SET_PED_FACE_FEATURE",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped entity"
        },
        {
          "name": "index",
          "type": "int",
          "description": "An integer ranging from 0 to 19"
        },
        {
          "name": "scale",
          "type": "float",
          "description": "A float ranging from -1.0 to 1.0"
        }
      ],
      "results": "void",
      "description": "Sets the various freemode face features, e.g. nose length, chin shape.\r\n**Indexes (From 0 to 19):**\r\nParentheses indicate morph scale/direction as in (-1.0 to 1.0)\n\n*   **0**: Nose Width (Thin/Wide)\n*   **1**: Nose Peak (Up/Down)\n*   **2**: Nose Length (Long/Short)\n*   **3**: Nose Bone Curveness (Crooked/Curved)\n*   **4**: Nose Tip (Up/Down)\n*   **5**: Nose Bone Twist (Left/Right)\n*   **6**: Eyebrow (Up/Down)\n*   **7**: Eyebrow (In/Out)\n*   **8**: Cheek Bones (Up/Down)\n*   **9**: Cheek Sideways Bone Size (In/Out)\n*   **10**: Cheek Bones Width (Puffed/Gaunt)\n*   **11**: Eye Opening (Both) (Wide/Squinted)\n*   **12**: Lip Thickness (Both) (Fat/Thin)\n*   **13**: Jaw Bone Width (Narrow/Wide)\n*   **14**: Jaw Bone Shape (Round/Square)\n*   **15**: Chin Bone (Up/Down)\n*   **16**: Chin Bone Length (In/Out or Backward/Forward)\n*   **17**: Chin Bone Shape (Pointed/Square)\n*   **18**: Chin Hole (Chin Bum)\n*   **19**: Neck Thickness (Thin/Thick)\r\n    **Note:**\r\n    You may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_FACE_FEATURE](?\\_0x71A5C1DBA060049E).**",
      "examples": [
        
      ],
      "hash": "0x6C8D4458",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x80A9E7A7": {
      "name": "TASK_GO_STRAIGHT_TO_COORD",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped handle."
        },
        {
          "name": "x",
          "type": "float",
          "description": "The x coordinate."
        },
        {
          "name": "y",
          "type": "float",
          "description": "The y coordinate."
        },
        {
          "name": "z",
          "type": "float",
          "description": "The z coordinate."
        },
        {
          "name": "speed",
          "type": "float",
          "description": "The ped movement speed."
        },
        {
          "name": "timeout",
          "type": "int",
          "description": "\\-1 , other values appear to break the ped movement."
        },
        {
          "name": "targetHeading",
          "type": "float",
          "description": "The heading you want the ped to be on x,y,z coord."
        },
        {
          "name": "distanceToSlide",
          "type": "float",
          "description": "The distance from x,y,z where the ped will start sliding."
        }
      ],
      "results": "void",
      "description": "TASK_GO_STRAIGHT_TO_COORD\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_STRAIGHT_TO_COORD](?\\_0xD76B57B44F1E6F8B).**",
      "examples": [
        
      ],
      "hash": "0x80A9E7A7",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x2B39128B": {
      "name": "SET_VEHICLE_DIRT_LEVEL",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set."
        },
        {
          "name": "dirtLevel",
          "type": "float",
          "description": "A number between 0.0 and 15.0 representing the vehicles dirt level."
        }
      ],
      "results": "void",
      "description": "Sets the dirt level of the passed vehicle.\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DIRT_LEVEL](?\\_0x79D3B596FE44EE8B).**",
      "examples": [
        
      ],
      "hash": "0x2B39128B",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xA557AEAD": {
      "name": "SET_VEHICLE_COLOUR_COMBINATION",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to modify."
        },
        {
          "name": "colorCombination",
          "type": "int",
          "description": "One of the default color values of the vehicle."
        }
      ],
      "results": "void",
      "description": "Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).\r\nRange of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_COLOUR_COMBINATION](?\\_0x33E8CD3322E2FE31).**",
      "examples": [
        
      ],
      "hash": "0xA557AEAD",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x60746B88": {
      "name": "SET_PED_HEAD_BLEND_DATA",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped entity"
        },
        {
          "name": "shapeFirstID",
          "type": "int",
          "description": "Controls the shape of the first ped's face"
        },
        {
          "name": "shapeSecondID",
          "type": "int",
          "description": "Controls the shape of the second ped's face"
        },
        {
          "name": "shapeThirdID",
          "type": "int",
          "description": "Controls the shape of the third ped's face"
        },
        {
          "name": "skinFirstID",
          "type": "int",
          "description": "Controls the first id's skin tone"
        },
        {
          "name": "skinSecondID",
          "type": "int",
          "description": "Controls the second id's skin tone"
        },
        {
          "name": "skinThirdID",
          "type": "int",
          "description": "Controls the third id's skin tone"
        },
        {
          "name": "shapeMix",
          "type": "float",
          "description": "0.0 - 1.0 Of whose characteristics to take Mother -> Father (shapeFirstID and shapeSecondID)"
        },
        {
          "name": "skinMix",
          "type": "float",
          "description": "0.0 - 1.0 Of whose characteristics to take Mother -> Father (skinFirstID and skinSecondID)"
        },
        {
          "name": "thirdMix",
          "type": "float",
          "description": "Overrides the others in favor of the third IDs."
        },
        {
          "name": "isParent",
          "type": "BOOL",
          "description": "IsParent is set for \"children\" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise."
        }
      ],
      "results": "void",
      "description": "For more info please refer to [this](https://gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained) topic.\r\n**Other information:**\r\nIDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br>\r\nThis native function is often called prior to calling natives such as:\n\n*   [`SetPedHairColor`](#0xBB43F090)\n*   [`SetPedHeadOverlayColor`](#0x78935A27)\n*   [`SetPedHeadOverlay`](#0xD28DBA90)\n*   [`SetPedFaceFeature`](#0x6C8D4458)\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_BLEND_DATA](?\\_0x9414E18B9434C2FE).**",
      "examples": [
        
      ],
      "hash": "0x60746B88",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x829F2E2": {
      "name": "SET_PED_PROP_INDEX",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped handle."
        },
        {
          "name": "componentId",
          "type": "int",
          "description": "The component that you want to set. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
        },
        {
          "name": "drawableId",
          "type": "int",
          "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)."
        },
        {
          "name": "textureId",
          "type": "int",
          "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171)."
        },
        {
          "name": "attach",
          "type": "BOOL",
          "description": "Attached or not."
        }
      ],
      "results": "void",
      "description": "This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of props\n\n**0**: Hats\r\n**1**: Glasses\r\n**2**: Ears\r\n**6**: Watches\r\n**7**: Bracelets\r\nList of Prop IDs\n\n```cpp\n// Props\r\nenum eAnchorPoints\r\n{\r\nANCHOR_HEAD = 0, // \"p_head\"\r\nANCHOR_EYES = 1, // \"p_eyes\"\r\nANCHOR_EARS = 2, // \"p_ears\"\r\nANCHOR_MOUTH = 3, // \"p_mouth\"\r\nANCHOR_LEFT_HAND = 4, // \"p_lhand\"\r\nANCHOR_RIGHT_HAND = 5, // \"p_rhand\"\r\nANCHOR_LEFT_WRIST = 6, // \"p_lwrist\"\r\nANCHOR_RIGHT_WRIST = 7, // \"p_rwrist\"\r\nANCHOR_HIP = 8, // \"p_lhip\"\r\nANCHOR_LEFT_FOOT = 9, // \"p_lfoot\"\r\nANCHOR_RIGHT_FOOT = 10, // \"p_rfoot\"\r\nANCHOR_PH_L_HAND = 11, // \"ph_lhand\"\r\nANCHOR_PH_R_HAND = 12, // \"ph_rhand\"\r\nNUM_ANCHORS = 13,\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_PROP_INDEX](?\\_0x93376B65A266EB5F).**",
      "examples": [
        
      ],
      "hash": "0x829F2E2",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x57F24253": {
      "name": "SET_VEHICLE_COLOURS",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "colorPrimary",
          "type": "int"
        },
        {
          "name": "colorSecondary",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "colorPrimary & colorSecondary are the paint indexes for the vehicle.\r\nFor a list of valid paint indexes, view: pastebin.com/pwHci0xK\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_COLOURS](?\\_0x4F1D4BE3A7F24601).**",
      "examples": [
        
      ],
      "hash": "0x57F24253",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x8147FEA7": {
      "name": "SET_VEHICLE_DOOR_BROKEN",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "doorIndex",
          "type": "int"
        },
        {
          "name": "deleteDoor",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DOOR_BROKEN](?\\_0xD4D4F6A4AB575A33).**",
      "examples": [
        
      ],
      "hash": "0x8147FEA7",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xD28DBA90": {
      "name": "SET_PED_HEAD_OVERLAY",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The ped entity"
        },
        {
          "name": "overlayID",
          "type": "int",
          "description": "The overlay id displayed up above."
        },
        {
          "name": "index",
          "type": "int",
          "description": "An integer representing the index (from 0 to `_GET_NUM_OVERLAY_VALUES(overlayID)-1`)"
        },
        {
          "name": "opacity",
          "type": "float",
          "description": "A float ranging from 0.0 to 1.0"
        }
      ],
      "results": "void",
      "description": "```\nOverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.\r\noverlayID       Part                  Index, to disable\r\n0               Blemishes             0 - 23, 255\r\n1               Facial Hair           0 - 28, 255\r\n2               Eyebrows              0 - 33, 255\r\n3               Ageing                0 - 14, 255\r\n4               Makeup                0 - 74, 255\r\n5               Blush                 0 - 6, 255\r\n6               Complexion            0 - 11, 255\r\n7               Sun Damage            0 - 10, 255\r\n8               Lipstick              0 - 9, 255\r\n9               Moles/Freckles        0 - 17, 255\r\n10              Chest Hair            0 - 16, 255\r\n11              Body Blemishes        0 - 11, 255\r\n12              Add Body Blemishes    0 - 1, 255\n```\n\n**Note:**\r\nYou may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_OVERLAY](?\\_0x48F44967FA05CC1E).**",
      "examples": [
        
      ],
      "hash": "0xD28DBA90",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xD17AFCD8": {
      "name": "SET_PLAYER_CONTROL",
      "params": [
        {
          "name": "player",
          "type": "Player"
        },
        {
          "name": "bHasControl",
          "type": "BOOL"
        },
        {
          "name": "flags",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "Flags:\r\nSPC_AMBIENT_SCRIPT = (1 << 1),\r\nSPC_CLEAR_TASKS = (1 << 2),\r\nSPC_REMOVE_FIRES = (1 << 3),\r\nSPC_REMOVE_EXPLOSIONS = (1 << 4),\r\nSPC_REMOVE_PROJECTILES = (1 << 5),\r\nSPC_DEACTIVATE_GADGETS = (1 << 6),\r\nSPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),\r\nSPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),\r\nSPC_ALLOW_PLAYER_DAMAGE = (1 << 9),\r\nSPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),\r\nSPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),\r\nSPC_ALLOW_PAD_SHAKE = (1 << 12)\r\nSee: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_CONTROL](?\\_0x8D32347D6D4C40A2).**",
      "examples": [
        
      ],
      "hash": "0xD17AFCD8",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xDF70B41B": {
      "name": "SET_ENTITY_COORDS",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "description": "The entity to change coordinates for."
        },
        {
          "name": "xPos",
          "type": "float",
          "description": "The X coordinate."
        },
        {
          "name": "yPos",
          "type": "float",
          "description": "The Y coordinate."
        },
        {
          "name": "zPos",
          "type": "float",
          "description": "The Z coordinate, ground level."
        },
        {
          "name": "alive",
          "type": "BOOL",
          "description": "Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive."
        },
        {
          "name": "deadFlag",
          "type": "BOOL",
          "description": "Whether to disable physics for dead peds, too, and not just living peds."
        },
        {
          "name": "ragdollFlag",
          "type": "BOOL",
          "description": "A special flag used for ragdolling peds."
        },
        {
          "name": "clearArea",
          "type": "BOOL",
          "description": "Whether to clear any entities in the target area."
        }
      ],
      "results": "void",
      "description": "Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_COORDS](?\\_0x06843DA7060A026B).**",
      "examples": [
        
      ],
      "hash": "0xDF70B41B",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x8A632BD8": {
      "name": "TASK_REACT_AND_FLEE_PED",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "fleeTarget",
          "type": "Ped"
        }
      ],
      "results": "void",
      "description": "TASK_REACT_AND_FLEE_PED\n\n**This is the server-side RPC native equivalent of the client native [TASK_REACT_AND_FLEE_PED](?\\_0x72C896464915D1B1).**",
      "examples": [
        
      ],
      "hash": "0x8A632BD8",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x5AB552C6": {
      "name": "TASK_PLAY_ANIM",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "animDictionary",
          "type": "char*"
        },
        {
          "name": "animationName",
          "type": "char*"
        },
        {
          "name": "blendInSpeed",
          "type": "float"
        },
        {
          "name": "blendOutSpeed",
          "type": "float"
        },
        {
          "name": "duration",
          "type": "int"
        },
        {
          "name": "flag",
          "type": "int"
        },
        {
          "name": "playbackRate",
          "type": "float"
        },
        {
          "name": "lockX",
          "type": "BOOL"
        },
        {
          "name": "lockY",
          "type": "BOOL"
        },
        {
          "name": "lockZ",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "[Animations list](https://alexguirre.github.io/animations-list/)\n\n```\nfloat blendInSpeed > normal speed is 8.0f\r\n----------------------\r\nfloat blendOutSpeed > normal speed is 8.0f\r\n----------------------\r\nint duration: time in millisecond\r\n----------------------\r\n-1 _ _ _ _ _ _ _> Default (see flag)\r\n0 _ _ _ _ _ _ _ > Not play at all\r\nSmall value _ _ > Slow down animation speed\r\nOther _ _ _ _ _ > freeze player control until specific time (ms) has\r\n_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be\r\n_ _ _ _ _ _ _ _ _ controllable.)\r\nint flag:\r\n----------------------\r\nenum eAnimationFlags\r\n{\r\nANIM_FLAG_NORMAL = 0,\r\nANIM_FLAG_REPEAT = 1,\r\nANIM_FLAG_STOP_LAST_FRAME = 2,\r\nANIM_FLAG_UPPERBODY = 16,\r\nANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,\r\nANIM_FLAG_CANCELABLE = 120,\r\n};\r\nOdd number : loop infinitely\r\nEven number : Freeze at last frame\r\nMultiple of 4: Freeze at last frame but controllable\r\n01 to 15 > Full body\r\n10 to 31 > Upper body\r\n32 to 47 > Full body > Controllable\r\n48 to 63 > Upper body > Controllable\r\n...\r\n001 to 255 > Normal\r\n256 to 511 > Garbled\r\n...\r\nplaybackRate:\r\nvalues are between 0.0 and 1.0\r\nlockX:\r\n0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3\r\n> 1 for mini@sprunk\r\nlockY:\r\n0 in most cases\r\n1 for missfam5_yoga, missfra1mcs_2_crew_react\r\nlockZ:\r\n0 for single player\r\nCan be 1 but only for MP\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM](?\\_0xEA47FE3719165B94).**",
      "examples": [
        
      ],
      "hash": "0x5AB552C6",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xB8689B4E": {
      "name": "TASK_ENTER_VEHICLE",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "timeout",
          "type": "int"
        },
        {
          "name": "seatIndex",
          "type": "int",
          "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
        },
        {
          "name": "speed",
          "type": "float"
        },
        {
          "name": "flag",
          "type": "int"
        },
        {
          "name": "p6",
          "type": "Any"
        }
      ],
      "results": "void",
      "description": "speed 1.0 = walk, 2.0 = run\r\np5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle\r\np6 is always 0\n\n**This is the server-side RPC native equivalent of the client native [TASK_ENTER_VEHICLE](?\\_0xC20E50AA46D09CA8).**",
      "examples": [
        
      ],
      "hash": "0xB8689B4E",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x400F9556": {
      "name": "SET_VEHICLE_NUMBER_PLATE_TEXT",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle",
          "description": "The vehicle to set the plate for"
        },
        {
          "name": "plateText",
          "type": "char*",
          "description": "The text to set the plate to, 8 chars maximum"
        }
      ],
      "results": "void",
      "description": "SET_VEHICLE_NUMBER_PLATE_TEXT\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_NUMBER_PLATE_TEXT](?\\_0x95A88F0B409CDA47).**",
      "examples": [
        
      ],
      "hash": "0x400F9556",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x2B84D1C4": {
      "name": "TASK_DRIVE_BY",
      "params": [
        {
          "name": "driverPed",
          "type": "Ped"
        },
        {
          "name": "targetPed",
          "type": "Ped"
        },
        {
          "name": "targetVehicle",
          "type": "Vehicle"
        },
        {
          "name": "targetX",
          "type": "float"
        },
        {
          "name": "targetY",
          "type": "float"
        },
        {
          "name": "targetZ",
          "type": "float"
        },
        {
          "name": "distanceToShoot",
          "type": "float"
        },
        {
          "name": "pedAccuracy",
          "type": "int"
        },
        {
          "name": "p8",
          "type": "BOOL"
        },
        {
          "name": "firingPattern",
          "type": "Hash"
        }
      ],
      "results": "void",
      "description": "Example:\r\nTASK::TASK_DRIVE_BY(l\\_467\\[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});\r\nNeeds working example. Doesn't seem to do anything.\r\nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.\r\nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.\r\nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.\n\n**This is the server-side RPC native equivalent of the client native [TASK_DRIVE_BY](?\\_0x2F8AF0E82773A171).**",
      "examples": [
        
      ],
      "hash": "0x2B84D1C4",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xDBDD79FA": {
      "name": "TASK_LEAVE_ANY_VEHICLE",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "p1",
          "type": "int"
        },
        {
          "name": "flags",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\\_0xD3DBCE61A490BE02)\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_ANY_VEHICLE](?\\_0x504D54DF3F6F2247).**",
      "examples": [
        
      ],
      "hash": "0xDBDD79FA",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x3DDEB0E6": {
      "name": "TASK_PLAY_ANIM_ADVANCED",
      "params": [
        {
          "name": "ped",
          "type": "Ped",
          "description": "The target ped"
        },
        {
          "name": "animDict",
          "type": "char*",
          "description": "Name of the animation dictionary"
        },
        {
          "name": "animName",
          "type": "char*",
          "description": "Name of the animation"
        },
        {
          "name": "posX",
          "type": "float",
          "description": "Initial X position of the task"
        },
        {
          "name": "posY",
          "type": "float",
          "description": "Initial Y position of the task"
        },
        {
          "name": "posZ",
          "type": "float",
          "description": "Initial Z position of the task"
        },
        {
          "name": "rotX",
          "type": "float",
          "description": "Initial X rotation of the task, doesn't seem to have any effect"
        },
        {
          "name": "rotY",
          "type": "float",
          "description": "Initial Y rotation of the task, doesn't seem to have any effect"
        },
        {
          "name": "rotZ",
          "type": "float",
          "description": "Initial Z rotation of the task"
        },
        {
          "name": "animEnterSpeed",
          "type": "float",
          "description": "Adjust character speed to fully enter animation"
        },
        {
          "name": "animExitSpeed",
          "type": "float",
          "description": "Adjust character speed to fully exit animation (useless `ClearPedTasksImmediately()` is called)"
        },
        {
          "name": "duration",
          "type": "int",
          "description": "Time in milliseconds"
        },
        {
          "name": "flag",
          "type": "Any"
        },
        {
          "name": "animTime",
          "type": "float",
          "description": "Value between 0.0 and 1.0, lets you start an animation from the given point"
        },
        {
          "name": "p14",
          "type": "Any"
        },
        {
          "name": "p15",
          "type": "Any"
        }
      ],
      "results": "void",
      "description": "It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).\r\n[Animations list](https://alexguirre.github.io/animations-list/)\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM_ADVANCED](?\\_0x83CDB10EA29B370B).**",
      "examples": [
        
      ],
      "hash": "0x3DDEB0E6",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xAC0631C9": {
      "name": "TASK_SHOOT_AT_ENTITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        },
        {
          "name": "target",
          "type": "Entity"
        },
        {
          "name": "duration",
          "type": "int"
        },
        {
          "name": "firingPattern",
          "type": "Hash"
        }
      ],
      "results": "void",
      "description": "//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds\r\nEntity aimedentity;\r\nPlayer player = PLAYER::PLAYER_ID();\r\nPLAYER::\\_GET_AIMED_ENTITY(player, \\&aimedentity);\r\n//bg is an array of peds\r\nTASK::TASK_SHOOT_AT_ENTITY(bg\\[i], aimedentity, 5000, MISC::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));\r\nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.\r\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_ENTITY](?\\_0x08DA95E8298AE772).**",
      "examples": [
        
      ],
      "hash": "0xAC0631C9",
      "ns": "CFX",
      "apiset": "server"
    },
    "0xCB0D8932": {
      "name": "TASK_COMBAT_PED",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "targetPed",
          "type": "Ped"
        },
        {
          "name": "p2",
          "type": "int"
        },
        {
          "name": "p3",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "Makes the specified ped attack the target ped.\r\np2 should be 0\r\np3 should be 16\n\n**This is the server-side RPC native equivalent of the client native [TASK_COMBAT_PED](?\\_0xF166E48407BAC484).**",
      "examples": [
        
      ],
      "hash": "0xCB0D8932",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x601C22E3": {
      "name": "TASK_SHOOT_AT_COORD",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "z",
          "type": "float"
        },
        {
          "name": "duration",
          "type": "int"
        },
        {
          "name": "firingPattern",
          "type": "Hash"
        }
      ],
      "results": "void",
      "description": "Firing Pattern Hash Information: https://pastebin.com/Px036isB\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_COORD](?\\_0x46A6CC01E0826106).**",
      "examples": [
        
      ],
      "hash": "0x601C22E3",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x374827C2": {
      "name": "TASK_GO_TO_ENTITY",
      "params": [
        {
          "name": "entity",
          "type": "Entity"
        },
        {
          "name": "target",
          "type": "Entity"
        },
        {
          "name": "duration",
          "type": "int"
        },
        {
          "name": "distance",
          "type": "float"
        },
        {
          "name": "speed",
          "type": "float"
        },
        {
          "name": "p5",
          "type": "float"
        },
        {
          "name": "p6",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0\r\nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.\r\nExample: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)\r\nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_ENTITY](?\\_0x6A071245EB0D1882).**",
      "examples": [
        
      ],
      "hash": "0x374827C2",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x8DCC19C5": {
      "name": "TASK_HANDS_UP",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "duration",
          "type": "int"
        },
        {
          "name": "facingPed",
          "type": "Ped"
        },
        {
          "name": "p3",
          "type": "int"
        },
        {
          "name": "p4",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "In the scripts, p3 was always -1.\r\np3 seems to be duration or timeout of turn animation.\r\nAlso facingPed can be 0 or -1 so ped will just raise hands up.\n\n**This is the server-side RPC native equivalent of the client native [TASK_HANDS_UP](?\\_0xF2EAB31979A7F910).**",
      "examples": [
        
      ],
      "hash": "0x8DCC19C5",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x7B1141C6": {
      "name": "TASK_LEAVE_VEHICLE",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "flags",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "Flags from decompiled scripts:\r\n0 = normal exit and closes door.\r\n1 = normal exit and closes door.\r\n16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)\r\n64 = normal exit and closes door, maybe a bit slower animation than 0.\r\n256 = normal exit but does not close the door.\r\n4160 = ped is throwing himself out, even when the vehicle is still.\r\n262144 = ped moves to passenger seat first, then exits normally\r\nOthers to be tried out: 320, 512, 131072.\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_VEHICLE](?\\_0xD3DBCE61A490BE02).**",
      "examples": [
        
      ],
      "hash": "0x7B1141C6",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x9CFBE10D": {
      "name": "SET_PED_CONFIG_FLAG",
      "params": [
        {
          "name": "ped",
          "type": "Ped"
        },
        {
          "name": "flagId",
          "type": "int"
        },
        {
          "name": "value",
          "type": "BOOL"
        }
      ],
      "results": "void",
      "description": "cpp\r\n// Potential names and hash collisions included as comments\r\nenum ePedConfigFlags {\r\n\\_0x67D1A445 = 0,\r\n\\_0xC63DE95E = 1,\r\nCPED_CONFIG_FLAG_NoCriticalHits = 2,\r\nCPED_CONFIG_FLAG_DrownsInWater = 3,\r\nCPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,\r\n\\_0x37D196F4 = 5,\r\n\\_0xE2462399 = 6,\r\nCPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,\r\n\\_0xEDDEB838 = 8,\r\n\\_0xB398B6FD = 9,\r\n\\_0xF6664E68 = 10,\r\n\\_0xA05E7CA3 = 11,\r\n\\_0xCE394045 = 12,\r\nCPED_CONFIG_FLAG_NeverLeavesGroup = 13,\r\n\\_0xCD8D1411 = 14,\r\n\\_0xB031F1A9 = 15,\r\n\\_0xFE65BEE3 = 16,\r\nCPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,\r\n\\_0x380165BD = 18,\r\n\\_0x07C045C7 = 19,\r\n\\_0x583B5E2D = 20,\r\n\\_0x475EDA58 = 21,\r\n\\_0x8629D05B = 22,\r\n\\_0x1522968B = 23,\r\nCPED_CONFIG_FLAG_IgnoreSeenMelee = 24,\r\n\\_0x4CC09C4B = 25,\r\n\\_0x034F3053 = 26,\r\n\\_0xD91BA7CC = 27,\r\n\\_0x5C8DC66E = 28,\r\n\\_0x8902EAA0 = 29,\r\n\\_0x6580B9D2 = 30,\r\n\\_0x0EF7A297 = 31,\r\n\\_0x6BF86E5B = 32,\r\nCPED_CONFIG_FLAG_DieWhenRagdoll = 33,\r\nCPED_CONFIG_FLAG_HasHelmet = 34,\r\nCPED_CONFIG_FLAG_UseHelmet = 35,\r\n\\_0xEEB3D630 = 36,\r\n\\_0xB130D17B = 37,\r\n\\_0x5F071200 = 38,\r\nCPED_CONFIG_FLAG_DisableEvasiveDives = 39,\r\n\\_0xC287AAFF = 40,\r\n\\_0x203328CC = 41,\r\nCPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,\r\nCPED_CONFIG_FLAG_DisablePlayerLockon = 43,\r\nCPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,\r\n\\_0xEC4A8ACF = 45,\r\n\\_0xDB115BFA = 46,\r\nCPED_CONFIG_FLAG_PedBeingDeleted = 47,\r\nCPED_CONFIG_FLAG_BlockWeaponSwitching = 48,\r\n\\_0xF8E99565 = 49,\r\n\\_0xDD17FEE6 = 50,\r\n\\_0x7ED9B2C9 = 51,\r\n\\_0x655E8618 = 52,\r\n\\_0x5A6C1F6E = 53,\r\n\\_0xD749FC41 = 54,\r\n\\_0x357F63F3 = 55,\r\n\\_0xC5E60961 = 56,\r\n\\_0x29275C3E = 57,\r\nCPED_CONFIG_FLAG_IsFiring = 58,\r\nCPED_CONFIG_FLAG_WasFiring = 59,\r\nCPED_CONFIG_FLAG_IsStanding = 60,\r\nCPED_CONFIG_FLAG_WasStanding = 61,\r\nCPED_CONFIG_FLAG_InVehicle = 62,\r\nCPED_CONFIG_FLAG_OnMount = 63,\r\nCPED_CONFIG_FLAG_AttachedToVehicle = 64,\r\nCPED_CONFIG_FLAG_IsSwimming = 65,\r\nCPED_CONFIG_FLAG_WasSwimming = 66,\r\nCPED_CONFIG_FLAG_IsSkiing = 67,\r\nCPED_CONFIG_FLAG_IsSitting = 68,\r\nCPED_CONFIG_FLAG_KilledByStealth = 69,\r\nCPED_CONFIG_FLAG_KilledByTakedown = 70,\r\nCPED_CONFIG_FLAG_Knockedout = 71,\r\n\\_0x3E3C4560 = 72,\r\n\\_0x2994C7B7 = 73,\r\n\\_0x6D59D275 = 74,\r\nCPED_CONFIG_FLAG_UsingCoverPoint = 75,\r\nCPED_CONFIG_FLAG_IsInTheAir = 76,\r\n\\_0x2D493FB7 = 77,\r\nCPED_CONFIG_FLAG_IsAimingGun = 78,\r\n\\_0x14D69875 = 79,\r\n\\_0x40B05311 = 80,\r\n\\_0x8B230BC5 = 81,\r\n\\_0xC74E5842 = 82,\r\n\\_0x9EA86147 = 83,\r\n\\_0x674C746C = 84,\r\n\\_0x3E56A8C2 = 85,\r\n\\_0xC144A1EF = 86,\r\n\\_0x0548512D = 87,\r\n\\_0x31C93909 = 88,\r\n\\_0xA0269315 = 89,\r\n\\_0xD4D59D4D = 90,\r\n\\_0x411D4420 = 91,\r\n\\_0xDF4AEF0D = 92,\r\nCPED_CONFIG_FLAG_ForcePedLoadCover = 93,\r\n\\_0x300E4CD3 = 94,\r\n\\_0xF1C5BF04 = 95,\r\n\\_0x89C2EF13 = 96,\r\nCPED_CONFIG_FLAG_VaultFromCover = 97,\r\n\\_0x02A852C8 = 98,\r\n\\_0x3D9407F1 = 99,\r\n\\_0x319B4558 = 100,\r\nCPED_CONFIG_FLAG_ForcedAim = 101,\r\n\\_0xB942D71A = 102,\r\n\\_0xD26C55A8 = 103,\r\n\\_0xB89E703B = 104,\r\nCPED_CONFIG_FLAG_ForceReload = 105,\r\n\\_0xD9E73DA2 = 106,\r\n\\_0xFF71DC2C = 107,\r\n\\_0x1E27E8D8 = 108,\r\n\\_0xF2C53966 = 109,\r\n\\_0xC4DBE247 = 110,\r\n\\_0x83C0A4BF = 111,\r\n\\_0x0E0FAF8C = 112,\r\n\\_0x26616660 = 113,\r\n\\_0x43B80B79 = 114,\r\n\\_0x0D2A9309 = 115,\r\n\\_0x12C1C983 = 116,\r\nCPED_CONFIG_FLAG_BumpedByPlayer = 117,\r\n\\_0xE586D504 = 118,\r\n\\_0x52374204 = 119,\r\nCPED_CONFIG_FLAG_IsHandCuffed = 120,\r\nCPED_CONFIG_FLAG_IsAnkleCuffed = 121,\r\nCPED_CONFIG_FLAG_DisableMelee = 122,\r\n\\_0xFE714397 = 123,\r\n\\_0xB3E660BD = 124,\r\n\\_0x5FED6BFD = 125,\r\n\\_0xC9D6F66F = 126,\r\n\\_0x519BC986 = 127,\r\nCPED_CONFIG_FLAG_CanBeAgitated = 128,\r\n\\_0x9A4B617C = 129, // CPED_CONFIG_FLAG_FaceDirInsult\r\n\\_0xDAB70E9F = 130,\r\n\\_0xE569438A = 131,\r\n\\_0xBBC77D6D = 132,\r\n\\_0xCB59EF0F = 133,\r\n\\_0x8C5EA971 = 134,\r\nCPED_CONFIG_FLAG_IsScuba = 135,\r\nCPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,\r\n\\_0xDCE59B58 = 137,\r\nCPED_CONFIG_FLAG_RidingTrain = 138,\r\nCPED_CONFIG_FLAG_ArrestResult = 139,\r\nCPED_CONFIG_FLAG_CanAttackFriendly = 140,\r\n\\_0x98A4BE43 = 141,\r\n\\_0x6901E731 = 142,\r\n\\_0x9EC9BF6C = 143,\r\n\\_0x42841A8F = 144,\r\nCPED_CONFIG_FLAG_ShootingAnimFlag = 145,\r\nCPED_CONFIG_FLAG_DisableLadderClimbing = 146,\r\nCPED_CONFIG_FLAG_StairsDetected = 147,\r\nCPED_CONFIG_FLAG_SlopeDetected = 148,\r\n\\_0x1A15670B = 149,\r\n\\_0x61786EE5 = 150,\r\n\\_0xCB9186BD = 151,\r\n\\_0xF0710152 = 152,\r\n\\_0x43DFE310 = 153,\r\n\\_0xC43C624E = 154,\r\nCPED_CONFIG_FLAG_CanPerformArrest = 155,\r\nCPED_CONFIG_FLAG_CanPerformUncuff = 156,\r\nCPED_CONFIG_FLAG_CanBeArrested = 157,\r\n\\_0xF7960FF5 = 158,\r\n\\_0x59564113 = 159,\r\n\\_0x0C6C3099 = 160,\r\n\\_0x645F927A = 161,\r\n\\_0xA86549B9 = 162,\r\n\\_0x8AAF337A = 163,\r\n\\_0x13BAA6E7 = 164,\r\n\\_0x5FB9D1F5 = 165,\r\nCPED_CONFIG_FLAG_IsInjured = 166,\r\n\\_0x6398A20B = 167,\r\n\\_0xD8072639 = 168,\r\n\\_0xA05B1845 = 169,\r\n\\_0x83F6D220 = 170,\r\n\\_0xD8430331 = 171,\r\n\\_0x4B547520 = 172,\r\n\\_0xE66E1406 = 173,\r\n\\_0x1C4BFE0C = 174,\r\n\\_0x90008BFA = 175,\r\n\\_0x07C7A910 = 176,\r\n\\_0xF15F8191 = 177,\r\n\\_0xCE4E8BE2 = 178,\r\n\\_0x1D46E4F2 = 179,\r\nCPED_CONFIG_FLAG_IsInCustody = 180,\r\n\\_0xE4FD9B3A = 181,\r\n\\_0x67AE0812 = 182,\r\nCPED_CONFIG_FLAG_IsAgitated = 183,\r\nCPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,\r\n\\_0x7B2D325E = 185,\r\nCPED_CONFIG_FLAG_EnableWeaponBlocking = 186,\r\nCPED_CONFIG_FLAG_HasHurtStarted = 187,\r\nCPED_CONFIG_FLAG_DisableHurt = 188,\r\nCPED_CONFIG_FLAG_PlayerIsWeird = 189,\r\n\\_0x32FC208B = 190,\r\n\\_0x0C296E5A = 191,\r\n\\_0xE63B73EC = 192,\r\n\\_0x04E9CC80 = 193,\r\nCPED_CONFIG_FLAG_UsingScenario = 194,\r\nCPED_CONFIG_FLAG_VisibleOnScreen = 195,\r\n\\_0xD88C58A1 = 196,\r\n\\_0x5A3DCF43 = 197, // CPED_CONFIG_FLAG_AvoidUnderSide\r\n\\_0xEA02B420 = 198,\r\n\\_0x3F559CFF = 199,\r\n\\_0x8C55D029 = 200,\r\n\\_0x5E6466F6 = 201,\r\n\\_0xEB5AD706 = 202,\r\n\\_0x0EDDDDE7 = 203,\r\n\\_0xA64F7B1D = 204,\r\n\\_0x48532CBA = 205,\r\n\\_0xAA25A9E7 = 206,\r\n\\_0x415B26B9 = 207,\r\nCPED_CONFIG_FLAG_DisableExplosionReactions = 208,\r\nCPED_CONFIG_FLAG_DodgedPlayer = 209,\r\n\\_0x67405504 = 210,\r\n\\_0x75DDD68C = 211,\r\n\\_0x2AD879B4 = 212,\r\n\\_0x51486F91 = 213,\r\n\\_0x32F79E21 = 214,\r\n\\_0xBF099213 = 215,\r\n\\_0x054AC8E2 = 216,\r\n\\_0x14E495CC = 217,\r\n\\_0x3C7DF9DF = 218,\r\n\\_0x848FFEF2 = 219,\r\nCPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,\r\n\\_0x2618E1CF = 221,\r\n\\_0x84F722FA = 222,\r\n\\_0xD1B87B1F = 223,\r\n\\_0x728AA918 = 224,\r\nCPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,\r\nCPED_CONFIG_FLAG_DisablePedAvoidance = 226,\r\n\\_0x59E91185 = 227,\r\n\\_0x1EA7225F = 228,\r\nCPED_CONFIG_FLAG_DisablePanicInVehicle = 229,\r\n\\_0x6DCA7D88 = 230,\r\n\\_0xFC3E572D = 231,\r\n\\_0x08E9F9CF = 232,\r\n\\_0x2D3BA52D = 233,\r\n\\_0xFD2F53EA = 234,\r\n\\_0x31A1B03B = 235,\r\nCPED_CONFIG_FLAG_IsHoldingProp = 236,\r\n\\_0x82ED0A66 = 237, // CPED_CONFIG_FLAG_BlocksPathingWhenDead\r\n\\_0xCE57C9A3 = 238,\r\n\\_0x26149198 = 239,\r\n\\_0x1B33B598 = 240,\r\n\\_0x719B6E87 = 241,\r\n\\_0x13E8E8E8 = 242,\r\n\\_0xF29739AE = 243,\r\n\\_0xABEA8A74 = 244,\r\n\\_0xB60EA2BA = 245,\r\n\\_0x536B0950 = 246,\r\n\\_0x0C754ACA = 247,\r\nCPED_CONFIG_FLAG_DisableVehicleSeatRandomAnimations = 248,\r\n\\_0x12659168 = 249,\r\n\\_0x1BDF2F04 = 250,\r\n\\_0x7728FAA3 = 251,\r\n\\_0x6A807ED8 = 252,\r\nCPED_CONFIG_FLAG_OnStairs = 253,\r\n\\_0xE1A2F73F = 254,\r\n\\_0x5B3697C8 = 255,\r\n\\_0xF1EB20A9 = 256,\r\n\\_0x8B7DF407 = 257,\r\n\\_0x329DCF1A = 258,\r\n\\_0x8D90DD1B = 259,\r\n\\_0xB8A292B7 = 260,\r\n\\_0x8374B087 = 261,\r\n\\_0x2AF558F0 = 262,\r\n\\_0x82251455 = 263,\r\n\\_0x30CF498B = 264,\r\n\\_0xE1CD50AF = 265,\r\n\\_0x72E4AE48 = 266,\r\n\\_0xC2657EA1 = 267,\r\n\\_0x29FF6030 = 268,\r\n\\_0x8248A5EC = 269,\r\nCPED_CONFIG_FLAG_OnStairSlope = 270,\r\n\\_0xA0897933 = 271,\r\nCPED_CONFIG_FLAG_DontBlipCop = 272,\r\nCPED_CONFIG_FLAG_ClimbedShiftedFence = 273,\r\n\\_0xF7823618 = 274,\r\n\\_0xDC305CCE = 275, // CPED_CONFIG_FLAG_KillWhenTrapped\r\nCPED_CONFIG_FLAG_EdgeDetected = 276,\r\n\\_0x92B67896 = 277,\r\n\\_0xCAD677C9 = 278,\r\nCPED_CONFIG_FLAG_AvoidTearGas = 279,\r\n\\_0x5276AC7B = 280,\r\n\\_0x1032692A = 281,\r\n\\_0xDA23E7F1 = 282,\r\n\\_0x9139724D = 283,\r\n\\_0xA1457461 = 284,\r\n\\_0x4186E095 = 285,\r\n\\_0xAC68E2EB = 286,\r\nCPED_CONFIG_FLAG_RagdollingOnBoat = 287,\r\nCPED_CONFIG_FLAG_HasBrandishedWeapon = 288,\r\n\\_0x1B9EE8A1 = 289,\r\n\\_0xF3F5758C = 290,\r\n\\_0x2A9307F1 = 291,\r\n\\_0x7403D216 = 292,\r\n\\_0xA06A3C6C = 293,\r\nCPED_CONFIG_FLAG_DisableShockingEvents = 294,\r\n\\_0xF8DA25A5 = 295,\r\n\\_0x7EF55802 = 296,\r\n\\_0xB31F1187 = 297,\r\n\\_0x84315402 = 298,\r\n\\_0x0FD69867 = 299,\r\n\\_0xC7829B67 = 300,\r\nCPED_CONFIG_FLAG_DisablePedConstraints = 301,\r\n\\_0x6D23CF25 = 302,\r\n\\_0x2ADA871B = 303,\r\n\\_0x47BC8A58 = 304,\r\n\\_0xEB692FA5 = 305,\r\n\\_0x4A133C50 = 306,\r\n\\_0xC58099C3 = 307,\r\n\\_0xF3D76D41 = 308,\r\n\\_0xB0EEE9F2 = 309,\r\nCPED_CONFIG_FLAG_IsInCluster = 310,\r\n\\_0x0FA153EF = 311,\r\n\\_0xD73F5CD3 = 312,\r\n\\_0xD4136C22 = 313,\r\n\\_0xE404CA6B = 314,\r\n\\_0xB9597446 = 315,\r\n\\_0xD5C98277 = 316,\r\n\\_0xD5060A9C = 317,\r\n\\_0x3E5F1CBB = 318,\r\n\\_0xD8BE1D54 = 319,\r\n\\_0x0B1F191F = 320,\r\n\\_0xC995167A = 321,\r\nCPED_CONFIG_FLAG_HasHighHeels = 322,\r\n\\_0x86B01E54 = 323,\r\n\\_0x3A56FE15 = 324,\r\n\\_0xC03B736C = 325, // CPED_CONFIG_FLAG_SpawnedAtScenario\r\n\\_0xBBF47729 = 326,\r\n\\_0x22B668A8 = 327,\r\n\\_0x2624D4D4 = 328,\r\nCPED_CONFIG_FLAG_DisableTalkTo = 329,\r\nCPED_CONFIG_FLAG_DontBlip = 330,\r\nCPED_CONFIG_FLAG_IsSwitchingWeapon = 331,\r\n\\_0x630F55F3 = 332,\r\n\\_0x150468FD = 333,\r\n\\_0x914EBD6B = 334,\r\n\\_0x79AF3B6D = 335,\r\n\\_0x75C7A632 = 336,\r\n\\_0x52D530E2 = 337,\r\n\\_0xDB2A90E0 = 338,\r\n\\_0x5922763D = 339,\r\n\\_0x12ADB567 = 340,\r\n\\_0x105C8518 = 341,\r\n\\_0x106F703D = 342,\r\n\\_0xED152C3E = 343,\r\n\\_0xA0EFE6A8 = 344,\r\n\\_0xBF348C82 = 345,\r\n\\_0xCDDFE830 = 346,\r\n\\_0x7B59BD9B = 347,\r\n\\_0x0124C788 = 348,\r\nCPED_CONFIG_FLAG_EquipJetpack = 349,\r\n\\_0x08D361A5 = 350,\r\n\\_0xE13D1F7C = 351,\r\n\\_0x40E25FB9 = 352,\r\n\\_0x930629D9 = 353,\r\n\\_0xECCF0C7F = 354,\r\n\\_0xB6E9613B = 355,\r\n\\_0x490C0478 = 356,\r\n\\_0xE8865BEA = 357,\r\n\\_0xF3C34A29 = 358,\r\nCPED_CONFIG_FLAG_IsDuckingInVehicle = 359,\r\n\\_0xF660E115 = 360,\r\n\\_0xAB0E6DED = 361,\r\nCPED_CONFIG_FLAG_HasReserveParachute = 362,\r\nCPED_CONFIG_FLAG_UseReserveParachute = 363,\r\n\\_0x5C5D9CD3 = 364,\r\n\\_0x8F7701F3 = 365,\r\n\\_0xBC4436AD = 366,\r\n\\_0xD7E07D37 = 367,\r\n\\_0x03C4FD24 = 368,\r\n\\_0x7675789A = 369,\r\n\\_0xB7288A88 = 370,\r\n\\_0xC06B6291 = 371,\r\n\\_0x95A4A805 = 372,\r\n\\_0xA8E9A042 = 373,\r\nCPED_CONFIG_FLAG_NeverLeaveTrain = 374,\r\n\\_0xBAC674B3 = 375,\r\n\\_0x147F1FFB = 376,\r\n\\_0x4376DD79 = 377,\r\n\\_0xCD3DB518 = 378,\r\n\\_0xFE4BA4B6 = 379,\r\n\\_0x5DF03A55 = 380,\r\n\\_0xBCD816CD = 381,\r\n\\_0xCF02DD69 = 382,\r\n\\_0xF73AFA2E = 383,\r\n\\_0x80B9A9D0 = 384,\r\n\\_0xF601F7EE = 385,\r\n\\_0xA91350FC = 386,\r\n\\_0x3AB23B96 = 387,\r\nCPED_CONFIG_FLAG_IsClimbingLadder = 388,\r\nCPED_CONFIG_FLAG_HasBareFeet = 389,\r\n\\_0xB4B1CD4C = 390,\r\n\\_0x5459AFB8 = 391,\r\n\\_0x54F27667 = 392,\r\n\\_0xC11D3E8F = 393,\r\n\\_0x5419EB3E = 394,\r\n\\_0x82D8DBB4 = 395,\r\n\\_0x33B02D2F = 396,\r\n\\_0xAE66176D = 397,\r\n\\_0xA2692593 = 398,\r\n\\_0x714C7E31 = 399,\r\n\\_0xEC488AC7 = 400,\r\n\\_0xAE398504 = 401,\r\n\\_0xABC58D72 = 402,\r\n\\_0x5E5B9591 = 403,\r\n\\_0x6BA1091E = 404,\r\n\\_0x77840177 = 405,\r\n\\_0x1C7ACAC4 = 406,\r\n\\_0x124420E9 = 407,\r\n\\_0x75A65587 = 408,\r\n\\_0xDFD2D55B = 409,\r\n\\_0xBDD39919 = 410,\r\n\\_0x43DEC267 = 411,\r\n\\_0xE42B7797 = 412,\r\nCPED_CONFIG_FLAG_IsHolsteringWeapon = 413,\r\n\\_0x4F8149F5 = 414,\r\n\\_0xDD9ECA7A = 415,\r\n\\_0x9E7EF9D2 = 416,\r\n\\_0x2C6ED942 = 417,\r\nCPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,\r\n\\_0xA488727D = 419,\r\n\\_0xCFF5F6DE = 420,\r\n\\_0x6D614599 = 421,\r\nCPED_CONFIG_FLAG_DisableVehicleCombat = 422,\r\n\\_0xFE401D26 = 423,\r\nCPED_CONFIG_FLAG_FallsLikeAircraft = 424,\r\n\\_0x2B42AE82 = 425,\r\n\\_0x7A95734F = 426,\r\n\\_0xDF4D8617 = 427,\r\n\\_0x578F1F14 = 428,\r\nCPED_CONFIG_FLAG_DisableStartEngine = 429,\r\nCPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,\r\n\\_0x153C9500 = 431,\r\n\\_0xCB7A632E = 432,\r\n\\_0xDE727981 = 433,\r\nCPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,\r\n\\_0x12BBB935 = 435,\r\n\\_0xAD0A1277 = 436,\r\n\\_0xEA6AA46A = 437,\r\nCPED_CONFIG_FLAG_DisableHelmetArmor = 438,\r\n\\_0xCB7F3A1E = 439,\r\n\\_0x50178878 = 440,\r\n\\_0x051B4F0D = 441,\r\n\\_0x2FC3DECC = 442,\r\n\\_0xC0030B0B = 443,\r\n\\_0xBBDAF1E9 = 444,\r\n\\_0x944FE59C = 445,\r\n\\_0x506FBA39 = 446,\r\n\\_0xDD45FE84 = 447,\r\n\\_0xE698AE75 = 448,\r\n\\_0x199633F8 = 449,\r\nCPED_CONFIG_FLAG_PedIsArresting = 450,\r\nCPED_CONFIG_FLAG_IsDecoyPed = 451,\r\n\\_0x3A251D83 = 452,\r\n\\_0xA56F6986 = 453,\r\n\\_0x1D19C622 = 454,\r\n\\_0xB68D3EAB = 455,\r\nCPED_CONFIG_FLAG_CanBeIncapacitated = 456,\r\n\\_0x4BD5EBAD = 457,\r\n}\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_CONFIG_FLAG](?\\_0x1913FE4CBF41C463).**",
      "examples": [
        
      ],
      "hash": "0x9CFBE10D",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x4CDD35D0": {
      "name": "SET_VEHICLE_DOORS_LOCKED",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "doorLockStatus",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "// Source GTA VC miss2 leak, matching constants for 0/2/4, testing\r\n// They use 10 in am_mp_property_int, don't know what it does atm.\r\nenum eCarLock {\r\nCARLOCK_NONE = 0,\r\nCARLOCK_UNLOCKED = 1,\r\nCARLOCK_LOCKED = 2,\r\nCARLOCK_LOCKOUT_PLAYER_ONLY = 3,\r\nCARLOCK_LOCKED_PLAYER_INSIDE = 4,\r\nCARLOCK_LOCKED_INITIALLY = 5,\r\nCARLOCK_FORCE_SHUT_DOORS = 6,\r\nCARLOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7\r\n};\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DOORS_LOCKED](?\\_0xB664292EAECF7FA6).**",
      "examples": [
        
      ],
      "hash": "0x4CDD35D0",
      "ns": "CFX",
      "apiset": "server"
    },
    "0x9D77259E": {
      "name": "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR",
      "params": [
        {
          "name": "vehicle",
          "type": "Vehicle"
        },
        {
          "name": "r",
          "type": "int"
        },
        {
          "name": "g",
          "type": "int"
        },
        {
          "name": "b",
          "type": "int"
        }
      ],
      "results": "void",
      "description": "p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_CUSTOM_SECONDARY_COLOUR](?\\_0x36CED73BFED89754).**",
      "examples": [
        
      ],
      "hash": "0x9D77259E",
      "ns": "CFX",
      "apiset": "server"
    }
  }
}
